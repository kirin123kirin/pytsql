# Generated from TSqlParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0343")
        buf.write("\u29a3\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c")
        buf.write("\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180")
        buf.write("\t\u0180\4\u0181\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183")
        buf.write("\4\u0184\t\u0184\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187")
        buf.write("\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a")
        buf.write("\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e")
        buf.write("\t\u018e\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191")
        buf.write("\4\u0192\t\u0192\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195")
        buf.write("\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198")
        buf.write("\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c")
        buf.write("\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f")
        buf.write("\4\u01a0\t\u01a0\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3")
        buf.write("\t\u01a3\4\u01a4\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6")
        buf.write("\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa")
        buf.write("\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad")
        buf.write("\4\u01ae\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1")
        buf.write("\t\u01b1\4\u01b2\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4")
        buf.write("\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8")
        buf.write("\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb")
        buf.write("\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf")
        buf.write("\t\u01bf\4\u01c0\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2")
        buf.write("\4\u01c3\t\u01c3\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6")
        buf.write("\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9")
        buf.write("\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd")
        buf.write("\t\u01cd\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0")
        buf.write("\4\u01d1\t\u01d1\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4")
        buf.write("\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7")
        buf.write("\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db")
        buf.write("\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de")
        buf.write("\4\u01df\t\u01df\4\u01e0\t\u01e0\3\2\7\2\u03c2\n\2\f\2")
        buf.write("\16\2\u03c5\13\2\3\2\3\2\3\3\3\3\7\3\u03cb\n\3\f\3\16")
        buf.write("\3\u03ce\13\3\3\3\5\3\u03d1\n\3\3\3\3\3\7\3\u03d5\n\3")
        buf.write("\f\3\16\3\u03d8\13\3\5\3\u03da\n\3\3\4\3\4\5\4\u03de\n")
        buf.write("\4\6\4\u03e0\n\4\r\4\16\4\u03e1\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u03eb\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u03f2\n\6")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0493\n")
        buf.write("\7\3\b\3\b\3\b\3\b\3\b\5\b\u049a\n\b\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u04a8\n\t\3\n\3\n\5")
        buf.write("\n\u04ac\n\n\3\n\5\n\u04af\n\n\3\n\3\n\5\n\u04b3\n\n\3")
        buf.write("\13\3\13\5\13\u04b7\n\13\3\f\3\f\5\f\u04bb\n\f\3\r\3\r")
        buf.write("\3\r\5\r\u04c0\n\r\3\r\3\r\3\r\5\r\u04c5\n\r\5\r\u04c7")
        buf.write("\n\r\3\16\3\16\5\16\u04cb\n\16\3\16\5\16\u04ce\n\16\3")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u04d5\n\17\3\17\5\17\u04d8")
        buf.write("\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u04e1\n")
        buf.write("\20\3\20\5\20\u04e4\n\20\3\21\3\21\3\22\3\22\3\23\3\23")
        buf.write("\3\24\3\24\3\24\5\24\u04ef\n\24\3\24\5\24\u04f2\n\24\3")
        buf.write("\24\3\24\3\24\5\24\u04f7\n\24\3\24\3\24\3\24\5\24\u04fc")
        buf.write("\n\24\3\24\5\24\u04ff\n\24\3\24\3\24\3\24\5\24\u0504\n")
        buf.write("\24\3\25\3\25\5\25\u0508\n\25\3\25\5\25\u050b\n\25\3\25")
        buf.write("\3\25\5\25\u050f\n\25\3\25\5\25\u0512\n\25\3\25\5\25\u0515")
        buf.write("\n\25\3\26\3\26\3\26\3\26\3\26\5\26\u051c\n\26\3\26\3")
        buf.write("\26\5\26\u0520\n\26\5\26\u0522\n\26\3\27\3\27\3\27\5\27")
        buf.write("\u0527\n\27\3\27\3\27\7\27\u052b\n\27\f\27\16\27\u052e")
        buf.write("\13\27\3\27\5\27\u0531\n\27\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\7\30\u053c\n\30\f\30\16\30\u053f\13")
        buf.write("\30\3\30\3\30\3\30\5\30\u0544\n\30\3\30\5\30\u0547\n\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\7\30\u054e\n\30\f\30\16\30\u0551")
        buf.write("\13\30\5\30\u0553\n\30\3\31\3\31\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0564")
        buf.write("\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u056c\n\33\3")
        buf.write("\33\3\33\3\33\5\33\u0571\n\33\3\33\5\33\u0574\n\33\3\33")
        buf.write("\3\33\3\33\5\33\u0579\n\33\3\33\5\33\u057c\n\33\3\33\3")
        buf.write("\33\3\33\5\33\u0581\n\33\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\5\34\u0589\n\34\3\34\3\34\3\34\5\34\u058e\n\34\3\34\5")
        buf.write("\34\u0591\n\34\3\34\3\34\3\34\5\34\u0596\n\34\3\35\3\35")
        buf.write("\3\35\3\35\5\35\u059c\n\35\3\35\3\35\3\35\5\35\u05a1\n")
        buf.write("\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3!\5!\u05b2\n!\3!\5!\u05b5\n!\3!\5!\u05b8")
        buf.write("\n!\3!\5!\u05bb\n!\3\"\3\"\3\"\5\"\u05c0\n\"\3#\3#\3$")
        buf.write("\3$\3$\3%\3%\5%\u05c9\n%\3&\3&\3\'\3\'\3\'\3(\3(\3(\3")
        buf.write("(\3)\3)\3)\3)\5)\u05d8\n)\3*\3*\3+\3+\3+\3,\3,\3-\3-\3")
        buf.write("-\3.\3.\3/\3/\3/\5/\u05e9\n/\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\5\60\u05f4\n\60\3\60\3\60\7\60\u05f8")
        buf.write("\n\60\f\60\16\60\u05fb\13\60\3\61\3\61\3\61\3\61\3\62")
        buf.write("\3\62\3\63\3\63\3\64\3\64\3\64\3\64\5\64\u0609\n\64\3")
        buf.write("\65\3\65\3\66\3\66\3\66\3\67\3\67\38\38\38\38\38\38\5")
        buf.write("8\u0618\n8\39\39\3:\3:\3:\3:\3:\5:\u0621\n:\3:\3:\5:\u0625")
        buf.write("\n:\3:\6:\u0628\n:\r:\16:\u0629\3:\3:\3:\3:\5:\u0630\n")
        buf.write(":\3;\3;\3;\3;\5;\u0636\n;\3;\5;\u0639\n;\3;\6;\u063c\n")
        buf.write(";\r;\16;\u063d\3;\3;\3;\5;\u0643\n;\3<\3<\3<\3<\3<\3<")
        buf.write("\5<\u064b\n<\3=\3=\3=\3=\3>\3>\3>\3>\5>\u0655\n>\3>\3")
        buf.write(">\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u0668")
        buf.write("\n@\3A\3A\3A\3A\3A\3A\5A\u0670\nA\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\5A\u067d\nA\5A\u067f\nA\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\5A\u068b\nA\5A\u068d\nA\3A\3A\3A\3A\3A\5")
        buf.write("A\u0694\nA\3B\3B\3B\3B\3B\3B\3B\5B\u069d\nB\3C\3C\3C\3")
        buf.write("C\5C\u06a3\nC\3C\3C\3C\3C\3D\3D\3D\5D\u06ac\nD\3E\3E\3")
        buf.write("F\3F\3F\3G\3G\3G\3G\3H\3H\3H\3H\5H\u06bb\nH\3H\3H\3H\3")
        buf.write("H\3I\3I\3I\3I\5I\u06c5\nI\3I\3I\3I\3I\3J\3J\3J\3J\5J\u06cf")
        buf.write("\nJ\3J\3J\3J\3J\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\5K\u06f7\nK\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u070e\nL\3M\3M\3N\3")
        buf.write("N\3O\3O\3O\3O\3O\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0732\nR\3R\3")
        buf.write("R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0744\n")
        buf.write("R\3R\5R\u0747\nR\3R\3R\3R\5R\u074c\nR\3R\5R\u074f\nR\3")
        buf.write("R\3R\3R\5R\u0754\nR\3R\5R\u0757\nR\3R\3R\3R\5R\u075c\n")
        buf.write("R\3R\5R\u075f\nR\3R\3R\3R\5R\u0764\nR\3R\5R\u0767\nR\3")
        buf.write("R\3R\3R\3R\3R\3R\5R\u076f\nR\3R\5R\u0772\nR\3R\3R\3R\3")
        buf.write("R\3R\3R\5R\u077a\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5")
        buf.write("R\u0787\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0792\nR\3R\7")
        buf.write("R\u0795\nR\fR\16R\u0798\13R\3R\5R\u079b\nR\3R\3R\3R\3")
        buf.write("R\5R\u07a1\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\3R\3R\3R\5R\u07b8\nR\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\3R\5R\u07c4\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07cf")
        buf.write("\nR\3R\7R\u07d2\nR\fR\16R\u07d5\13R\3R\5R\u07d8\nR\3R")
        buf.write("\3R\3R\3R\5R\u07de\nR\5R\u07e0\nR\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\5R\u07ed\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\3R\3R\3R\3R\3R\6R\u0802\nR\rR\16R\u0803")
        buf.write("\3R\3R\3R\3R\3R\5R\u080b\nR\3R\3R\3R\3R\3R\3R\3R\5R\u0814")
        buf.write("\nR\3R\3R\3R\5R\u0819\nR\3R\5R\u081c\nR\3R\3R\3R\5R\u0821")
        buf.write("\nR\3R\5R\u0824\nR\3R\3R\3R\5R\u0829\nR\3R\6R\u082c\n")
        buf.write("R\rR\16R\u082d\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R")
        buf.write("\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u084a\nR\3")
        buf.write("R\3R\3R\3R\3R\5R\u0851\nR\3R\6R\u0854\nR\rR\16R\u0855")
        buf.write("\3R\3R\3R\3R\3R\5R\u085d\nR\5R\u085f\nR\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\5R\u086a\nR\3R\3R\3R\3R\5R\u0870\nR\3R\3")
        buf.write("R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u087f\nR\3S\3S\3")
        buf.write("S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u088d\nS\3S\5S\u0890\n")
        buf.write("S\5S\u0892\nS\3S\3S\3S\5S\u0897\nS\3S\3S\5S\u089b\nS\3")
        buf.write("S\5S\u089e\nS\5S\u08a0\nS\3S\3S\3S\3S\5S\u08a6\nS\3S\5")
        buf.write("S\u08a9\nS\5S\u08ab\nS\3S\3S\3S\3S\5S\u08b1\nS\5S\u08b3")
        buf.write("\nS\3S\3S\3T\3T\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\5U\u08c9\nU\3U\3U\3U\3U\3U\3U\5U\u08d1\nU\3")
        buf.write("U\3U\3U\3U\3U\3U\5U\u08d9\nU\6U\u08db\nU\rU\16U\u08dc")
        buf.write("\3U\3U\3U\3U\3U\3U\3U\5U\u08e6\nU\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u08fb\nV\3V\3")
        buf.write("V\3W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u0908\nW\3W\3W\3W\3W\3")
        buf.write("W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u0917\nW\6W\u0919\nW\rW\16")
        buf.write("W\u091a\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3")
        buf.write("Z\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3^\3^\3^")
        buf.write("\3^\5^\u093e\n^\3^\5^\u0941\n^\3^\6^\u0944\n^\r^\16^\u0945")
        buf.write("\3_\3_\3_\3_\3_\3_\3`\3`\3`\3`\3`\3`\3a\3a\3a\3a\5a\u0958")
        buf.write("\na\3a\5a\u095b\na\3a\3a\3a\5a\u0960\na\3a\3a\3b\3b\3")
        buf.write("b\3b\3c\3c\3c\3c\3c\3c\3d\3d\3d\3d\3d\3d\3e\3e\3e\3e\3")
        buf.write("e\3e\5e\u097a\ne\3f\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3g\5")
        buf.write("g\u0988\ng\3g\3g\3g\5g\u098d\ng\3g\3g\3h\3h\3h\3h\5h\u0995")
        buf.write("\nh\3h\6h\u0998\nh\rh\16h\u0999\3h\3h\3h\3h\3h\5h\u09a1")
        buf.write("\nh\3i\3i\3i\3i\3i\3i\3i\3j\3j\3j\3j\3j\3k\3k\3k\3k\3")
        buf.write("k\3k\3k\5k\u09b6\nk\3k\3k\3l\3l\3l\3l\3l\3m\3m\3m\3m\3")
        buf.write("n\3n\3n\3n\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3q\3q\3q\3q\3")
        buf.write("q\3r\3r\3r\3r\3r\5r\u09db\nr\3r\3r\3r\5r\u09e0\nr\3r\3")
        buf.write("r\3s\3s\3s\3s\3s\3s\3t\3t\3t\3t\3t\3u\3u\3u\3u\5u\u09f3")
        buf.write("\nu\3u\3u\3v\3v\3v\3v\3w\3w\3w\3w\5w\u09ff\nw\3w\5w\u0a02")
        buf.write("\nw\3w\3w\3w\5w\u0a07\nw\3w\5w\u0a0a\nw\3x\3x\3x\3x\5")
        buf.write("x\u0a10\nx\3x\3x\3y\3y\3y\3y\3y\3y\3z\3z\3z\3z\3z\5z\u0a1f")
        buf.write("\nz\3z\3z\3z\5z\u0a24\nz\3z\3z\3{\3{\3{\3{\5{\u0a2c\n")
        buf.write("{\3{\5{\u0a2f\n{\3{\3{\3{\5{\u0a34\n{\3{\3{\3{\5{\u0a39")
        buf.write("\n{\3{\5{\u0a3c\n{\3|\3|\3|\3|\3|\3}\3}\3}\3}\3}\3}\3")
        buf.write("~\3~\3~\3~\3~\3\177\3\177\3\177\3\177\3\u0080\3\u0080")
        buf.write("\5\u0080\u0a54\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\5\u0080\u0a5b\n\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\5\u0080\u0a60\n\u0080\3\u0080\3\u0080\3\u0080\5\u0080")
        buf.write("\u0a65\n\u0080\3\u0080\3\u0080\3\u0080\6\u0080\u0a6a\n")
        buf.write("\u0080\r\u0080\16\u0080\u0a6b\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\5\u0081\u0a73\n\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\5\u0082\u0a80\n\u0082\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\5\u0083\u0a86\n\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u0a8b\n\u0083\3\u0083\3\u0083\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\5\u0084\u0a93\n\u0084\3\u0084")
        buf.write("\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0aa3\n\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087")
        buf.write("\5\u0087\u0aaa\n\u0087\3\u0087\3\u0087\3\u0087\5\u0087")
        buf.write("\u0aaf\n\u0087\3\u0087\6\u0087\u0ab2\n\u0087\r\u0087\16")
        buf.write("\u0087\u0ab3\3\u0087\5\u0087\u0ab7\n\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\5\u0087\u0abd\n\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\5\u0087\u0ac3\n\u0087\3\u0088\3\u0088")
        buf.write("\3\u0088\5\u0088\u0ac8\n\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\5\u0088\u0acd\n\u0088\3\u0088\6\u0088\u0ad0\n\u0088\r")
        buf.write("\u0088\16\u0088\u0ad1\3\u0088\5\u0088\u0ad5\n\u0088\3")
        buf.write("\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0adb\n\u0088\3")
        buf.write("\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0ae1\n\u0088\3")
        buf.write("\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\5\u0089\u0aec\n\u0089\3\u0089\5\u0089")
        buf.write("\u0aef\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\5\u008a\u0af9\n\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\5\u008a\u0aff\n\u008a\6\u008a")
        buf.write("\u0b01\n\u008a\r\u008a\16\u008a\u0b02\3\u008a\3\u008a")
        buf.write("\5\u008a\u0b07\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\5\u008c\u0b24\n\u008c\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\5\u008d\u0b31\n\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\5\u008d\u0b37\n\u008d\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e")
        buf.write("\u0b41\n\u008e\3\u008e\5\u008e\u0b44\n\u008e\3\u008f\3")
        buf.write("\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\5\u0090\u0b58\n\u0090\3\u0090")
        buf.write("\3\u0090\5\u0090\u0b5c\n\u0090\3\u0090\3\u0090\5\u0090")
        buf.write("\u0b60\n\u0090\3\u0090\6\u0090\u0b63\n\u0090\r\u0090\16")
        buf.write("\u0090\u0b64\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3")
        buf.write("\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\5\u0091\u0b74\n\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\5\u0091\u0b7b\n\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b84")
        buf.write("\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0b8a")
        buf.write("\n\u0091\f\u0091\16\u0091\u0b8d\13\u0091\5\u0091\u0b8f")
        buf.write("\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b94\n\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\5\u0091\u0b99\n\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\6\u0091\u0b9f\n\u0091\r\u0091")
        buf.write("\16\u0091\u0ba0\3\u0091\3\u0091\6\u0091\u0ba5\n\u0091")
        buf.write("\r\u0091\16\u0091\u0ba6\3\u0091\3\u0091\5\u0091\u0bab")
        buf.write("\n\u0091\3\u0091\3\u0091\7\u0091\u0baf\n\u0091\f\u0091")
        buf.write("\16\u0091\u0bb2\13\u0091\7\u0091\u0bb4\n\u0091\f\u0091")
        buf.write("\16\u0091\u0bb7\13\u0091\3\u0091\5\u0091\u0bba\n\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bc1")
        buf.write("\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0bc7")
        buf.write("\n\u0091\f\u0091\16\u0091\u0bca\13\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\5\u0091\u0bd1\n\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091")
        buf.write("\u0bda\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bdf\n")
        buf.write("\u0091\3\u0091\3\u0091\5\u0091\u0be3\n\u0091\3\u0091\5")
        buf.write("\u0091\u0be6\n\u0091\6\u0091\u0be8\n\u0091\r\u0091\16")
        buf.write("\u0091\u0be9\3\u0091\3\u0091\7\u0091\u0bee\n\u0091\f\u0091")
        buf.write("\16\u0091\u0bf1\13\u0091\7\u0091\u0bf3\n\u0091\f\u0091")
        buf.write("\16\u0091\u0bf6\13\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\5\u0091\u0bfd\n\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\7\u0091\u0c03\n\u0091\f\u0091\16\u0091\u0c06")
        buf.write("\13\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c0b\n\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c11\n\u0091")
        buf.write("\3\u0091\5\u0091\u0c14\n\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u0c19\n\u0091\3\u0091\5\u0091\u0c1c\n\u0091\3")
        buf.write("\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c23\n")
        buf.write("\u0091\5\u0091\u0c25\n\u0091\3\u0091\5\u0091\u0c28\n\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c2e\n\u0091")
        buf.write("\3\u0091\5\u0091\u0c31\n\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\5\u0091\u0c36\n\u0091\3\u0091\5\u0091\u0c39\n\u0091\3")
        buf.write("\u0091\3\u0091\3\u0091\5\u0091\u0c3e\n\u0091\3\u0091\5")
        buf.write("\u0091\u0c41\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c46")
        buf.write("\n\u0091\3\u0091\5\u0091\u0c49\n\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\5\u0091\u0c4e\n\u0091\3\u0092\5\u0092\u0c51\n")
        buf.write("\u0092\3\u0092\5\u0092\u0c54\n\u0092\3\u0092\5\u0092\u0c57")
        buf.write("\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092")
        buf.write("\u0c5e\n\u0092\6\u0092\u0c60\n\u0092\r\u0092\16\u0092")
        buf.write("\u0c61\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093")
        buf.write("\u0c69\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\5\u0094\u0c70\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\5\u0094\u0c76\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\5\u0094\u0c83\n\u0094\3\u0094\3\u0094\5\u0094\u0c87\n")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c8c\n\u0094\3")
        buf.write("\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\5\u0094\u0c96\n\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c9f\n\u0094")
        buf.write("\3\u0094\3\u0094\5\u0094\u0ca3\n\u0094\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\5\u0095\u0caf\n\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\5\u0095\u0cb5\n\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\6\u0095\u0cba\n\u0095\r\u0095\16\u0095\u0cbb\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\5\u0095\u0cd0\n\u0095\3\u0095")
        buf.write("\3\u0095\5\u0095\u0cd4\n\u0095\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\5\u0096\u0cdc\n\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u0ce5\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u0ceb\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096")
        buf.write("\u0cf1\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\6\u0096\u0cf9\n\u0096\r\u0096\16\u0096\u0cfa")
        buf.write("\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\5\u0097\u0d05\n\u0097\3\u0097\3\u0097\5\u0097")
        buf.write("\u0d09\n\u0097\3\u0097\5\u0097\u0d0c\n\u0097\3\u0097\3")
        buf.write("\u0097\5\u0097\u0d10\n\u0097\3\u0097\3\u0097\3\u0097\5")
        buf.write("\u0097\u0d15\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5")
        buf.write("\u0097\u0d1b\n\u0097\3\u0097\5\u0097\u0d1e\n\u0097\3\u0097")
        buf.write("\3\u0097\5\u0097\u0d22\n\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\6\u0097\u0d2a\n\u0097\r\u0097")
        buf.write("\16\u0097\u0d2b\3\u0097\5\u0097\u0d2f\n\u0097\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d37")
        buf.write("\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\5\u0098\u0d3f\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\5\u0098\u0d46\n\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0098\6\u0098\u0d4d\n\u0098\r\u0098\16\u0098")
        buf.write("\u0d4e\5\u0098\u0d51\n\u0098\3\u0098\3\u0098\3\u0098\5")
        buf.write("\u0098\u0d56\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5")
        buf.write("\u0098\u0d5c\n\u0098\3\u0098\6\u0098\u0d5f\n\u0098\r\u0098")
        buf.write("\16\u0098\u0d60\5\u0098\u0d63\n\u0098\3\u0098\5\u0098")
        buf.write("\u0d66\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d6b\n")
        buf.write("\u0098\3\u0098\5\u0098\u0d6e\n\u0098\3\u0098\3\u0098\3")
        buf.write("\u0098\5\u0098\u0d73\n\u0098\3\u0098\3\u0098\3\u0099\3")
        buf.write("\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\5\u0099\u0d82\n\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d89\n\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\6\u0099\u0d90")
        buf.write("\n\u0099\r\u0099\16\u0099\u0d91\5\u0099\u0d94\n\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\5\u0099\u0d99\n\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\5\u0099\u0d9f\n\u0099\3\u0099")
        buf.write("\6\u0099\u0da2\n\u0099\r\u0099\16\u0099\u0da3\5\u0099")
        buf.write("\u0da6\n\u0099\3\u0099\5\u0099\u0da9\n\u0099\3\u0099\3")
        buf.write("\u0099\3\u0099\5\u0099\u0dae\n\u0099\3\u0099\5\u0099\u0db1")
        buf.write("\n\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0db6\n\u0099")
        buf.write("\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0dc3\n\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\5\u009a\u0dc8\n\u009a\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b")
        buf.write("\u0dd1\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0dd6\n")
        buf.write("\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0ddc\n")
        buf.write("\u009b\3\u009b\3\u009b\5\u009b\u0de0\n\u009b\3\u009b\3")
        buf.write("\u009b\5\u009b\u0de4\n\u009b\3\u009c\3\u009c\3\u009c\3")
        buf.write("\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0df5")
        buf.write("\n\u009c\5\u009c\u0df7\n\u009c\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e01")
        buf.write("\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e06\n\u009d")
        buf.write("\5\u009d\u0e08\n\u009d\3\u009d\3\u009d\5\u009d\u0e0c\n")
        buf.write("\u009d\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e12\n")
        buf.write("\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\5\u009e\u0e1a\n\u009e\3\u009e\7\u009e\u0e1d\n\u009e\f")
        buf.write("\u009e\16\u009e\u0e20\13\u009e\5\u009e\u0e22\n\u009e\3")
        buf.write("\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0e28\n\u009e\f")
        buf.write("\u009e\16\u009e\u0e2b\13\u009e\5\u009e\u0e2d\n\u009e\3")
        buf.write("\u009e\3\u009e\3\u009e\5\u009e\u0e32\n\u009e\3\u009e\3")
        buf.write("\u009e\3\u009e\5\u009e\u0e37\n\u009e\3\u009e\3\u009e\3")
        buf.write("\u009e\5\u009e\u0e3c\n\u009e\3\u009e\3\u009e\3\u009e\5")
        buf.write("\u009e\u0e41\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e46")
        buf.write("\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e4b\n\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u0e4f\n\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\5\u009e\u0e54\n\u009e\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f")
        buf.write("\u0e5f\n\u009f\3\u009f\7\u009f\u0e62\n\u009f\f\u009f\16")
        buf.write("\u009f\u0e65\13\u009f\5\u009f\u0e67\n\u009f\3\u009f\5")
        buf.write("\u009f\u0e6a\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e6f")
        buf.write("\n\u009f\3\u009f\5\u009f\u0e72\n\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\5\u009f\u0e77\n\u009f\3\u009f\5\u009f\u0e7a\n")
        buf.write("\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e7f\n\u009f\3")
        buf.write("\u009f\5\u009f\u0e82\n\u009f\3\u009f\3\u009f\3\u009f\5")
        buf.write("\u009f\u0e87\n\u009f\3\u009f\5\u009f\u0e8a\n\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\5\u009f\u0e8f\n\u009f\3\u009f\5\u009f")
        buf.write("\u0e92\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e97\n")
        buf.write("\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e9d\n")
        buf.write("\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0ea2\n\u009f\3")
        buf.write("\u009f\5\u009f\u0ea5\n\u009f\3\u009f\3\u009f\3\u009f\5")
        buf.write("\u009f\u0eaa\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3")
        buf.write("\u009f\5\u009f\u0eb1\n\u009f\5\u009f\u0eb3\n\u009f\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0eb9\n\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0")
        buf.write("\u0ec2\n\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0ec7\n")
        buf.write("\u00a0\5\u00a0\u0ec9\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3")
        buf.write("\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u0ed5\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\5\u00a2\u0edb\n\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0ee5\n\u00a2")
        buf.write("\f\u00a2\16\u00a2\u0ee8\13\u00a2\5\u00a2\u0eea\n\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0eef\n\u00a2\5\u00a2")
        buf.write("\u0ef1\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0efb\n\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\5\u00a3\u0f00\n\u00a3\5\u00a3\u0f02\n")
        buf.write("\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f06\n\u00a3\3\u00a4\3")
        buf.write("\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f0c\n\u00a4\3\u00a4\3")
        buf.write("\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a4\5\u00a4\u0f1e\n\u00a4\5\u00a4\u0f20\n\u00a4\3")
        buf.write("\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write("\u0f2f\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0f41\n\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write("\u0f49\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0f53\n\u00a7\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8")
        buf.write("\u0f63\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\5\u00aa\u0f78\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f83")
        buf.write("\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f89")
        buf.write("\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\5\u00ac\u0f92\n\u00ac\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0f9b\n\u00ac")
        buf.write("\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0fa1\n\u00ac")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\5\u00ad\u0faa\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad")
        buf.write("\u0faf\n\u00ad\3\u00ad\5\u00ad\u0fb2\n\u00ad\3\u00ad\3")
        buf.write("\u00ad\3\u00ad\5\u00ad\u0fb7\n\u00ad\3\u00ad\5\u00ad\u0fba")
        buf.write("\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fbf\n\u00ad")
        buf.write("\3\u00ad\5\u00ad\u0fc2\n\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fca\n\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fd0\n\u00ad\6\u00ad")
        buf.write("\u0fd2\n\u00ad\r\u00ad\16\u00ad\u0fd3\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fdb\n\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fe1\n\u00ad\6\u00ad")
        buf.write("\u0fe3\n\u00ad\r\u00ad\16\u00ad\u0fe4\3\u00ad\5\u00ad")
        buf.write("\u0fe8\n\u00ad\5\u00ad\u0fea\n\u00ad\3\u00ad\5\u00ad\u0fed")
        buf.write("\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ff2\n\u00ad")
        buf.write("\3\u00ad\5\u00ad\u0ff5\n\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\5\u00ad\u0ffa\n\u00ad\3\u00ad\5\u00ad\u0ffd\n\u00ad\3")
        buf.write("\u00ad\3\u00ad\3\u00ad\5\u00ad\u1002\n\u00ad\3\u00ad\5")
        buf.write("\u00ad\u1005\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u100a")
        buf.write("\n\u00ad\3\u00ad\5\u00ad\u100d\n\u00ad\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u101c\n\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\5\u00ae\u1027\n\u00ae\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\5\u00af\u1033\n\u00af\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\5\u00b0\u103a\n\u00b0\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u1041\n\u00b1\3\u00b1")
        buf.write("\3\u00b1\5\u00b1\u1045\n\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\5\u00b1\u104a\n\u00b1\3\u00b1\5\u00b1\u104d\n\u00b1\3")
        buf.write("\u00b1\3\u00b1\3\u00b1\5\u00b1\u1052\n\u00b1\3\u00b1\5")
        buf.write("\u00b1\u1055\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u105a")
        buf.write("\n\u00b1\3\u00b1\5\u00b1\u105d\n\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u1066")
        buf.write("\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2")
        buf.write("\u106d\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\5\u00b3\u107c\n\u00b3\3\u00b3\3\u00b3\5\u00b3")
        buf.write("\u1080\n\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u1085\n")
        buf.write("\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1090\n\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\5\u00b4\u109a\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4")
        buf.write("\u10a6\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4")
        buf.write("\u10ac\n\u00b4\f\u00b4\16\u00b4\u10af\13\u00b4\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u10b6\n\u00b5")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\5\u00b6\u10bf\n\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6")
        buf.write("\u10c4\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10cf\n\u00b7")
        buf.write("\3\u00b7\5\u00b7\u10d2\n\u00b7\3\u00b7\3\u00b7\5\u00b7")
        buf.write("\u10d6\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\5\u00b8\u10de\n\u00b8\3\u00b8\3\u00b8\5\u00b8")
        buf.write("\u10e2\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u10e6\n\u00b8\3")
        buf.write("\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8")
        buf.write("\u10ee\n\u00b8\3\u00b8\6\u00b8\u10f1\n\u00b8\r\u00b8\16")
        buf.write("\u00b8\u10f2\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3")
        buf.write("\u00b8\5\u00b8\u10fb\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5")
        buf.write("\u00b8\u1100\n\u00b8\3\u00b8\3\u00b8\7\u00b8\u1104\n\u00b8")
        buf.write("\f\u00b8\16\u00b8\u1107\13\u00b8\6\u00b8\u1109\n\u00b8")
        buf.write("\r\u00b8\16\u00b8\u110a\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u1114\n\u00b8\3\u00b8")
        buf.write("\5\u00b8\u1117\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8")
        buf.write("\u111c\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\5\u00b9\u1123\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\5\u00b9\u1129\n\u00b9\5\u00b9\u112b\n\u00b9\3\u00b9\3")
        buf.write("\u00b9\3\u00b9\5\u00b9\u1130\n\u00b9\3\u00b9\3\u00b9\3")
        buf.write("\u00b9\3\u00b9\5\u00b9\u1136\n\u00b9\3\u00b9\3\u00b9\3")
        buf.write("\u00b9\3\u00b9\5\u00b9\u113c\n\u00b9\3\u00b9\3\u00b9\3")
        buf.write("\u00b9\5\u00b9\u1141\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3")
        buf.write("\u00b9\5\u00b9\u1147\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3")
        buf.write("\u00ba\3\u00ba\5\u00ba\u114e\n\u00ba\3\u00ba\3\u00ba\3")
        buf.write("\u00ba\5\u00ba\u1153\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5")
        buf.write("\u00ba\u1158\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u115d")
        buf.write("\n\u00ba\3\u00ba\5\u00ba\u1160\n\u00ba\3\u00ba\3\u00ba")
        buf.write("\5\u00ba\u1164\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u1168\n")
        buf.write("\u00ba\3\u00ba\3\u00ba\5\u00ba\u116c\n\u00ba\3\u00ba\3")
        buf.write("\u00ba\5\u00ba\u1170\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5")
        buf.write("\u00ba\u1175\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u1179\n\u00ba")
        buf.write("\3\u00ba\3\u00ba\5\u00ba\u117d\n\u00ba\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write("\u1187\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write("\u118d\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\5\u00bb\u1194\n\u00bb\3\u00bb\5\u00bb\u1197\n\u00bb\3")
        buf.write("\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u119d\n\u00bb\3")
        buf.write("\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11a3\n\u00bb\3")
        buf.write("\u00bb\3\u00bb\3\u00bb\7\u00bb\u11a8\n\u00bb\f\u00bb\16")
        buf.write("\u00bb\u11ab\13\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write("\u11b0\n\u00bb\5\u00bb\u11b2\n\u00bb\3\u00bb\3\u00bb\3")
        buf.write("\u00bb\5\u00bb\u11b7\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3")
        buf.write("\u00bb\5\u00bb\u11bd\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3")
        buf.write("\u00bb\5\u00bb\u11c3\n\u00bb\3\u00bb\3\u00bb\3\u00bb\7")
        buf.write("\u00bb\u11c8\n\u00bb\f\u00bb\16\u00bb\u11cb\13\u00bb\3")
        buf.write("\u00bb\5\u00bb\u11ce\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u11d2")
        buf.write("\n\u00bb\3\u00bb\5\u00bb\u11d5\n\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11e3\n\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\5\u00bb\u11e8\n\u00bb\3\u00bb\3\u00bb")
        buf.write("\5\u00bb\u11ec\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\5\u00bb\u11f9\n\u00bb\3\u00bb\5\u00bb\u11fc\n\u00bb\5")
        buf.write("\u00bb\u11fe\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3")
        buf.write("\u00bb\3\u00bb\5\u00bb\u1206\n\u00bb\3\u00bc\3\u00bc\3")
        buf.write("\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc")
        buf.write("\u1210\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc")
        buf.write("\u1216\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\5\u00bc\u121d\n\u00bc\3\u00bc\5\u00bc\u1220\n\u00bc\3")
        buf.write("\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1226\n\u00bc\3")
        buf.write("\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u122c\n\u00bc\3")
        buf.write("\u00bc\3\u00bc\3\u00bc\7\u00bc\u1231\n\u00bc\f\u00bc\16")
        buf.write("\u00bc\u1234\13\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc")
        buf.write("\u1239\n\u00bc\5\u00bc\u123b\n\u00bc\3\u00bc\3\u00bc\3")
        buf.write("\u00bc\5\u00bc\u1240\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3")
        buf.write("\u00bc\5\u00bc\u1246\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3")
        buf.write("\u00bc\5\u00bc\u124c\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3")
        buf.write("\u00bc\5\u00bc\u1252\n\u00bc\3\u00bc\3\u00bc\3\u00bc\7")
        buf.write("\u00bc\u1257\n\u00bc\f\u00bc\16\u00bc\u125a\13\u00bc\3")
        buf.write("\u00bc\5\u00bc\u125d\n\u00bc\3\u00bc\3\u00bc\5\u00bc\u1261")
        buf.write("\n\u00bc\3\u00bc\5\u00bc\u1264\n\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1272\n\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\5\u00bc\u1277\n\u00bc\3\u00bc\3\u00bc")
        buf.write("\5\u00bc\u127b\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\5\u00bc\u1288\n\u00bc\3\u00bc\5\u00bc\u128b\n\u00bc\5")
        buf.write("\u00bc\u128d\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3")
        buf.write("\u00bc\3\u00bc\5\u00bc\u1295\n\u00bc\3\u00bd\3\u00bd\3")
        buf.write("\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\5\u00bd\u12a0\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\7\u00bd\u12a7\n\u00bd\f\u00bd\16\u00bd\u12aa")
        buf.write("\13\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\5\u00bd\u12b2\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u12bd")
        buf.write("\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be")
        buf.write("\u12c4\n\u00be\f\u00be\16\u00be\u12c7\13\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u12cf")
        buf.write("\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12db\n\u00bf")
        buf.write("\3\u00bf\3\u00bf\5\u00bf\u12df\n\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\6\u00bf\u12e4\n\u00bf\r\u00bf\16\u00bf\u12e5")
        buf.write("\5\u00bf\u12e8\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf")
        buf.write("\u12ed\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u12f1\n\u00bf\3")
        buf.write("\u00bf\3\u00bf\3\u00bf\6\u00bf\u12f6\n\u00bf\r\u00bf\16")
        buf.write("\u00bf\u12f7\5\u00bf\u12fa\n\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\5\u00bf\u1308\n\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\5\u00bf\u130d\n\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1323\n\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1339")
        buf.write("\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u133e\n\u00bf")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u134b\n\u00c0")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1")
        buf.write("\u1353\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3")
        buf.write("\u1367\n\u00c3\3\u00c3\5\u00c3\u136a\n\u00c3\3\u00c3\3")
        buf.write("\u00c3\7\u00c3\u136e\n\u00c3\f\u00c3\16\u00c3\u1371\13")
        buf.write("\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4")
        buf.write("\u1378\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\5\u00c4\u137f\n\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4")
        buf.write("\u1384\n\u00c4\3\u00c4\3\u00c4\5\u00c4\u1388\n\u00c4\6")
        buf.write("\u00c4\u138a\n\u00c4\r\u00c4\16\u00c4\u138b\3\u00c4\5")
        buf.write("\u00c4\u138f\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3")
        buf.write("\u00c5\5\u00c5\u1396\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3")
        buf.write("\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5")
        buf.write("\u13a8\n\u00c5\5\u00c5\u13aa\n\u00c5\3\u00c6\3\u00c6\3")
        buf.write("\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\5\u00c6\u13be\n\u00c6\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u13c6\n\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u13cb\n\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\5\u00c7\u13dd\n\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u13ec\n\u00c7\5\u00c7")
        buf.write("\u13ee\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\5\u00c8\u13f5\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\5\u00c8\u13fc\n\u00c8\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\5\u00c8\u1401\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8")
        buf.write("\u1406\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8")
        buf.write("\u140c\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1411\n")
        buf.write("\u00c8\5\u00c8\u1413\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3")
        buf.write("\u00c9\3\u00c9\5\u00c9\u141a\n\u00c9\3\u00c9\3\u00c9\3")
        buf.write("\u00c9\3\u00c9\5\u00c9\u1420\n\u00c9\3\u00c9\3\u00c9\3")
        buf.write("\u00c9\3\u00c9\5\u00c9\u1426\n\u00c9\3\u00c9\5\u00c9\u1429")
        buf.write("\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u142f")
        buf.write("\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\6\u00c9\u1437\n\u00c9\r\u00c9\16\u00c9\u1438\3\u00c9")
        buf.write("\5\u00c9\u143c\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\5\u00c9\u1443\n\u00c9\3\u00c9\5\u00c9\u1446\n")
        buf.write("\u00c9\3\u00c9\3\u00c9\3\u00c9\6\u00c9\u144b\n\u00c9\r")
        buf.write("\u00c9\16\u00c9\u144c\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\5\u00ca\u1455\n\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u1459\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u145f\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca")
        buf.write("\u1464\n\u00ca\f\u00ca\16\u00ca\u1467\13\u00ca\5\u00ca")
        buf.write("\u1469\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u1470\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u1476\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\5\u00ca\u147d\n\u00ca\3\u00ca\5\u00ca\u1480\n")
        buf.write("\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1486\n")
        buf.write("\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u148b\n\u00ca\f")
        buf.write("\u00ca\16\u00ca\u148e\13\u00ca\5\u00ca\u1490\n\u00ca\3")
        buf.write("\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca")
        buf.write("\u1498\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca")
        buf.write("\u149e\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\5\u00ca\u14a5\n\u00ca\3\u00ca\5\u00ca\u14a8\n\u00ca\3")
        buf.write("\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14ae\n\u00ca\3")
        buf.write("\u00ca\3\u00ca\3\u00ca\7\u00ca\u14b3\n\u00ca\f\u00ca\16")
        buf.write("\u00ca\u14b6\13\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\5\u00ca\u14bd\n\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14c5\n\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14cb\n\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\7\u00ca\u14d0\n\u00ca\f\u00ca\16\u00ca")
        buf.write("\u14d3\13\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\5\u00ca\u14dc\n\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\5\u00ca\u14e1\n\u00ca\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u14eb")
        buf.write("\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u14f1")
        buf.write("\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u14fd\n\u00cb")
        buf.write("\5\u00cb\u14ff\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\5\u00cc\u1506\n\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\5\u00cc\u150c\n\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\5\u00cc\u1512\n\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\3\u00cc\5\u00cc\u1518\n\u00cc\3\u00cc\3\u00cc\3\u00cc")
        buf.write("\6\u00cc\u151d\n\u00cc\r\u00cc\16\u00cc\u151e\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1526\n\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd")
        buf.write("\u152e\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd")
        buf.write("\u1534\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\6\u00cd\u1542\n\u00cd\r\u00cd\16\u00cd\u1543\3\u00cd")
        buf.write("\5\u00cd\u1547\n\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd")
        buf.write("\u154c\n\u00cd\5\u00cd\u154e\n\u00cd\3\u00ce\3\u00ce\3")
        buf.write("\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\5\u00ce\u155a\n\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\5\u00ce\u1560\n\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00ce\3\u00ce\6\u00ce\u156e\n\u00ce\r\u00ce\16\u00ce")
        buf.write("\u156f\3\u00ce\5\u00ce\u1573\n\u00ce\3\u00ce\3\u00ce\3")
        buf.write("\u00ce\5\u00ce\u1578\n\u00ce\3\u00ce\5\u00ce\u157b\n\u00ce")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1580\n\u00ce\5\u00ce")
        buf.write("\u1582\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\5\u00cf\u158b\n\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u1592\n\u00cf\3\u00d0")
        buf.write("\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1598\n\u00d0\3\u00d0")
        buf.write("\5\u00d0\u159b\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0")
        buf.write("\u15a0\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\5\u00d1\u15a7\n\u00d1\5\u00d1\u15a9\n\u00d1\3\u00d1\3")
        buf.write("\u00d1\3\u00d1\3\u00d1\5\u00d1\u15af\n\u00d1\5\u00d1\u15b1")
        buf.write("\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\5\u00d1\u15b9\n\u00d1\5\u00d1\u15bb\n\u00d1\3\u00d1\3")
        buf.write("\u00d1\3\u00d1\3\u00d1\5\u00d1\u15c1\n\u00d1\5\u00d1\u15c3")
        buf.write("\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15c9")
        buf.write("\n\u00d1\5\u00d1\u15cb\n\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\3\u00d1\3\u00d1\5\u00d1\u15d2\n\u00d1\3\u00d1\5\u00d1")
        buf.write("\u15d5\n\u00d1\5\u00d1\u15d7\n\u00d1\3\u00d1\5\u00d1\u15da")
        buf.write("\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u15de\n\u00d1\5\u00d1")
        buf.write("\u15e0\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write("\3\u00d1\3\u00d1\5\u00d1\u15e9\n\u00d1\3\u00d2\3\u00d2")
        buf.write("\3\u00d2\3\u00d2\5\u00d2\u15ef\n\u00d2\3\u00d2\3\u00d2")
        buf.write("\5\u00d2\u15f3\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\5\u00d3\u15fb\n\u00d3\3\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1602\n\u00d3\3\u00d3")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1608\n\u00d3\5\u00d3")
        buf.write("\u160a\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1615\n\u00d5")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u161a\n\u00d5\3\u00d5")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1620\n\u00d5\6\u00d5")
        buf.write("\u1622\n\u00d5\r\u00d5\16\u00d5\u1623\3\u00d5\3\u00d5")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6")
        buf.write("\u162e\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\5\u00d7\u1636\n\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\5\u00d7\u1642\n\u00d7\3\u00d8\5\u00d8\u1645\n\u00d8\3")
        buf.write("\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8")
        buf.write("\u164d\n\u00d8\5\u00d8\u164f\n\u00d8\3\u00d8\5\u00d8\u1652")
        buf.write("\n\u00d8\3\u00d8\3\u00d8\5\u00d8\u1656\n\u00d8\3\u00d8")
        buf.write("\5\u00d8\u1659\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u1663\n\u00d8")
        buf.write("\3\u00d8\3\u00d8\7\u00d8\u1667\n\u00d8\f\u00d8\16\u00d8")
        buf.write("\u166a\13\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8")
        buf.write("\5\u00d8\u1671\n\u00d8\3\u00d8\3\u00d8\5\u00d8\u1675\n")
        buf.write("\u00d8\3\u00d8\3\u00d8\5\u00d8\u1679\n\u00d8\3\u00d8\3")
        buf.write("\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8")
        buf.write("\u1682\n\u00d8\3\u00d8\3\u00d8\7\u00d8\u1686\n\u00d8\f")
        buf.write("\u00d8\16\u00d8\u1689\13\u00d8\3\u00d8\5\u00d8\u168c\n")
        buf.write("\u00d8\3\u00d8\5\u00d8\u168f\n\u00d8\3\u00d8\3\u00d8\3")
        buf.write("\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u1698\n")
        buf.write("\u00d9\f\u00d9\16\u00d9\u169b\13\u00d9\3\u00d9\5\u00d9")
        buf.write("\u169e\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\5\u00da\u16a5\n\u00da\3\u00da\3\u00da\3\u00da\5\u00da")
        buf.write("\u16aa\n\u00da\3\u00db\5\u00db\u16ad\n\u00db\3\u00db\3")
        buf.write("\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u16b5\n")
        buf.write("\u00db\3\u00db\3\u00db\5\u00db\u16b9\n\u00db\3\u00db\5")
        buf.write("\u00db\u16bc\n\u00db\3\u00db\3\u00db\5\u00db\u16c0\n\u00db")
        buf.write("\3\u00db\5\u00db\u16c3\n\u00db\3\u00db\3\u00db\5\u00db")
        buf.write("\u16c7\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db")
        buf.write("\5\u00db\u16ce\n\u00db\3\u00db\3\u00db\5\u00db\u16d2\n")
        buf.write("\u00db\5\u00db\u16d4\n\u00db\5\u00db\u16d6\n\u00db\3\u00db")
        buf.write("\5\u00db\u16d9\n\u00db\3\u00db\5\u00db\u16dc\n\u00db\3")
        buf.write("\u00db\5\u00db\u16df\n\u00db\3\u00dc\3\u00dc\3\u00dc\3")
        buf.write("\u00dc\5\u00dc\u16e5\n\u00dc\3\u00dd\5\u00dd\u16e8\n\u00dd")
        buf.write("\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd")
        buf.write("\u16f0\n\u00dd\5\u00dd\u16f2\n\u00dd\3\u00dd\5\u00dd\u16f5")
        buf.write("\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u16f9\n\u00dd\3\u00dd")
        buf.write("\5\u00dd\u16fc\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write("\5\u00dd\u1702\n\u00dd\3\u00dd\5\u00dd\u1705\n\u00dd\3")
        buf.write("\u00dd\3\u00dd\5\u00dd\u1709\n\u00dd\3\u00dd\5\u00dd\u170c")
        buf.write("\n\u00dd\3\u00dd\5\u00dd\u170f\n\u00dd\3\u00de\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\5\u00de\u1716\n\u00de\3\u00df")
        buf.write("\5\u00df\u1719\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\5\u00df\u1720\n\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\5\u00df\u1726\n\u00df\7\u00df\u1728\n\u00df\f")
        buf.write("\u00df\16\u00df\u172b\13\u00df\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1734\n\u00df")
        buf.write("\3\u00df\5\u00df\u1737\n\u00df\3\u00e0\5\u00e0\u173a\n")
        buf.write("\u00e0\3\u00e0\3\u00e0\5\u00e0\u173e\n\u00e0\3\u00e0\5")
        buf.write("\u00e0\u1741\n\u00e0\3\u00e0\5\u00e0\u1744\n\u00e0\3\u00e0")
        buf.write("\5\u00e0\u1747\n\u00e0\3\u00e1\3\u00e1\5\u00e1\u174b\n")
        buf.write("\u00e1\3\u00e2\5\u00e2\u174e\n\u00e2\3\u00e2\3\u00e2\3")
        buf.write("\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u1756\n\u00e2\5")
        buf.write("\u00e2\u1758\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u175c\n\u00e2")
        buf.write("\3\u00e2\5\u00e2\u175f\n\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\7\u00e2\u1765\n\u00e2\f\u00e2\16\u00e2\u1768")
        buf.write("\13\u00e2\3\u00e2\5\u00e2\u176b\n\u00e2\3\u00e2\3\u00e2")
        buf.write("\5\u00e2\u176f\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e2\5\u00e2\u1776\n\u00e2\3\u00e2\3\u00e2\5\u00e2")
        buf.write("\u177a\n\u00e2\5\u00e2\u177c\n\u00e2\5\u00e2\u177e\n\u00e2")
        buf.write("\3\u00e2\5\u00e2\u1781\n\u00e2\3\u00e2\5\u00e2\u1784\n")
        buf.write("\u00e2\3\u00e2\5\u00e2\u1787\n\u00e2\3\u00e3\3\u00e3\3")
        buf.write("\u00e3\3\u00e3\7\u00e3\u178d\n\u00e3\f\u00e3\16\u00e3")
        buf.write("\u1790\13\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1795")
        buf.write("\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u179b")
        buf.write("\n\u00e3\5\u00e3\u179d\n\u00e3\3\u00e4\3\u00e4\5\u00e4")
        buf.write("\u17a1\n\u00e4\3\u00e4\5\u00e4\u17a4\n\u00e4\3\u00e5\3")
        buf.write("\u00e5\3\u00e5\5\u00e5\u17a9\n\u00e5\3\u00e5\3\u00e5\3")
        buf.write("\u00e5\5\u00e5\u17ae\n\u00e5\3\u00e5\5\u00e5\u17b1\n\u00e5")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6")
        buf.write("\u17b9\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u17bd\n\u00e6\3")
        buf.write("\u00e6\3\u00e6\3\u00e6\7\u00e6\u17c2\n\u00e6\f\u00e6\16")
        buf.write("\u00e6\u17c5\13\u00e6\5\u00e6\u17c7\n\u00e6\3\u00e6\3")
        buf.write("\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u17ce\n\u00e6\f")
        buf.write("\u00e6\16\u00e6\u17d1\13\u00e6\5\u00e6\u17d3\n\u00e6\3")
        buf.write("\u00e6\3\u00e6\5\u00e6\u17d7\n\u00e6\3\u00e6\3\u00e6\3")
        buf.write("\u00e6\3\u00e6\7\u00e6\u17dd\n\u00e6\f\u00e6\16\u00e6")
        buf.write("\u17e0\13\u00e6\5\u00e6\u17e2\n\u00e6\3\u00e7\3\u00e7")
        buf.write("\5\u00e7\u17e6\n\u00e7\3\u00e7\5\u00e7\u17e9\n\u00e7\3")
        buf.write("\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7")
        buf.write("\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u17f7")
        buf.write("\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u17fb\n\u00e7\3\u00e7")
        buf.write("\5\u00e7\u17fe\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u1802\n")
        buf.write("\u00e7\3\u00e7\5\u00e7\u1805\n\u00e7\3\u00e8\3\u00e8\3")
        buf.write("\u00e8\5\u00e8\u180a\n\u00e8\3\u00e8\5\u00e8\u180d\n\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u1813\n\u00e8")
        buf.write("\3\u00e8\5\u00e8\u1816\n\u00e8\3\u00e8\3\u00e8\3\u00e8")
        buf.write("\7\u00e8\u181b\n\u00e8\f\u00e8\16\u00e8\u181e\13\u00e8")
        buf.write("\3\u00e8\5\u00e8\u1821\n\u00e8\5\u00e8\u1823\n\u00e8\3")
        buf.write("\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u1829\n\u00e8\f")
        buf.write("\u00e8\16\u00e8\u182c\13\u00e8\5\u00e8\u182e\n\u00e8\3")
        buf.write("\u00e8\3\u00e8\5\u00e8\u1832\n\u00e8\3\u00e8\3\u00e8\3")
        buf.write("\u00e8\3\u00e9\3\u00e9\5\u00e9\u1839\n\u00e9\3\u00ea\3")
        buf.write("\u00ea\3\u00ea\5\u00ea\u183e\n\u00ea\3\u00ea\5\u00ea\u1841")
        buf.write("\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00ea\7\u00ea\u184b\n\u00ea\f\u00ea\16\u00ea")
        buf.write("\u184e\13\u00ea\5\u00ea\u1850\n\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00ea\5\u00ea\u1856\n\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\7\u00ea\u185b\n\u00ea\f\u00ea\16\u00ea\u185e")
        buf.write("\13\u00ea\3\u00ea\3\u00ea\5\u00ea\u1862\n\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00ea\5\u00ea\u1867\n\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00ea\3\u00eb\3\u00eb\5\u00eb\u186e\n\u00eb\3\u00ec")
        buf.write("\3\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1875\n\u00ed")
        buf.write("\3\u00ed\5\u00ed\u1878\n\u00ed\3\u00ed\3\u00ed\3\u00ed")
        buf.write("\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1880\n\u00ed\3\u00ed")
        buf.write("\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u1886\n\u00ed\f\u00ed")
        buf.write("\16\u00ed\u1889\13\u00ed\5\u00ed\u188b\n\u00ed\3\u00ed")
        buf.write("\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u1891\n\u00ed\f\u00ed")
        buf.write("\16\u00ed\u1894\13\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee")
        buf.write("\3\u00ee\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u189e\n\u00ef")
        buf.write("\3\u00ef\5\u00ef\u18a1\n\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u18a9\n\u00ef\f\u00ef")
        buf.write("\16\u00ef\u18ac\13\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\5\u00ef\u18b2\n\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef")
        buf.write("\u18b7\n\u00ef\3\u00ef\5\u00ef\u18ba\n\u00ef\3\u00f0\3")
        buf.write("\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u18c2\n")
        buf.write("\u00f0\f\u00f0\16\u00f0\u18c5\13\u00f0\5\u00f0\u18c7\n")
        buf.write("\u00f0\3\u00f0\5\u00f0\u18ca\n\u00f0\3\u00f0\3\u00f0\3")
        buf.write("\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u18d2\n\u00f0\3")
        buf.write("\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\7\u00f1\u18db\n\u00f1\f\u00f1\16\u00f1\u18de\13\u00f1")
        buf.write("\5\u00f1\u18e0\n\u00f1\3\u00f1\5\u00f1\u18e3\n\u00f1\3")
        buf.write("\u00f1\3\u00f1\7\u00f1\u18e7\n\u00f1\f\u00f1\16\u00f1")
        buf.write("\u18ea\13\u00f1\3\u00f1\3\u00f1\5\u00f1\u18ee\n\u00f1")
        buf.write("\3\u00f1\3\u00f1\5\u00f1\u18f2\n\u00f1\3\u00f2\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u18fa\n\u00f2")
        buf.write("\f\u00f2\16\u00f2\u18fd\13\u00f2\5\u00f2\u18ff\n\u00f2")
        buf.write("\3\u00f2\5\u00f2\u1902\n\u00f2\3\u00f2\3\u00f2\7\u00f2")
        buf.write("\u1906\n\u00f2\f\u00f2\16\u00f2\u1909\13\u00f2\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\5\u00f2\u190e\n\u00f2\3\u00f2\3\u00f2")
        buf.write("\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1916\n\u00f3")
        buf.write("\3\u00f3\5\u00f3\u1919\n\u00f3\3\u00f3\3\u00f3\5\u00f3")
        buf.write("\u191d\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u1921\n\u00f3\3")
        buf.write("\u00f3\5\u00f3\u1924\n\u00f3\3\u00f4\3\u00f4\3\u00f4\5")
        buf.write("\u00f4\u1929\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3")
        buf.write("\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5")
        buf.write("\3\u00f5\5\u00f5\u1937\n\u00f5\3\u00f6\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1947\n\u00f6")
        buf.write("\3\u00f6\3\u00f6\5\u00f6\u194b\n\u00f6\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\5\u00f6\u1951\n\u00f6\5\u00f6\u1953\n")
        buf.write("\u00f6\3\u00f6\5\u00f6\u1956\n\u00f6\3\u00f7\3\u00f7\5")
        buf.write("\u00f7\u195a\n\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u195f")
        buf.write("\n\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1964\n\u00f7")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8")
        buf.write("\u196c\n\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1971\n")
        buf.write("\u00f8\3\u00f8\7\u00f8\u1974\n\u00f8\f\u00f8\16\u00f8")
        buf.write("\u1977\13\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u197c")
        buf.write("\n\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1981\n\u00f8")
        buf.write("\3\u00f8\5\u00f8\u1984\n\u00f8\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\7\u00f9\u198b\n\u00f9\f\u00f9\16\u00f9")
        buf.write("\u198e\13\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9")
        buf.write("\7\u00f9\u1995\n\u00f9\f\u00f9\16\u00f9\u1998\13\u00f9")
        buf.write("\5\u00f9\u199a\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u19a3\n\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u19a9\n\u00fa\f\u00fa")
        buf.write("\16\u00fa\u19ac\13\u00fa\5\u00fa\u19ae\n\u00fa\3\u00fa")
        buf.write("\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u19b5\n\u00fa")
        buf.write("\3\u00fa\5\u00fa\u19b8\n\u00fa\3\u00fb\3\u00fb\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc")
        buf.write("\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc")
        buf.write("\u19e6\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u19ea\n\u00fc\3")
        buf.write("\u00fc\5\u00fc\u19ed\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3")
        buf.write("\u00fd\5\u00fd\u19f3\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3")
        buf.write("\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd")
        buf.write("\5\u00fd\u19ff\n\u00fd\5\u00fd\u1a01\n\u00fd\3\u00fd\5")
        buf.write("\u00fd\u1a04\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3")
        buf.write("\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe")
        buf.write("\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe")
        buf.write("\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u1a1d")
        buf.write("\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a28\n\u00ff\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a30")
        buf.write("\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\7\u0100\u1a39\n\u0100\f\u0100\16\u0100\u1a3c")
        buf.write("\13\u0100\7\u0100\u1a3e\n\u0100\f\u0100\16\u0100\u1a41")
        buf.write("\13\u0100\5\u0100\u1a43\n\u0100\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\3\u0101\3\u0101\5\u0101\u1a4b\n\u0101\3\u0102")
        buf.write("\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3\u0103")
        buf.write("\5\u0103\u1a55\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\5\u0104\u1a5c\n\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\5\u0104\u1a63\n\u0104\5\u0104\u1a65\n")
        buf.write("\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1a71\n\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\5\u0104\u1a7c\n\u0104\3\u0104\3\u0104")
        buf.write("\5\u0104\u1a80\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104")
        buf.write("\u1a85\n\u0104\3\u0104\5\u0104\u1a88\n\u0104\5\u0104\u1a8a")
        buf.write("\n\u0104\3\u0104\5\u0104\u1a8d\n\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\5\u0104\u1a99\n\u0104\5\u0104\u1a9b\n\u0104\5")
        buf.write("\u0104\u1a9d\n\u0104\3\u0104\5\u0104\u1aa0\n\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\5\u0104\u1aa5\n\u0104\3\u0104\5\u0104")
        buf.write("\u1aa8\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1aad\n")
        buf.write("\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\5\u0104\u1ab7\n\u0104\3\u0104\3\u0104")
        buf.write("\5\u0104\u1abb\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104")
        buf.write("\u1ac0\n\u0104\3\u0104\5\u0104\u1ac3\n\u0104\5\u0104\u1ac5")
        buf.write("\n\u0104\3\u0104\5\u0104\u1ac8\n\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\5\u0104\u1ad4\n\u0104\5\u0104\u1ad6\n\u0104\5")
        buf.write("\u0104\u1ad8\n\u0104\3\u0104\5\u0104\u1adb\n\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\5\u0104\u1ae1\n\u0104\3\u0105")
        buf.write("\3\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106")
        buf.write("\5\u0106\u1aeb\n\u0106\3\u0107\3\u0107\3\u0108\3\u0108")
        buf.write("\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\5\u010a\u1aff\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write("\5\u010b\u1b05\n\u010b\3\u010c\3\u010c\3\u010d\3\u010d")
        buf.write("\3\u010d\3\u010d\3\u010d\3\u010e\3\u010e\3\u010f\3\u010f")
        buf.write("\3\u010f\3\u010f\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1b1e")
        buf.write("\n\u0111\5\u0111\u1b20\n\u0111\3\u0112\3\u0112\3\u0112")
        buf.write("\3\u0113\3\u0113\3\u0113\3\u0114\3\u0114\3\u0115\3\u0115")
        buf.write("\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118")
        buf.write("\5\u0118\u1b3a\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118")
        buf.write("\5\u0118\u1b40\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118")
        buf.write("\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1b4b")
        buf.write("\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\5\u0119\u1b53\n\u0119\3\u0119\5\u0119\u1b56\n\u0119\3")
        buf.write("\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011c")
        buf.write("\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1b64")
        buf.write("\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\5\u011d\u1b6c\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write("\3\u011e\5\u011e\u1b73\n\u011e\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1b8a\n\u011f")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121")
        buf.write("\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u1b97\n\u0121")
        buf.write("\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1b9d\n\u0122")
        buf.write("\3\u0122\3\u0122\3\u0122\7\u0122\u1ba2\n\u0122\f\u0122")
        buf.write("\16\u0122\u1ba5\13\u0122\3\u0122\3\u0122\3\u0122\7\u0122")
        buf.write("\u1baa\n\u0122\f\u0122\16\u0122\u1bad\13\u0122\5\u0122")
        buf.write("\u1baf\n\u0122\3\u0122\5\u0122\u1bb2\n\u0122\3\u0123\3")
        buf.write("\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\5\u0124")
        buf.write("\u1bbb\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0125")
        buf.write("\3\u0125\3\u0125\3\u0125\5\u0125\u1bc5\n\u0125\3\u0125")
        buf.write("\3\u0125\3\u0125\7\u0125\u1bca\n\u0125\f\u0125\16\u0125")
        buf.write("\u1bcd\13\u0125\3\u0125\5\u0125\u1bd0\n\u0125\3\u0126")
        buf.write("\3\u0126\5\u0126\u1bd4\n\u0126\3\u0127\3\u0127\3\u0127")
        buf.write("\3\u0127\5\u0127\u1bda\n\u0127\3\u0127\3\u0127\3\u0127")
        buf.write("\7\u0127\u1bdf\n\u0127\f\u0127\16\u0127\u1be2\13\u0127")
        buf.write("\3\u0127\5\u0127\u1be5\n\u0127\3\u0128\3\u0128\3\u0128")
        buf.write("\3\u0128\5\u0128\u1beb\n\u0128\3\u0128\3\u0128\3\u0128")
        buf.write("\7\u0128\u1bf0\n\u0128\f\u0128\16\u0128\u1bf3\13\u0128")
        buf.write("\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1bf9\n\u0128")
        buf.write("\3\u0128\5\u0128\u1bfc\n\u0128\3\u0129\3\u0129\3\u0129")
        buf.write("\3\u0129\5\u0129\u1c02\n\u0129\3\u0129\3\u0129\3\u0129")
        buf.write("\7\u0129\u1c07\n\u0129\f\u0129\16\u0129\u1c0a\13\u0129")
        buf.write("\3\u0129\5\u0129\u1c0d\n\u0129\3\u012a\3\u012a\3\u012a")
        buf.write("\5\u012a\u1c12\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a")
        buf.write("\u1c17\n\u012a\3\u012a\6\u012a\u1c1a\n\u012a\r\u012a\16")
        buf.write("\u012a\u1c1b\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3")
        buf.write("\u012b\5\u012b\u1c24\n\u012b\3\u012b\3\u012b\5\u012b\u1c28")
        buf.write("\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1c2e")
        buf.write("\n\u012c\3\u012c\3\u012c\3\u012c\7\u012c\u1c33\n\u012c")
        buf.write("\f\u012c\16\u012c\u1c36\13\u012c\3\u012c\5\u012c\u1c39")
        buf.write("\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\5\u012d\u1c42\n\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\3\u012d\5\u012d\u1c4a\n\u012d\3\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\5\u012e\u1c50\n\u012e\3\u012e")
        buf.write("\3\u012e\3\u012f\3\u012f\5\u012f\u1c56\n\u012f\3\u0130")
        buf.write("\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0131")
        buf.write("\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131")
        buf.write("\5\u0131\u1c67\n\u0131\3\u0131\3\u0131\5\u0131\u1c6b\n")
        buf.write("\u0131\3\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132")
        buf.write("\5\u0132\u1c73\n\u0132\3\u0132\3\u0132\5\u0132\u1c77\n")
        buf.write("\u0132\3\u0132\3\u0132\3\u0132\3\u0132\7\u0132\u1c7d\n")
        buf.write("\u0132\f\u0132\16\u0132\u1c80\13\u0132\3\u0132\5\u0132")
        buf.write("\u1c83\n\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1c88\n")
        buf.write("\u0132\3\u0132\3\u0132\5\u0132\u1c8c\n\u0132\3\u0132\3")
        buf.write("\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1c93\n\u0132\3")
        buf.write("\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1c99\n\u0132\5")
        buf.write("\u0132\u1c9b\n\u0132\3\u0133\3\u0133\5\u0133\u1c9f\n\u0133")
        buf.write("\3\u0133\3\u0133\5\u0133\u1ca3\n\u0133\3\u0133\3\u0133")
        buf.write("\5\u0133\u1ca7\n\u0133\3\u0133\5\u0133\u1caa\n\u0133\3")
        buf.write("\u0133\3\u0133\5\u0133\u1cae\n\u0133\3\u0133\3\u0133\3")
        buf.write("\u0133\3\u0133\5\u0133\u1cb4\n\u0133\3\u0133\3\u0133\5")
        buf.write("\u0133\u1cb8\n\u0133\5\u0133\u1cba\n\u0133\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\5\u0134\u1cc1\n\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\7\u0134\u1cc6\n\u0134\f\u0134\16\u0134")
        buf.write("\u1cc9\13\u0134\5\u0134\u1ccb\n\u0134\3\u0134\5\u0134")
        buf.write("\u1cce\n\u0134\3\u0134\3\u0134\3\u0134\7\u0134\u1cd3\n")
        buf.write("\u0134\f\u0134\16\u0134\u1cd6\13\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u1cda\n\u0134\3\u0134\6\u0134\u1cdd\n\u0134\r")
        buf.write("\u0134\16\u0134\u1cde\3\u0134\3\u0134\5\u0134\u1ce3\n")
        buf.write("\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1ce9\n")
        buf.write("\u0134\6\u0134\u1ceb\n\u0134\r\u0134\16\u0134\u1cec\5")
        buf.write("\u0134\u1cef\n\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1cf4")
        buf.write("\n\u0134\3\u0134\6\u0134\u1cf7\n\u0134\r\u0134\16\u0134")
        buf.write("\u1cf8\6\u0134\u1cfb\n\u0134\r\u0134\16\u0134\u1cfc\3")
        buf.write("\u0134\3\u0134\3\u0134\5\u0134\u1d02\n\u0134\3\u0134\3")
        buf.write("\u0134\3\u0134\3\u0134\5\u0134\u1d08\n\u0134\6\u0134\u1d0a")
        buf.write("\n\u0134\r\u0134\16\u0134\u1d0b\6\u0134\u1d0e\n\u0134")
        buf.write("\r\u0134\16\u0134\u1d0f\5\u0134\u1d12\n\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u1d16\n\u0134\3\u0134\3\u0134\5\u0134")
        buf.write("\u1d1a\n\u0134\3\u0134\3\u0134\5\u0134\u1d1e\n\u0134\3")
        buf.write("\u0134\3\u0134\5\u0134\u1d22\n\u0134\3\u0134\3\u0134\3")
        buf.write("\u0134\3\u0134\5\u0134\u1d28\n\u0134\3\u0134\5\u0134\u1d2b")
        buf.write("\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d31")
        buf.write("\n\u0134\3\u0134\3\u0134\5\u0134\u1d35\n\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u1d39\n\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u1d3f\n\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u1d45\n\u0134\5\u0134\u1d47\n\u0134\3")
        buf.write("\u0134\5\u0134\u1d4a\n\u0134\3\u0134\3\u0134\5\u0134\u1d4e")
        buf.write("\n\u0134\3\u0134\3\u0134\5\u0134\u1d52\n\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u1d56\n\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u1d5c\n\u0134\3\u0134\5\u0134\u1d5f\n")
        buf.write("\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d65\n")
        buf.write("\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d6b\n")
        buf.write("\u0134\3\u0134\5\u0134\u1d6e\n\u0134\3\u0134\3\u0134\3")
        buf.write("\u0134\3\u0134\5\u0134\u1d74\n\u0134\3\u0134\5\u0134\u1d77")
        buf.write("\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d7d")
        buf.write("\n\u0134\3\u0134\5\u0134\u1d80\n\u0134\3\u0134\3\u0134")
        buf.write("\5\u0134\u1d84\n\u0134\3\u0134\3\u0134\5\u0134\u1d88\n")
        buf.write("\u0134\3\u0134\3\u0134\5\u0134\u1d8c\n\u0134\3\u0134\3")
        buf.write("\u0134\3\u0134\5\u0134\u1d91\n\u0134\3\u0134\5\u0134\u1d94")
        buf.write("\n\u0134\3\u0134\3\u0134\5\u0134\u1d98\n\u0134\3\u0134")
        buf.write("\3\u0134\5\u0134\u1d9c\n\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134")
        buf.write("\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1dad")
        buf.write("\n\u0134\7\u0134\u1daf\n\u0134\f\u0134\16\u0134\u1db2")
        buf.write("\13\u0134\5\u0134\u1db4\n\u0134\3\u0135\3\u0135\3\u0135")
        buf.write("\3\u0135\3\u0135\5\u0135\u1dbb\n\u0135\3\u0135\6\u0135")
        buf.write("\u1dbe\n\u0135\r\u0135\16\u0135\u1dbf\3\u0135\3\u0135")
        buf.write("\5\u0135\u1dc4\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u1dca\n\u0135\6\u0135\u1dcc\n\u0135\r\u0135\16")
        buf.write("\u0135\u1dcd\5\u0135\u1dd0\n\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u1dd5\n\u0135\3\u0135\6\u0135\u1dd8\n\u0135\r")
        buf.write("\u0135\16\u0135\u1dd9\6\u0135\u1ddc\n\u0135\r\u0135\16")
        buf.write("\u0135\u1ddd\3\u0135\3\u0135\3\u0135\5\u0135\u1de3\n\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1de9\n\u0135")
        buf.write("\6\u0135\u1deb\n\u0135\r\u0135\16\u0135\u1dec\6\u0135")
        buf.write("\u1def\n\u0135\r\u0135\16\u0135\u1df0\5\u0135\u1df3\n")
        buf.write("\u0135\3\u0135\3\u0135\5\u0135\u1df7\n\u0135\3\u0135\3")
        buf.write("\u0135\5\u0135\u1dfb\n\u0135\3\u0135\3\u0135\5\u0135\u1dff")
        buf.write("\n\u0135\3\u0135\3\u0135\5\u0135\u1e03\n\u0135\3\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\5\u0135\u1e09\n\u0135\3\u0135")
        buf.write("\5\u0135\u1e0c\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u1e12\n\u0135\3\u0135\3\u0135\5\u0135\u1e16\n")
        buf.write("\u0135\3\u0135\3\u0135\5\u0135\u1e1a\n\u0135\3\u0135\3")
        buf.write("\u0135\3\u0135\3\u0135\5\u0135\u1e20\n\u0135\3\u0135\3")
        buf.write("\u0135\3\u0135\3\u0135\5\u0135\u1e26\n\u0135\5\u0135\u1e28")
        buf.write("\n\u0135\3\u0135\5\u0135\u1e2b\n\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u1e2f\n\u0135\3\u0135\3\u0135\5\u0135\u1e33\n")
        buf.write("\u0135\3\u0135\3\u0135\5\u0135\u1e37\n\u0135\3\u0135\3")
        buf.write("\u0135\3\u0135\3\u0135\5\u0135\u1e3d\n\u0135\3\u0135\5")
        buf.write("\u0135\u1e40\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5")
        buf.write("\u0135\u1e46\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5")
        buf.write("\u0135\u1e4c\n\u0135\3\u0135\5\u0135\u1e4f\n\u0135\3\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\5\u0135\u1e55\n\u0135\3\u0135")
        buf.write("\5\u0135\u1e58\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\5\u0135\u1e5e\n\u0135\3\u0135\5\u0135\u1e61\n\u0135\3")
        buf.write("\u0135\3\u0135\5\u0135\u1e65\n\u0135\3\u0135\3\u0135\5")
        buf.write("\u0135\u1e69\n\u0135\3\u0135\3\u0135\5\u0135\u1e6d\n\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\5\u0135\u1e72\n\u0135\3\u0135")
        buf.write("\5\u0135\u1e75\n\u0135\3\u0135\3\u0135\5\u0135\u1e79\n")
        buf.write("\u0135\3\u0135\3\u0135\5\u0135\u1e7d\n\u0135\3\u0135\3")
        buf.write("\u0135\3\u0135\3\u0135\5\u0135\u1e83\n\u0135\3\u0135\5")
        buf.write("\u0135\u1e86\n\u0135\3\u0135\3\u0135\5\u0135\u1e8a\n\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135")
        buf.write("\3\u0135\5\u0135\u1e9b\n\u0135\7\u0135\u1e9d\n\u0135\f")
        buf.write("\u0135\16\u0135\u1ea0\13\u0135\5\u0135\u1ea2\n\u0135\3")
        buf.write("\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136")
        buf.write("\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1eb0")
        buf.write("\n\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1eb6")
        buf.write("\n\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136")
        buf.write("\5\u0136\u1ebe\n\u0136\3\u0136\3\u0136\3\u0136\3\u0136")
        buf.write("\3\u0136\6\u0136\u1ec5\n\u0136\r\u0136\16\u0136\u1ec6")
        buf.write("\3\u0136\5\u0136\u1eca\n\u0136\3\u0137\3\u0137\3\u0137")
        buf.write("\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137")
        buf.write("\3\u0137\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138\3\u0138")
        buf.write("\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138")
        buf.write("\3\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u013a")
        buf.write("\3\u013a\5\u013a\u1eec\n\u013a\3\u013a\3\u013a\5\u013a")
        buf.write("\u1ef0\n\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u1ef5\n")
        buf.write("\u013a\f\u013a\16\u013a\u1ef8\13\u013a\5\u013a\u1efa\n")
        buf.write("\u013a\3\u013a\5\u013a\u1efd\n\u013a\3\u013a\3\u013a\3")
        buf.write("\u013a\3\u013a\7\u013a\u1f03\n\u013a\f\u013a\16\u013a")
        buf.write("\u1f06\13\u013a\3\u013a\3\u013a\5\u013a\u1f0a\n\u013a")
        buf.write("\3\u013a\3\u013a\3\u013a\5\u013a\u1f0f\n\u013a\3\u013a")
        buf.write("\5\u013a\u1f12\n\u013a\5\u013a\u1f14\n\u013a\3\u013b\3")
        buf.write("\u013b\5\u013b\u1f18\n\u013b\3\u013b\3\u013b\5\u013b\u1f1c")
        buf.write("\n\u013b\3\u013b\5\u013b\u1f1f\n\u013b\3\u013b\3\u013b")
        buf.write("\5\u013b\u1f23\n\u013b\3\u013c\3\u013c\3\u013d\3\u013d")
        buf.write("\5\u013d\u1f29\n\u013d\3\u013d\3\u013d\3\u013d\5\u013d")
        buf.write("\u1f2e\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write("\5\u013d\u1f35\n\u013d\5\u013d\u1f37\n\u013d\3\u013d\3")
        buf.write("\u013d\5\u013d\u1f3b\n\u013d\3\u013d\3\u013d\3\u013d\3")
        buf.write("\u013d\7\u013d\u1f41\n\u013d\f\u013d\16\u013d\u1f44\13")
        buf.write("\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f49\n\u013d\3")
        buf.write("\u013d\3\u013d\5\u013d\u1f4d\n\u013d\3\u013d\5\u013d\u1f50")
        buf.write("\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d")
        buf.write("\3\u013d\5\u013d\u1f59\n\u013d\3\u013d\5\u013d\u1f5c\n")
        buf.write("\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f62\n")
        buf.write("\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e")
        buf.write("\u1f69\n\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1f6e\n")
        buf.write("\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e")
        buf.write("\5\u013e\u1f76\n\u013e\3\u013f\3\u013f\3\u013f\5\u013f")
        buf.write("\u1f7b\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f")
        buf.write("\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1f87")
        buf.write("\n\u013f\5\u013f\u1f89\n\u013f\3\u0140\3\u0140\3\u0140")
        buf.write("\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140")
        buf.write("\u1f94\n\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141")
        buf.write("\5\u0141\u1f9b\n\u0141\3\u0141\3\u0141\3\u0141\3\u0141")
        buf.write("\3\u0141\3\u0141\7\u0141\u1fa3\n\u0141\f\u0141\16\u0141")
        buf.write("\u1fa6\13\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3\u0143")
        buf.write("\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143")
        buf.write("\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143")
        buf.write("\3\u0143\5\u0143\u1fbc\n\u0143\3\u0144\3\u0144\3\u0144")
        buf.write("\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144")
        buf.write("\3\u0144\5\u0144\u1fc9\n\u0144\3\u0145\3\u0145\3\u0145")
        buf.write("\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145")
        buf.write("\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1fd9\n\u0145")
        buf.write("\3\u0145\3\u0145\3\u0145\5\u0145\u1fde\n\u0145\3\u0145")
        buf.write("\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1fe5\n\u0145")
        buf.write("\3\u0145\5\u0145\u1fe8\n\u0145\6\u0145\u1fea\n\u0145\r")
        buf.write("\u0145\16\u0145\u1feb\5\u0145\u1fee\n\u0145\3\u0146\3")
        buf.write("\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146")
        buf.write("\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146")
        buf.write("\5\u0146\u1fff\n\u0146\3\u0147\3\u0147\3\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148")
        buf.write("\3\u0148\3\u0148\5\u0148\u200e\n\u0148\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u2016\n\u0149")
        buf.write("\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\5\u0149\u201f\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149")
        buf.write("\3\u0149\3\u0149\5\u0149\u2027\n\u0149\3\u014a\3\u014a")
        buf.write("\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u2030")
        buf.write("\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a")
        buf.write("\3\u014a\3\u014a\3\u014a\5\u014a\u203b\n\u014a\3\u014a")
        buf.write("\3\u014a\5\u014a\u203f\n\u014a\5\u014a\u2041\n\u014a\5")
        buf.write("\u014a\u2043\n\u014a\3\u014b\3\u014b\3\u014b\3\u014b\5")
        buf.write("\u014b\u2049\n\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u204e")
        buf.write("\n\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b")
        buf.write("\u2055\n\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b")
        buf.write("\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b")
        buf.write("\u2062\n\u014b\5\u014b\u2064\n\u014b\5\u014b\u2066\n\u014b")
        buf.write("\3\u014b\5\u014b\u2069\n\u014b\3\u014b\5\u014b\u206c\n")
        buf.write("\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c")
        buf.write("\u2073\n\u014c\3\u014c\5\u014c\u2076\n\u014c\3\u014c\3")
        buf.write("\u014c\3\u014c\3\u014c\5\u014c\u207c\n\u014c\3\u014c\3")
        buf.write("\u014c\3\u014c\5\u014c\u2081\n\u014c\5\u014c\u2083\n\u014c")
        buf.write("\3\u014c\5\u014c\u2086\n\u014c\3\u014c\3\u014c\3\u014c")
        buf.write("\3\u014c\5\u014c\u208c\n\u014c\3\u014c\3\u014c\3\u014c")
        buf.write("\3\u014c\3\u014c\3\u014c\5\u014c\u2094\n\u014c\5\u014c")
        buf.write("\u2096\n\u014c\3\u014c\5\u014c\u2099\n\u014c\3\u014c\3")
        buf.write("\u014c\5\u014c\u209d\n\u014c\3\u014c\5\u014c\u20a0\n\u014c")
        buf.write("\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c")
        buf.write("\3\u014c\5\u014c\u20aa\n\u014c\3\u014c\5\u014c\u20ad\n")
        buf.write("\u014c\3\u014c\3\u014c\5\u014c\u20b1\n\u014c\3\u014c\5")
        buf.write("\u014c\u20b4\n\u014c\3\u014c\3\u014c\3\u014c\3\u014c\5")
        buf.write("\u014c\u20ba\n\u014c\3\u014c\5\u014c\u20bd\n\u014c\5\u014c")
        buf.write("\u20bf\n\u014c\3\u014d\3\u014d\5\u014d\u20c3\n\u014d\3")
        buf.write("\u014e\3\u014e\3\u014e\5\u014e\u20c8\n\u014e\3\u014f\3")
        buf.write("\u014f\5\u014f\u20cc\n\u014f\3\u0150\3\u0150\3\u0150\3")
        buf.write("\u0150\3\u0150\3\u0150\5\u0150\u20d4\n\u0150\3\u0150\3")
        buf.write("\u0150\5\u0150\u20d8\n\u0150\3\u0150\5\u0150\u20db\n\u0150")
        buf.write("\3\u0151\3\u0151\3\u0151\5\u0151\u20e0\n\u0151\3\u0152")
        buf.write("\3\u0152\3\u0152\3\u0152\3\u0153\3\u0153\5\u0153\u20e8")
        buf.write("\n\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u20ed\n\u0153")
        buf.write("\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0155\3\u0155")
        buf.write("\3\u0155\5\u0155\u20f7\n\u0155\3\u0155\3\u0155\3\u0155")
        buf.write("\3\u0156\3\u0156\3\u0156\3\u0156\3\u0157\3\u0157\5\u0157")
        buf.write("\u2102\n\u0157\3\u0157\7\u0157\u2105\n\u0157\f\u0157\16")
        buf.write("\u0157\u2108\13\u0157\3\u0158\3\u0158\3\u0158\5\u0158")
        buf.write("\u210d\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159")
        buf.write("\u2113\n\u0159\3\u0159\3\u0159\5\u0159\u2117\n\u0159\3")
        buf.write("\u0159\5\u0159\u211a\n\u0159\3\u0159\3\u0159\5\u0159\u211e")
        buf.write("\n\u0159\3\u0159\3\u0159\5\u0159\u2122\n\u0159\3\u0159")
        buf.write("\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u212a")
        buf.write("\n\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u212f\n\u0159")
        buf.write("\5\u0159\u2131\n\u0159\3\u0159\5\u0159\u2134\n\u0159\3")
        buf.write("\u0159\7\u0159\u2137\n\u0159\f\u0159\16\u0159\u213a\13")
        buf.write("\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a")
        buf.write("\5\u015a\u2142\n\u015a\3\u015b\3\u015b\5\u015b\u2146\n")
        buf.write("\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u214b\n\u015b\3")
        buf.write("\u015b\5\u015b\u214e\n\u015b\3\u015b\5\u015b\u2151\n\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u2157\n\u015b")
        buf.write("\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b")
        buf.write("\u215f\n\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b")
        buf.write("\3\u015b\5\u015b\u2167\n\u015b\3\u015b\5\u015b\u216a\n")
        buf.write("\u015b\3\u015b\5\u015b\u216d\n\u015b\3\u015c\3\u015c\5")
        buf.write("\u015c\u2171\n\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u2176")
        buf.write("\n\u015c\3\u015c\5\u015c\u2179\n\u015c\3\u015c\3\u015c")
        buf.write("\3\u015c\3\u015c\5\u015c\u217f\n\u015c\3\u015c\3\u015c")
        buf.write("\5\u015c\u2183\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c")
        buf.write("\5\u015c\u2189\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c")
        buf.write("\3\u015c\3\u015c\5\u015c\u2191\n\u015c\3\u015c\3\u015c")
        buf.write("\3\u015c\3\u015c\6\u015c\u2197\n\u015c\r\u015c\16\u015c")
        buf.write("\u2198\3\u015c\5\u015c\u219c\n\u015c\3\u015c\3\u015c\3")
        buf.write("\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c")
        buf.write("\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u21ab\n\u015c")
        buf.write("\3\u015c\5\u015c\u21ae\n\u015c\3\u015c\5\u015c\u21b1\n")
        buf.write("\u015c\5\u015c\u21b3\n\u015c\3\u015d\3\u015d\3\u015d\3")
        buf.write("\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d")
        buf.write("\u21be\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e")
        buf.write("\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u21c9\n\u015e")
        buf.write("\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\7\u015f\u21d0")
        buf.write("\n\u015f\f\u015f\16\u015f\u21d3\13\u015f\3\u015f\3\u015f")
        buf.write("\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160\u21dc")
        buf.write("\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161")
        buf.write("\3\u0161\3\u0161\5\u0161\u21e6\n\u0161\5\u0161\u21e8\n")
        buf.write("\u0161\5\u0161\u21ea\n\u0161\3\u0161\5\u0161\u21ed\n\u0161")
        buf.write("\3\u0161\5\u0161\u21f0\n\u0161\3\u0161\3\u0161\3\u0161")
        buf.write("\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161")
        buf.write("\u21fb\n\u0161\5\u0161\u21fd\n\u0161\5\u0161\u21ff\n\u0161")
        buf.write("\3\u0161\5\u0161\u2202\n\u0161\3\u0162\7\u0162\u2205\n")
        buf.write("\u0162\f\u0162\16\u0162\u2208\13\u0162\3\u0162\3\u0162")
        buf.write("\3\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163")
        buf.write("\u2212\n\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write("\3\u0164\3\u0164\5\u0164\u221b\n\u0164\3\u0164\5\u0164")
        buf.write("\u221e\n\u0164\3\u0164\5\u0164\u2221\n\u0164\3\u0164\3")
        buf.write("\u0164\3\u0164\3\u0164\3\u0164\7\u0164\u2228\n\u0164\f")
        buf.write("\u0164\16\u0164\u222b\13\u0164\5\u0164\u222d\n\u0164\3")
        buf.write("\u0164\5\u0164\u2230\n\u0164\3\u0165\3\u0165\3\u0165\3")
        buf.write("\u0165\3\u0165\5\u0165\u2237\n\u0165\3\u0165\5\u0165\u223a")
        buf.write("\n\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\5\u0165\u2249\n\u0165\3\u0165\5\u0165\u224c\n\u0165\3")
        buf.write("\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u2253\n")
        buf.write("\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165")
        buf.write("\3\u0165\5\u0165\u2263\n\u0165\3\u0166\3\u0166\5\u0166")
        buf.write("\u2267\n\u0166\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167")
        buf.write("\3\u0167\3\u0167\3\u0167\5\u0167\u2271\n\u0167\3\u0167")
        buf.write("\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167")
        buf.write("\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167")
        buf.write("\3\u0167\3\u0167\7\u0167\u2284\n\u0167\f\u0167\16\u0167")
        buf.write("\u2287\13\u0167\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168")
        buf.write("\u228d\n\u0168\3\u0169\3\u0169\3\u0169\6\u0169\u2292\n")
        buf.write("\u0169\r\u0169\16\u0169\u2293\3\u0169\3\u0169\5\u0169")
        buf.write("\u2298\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\6\u0169")
        buf.write("\u229e\n\u0169\r\u0169\16\u0169\u229f\3\u0169\3\u0169")
        buf.write("\5\u0169\u22a4\n\u0169\3\u0169\3\u0169\5\u0169\u22a8\n")
        buf.write("\u0169\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u22ae\n")
        buf.write("\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b")
        buf.write("\3\u016b\3\u016b\5\u016b\u22b8\n\u016b\3\u016c\3\u016c")
        buf.write("\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\5\u016c")
        buf.write("\u22c2\n\u016c\3\u016d\3\u016d\3\u016e\3\u016e\3\u016e")
        buf.write("\5\u016e\u22c9\n\u016e\3\u016e\3\u016e\3\u016e\7\u016e")
        buf.write("\u22ce\n\u016e\f\u016e\16\u016e\u22d1\13\u016e\3\u016e")
        buf.write("\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u22d9")
        buf.write("\n\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e")
        buf.write("\u22e0\n\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f")
        buf.write("\5\u016f\u22e7\n\u016f\3\u016f\3\u016f\3\u016f\3\u016f")
        buf.write("\3\u016f\3\u0170\3\u0170\5\u0170\u22f0\n\u0170\3\u0170")
        buf.write("\3\u0170\5\u0170\u22f4\n\u0170\3\u0170\3\u0170\3\u0170")
        buf.write("\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u22fe")
        buf.write("\n\u0170\3\u0171\3\u0171\3\u0171\7\u0171\u2303\n\u0171")
        buf.write("\f\u0171\16\u0171\u2306\13\u0171\3\u0172\3\u0172\3\u0172")
        buf.write("\7\u0172\u230b\n\u0172\f\u0172\16\u0172\u230e\13\u0172")
        buf.write("\3\u0173\3\u0173\3\u0173\7\u0173\u2313\n\u0173\f\u0173")
        buf.write("\16\u0173\u2316\13\u0173\3\u0174\5\u0174\u2319\n\u0174")
        buf.write("\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175")
        buf.write("\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175")
        buf.write("\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175")
        buf.write("\u232f\n\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175")
        buf.write("\3\u0175\3\u0175\5\u0175\u2338\n\u0175\3\u0175\3\u0175")
        buf.write("\3\u0175\3\u0175\5\u0175\u233e\n\u0175\3\u0175\3\u0175")
        buf.write("\3\u0175\3\u0175\5\u0175\u2344\n\u0175\3\u0175\3\u0175")
        buf.write("\3\u0175\3\u0175\5\u0175\u234a\n\u0175\3\u0175\3\u0175")
        buf.write("\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175")
        buf.write("\u2354\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176")
        buf.write("\5\u0176\u235b\n\u0176\3\u0176\7\u0176\u235e\n\u0176\f")
        buf.write("\u0176\16\u0176\u2361\13\u0176\3\u0177\3\u0177\5\u0177")
        buf.write("\u2365\n\u0177\3\u0177\3\u0177\5\u0177\u2369\n\u0177\3")
        buf.write("\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u2370\n")
        buf.write("\u0177\3\u0178\3\u0178\5\u0178\u2374\n\u0178\3\u0178\5")
        buf.write("\u0178\u2377\n\u0178\3\u0178\3\u0178\3\u0178\5\u0178\u237c")
        buf.write("\n\u0178\3\u0178\3\u0178\5\u0178\u2380\n\u0178\3\u0178")
        buf.write("\3\u0178\5\u0178\u2384\n\u0178\3\u0178\3\u0178\3\u0178")
        buf.write("\5\u0178\u2389\n\u0178\3\u0178\3\u0178\3\u0178\7\u0178")
        buf.write("\u238e\n\u0178\f\u0178\16\u0178\u2391\13\u0178\5\u0178")
        buf.write("\u2393\n\u0178\3\u0178\3\u0178\5\u0178\u2397\n\u0178\3")
        buf.write("\u0179\3\u0179\3\u0179\5\u0179\u239c\n\u0179\3\u0179\3")
        buf.write("\u0179\5\u0179\u23a0\n\u0179\3\u017a\3\u017a\3\u017a\3")
        buf.write("\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u23a9\n\u017a\3")
        buf.write("\u017b\3\u017b\3\u017b\3\u017b\3\u017b\5\u017b\u23b0\n")
        buf.write("\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\7\u017c")
        buf.write("\u23b7\n\u017c\f\u017c\16\u017c\u23ba\13\u017c\3\u017c")
        buf.write("\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write("\3\u017c\5\u017c\u23c5\n\u017c\5\u017c\u23c7\n\u017c\3")
        buf.write("\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d")
        buf.write("\3\u017d\5\u017d\u23d1\n\u017d\3\u017d\5\u017d\u23d4\n")
        buf.write("\u017d\3\u017d\7\u017d\u23d7\n\u017d\f\u017d\16\u017d")
        buf.write("\u23da\13\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d")
        buf.write("\3\u017d\5\u017d\u23e2\n\u017d\5\u017d\u23e4\n\u017d\5")
        buf.write("\u017d\u23e6\n\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u23eb")
        buf.write("\n\u017d\3\u017d\3\u017d\3\u017d\3\u017d\7\u017d\u23f1")
        buf.write("\n\u017d\f\u017d\16\u017d\u23f4\13\u017d\3\u017d\3\u017d")
        buf.write("\5\u017d\u23f8\n\u017d\3\u017d\3\u017d\3\u017d\3\u017d")
        buf.write("\3\u017d\3\u017d\5\u017d\u2400\n\u017d\3\u017d\7\u017d")
        buf.write("\u2403\n\u017d\f\u017d\16\u017d\u2406\13\u017d\3\u017d")
        buf.write("\3\u017d\3\u017d\5\u017d\u240b\n\u017d\3\u017d\3\u017d")
        buf.write("\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d")
        buf.write("\u2415\n\u017d\5\u017d\u2417\n\u017d\3\u017d\3\u017d\5")
        buf.write("\u017d\u241b\n\u017d\3\u017d\3\u017d\5\u017d\u241f\n\u017d")
        buf.write("\5\u017d\u2421\n\u017d\3\u017e\3\u017e\3\u017e\3\u017f")
        buf.write("\3\u017f\5\u017f\u2428\n\u017f\3\u0180\3\u0180\3\u0181")
        buf.write("\3\u0181\3\u0181\3\u0181\3\u0181\7\u0181\u2431\n\u0181")
        buf.write("\f\u0181\16\u0181\u2434\13\u0181\3\u0181\3\u0181\3\u0182")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\7\u0182\u2453")
        buf.write("\n\u0182\f\u0182\16\u0182\u2456\13\u0182\3\u0182\3\u0182")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182")
        buf.write("\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u2465\n\u0182")
        buf.write("\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u246c")
        buf.write("\n\u0183\5\u0183\u246e\n\u0183\3\u0184\3\u0184\3\u0184")
        buf.write("\7\u0184\u2473\n\u0184\f\u0184\16\u0184\u2476\13\u0184")
        buf.write("\3\u0185\3\u0185\3\u0185\3\u0185\7\u0185\u247c\n\u0185")
        buf.write("\f\u0185\16\u0185\u247f\13\u0185\3\u0185\3\u0185\3\u0186")
        buf.write("\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186\u2488\n\u0186")
        buf.write("\3\u0187\3\u0187\3\u0187\5\u0187\u248d\n\u0187\3\u0187")
        buf.write("\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u2494\n\u0187")
        buf.write("\3\u0187\5\u0187\u2497\n\u0187\3\u0188\3\u0188\3\u0188")
        buf.write("\3\u0188\3\u0188\5\u0188\u249e\n\u0188\3\u0188\3\u0188")
        buf.write("\3\u0188\3\u0188\3\u0188\5\u0188\u24a5\n\u0188\3\u0188")
        buf.write("\5\u0188\u24a8\n\u0188\5\u0188\u24aa\n\u0188\3\u0189\3")
        buf.write("\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u24b2\n")
        buf.write("\u0189\5\u0189\u24b4\n\u0189\3\u018a\3\u018a\3\u018a\3")
        buf.write("\u018a\5\u018a\u24ba\n\u018a\3\u018b\3\u018b\3\u018b\7")
        buf.write("\u018b\u24bf\n\u018b\f\u018b\16\u018b\u24c2\13\u018b\3")
        buf.write("\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u24c9\n")
        buf.write("\u018c\3\u018d\3\u018d\7\u018d\u24cd\n\u018d\f\u018d\16")
        buf.write("\u018d\u24d0\13\u018d\3\u018e\3\u018e\5\u018e\u24d4\n")
        buf.write("\u018e\3\u018e\3\u018e\5\u018e\u24d8\n\u018e\3\u018e\3")
        buf.write("\u018e\5\u018e\u24dc\n\u018e\3\u018e\3\u018e\3\u018e\5")
        buf.write("\u018e\u24e1\n\u018e\5\u018e\u24e3\n\u018e\3\u018e\3\u018e")
        buf.write("\3\u018e\3\u018e\3\u018e\5\u018e\u24ea\n\u018e\3\u018e")
        buf.write("\3\u018e\5\u018e\u24ee\n\u018e\3\u018e\3\u018e\3\u018e")
        buf.write("\3\u018e\3\u018e\5\u018e\u24f5\n\u018e\5\u018e\u24f7\n")
        buf.write("\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\5\u018e")
        buf.write("\u24fe\n\u018e\5\u018e\u2500\n\u018e\3\u018f\3\u018f\3")
        buf.write("\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u2509\n")
        buf.write("\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f")
        buf.write("\5\u018f\u2511\n\u018f\3\u0190\3\u0190\3\u0190\7\u0190")
        buf.write("\u2516\n\u0190\f\u0190\16\u0190\u2519\13\u0190\3\u0191")
        buf.write("\3\u0191\3\u0191\5\u0191\u251e\n\u0191\3\u0192\3\u0192")
        buf.write("\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0193")
        buf.write("\5\u0193\u2529\n\u0193\3\u0193\3\u0193\5\u0193\u252d\n")
        buf.write("\u0193\5\u0193\u252f\n\u0193\3\u0193\5\u0193\u2532\n\u0193")
        buf.write("\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193")
        buf.write("\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193")
        buf.write("\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193")
        buf.write("\3\u0193\5\u0193\u254a\n\u0193\3\u0194\3\u0194\3\u0194")
        buf.write("\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195")
        buf.write("\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195")
        buf.write("\3\u0195\3\u0196\3\u0196\3\u0196\7\u0196\u2561\n\u0196")
        buf.write("\f\u0196\16\u0196\u2564\13\u0196\3\u0197\3\u0197\5\u0197")
        buf.write("\u2568\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198")
        buf.write("\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198")
        buf.write("\3\u0198\3\u0198\3\u0198\3\u0198\7\u0198\u257a\n\u0198")
        buf.write("\f\u0198\16\u0198\u257d\13\u0198\3\u0198\5\u0198\u2580")
        buf.write("\n\u0198\3\u0198\3\u0198\5\u0198\u2584\n\u0198\3\u0199")
        buf.write("\3\u0199\3\u0199\3\u0199\3\u019a\3\u019a\3\u019a\3\u019a")
        buf.write("\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a")
        buf.write("\u2594\n\u019a\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\5\u019b\u259c\n\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\5\u019b\u25b2\n\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\5\u019b")
        buf.write("\u25ec\n\u019b\3\u019b\3\u019b\5\u019b\u25f0\n\u019b\3")
        buf.write("\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b")
        buf.write("\3\u019b\3\u019b\3\u019b\5\u019b\u2611\n\u019b\3\u019c")
        buf.write("\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u2618\n\u019c")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u261e\n\u019d")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u262b\n\u019d")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d")
        buf.write("\u263a\n\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d")
        buf.write("\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u2645\n\u019d")
        buf.write("\3\u019e\3\u019e\3\u019e\5\u019e\u264a\n\u019e\3\u019e")
        buf.write("\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e")
        buf.write("\5\u019e\u2654\n\u019e\3\u019e\3\u019e\3\u019e\3\u019e")
        buf.write("\3\u019e\3\u019e\3\u019e\5\u019e\u265d\n\u019e\3\u019f")
        buf.write("\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u01a0")
        buf.write("\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a1")
        buf.write("\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a2")
        buf.write("\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a3")
        buf.write("\3\u01a3\3\u01a3\3\u01a4\5\u01a4\u267f\n\u01a4\3\u01a4")
        buf.write("\3\u01a4\3\u01a5\5\u01a5\u2684\n\u01a5\3\u01a5\3\u01a5")
        buf.write("\3\u01a6\3\u01a6\5\u01a6\u268a\n\u01a6\3\u01a7\5\u01a7")
        buf.write("\u268d\n\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u2692\n")
        buf.write("\u01a7\3\u01a7\7\u01a7\u2695\n\u01a7\f\u01a7\16\u01a7")
        buf.write("\u2698\13\u01a7\3\u01a7\3\u01a7\3\u01a8\3\u01a8\3\u01a8")
        buf.write("\3\u01a8\5\u01a8\u26a0\n\u01a8\3\u01a8\7\u01a8\u26a3\n")
        buf.write("\u01a8\f\u01a8\16\u01a8\u26a6\13\u01a8\3\u01a8\3\u01a8")
        buf.write("\3\u01a9\5\u01a9\u26ab\n\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write("\3\u01a9\3\u01a9\7\u01a9\u26b2\n\u01a9\f\u01a9\16\u01a9")
        buf.write("\u26b5\13\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write("\7\u01a9\u26bc\n\u01a9\f\u01a9\16\u01a9\u26bf\13\u01a9")
        buf.write("\5\u01a9\u26c1\n\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9")
        buf.write("\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\7\u01a9")
        buf.write("\u26cd\n\u01a9\f\u01a9\16\u01a9\u26d0\13\u01a9\3\u01a9")
        buf.write("\3\u01a9\3\u01a9\5\u01a9\u26d5\n\u01a9\3\u01a9\3\u01a9")
        buf.write("\3\u01a9\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u26dd\n\u01a9")
        buf.write("\3\u01aa\3\u01aa\5\u01aa\u26e1\n\u01aa\3\u01ab\3\u01ab")
        buf.write("\3\u01ab\3\u01ab\7\u01ab\u26e7\n\u01ab\f\u01ab\16\u01ab")
        buf.write("\u26ea\13\u01ab\3\u01ab\3\u01ab\3\u01ac\3\u01ac\5\u01ac")
        buf.write("\u26f0\n\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad")
        buf.write("\3\u01ad\3\u01ad\3\u01ad\3\u01ad\7\u01ad\u26fb\n\u01ad")
        buf.write("\f\u01ad\16\u01ad\u26fe\13\u01ad\3\u01ae\3\u01ae\3\u01ae")
        buf.write("\7\u01ae\u2703\n\u01ae\f\u01ae\16\u01ae\u2706\13\u01ae")
        buf.write("\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af")
        buf.write("\3\u01af\3\u01af\3\u01af\5\u01af\u2712\n\u01af\3\u01b0")
        buf.write("\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u2719\n\u01b0")
        buf.write("\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u271f\n\u01b0")
        buf.write("\3\u01b0\3\u01b0\5\u01b0\u2723\n\u01b0\3\u01b0\3\u01b0")
        buf.write("\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0")
        buf.write("\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0")
        buf.write("\u2734\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1")
        buf.write("\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1")
        buf.write("\3\u01b1\5\u01b1\u2743\n\u01b1\5\u01b1\u2745\n\u01b1\3")
        buf.write("\u01b1\3\u01b1\3\u01b1\5\u01b1\u274a\n\u01b1\3\u01b2\5")
        buf.write("\u01b2\u274d\n\u01b2\3\u01b2\3\u01b2\3\u01b3\3\u01b3\3")
        buf.write("\u01b3\3\u01b3\3\u01b3\5\u01b3\u2756\n\u01b3\3\u01b3\5")
        buf.write("\u01b3\u2759\n\u01b3\3\u01b3\5\u01b3\u275c\n\u01b3\3\u01b3")
        buf.write("\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b5\3\u01b5\3\u01b5")
        buf.write("\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u2769\n\u01b5\3\u01b6")
        buf.write("\3\u01b6\5\u01b6\u276d\n\u01b6\3\u01b7\3\u01b7\3\u01b7")
        buf.write("\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u2775\n\u01b7\3\u01b8")
        buf.write("\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u277b\n\u01b8\3\u01b9")
        buf.write("\3\u01b9\3\u01b9\3\u01b9\7\u01b9\u2781\n\u01b9\f\u01b9")
        buf.write("\16\u01b9\u2784\13\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9")
        buf.write("\5\u01b9\u278a\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9")
        buf.write("\5\u01b9\u2790\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9")
        buf.write("\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9")
        buf.write("\3\u01b9\3\u01b9\5\u01b9\u279f\n\u01b9\3\u01ba\3\u01ba")
        buf.write("\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u27a8")
        buf.write("\n\u01ba\3\u01ba\3\u01ba\3\u01bb\3\u01bb\5\u01bb\u27ae")
        buf.write("\n\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u27b4")
        buf.write("\n\u01bc\3\u01bc\5\u01bc\u27b7\n\u01bc\3\u01bc\3\u01bc")
        buf.write("\5\u01bc\u27bb\n\u01bc\3\u01bc\3\u01bc\3\u01bc\7\u01bc")
        buf.write("\u27c0\n\u01bc\f\u01bc\16\u01bc\u27c3\13\u01bc\3\u01bd")
        buf.write("\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u27ca\n\u01bd")
        buf.write("\3\u01bd\5\u01bd\u27cd\n\u01bd\3\u01bd\3\u01bd\3\u01bd")
        buf.write("\3\u01bd\5\u01bd\u27d3\n\u01bd\3\u01bd\3\u01bd\3\u01bd")
        buf.write("\3\u01bd\5\u01bd\u27d9\n\u01bd\5\u01bd\u27db\n\u01bd\3")
        buf.write("\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u27e1\n\u01bd\3")
        buf.write("\u01bd\5\u01bd\u27e4\n\u01bd\5\u01bd\u27e6\n\u01bd\3\u01bd")
        buf.write("\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u27ec\n\u01bd\5\u01bd")
        buf.write("\u27ee\n\u01bd\3\u01bd\3\u01bd\3\u01be\3\u01be\3\u01be")
        buf.write("\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be")
        buf.write("\5\u01be\u27fc\n\u01be\3\u01be\3\u01be\3\u01be\3\u01be")
        buf.write("\3\u01be\5\u01be\u2803\n\u01be\3\u01be\3\u01be\3\u01bf")
        buf.write("\3\u01bf\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u280c\n\u01bf")
        buf.write("\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u2813")
        buf.write("\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1")
        buf.write("\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u281f\n\u01c1")
        buf.write("\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u2826")
        buf.write("\n\u01c1\3\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c2\5\u01c2")
        buf.write("\u282d\n\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2")
        buf.write("\5\u01c2\u2834\n\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2")
        buf.write("\5\u01c2\u283a\n\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2")
        buf.write("\3\u01c2\5\u01c2\u2841\n\u01c2\3\u01c2\5\u01c2\u2844\n")
        buf.write("\u01c2\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u2849\n\u01c3\3")
        buf.write("\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u2850\n")
        buf.write("\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4")
        buf.write("\u2857\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4")
        buf.write("\3\u01c4\5\u01c4\u285f\n\u01c4\3\u01c4\3\u01c4\3\u01c4")
        buf.write("\5\u01c4\u2864\n\u01c4\3\u01c5\3\u01c5\5\u01c5\u2868\n")
        buf.write("\u01c5\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u286d\n\u01c6\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u2873\n\u01c6\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u2879\n\u01c6\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u287f\n\u01c6\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u2885\n\u01c6\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u288b\n\u01c6\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u2891\n\u01c6\3")
        buf.write("\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u2897\n\u01c6\3")
        buf.write("\u01c6\5\u01c6\u289a\n\u01c6\3\u01c7\3\u01c7\5\u01c7\u289e")
        buf.write("\n\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u28a3\n\u01c7")
        buf.write("\7\u01c7\u28a5\n\u01c7\f\u01c7\16\u01c7\u28a8\13\u01c7")
        buf.write("\3\u01c8\3\u01c8\3\u01c8\7\u01c8\u28ad\n\u01c8\f\u01c8")
        buf.write("\16\u01c8\u28b0\13\u01c8\3\u01c9\3\u01c9\5\u01c9\u28b4")
        buf.write("\n\u01c9\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cc\5\u01cc")
        buf.write("\u28bb\n\u01cc\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01cd")
        buf.write("\3\u01cd\3\u01cd\5\u01cd\u28c4\n\u01cd\5\u01cd\u28c6\n")
        buf.write("\u01cd\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\5\u01ce")
        buf.write("\u28cd\n\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf")
        buf.write("\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u28d9")
        buf.write("\n\u01cf\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u28de\n\u01d0")
        buf.write("\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0")
        buf.write("\3\u01d0\3\u01d0\5\u01d0\u28e9\n\u01d0\3\u01d0\3\u01d0")
        buf.write("\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0")
        buf.write("\u28f3\n\u01d0\5\u01d0\u28f5\n\u01d0\3\u01d0\3\u01d0\3")
        buf.write("\u01d0\3\u01d0\5\u01d0\u28fb\n\u01d0\5\u01d0\u28fd\n\u01d0")
        buf.write("\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u2902\n\u01d0\5\u01d0")
        buf.write("\u2904\n\u01d0\3\u01d0\5\u01d0\u2907\n\u01d0\3\u01d1\3")
        buf.write("\u01d1\5\u01d1\u290b\n\u01d1\3\u01d2\3\u01d2\5\u01d2\u290f")
        buf.write("\n\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\5\u01d3\u2915")
        buf.write("\n\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3")
        buf.write("\3\u01d3\5\u01d3\u291e\n\u01d3\3\u01d3\5\u01d3\u2921\n")
        buf.write("\u01d3\5\u01d3\u2923\n\u01d3\3\u01d4\5\u01d4\u2926\n\u01d4")
        buf.write("\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u292c\n\u01d4")
        buf.write("\3\u01d4\3\u01d4\5\u01d4\u2930\n\u01d4\3\u01d4\5\u01d4")
        buf.write("\u2933\n\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5")
        buf.write("\3\u01d5\3\u01d5\5\u01d5\u293c\n\u01d5\3\u01d6\3\u01d6")
        buf.write("\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u2945")
        buf.write("\n\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7")
        buf.write("\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u2951\n\u01d7")
        buf.write("\3\u01d7\5\u01d7\u2954\n\u01d7\3\u01d8\3\u01d8\5\u01d8")
        buf.write("\u2958\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8")
        buf.write("\u295e\n\u01d8\3\u01d8\5\u01d8\u2961\n\u01d8\3\u01d8\3")
        buf.write("\u01d8\5\u01d8\u2965\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3")
        buf.write("\u01d8\5\u01d8\u296b\n\u01d8\3\u01d9\3\u01d9\3\u01d9\5")
        buf.write("\u01d9\u2970\n\u01d9\3\u01da\3\u01da\3\u01da\5\u01da\u2975")
        buf.write("\n\u01da\3\u01da\3\u01da\5\u01da\u2979\n\u01da\3\u01da")
        buf.write("\3\u01da\5\u01da\u297d\n\u01da\3\u01da\3\u01da\5\u01da")
        buf.write("\u2981\n\u01da\3\u01db\3\u01db\3\u01dc\3\u01dc\3\u01dc")
        buf.write("\5\u01dc\u2988\n\u01dc\3\u01dd\3\u01dd\3\u01de\3\u01de")
        buf.write("\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de")
        buf.write("\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\5\u01de")
        buf.write("\u299b\n\u01de\3\u01df\3\u01df\3\u01e0\3\u01e0\5\u01e0")
        buf.write("\u29a1\n\u01e0\3\u01e0\2\4^\u02cc\u01e1\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e")
        buf.write("\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170")
        buf.write("\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182")
        buf.write("\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194")
        buf.write("\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6")
        buf.write("\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8")
        buf.write("\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca")
        buf.write("\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc")
        buf.write("\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee")
        buf.write("\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200")
        buf.write("\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212")
        buf.write("\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224")
        buf.write("\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236")
        buf.write("\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248")
        buf.write("\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a")
        buf.write("\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c")
        buf.write("\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e")
        buf.write("\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290")
        buf.write("\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2")
        buf.write("\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4")
        buf.write("\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6")
        buf.write("\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8")
        buf.write("\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea")
        buf.write("\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc")
        buf.write("\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e")
        buf.write("\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320")
        buf.write("\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332")
        buf.write("\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344")
        buf.write("\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356")
        buf.write("\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368")
        buf.write("\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a")
        buf.write("\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c")
        buf.write("\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e")
        buf.write("\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0")
        buf.write("\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\2\u008c\3\2")
        buf.write("\u031a\u031b\4\2\u031a\u031a\u031f\u031f\4\2\u01d7\u01d7")
        buf.write("\u02ef\u02f0\4\2\u031a\u031b\u031f\u031f\4\2\u00bb\u00bb")
        buf.write("\u02d0\u02d0\5\2\u0317\u0317\u031a\u031a\u031f\u031f\5")
        buf.write("\2}}\u012b\u012b\u016b\u016b\4\2\u00e2\u00e2\u00e5\u00e5")
        buf.write("\3\2\u031f\u0320\3\2\u0124\u0128\4\2\u01c5\u01c5\u0278")
        buf.write("\u0278\4\2\u012e\u012e\u0272\u0272\5\2UU\u012e\u012e\u0272")
        buf.write("\u0272\5\2\u00d5\u00d5\u0100\u0100\u02c3\u02c4\4\2\23")
        buf.write("\23\u02e7\u02e7\4\2\27\27\u023f\u023f\4\2\6\6\u029f\u029f")
        buf.write("\5\2\6\6\u0264\u0264\u029d\u029d\4\2\n\nII\4\2\4\4hh\4")
        buf.write("\2\u01f1\u01f1\u02d1\u02d1\4\2\u01e2\u01e2\u01eb\u01eb")
        buf.write("\4\2\u031b\u031b\u031f\u031f\4\2\u0229\u0229\u024e\u024e")
        buf.write("\4\2\b\t\u00db\u00db\5\2\u00d5\u00d5\u00f7\u00f7\u00f9")
        buf.write("\u00f9\4\2\u014d\u014d\u0150\u0150\4\2\13\13\u00ed\u00ed")
        buf.write("\3\2\u031d\u031e\4\2\4\4\u013d\u013d\4\2\u00b6\u00b6\u017b")
        buf.write("\u017b\3\2\u0106\u0107\4\2\u031b\u031b\u031f\u0320\4\2")
        buf.write("\u00ce\u00ce\u0169\u0169\4\2\u00c9\u00c9\u0146\u0146\4")
        buf.write("\2\u010d\u010d\u01e2\u01e2\4\2\u031d\u031d\u031f\u031f")
        buf.write("\4\2^^\u0092\u0092\6\2]]\u00a2\u00a2\u0132\u0132\u016c")
        buf.write("\u016c\4\2\36\36\u0201\u0201\4\2\u00a2\u00a2\u016c\u016c")
        buf.write("\4\2]]\u016c\u016c\5\2\u020c\u020c\u024e\u024e\u02eb\u02eb")
        buf.write("\4\2\u0300\u0300\u031b\u031b\5\2BB\u013f\u013f\u01f7\u01f7")
        buf.write("\4\2ZZ\u031f\u031f\4\2ZZ\u031b\u031b\4\2\u0238\u0238\u031f")
        buf.write("\u031f\5\2\u020c\u020c\u0229\u0229\u024e\u024e\7\2\u0187")
        buf.write("\u0189\u01dc\u01dc\u01de\u01de\u0299\u029b\u02f5\u02f6")
        buf.write("\4\2\u0086\u0086\u008c\u008c\5\2\u0217\u0217\u023e\u023e")
        buf.write("\u024f\u024f\5\2\r\r\u0159\u0159\u0221\u0221\4\2\u00d5")
        buf.write("\u00d5\u00f3\u00f3\3\2\u0102\u0103\5\2]]\u00a2\u00a2\u016c")
        buf.write("\u016c\4\2\u0086\u0086\u018b\u018b\4\2\u027b\u027c\u02a0")
        buf.write("\u02a0\4\2\u00f5\u00f5\u02bc\u02bc\4\2\6\6\u009e\u009e")
        buf.write("\5\2\u01ee\u01ee\u02be\u02be\u0307\u0307\5\2\u0156\u0156")
        buf.write("\u019b\u019b\u01e2\u01e2\5\2\u01d0\u01d0\u0219\u0219\u0257")
        buf.write("\u0257\4\2\u020f\u020f\u0238\u0238\4\2\6\6\u00a6\u00a7")
        buf.write("\5\2\u00ab\u00ab\u00d0\u00d0\u00de\u00de\5\2\u0113\u0113")
        buf.write("\u0153\u0153\u01e4\u01e4\4\2ll\u01e4\u01e4\5\2\6\6\u017f")
        buf.write("\u017f\u0282\u0282\4\2\u008d\u008d\u00e2\u00e2\5\2\u01e9")
        buf.write("\u01e9\u0273\u0273\u0276\u0276\4\2\u029d\u029d\u029f\u029f")
        buf.write("\5\2\u025d\u025d\u02b4\u02b4\u02d5\u02d5\5\2\u0190\u0190")
        buf.write("\u01e4\u01e4\u0207\u0207\4\2\u0118\u0118\u02e5\u02e5\4")
        buf.write("\2\u0207\u0207\u02d4\u02d4\5\2\u008d\u008d\u01ad\u01ad")
        buf.write("\u02d4\u02d4\5\2\u00d5\u00d5\u01b5\u01b5\u02f3\u02f3\4")
        buf.write("\2\u0257\u0257\u02c6\u02c6\4\2\u0082\u0082\u01fd\u01fd")
        buf.write("\5\2bb\u0158\u0158\u016e\u016e\4\299\u00da\u00da\4\2\u00a0")
        buf.write("\u00a0\u00d3\u00d3\4\2\u00d7\u00d7\u0141\u0141\4\2\u00d2")
        buf.write("\u00d2\u0208\u0208\4\2\u00d9\u00d9\u01b5\u01b5\4\2CC\u0152")
        buf.write("\u0152\4\2\u00d6\u00d6\u011e\u011e\4\2\u00b9\u00b9\u00d8")
        buf.write("\u00d8\4\2\u0187\u0189\u02f6\u02f6\4\2\u0171\u0171\u023c")
        buf.write("\u023c\3\2\u027b\u027c\4\2\u0082\u0082\u0320\u0320\4\2")
        buf.write("\u01d3\u01d3\u01ee\u01ee\4\2\u01f5\u01f5\u02db\u02db\4")
        buf.write("\2\u0156\u0156\u0175\u0175\3\2\u0160\u0161\6\2\u01ae\u01ae")
        buf.write("\u027d\u027d\u02ca\u02ca\u031f\u031f\4\2\u01be\u01be\u01e6")
        buf.write("\u01e6\4\2\20\20;;\4\2\u0223\u0223\u02cb\u02cb\4\2\u0209")
        buf.write("\u0209\u02c0\u02c0\6\2\u01e7\u01e7\u01fc\u01fc\u022e\u022e")
        buf.write("\u02dc\u02dc\5\2\u0279\u0279\u029d\u029d\u02c1\u02c1\4")
        buf.write("\2\u0181\u0181\u02a6\u02a6\3\2\u033a\u033c\5\2\u032f\u032f")
        buf.write("\u033d\u033e\u0340\u0342\3\2\u033d\u033e\5\2\6\6\r\r\u0143")
        buf.write("\u0143\4\2\6\6cc\3\2\u0321\u0322\4\2\u02b9\u02b9\u02bc")
        buf.write("\u02bc\4\2\u0202\u0202\u0263\u0263\4\2\3\3\u0312\u0312")
        buf.write("\4\2\u019b\u019b\u0283\u0283\5\2\u01a7\u01a7\u02b7\u02b7")
        buf.write("\u02fb\u02fb\4\2\21\21__\4\2\u00ee\u00ee\u0215\u0215\5")
        buf.write("\2\u00c9\u00c9\u01bc\u01bc\u0215\u0215\5\2\u00c9\u00c9")
        buf.write("\u0215\u0215\u023d\u023d\4\2\u00df\u00df\u031a\u031b\5")
        buf.write("\2\u008d\u008d\u00b1\u00b1\u011f\u011f\6\2\u00c9\u00c9")
        buf.write("\u0215\u0215\u023d\u023d\u02a7\u02a7\4\2\u031a\u031a\u031c")
        buf.write("\u031c\5\2\u01da\u01da\u0298\u0298\u02ba\u02ba\b\2\u01a3")
        buf.write("\u01a3\u0242\u0242\u0252\u0252\u02df\u02e0\u02e4\u02e4")
        buf.write("\u0305\u0306\3\2\u01c1\u01c2\4\2\u0203\u0203\u0231\u0231")
        buf.write("\4\2\u022f\u022f\u0232\u0232\4\2\u0297\u0297\u02bc\u02bc")
        buf.write("\5\2\u008d\u008d\u00e2\u00e2\u029d\u029d\4\2\65\65\u00d4")
        buf.write("\u00d4\3\2\u0110\u0111\4\2\u0242\u0242\u031b\u031b\4\2")
        buf.write("\u031b\u031b\u0321\u0321\37\2((SSss\u0083\u0084\u0087")
        buf.write("\u0087\u00a0\u00a0\u00ac\u00ac\u00bd\u00be\u00e3\u00e3")
        buf.write("\u00f1\u00f1\u0105\u0105\u0107\u0107\u0109\u0109\u011a")
        buf.write("\u011b\u0122\u0122\u0129\u0129\u0137\u0137\u0140\u0140")
        buf.write("\u0144\u0144\u014b\u014b\u014d\u014d\u0159\u0159\u0181")
        buf.write("\u01e7\u01e9\u021e\u0220\u0227\u0229\u030a\u030c\u030e")
        buf.write("\u0310\u0310\u031c\u031c\3\2\u0327\u032e\7\2\u020c\u020c")
        buf.write("\u0229\u0229\u024e\u024e\u02eb\u02eb\u033c\u033c\2\u3075")
        buf.write("\2\u03c3\3\2\2\2\4\u03d9\3\2\2\2\6\u03df\3\2\2\2\b\u03ea")
        buf.write("\3\2\2\2\n\u03f1\3\2\2\2\f\u0492\3\2\2\2\16\u0499\3\2")
        buf.write("\2\2\20\u04a7\3\2\2\2\22\u04a9\3\2\2\2\24\u04b4\3\2\2")
        buf.write("\2\26\u04b8\3\2\2\2\30\u04c6\3\2\2\2\32\u04c8\3\2\2\2")
        buf.write("\34\u04cf\3\2\2\2\36\u04d9\3\2\2\2 \u04e5\3\2\2\2\"\u04e7")
        buf.write("\3\2\2\2$\u04e9\3\2\2\2&\u04eb\3\2\2\2(\u0505\3\2\2\2")
        buf.write("*\u0516\3\2\2\2,\u0523\3\2\2\2.\u0552\3\2\2\2\60\u0554")
        buf.write("\3\2\2\2\62\u0563\3\2\2\2\64\u0565\3\2\2\2\66\u0582\3")
        buf.write("\2\2\28\u0597\3\2\2\2:\u05a4\3\2\2\2<\u05a9\3\2\2\2>\u05ad")
        buf.write("\3\2\2\2@\u05b1\3\2\2\2B\u05bc\3\2\2\2D\u05c1\3\2\2\2")
        buf.write("F\u05c3\3\2\2\2H\u05c8\3\2\2\2J\u05ca\3\2\2\2L\u05cc\3")
        buf.write("\2\2\2N\u05cf\3\2\2\2P\u05d3\3\2\2\2R\u05d9\3\2\2\2T\u05db")
        buf.write("\3\2\2\2V\u05de\3\2\2\2X\u05e0\3\2\2\2Z\u05e3\3\2\2\2")
        buf.write("\\\u05e8\3\2\2\2^\u05f3\3\2\2\2`\u05fc\3\2\2\2b\u0600")
        buf.write("\3\2\2\2d\u0602\3\2\2\2f\u0608\3\2\2\2h\u060a\3\2\2\2")
        buf.write("j\u060c\3\2\2\2l\u060f\3\2\2\2n\u0617\3\2\2\2p\u0619\3")
        buf.write("\2\2\2r\u061b\3\2\2\2t\u0631\3\2\2\2v\u0644\3\2\2\2x\u064c")
        buf.write("\3\2\2\2z\u0650\3\2\2\2|\u0658\3\2\2\2~\u0667\3\2\2\2")
        buf.write("\u0080\u0669\3\2\2\2\u0082\u0695\3\2\2\2\u0084\u069e\3")
        buf.write("\2\2\2\u0086\u06ab\3\2\2\2\u0088\u06ad\3\2\2\2\u008a\u06af")
        buf.write("\3\2\2\2\u008c\u06b2\3\2\2\2\u008e\u06b6\3\2\2\2\u0090")
        buf.write("\u06c0\3\2\2\2\u0092\u06ca\3\2\2\2\u0094\u06f6\3\2\2\2")
        buf.write("\u0096\u070d\3\2\2\2\u0098\u070f\3\2\2\2\u009a\u0711\3")
        buf.write("\2\2\2\u009c\u0713\3\2\2\2\u009e\u0718\3\2\2\2\u00a0\u071b")
        buf.write("\3\2\2\2\u00a2\u087e\3\2\2\2\u00a4\u0880\3\2\2\2\u00a6")
        buf.write("\u08b6\3\2\2\2\u00a8\u08bb\3\2\2\2\u00aa\u08e7\3\2\2\2")
        buf.write("\u00ac\u08fe\3\2\2\2\u00ae\u091c\3\2\2\2\u00b0\u0920\3")
        buf.write("\2\2\2\u00b2\u0926\3\2\2\2\u00b4\u092c\3\2\2\2\u00b6\u0930")
        buf.write("\3\2\2\2\u00b8\u0934\3\2\2\2\u00ba\u0939\3\2\2\2\u00bc")
        buf.write("\u0947\3\2\2\2\u00be\u094d\3\2\2\2\u00c0\u0953\3\2\2\2")
        buf.write("\u00c2\u0963\3\2\2\2\u00c4\u0967\3\2\2\2\u00c6\u096d\3")
        buf.write("\2\2\2\u00c8\u0973\3\2\2\2\u00ca\u097b\3\2\2\2\u00cc\u0981")
        buf.write("\3\2\2\2\u00ce\u0990\3\2\2\2\u00d0\u09a2\3\2\2\2\u00d2")
        buf.write("\u09a9\3\2\2\2\u00d4\u09ae\3\2\2\2\u00d6\u09b9\3\2\2\2")
        buf.write("\u00d8\u09be\3\2\2\2\u00da\u09c2\3\2\2\2\u00dc\u09c6\3")
        buf.write("\2\2\2\u00de\u09cb\3\2\2\2\u00e0\u09d0\3\2\2\2\u00e2\u09d5")
        buf.write("\3\2\2\2\u00e4\u09e3\3\2\2\2\u00e6\u09e9\3\2\2\2\u00e8")
        buf.write("\u09ee\3\2\2\2\u00ea\u09f6\3\2\2\2\u00ec\u09fa\3\2\2\2")
        buf.write("\u00ee\u0a0b\3\2\2\2\u00f0\u0a13\3\2\2\2\u00f2\u0a19\3")
        buf.write("\2\2\2\u00f4\u0a27\3\2\2\2\u00f6\u0a3d\3\2\2\2\u00f8\u0a42")
        buf.write("\3\2\2\2\u00fa\u0a48\3\2\2\2\u00fc\u0a4d\3\2\2\2\u00fe")
        buf.write("\u0a51\3\2\2\2\u0100\u0a6d\3\2\2\2\u0102\u0a78\3\2\2\2")
        buf.write("\u0104\u0a81\3\2\2\2\u0106\u0a8e\3\2\2\2\u0108\u0a96\3")
        buf.write("\2\2\2\u010a\u0a9b\3\2\2\2\u010c\u0aa6\3\2\2\2\u010e\u0ac4")
        buf.write("\3\2\2\2\u0110\u0ae2\3\2\2\2\u0112\u0af0\3\2\2\2\u0114")
        buf.write("\u0b08\3\2\2\2\u0116\u0b18\3\2\2\2\u0118\u0b25\3\2\2\2")
        buf.write("\u011a\u0b38\3\2\2\2\u011c\u0b45\3\2\2\2\u011e\u0b4e\3")
        buf.write("\2\2\2\u0120\u0b6c\3\2\2\2\u0122\u0c5f\3\2\2\2\u0124\u0c68")
        buf.write("\3\2\2\2\u0126\u0ca2\3\2\2\2\u0128\u0cd3\3\2\2\2\u012a")
        buf.write("\u0cd5\3\2\2\2\u012c\u0cfe\3\2\2\2\u012e\u0d30\3\2\2\2")
        buf.write("\u0130\u0d76\3\2\2\2\u0132\u0db9\3\2\2\2\u0134\u0dc9\3")
        buf.write("\2\2\2\u0136\u0de5\3\2\2\2\u0138\u0df8\3\2\2\2\u013a\u0e0d")
        buf.write("\3\2\2\2\u013c\u0e55\3\2\2\2\u013e\u0eb4\3\2\2\2\u0140")
        buf.write("\u0eca\3\2\2\2\u0142\u0ed6\3\2\2\2\u0144\u0ef2\3\2\2\2")
        buf.write("\u0146\u0f07\3\2\2\2\u0148\u0f21\3\2\2\2\u014a\u0f2a\3")
        buf.write("\2\2\2\u014c\u0f4a\3\2\2\2\u014e\u0f54\3\2\2\2\u0150\u0f64")
        buf.write("\3\2\2\2\u0152\u0f70\3\2\2\2\u0154\u0f79\3\2\2\2\u0156")
        buf.write("\u0f8a\3\2\2\2\u0158\u0fa2\3\2\2\2\u015a\u100e\3\2\2\2")
        buf.write("\u015c\u1028\3\2\2\2\u015e\u1034\3\2\2\2\u0160\u103b\3")
        buf.write("\2\2\2\u0162\u1067\3\2\2\2\u0164\u1072\3\2\2\2\u0166\u1086")
        buf.write("\3\2\2\2\u0168\u10b0\3\2\2\2\u016a\u10b7\3\2\2\2\u016c")
        buf.write("\u10c5\3\2\2\2\u016e\u10d7\3\2\2\2\u0170\u111d\3\2\2\2")
        buf.write("\u0172\u1148\3\2\2\2\u0174\u117e\3\2\2\2\u0176\u1207\3")
        buf.write("\2\2\2\u0178\u1296\3\2\2\2\u017a\u12b3\3\2\2\2\u017c\u12d0")
        buf.write("\3\2\2\2\u017e\u133f\3\2\2\2\u0180\u134c\3\2\2\2\u0182")
        buf.write("\u1354\3\2\2\2\u0184\u135c\3\2\2\2\u0186\u1372\3\2\2\2")
        buf.write("\u0188\u1390\3\2\2\2\u018a\u13ab\3\2\2\2\u018c\u13bf\3")
        buf.write("\2\2\2\u018e\u13ef\3\2\2\2\u0190\u1414\3\2\2\2\u0192\u14e0")
        buf.write("\3\2\2\2\u0194\u14fe\3\2\2\2\u0196\u1500\3\2\2\2\u0198")
        buf.write("\u1520\3\2\2\2\u019a\u154f\3\2\2\2\u019c\u1583\3\2\2\2")
        buf.write("\u019e\u1593\3\2\2\2\u01a0\u15a1\3\2\2\2\u01a2\u15ea\3")
        buf.write("\2\2\2\u01a4\u1609\3\2\2\2\u01a6\u160b\3\2\2\2\u01a8\u160f")
        buf.write("\3\2\2\2\u01aa\u162d\3\2\2\2\u01ac\u162f\3\2\2\2\u01ae")
        buf.write("\u1644\3\2\2\2\u01b0\u169d\3\2\2\2\u01b2\u169f\3\2\2\2")
        buf.write("\u01b4\u16ac\3\2\2\2\u01b6\u16e4\3\2\2\2\u01b8\u16e7\3")
        buf.write("\2\2\2\u01ba\u1715\3\2\2\2\u01bc\u1718\3\2\2\2\u01be\u1739")
        buf.write("\3\2\2\2\u01c0\u174a\3\2\2\2\u01c2\u174d\3\2\2\2\u01c4")
        buf.write("\u1788\3\2\2\2\u01c6\u17a0\3\2\2\2\u01c8\u17b0\3\2\2\2")
        buf.write("\u01ca\u17b2\3\2\2\2\u01cc\u17e3\3\2\2\2\u01ce\u180c\3")
        buf.write("\2\2\2\u01d0\u1838\3\2\2\2\u01d2\u1840\3\2\2\2\u01d4\u186d")
        buf.write("\3\2\2\2\u01d6\u186f\3\2\2\2\u01d8\u1877\3\2\2\2\u01da")
        buf.write("\u1898\3\2\2\2\u01dc\u18a0\3\2\2\2\u01de\u18bb\3\2\2\2")
        buf.write("\u01e0\u18d3\3\2\2\2\u01e2\u18f3\3\2\2\2\u01e4\u1911\3")
        buf.write("\2\2\2\u01e6\u1928\3\2\2\2\u01e8\u1936\3\2\2\2\u01ea\u1938")
        buf.write("\3\2\2\2\u01ec\u1957\3\2\2\2\u01ee\u1965\3\2\2\2\u01f0")
        buf.write("\u1985\3\2\2\2\u01f2\u199b\3\2\2\2\u01f4\u19b9\3\2\2\2")
        buf.write("\u01f6\u19bb\3\2\2\2\u01f8\u19ee\3\2\2\2\u01fa\u1a1c\3")
        buf.write("\2\2\2\u01fc\u1a2f\3\2\2\2\u01fe\u1a31\3\2\2\2\u0200\u1a4a")
        buf.write("\3\2\2\2\u0202\u1a4c\3\2\2\2\u0204\u1a54\3\2\2\2\u0206")
        buf.write("\u1a56\3\2\2\2\u0208\u1ae2\3\2\2\2\u020a\u1aea\3\2\2\2")
        buf.write("\u020c\u1aec\3\2\2\2\u020e\u1aee\3\2\2\2\u0210\u1af0\3")
        buf.write("\2\2\2\u0212\u1afe\3\2\2\2\u0214\u1b04\3\2\2\2\u0216\u1b06")
        buf.write("\3\2\2\2\u0218\u1b08\3\2\2\2\u021a\u1b0d\3\2\2\2\u021c")
        buf.write("\u1b0f\3\2\2\2\u021e\u1b13\3\2\2\2\u0220\u1b1f\3\2\2\2")
        buf.write("\u0222\u1b21\3\2\2\2\u0224\u1b24\3\2\2\2\u0226\u1b27\3")
        buf.write("\2\2\2\u0228\u1b29\3\2\2\2\u022a\u1b2b\3\2\2\2\u022c\u1b2d")
        buf.write("\3\2\2\2\u022e\u1b4a\3\2\2\2\u0230\u1b4c\3\2\2\2\u0232")
        buf.write("\u1b57\3\2\2\2\u0234\u1b5a\3\2\2\2\u0236\u1b63\3\2\2\2")
        buf.write("\u0238\u1b6b\3\2\2\2\u023a\u1b72\3\2\2\2\u023c\u1b89\3")
        buf.write("\2\2\2\u023e\u1b8b\3\2\2\2\u0240\u1b96\3\2\2\2\u0242\u1b98")
        buf.write("\3\2\2\2\u0244\u1bb3\3\2\2\2\u0246\u1bba\3\2\2\2\u0248")
        buf.write("\u1bc0\3\2\2\2\u024a\u1bd3\3\2\2\2\u024c\u1bd5\3\2\2\2")
        buf.write("\u024e\u1be6\3\2\2\2\u0250\u1bfd\3\2\2\2\u0252\u1c0e\3")
        buf.write("\2\2\2\u0254\u1c1f\3\2\2\2\u0256\u1c29\3\2\2\2\u0258\u1c3a")
        buf.write("\3\2\2\2\u025a\u1c4b\3\2\2\2\u025c\u1c55\3\2\2\2\u025e")
        buf.write("\u1c57\3\2\2\2\u0260\u1c5e\3\2\2\2\u0262\u1c9a\3\2\2\2")
        buf.write("\u0264\u1cb9\3\2\2\2\u0266\u1cbb\3\2\2\2\u0268\u1db5\3")
        buf.write("\2\2\2\u026a\u1ea3\3\2\2\2\u026c\u1ecb\3\2\2\2\u026e\u1ed8")
        buf.write("\3\2\2\2\u0270\u1ee6\3\2\2\2\u0272\u1f13\3\2\2\2\u0274")
        buf.write("\u1f17\3\2\2\2\u0276\u1f24\3\2\2\2\u0278\u1f61\3\2\2\2")
        buf.write("\u027a\u1f63\3\2\2\2\u027c\u1f88\3\2\2\2\u027e\u1f8a\3")
        buf.write("\2\2\2\u0280\u1f9a\3\2\2\2\u0282\u1fa7\3\2\2\2\u0284\u1fbb")
        buf.write("\3\2\2\2\u0286\u1fc8\3\2\2\2\u0288\u1fed\3\2\2\2\u028a")
        buf.write("\u1ffe\3\2\2\2\u028c\u2000\3\2\2\2\u028e\u200d\3\2\2\2")
        buf.write("\u0290\u2026\3\2\2\2\u0292\u2042\3\2\2\2\u0294\u206b\3")
        buf.write("\2\2\2\u0296\u20be\3\2\2\2\u0298\u20c0\3\2\2\2\u029a\u20c4")
        buf.write("\3\2\2\2\u029c\u20c9\3\2\2\2\u029e\u20cd\3\2\2\2\u02a0")
        buf.write("\u20dc\3\2\2\2\u02a2\u20e1\3\2\2\2\u02a4\u20e5\3\2\2\2")
        buf.write("\u02a6\u20ee\3\2\2\2\u02a8\u20f3\3\2\2\2\u02aa\u20fb\3")
        buf.write("\2\2\2\u02ac\u20ff\3\2\2\2\u02ae\u210c\3\2\2\2\u02b0\u210e")
        buf.write("\3\2\2\2\u02b2\u213b\3\2\2\2\u02b4\u2145\3\2\2\2\u02b6")
        buf.write("\u2170\3\2\2\2\u02b8\u21b4\3\2\2\2\u02ba\u21bf\3\2\2\2")
        buf.write("\u02bc\u21ca\3\2\2\2\u02be\u21d6\3\2\2\2\u02c0\u21dd\3")
        buf.write("\2\2\2\u02c2\u2206\3\2\2\2\u02c4\u2211\3\2\2\2\u02c6\u2213")
        buf.write("\3\2\2\2\u02c8\u2262\3\2\2\2\u02ca\u2266\3\2\2\2\u02cc")
        buf.write("\u2270\3\2\2\2\u02ce\u228c\3\2\2\2\u02d0\u22a7\3\2\2\2")
        buf.write("\u02d2\u22ad\3\2\2\2\u02d4\u22b7\3\2\2\2\u02d6\u22c1\3")
        buf.write("\2\2\2\u02d8\u22c3\3\2\2\2\u02da\u22df\3\2\2\2\u02dc\u22e1")
        buf.write("\3\2\2\2\u02de\u22fd\3\2\2\2\u02e0\u22ff\3\2\2\2\u02e2")
        buf.write("\u2307\3\2\2\2\u02e4\u230f\3\2\2\2\u02e6\u2318\3\2\2\2")
        buf.write("\u02e8\u2353\3\2\2\2\u02ea\u235a\3\2\2\2\u02ec\u2368\3")
        buf.write("\2\2\2\u02ee\u2371\3\2\2\2\u02f0\u2398\3\2\2\2\u02f2\u23a8")
        buf.write("\3\2\2\2\u02f4\u23af\3\2\2\2\u02f6\u23b1\3\2\2\2\u02f8")
        buf.write("\u2420\3\2\2\2\u02fa\u2422\3\2\2\2\u02fc\u2425\3\2\2\2")
        buf.write("\u02fe\u2429\3\2\2\2\u0300\u242b\3\2\2\2\u0302\u2464\3")
        buf.write("\2\2\2\u0304\u2466\3\2\2\2\u0306\u246f\3\2\2\2\u0308\u2477")
        buf.write("\3\2\2\2\u030a\u2487\3\2\2\2\u030c\u248c\3\2\2\2\u030e")
        buf.write("\u24a9\3\2\2\2\u0310\u24b3\3\2\2\2\u0312\u24b9\3\2\2\2")
        buf.write("\u0314\u24bb\3\2\2\2\u0316\u24c8\3\2\2\2\u0318\u24ca\3")
        buf.write("\2\2\2\u031a\u24ff\3\2\2\2\u031c\u2501\3\2\2\2\u031e\u2512")
        buf.write("\3\2\2\2\u0320\u251a\3\2\2\2\u0322\u251f\3\2\2\2\u0324")
        buf.write("\u2549\3\2\2\2\u0326\u254b\3\2\2\2\u0328\u2553\3\2\2\2")
        buf.write("\u032a\u255d\3\2\2\2\u032c\u2565\3\2\2\2\u032e\u2583\3")
        buf.write("\2\2\2\u0330\u2585\3\2\2\2\u0332\u2593\3\2\2\2\u0334\u2610")
        buf.write("\3\2\2\2\u0336\u2617\3\2\2\2\u0338\u2644\3\2\2\2\u033a")
        buf.write("\u265c\3\2\2\2\u033c\u265e\3\2\2\2\u033e\u2665\3\2\2\2")
        buf.write("\u0340\u266c\3\2\2\2\u0342\u2673\3\2\2\2\u0344\u2678\3")
        buf.write("\2\2\2\u0346\u267e\3\2\2\2\u0348\u2683\3\2\2\2\u034a\u2687")
        buf.write("\3\2\2\2\u034c\u268c\3\2\2\2\u034e\u269b\3\2\2\2\u0350")
        buf.write("\u26aa\3\2\2\2\u0352\u26e0\3\2\2\2\u0354\u26e2\3\2\2\2")
        buf.write("\u0356\u26ef\3\2\2\2\u0358\u26f1\3\2\2\2\u035a\u26ff\3")
        buf.write("\2\2\2\u035c\u2711\3\2\2\2\u035e\u2733\3\2\2\2\u0360\u2749")
        buf.write("\3\2\2\2\u0362\u274c\3\2\2\2\u0364\u2750\3\2\2\2\u0366")
        buf.write("\u275f\3\2\2\2\u0368\u2768\3\2\2\2\u036a\u276c\3\2\2\2")
        buf.write("\u036c\u2774\3\2\2\2\u036e\u277a\3\2\2\2\u0370\u279e\3")
        buf.write("\2\2\2\u0372\u27a0\3\2\2\2\u0374\u27ad\3\2\2\2\u0376\u27af")
        buf.write("\3\2\2\2\u0378\u27c4\3\2\2\2\u037a\u2802\3\2\2\2\u037c")
        buf.write("\u280b\3\2\2\2\u037e\u2812\3\2\2\2\u0380\u2825\3\2\2\2")
        buf.write("\u0382\u2843\3\2\2\2\u0384\u2848\3\2\2\2\u0386\u2863\3")
        buf.write("\2\2\2\u0388\u2867\3\2\2\2\u038a\u2899\3\2\2\2\u038c\u289b")
        buf.write("\3\2\2\2\u038e\u28a9\3\2\2\2\u0390\u28b3\3\2\2\2\u0392")
        buf.write("\u28b5\3\2\2\2\u0394\u28b7\3\2\2\2\u0396\u28ba\3\2\2\2")
        buf.write("\u0398\u28c5\3\2\2\2\u039a\u28cc\3\2\2\2\u039c\u28ce\3")
        buf.write("\2\2\2\u039e\u28da\3\2\2\2\u03a0\u290a\3\2\2\2\u03a2\u290e")
        buf.write("\3\2\2\2\u03a4\u2910\3\2\2\2\u03a6\u2925\3\2\2\2\u03a8")
        buf.write("\u2934\3\2\2\2\u03aa\u2944\3\2\2\2\u03ac\u2946\3\2\2\2")
        buf.write("\u03ae\u296a\3\2\2\2\u03b0\u296f\3\2\2\2\u03b2\u2980\3")
        buf.write("\2\2\2\u03b4\u2982\3\2\2\2\u03b6\u2987\3\2\2\2\u03b8\u2989")
        buf.write("\3\2\2\2\u03ba\u299a\3\2\2\2\u03bc\u299c\3\2\2\2\u03be")
        buf.write("\u299e\3\2\2\2\u03c0\u03c2\5\4\3\2\u03c1\u03c0\3\2\2\2")
        buf.write("\u03c2\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c3\u03c4\3")
        buf.write("\2\2\2\u03c4\u03c6\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c6\u03c7")
        buf.write("\7\2\2\3\u03c7\3\3\2\2\2\u03c8\u03cc\5\u0272\u013a\2\u03c9")
        buf.write("\u03cb\5\u0298\u014d\2\u03ca\u03c9\3\2\2\2\u03cb\u03ce")
        buf.write("\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd")
        buf.write("\u03da\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d1\5\u0272")
        buf.write("\u013a\2\u03d0\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1")
        buf.write("\u03d2\3\2\2\2\u03d2\u03d6\5\6\4\2\u03d3\u03d5\5\u0298")
        buf.write("\u014d\2\u03d4\u03d3\3\2\2\2\u03d5\u03d8\3\2\2\2\u03d6")
        buf.write("\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03da\3\2\2\2")
        buf.write("\u03d8\u03d6\3\2\2\2\u03d9\u03c8\3\2\2\2\u03d9\u03d0\3")
        buf.write("\2\2\2\u03da\5\3\2\2\2\u03db\u03dd\5\b\5\2\u03dc\u03de")
        buf.write("\7\u0338\2\2\u03dd\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de")
        buf.write("\u03e0\3\2\2\2\u03df\u03db\3\2\2\2\u03e0\u03e1\3\2\2\2")
        buf.write("\u03e1\u03df\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\7\3\2\2")
        buf.write("\2\u03e3\u03eb\5\n\6\2\u03e4\u03eb\5\f\7\2\u03e5\u03eb")
        buf.write("\5\20\t\2\u03e6\u03eb\5\u029e\u0150\2\u03e7\u03eb\5\60")
        buf.write("\31\2\u03e8\u03eb\5\62\32\2\u03e9\u03eb\5\16\b\2\u03ea")
        buf.write("\u03e3\3\2\2\2\u03ea\u03e4\3\2\2\2\u03ea\u03e5\3\2\2\2")
        buf.write("\u03ea\u03e6\3\2\2\2\u03ea\u03e7\3\2\2\2\u03ea\u03e8\3")
        buf.write("\2\2\2\u03ea\u03e9\3\2\2\2\u03eb\t\3\2\2\2\u03ec\u03f2")
        buf.write("\5\u01ae\u00d8\2\u03ed\u03f2\5\u01b4\u00db\2\u03ee\u03f2")
        buf.write("\5\u01b8\u00dd\2\u03ef\u03f2\5\u01be\u00e0\2\u03f0\u03f2")
        buf.write("\5\u01c2\u00e2\2\u03f1\u03ec\3\2\2\2\u03f1\u03ed\3\2\2")
        buf.write("\2\u03f1\u03ee\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f1\u03f0")
        buf.write("\3\2\2\2\u03f2\13\3\2\2\2\u03f3\u0493\5\64\33\2\u03f4")
        buf.write("\u0493\5<\37\2\u03f5\u0493\5v<\2\u03f6\u0493\5\u0084C")
        buf.write("\2\u03f7\u0493\5\u0090I\2\u03f8\u0493\5\u0092J\2\u03f9")
        buf.write("\u0493\5\u008eH\2\u03fa\u0493\5\u009eP\2\u03fb\u0493\5")
        buf.write("\u00a8U\2\u03fc\u0493\5\u00aaV\2\u03fd\u0493\5\u0116\u008c")
        buf.write("\2\u03fe\u0493\5\u011a\u008e\2\u03ff\u0493\5\u01f8\u00fd")
        buf.write("\2\u0400\u0493\5\u015c\u00af\2\u0401\u0493\5\u0206\u0104")
        buf.write("\2\u0402\u0493\5\u0120\u0091\2\u0403\u0493\5\u0128\u0095")
        buf.write("\2\u0404\u0493\5\u012a\u0096\2\u0405\u0493\5\u012e\u0098")
        buf.write("\2\u0406\u0493\5\u0132\u009a\2\u0407\u0493\5\u0136\u009c")
        buf.write("\2\u0408\u0493\5\u013e\u00a0\2\u0409\u0493\5\u0142\u00a2")
        buf.write("\2\u040a\u0493\5\u013a\u009e\2\u040b\u0493\5\u014a\u00a6")
        buf.write("\2\u040c\u0493\5\u0146\u00a4\2\u040d\u0493\5\u014e\u00a8")
        buf.write("\2\u040e\u0493\5\u0150\u00a9\2\u040f\u0493\5\u0152\u00aa")
        buf.write("\2\u0410\u0493\5\u0154\u00ab\2\u0411\u0493\5\u015a\u00ae")
        buf.write("\2\u0412\u0493\5\u016a\u00b6\2\u0413\u0493\5\u0164\u00b3")
        buf.write("\2\u0414\u0493\5\u0170\u00b9\2\u0415\u0493\5\u0174\u00bb")
        buf.write("\2\u0416\u0493\5\u0178\u00bd\2\u0417\u0493\5\u017c\u00bf")
        buf.write("\2\u0418\u0493\5\u017e\u00c0\2\u0419\u0493\5\u0182\u00c2")
        buf.write("\2\u041a\u0493\5\u0184\u00c3\2\u041b\u0493\5\u0188\u00c5")
        buf.write("\2\u041c\u0493\5\u018a\u00c6\2\u041d\u0493\5\u01f6\u00fc")
        buf.write("\2\u041e\u0493\5\u0190\u00c9\2\u041f\u0493\5\u0196\u00cc")
        buf.write("\2\u0420\u0493\5\u0198\u00cd\2\u0421\u0493\5\66\34\2\u0422")
        buf.write("\u0493\5r:\2\u0423\u0493\5\u0080A\2\u0424\u0493\5\u00ac")
        buf.write("W\2\u0425\u0493\5\u0114\u008b\2\u0426\u0493\5\u0118\u008d")
        buf.write("\2\u0427\u0493\5\u011c\u008f\2\u0428\u0493\5\u01ca\u00e6")
        buf.write("\2\u0429\u0493\5\u015e\u00b0\2\u042a\u0493\5\u011e\u0090")
        buf.write("\2\u042b\u0493\5\u012c\u0097\2\u042c\u0493\5\u0130\u0099")
        buf.write("\2\u042d\u0493\5\u0134\u009b\2\u042e\u0493\5\u0138\u009d")
        buf.write("\2\u042f\u0493\5\u01cc\u00e7\2\u0430\u0493\5\u0140\u00a1")
        buf.write("\2\u0431\u0493\5\u0144\u00a3\2\u0432\u0493\5\u013c\u009f")
        buf.write("\2\u0433\u0493\5\u014c\u00a7\2\u0434\u0493\5\u0148\u00a5")
        buf.write("\2\u0435\u0493\5\u00a4S\2\u0436\u0493\5\u01dc\u00ef\2")
        buf.write("\u0437\u0493\5\u01ce\u00e8\2\u0438\u0493\5\u01d0\u00e9")
        buf.write("\2\u0439\u0493\5\u0156\u00ac\2\u043a\u0493\5\u0158\u00ad")
        buf.write("\2\u043b\u0493\5\u0160\u00b1\2\u043c\u0493\5\u0162\u00b2")
        buf.write("\2\u043d\u0493\5\u0166\u00b4\2\u043e\u0493\5\u0168\u00b5")
        buf.write("\2\u043f\u0493\5\u016c\u00b7\2\u0440\u0493\5\u016e\u00b8")
        buf.write("\2\u0441\u0493\5\u0172\u00ba\2\u0442\u0493\5\u0176\u00bc")
        buf.write("\2\u0443\u0493\5\u017a\u00be\2\u0444\u0493\5\u0180\u00c1")
        buf.write("\2\u0445\u0493\5\u0186\u00c4\2\u0446\u0493\5\u01ea\u00f6")
        buf.write("\2\u0447\u0493\5\u018c\u00c7\2\u0448\u0493\5\u018e\u00c8")
        buf.write("\2\u0449\u0493\5\u01ee\u00f8\2\u044a\u0493\5\u0258\u012d")
        buf.write("\2\u044b\u0493\5\u0192\u00ca\2\u044c\u0493\5\u0194\u00cb")
        buf.write("\2\u044d\u0493\5\u01f2\u00fa\2\u044e\u0493\5\u019a\u00ce")
        buf.write("\2\u044f\u0493\5\u019c\u00cf\2\u0450\u0493\58\35\2\u0451")
        buf.write("\u0493\5:\36\2\u0452\u0493\5t;\2\u0453\u0493\5\u0082B")
        buf.write("\2\u0454\u0493\5\u009cO\2\u0455\u0493\5\u00a6T\2\u0456")
        buf.write("\u0493\5\u00aeX\2\u0457\u0493\5\u00b0Y\2\u0458\u0493\5")
        buf.write("\u00b2Z\2\u0459\u0493\5\u00b4[\2\u045a\u0493\5\u00b6\\")
        buf.write("\2\u045b\u0493\5\u00b8]\2\u045c\u0493\5\u00ba^\2\u045d")
        buf.write("\u0493\5\u00bc_\2\u045e\u0493\5\u00be`\2\u045f\u0493\5")
        buf.write("\u00e8u\2\u0460\u0493\5\u00c0a\2\u0461\u0493\5\u00c2b")
        buf.write("\2\u0462\u0493\5\u00ceh\2\u0463\u0493\5\u00d0i\2\u0464")
        buf.write("\u0493\5\u00c4c\2\u0465\u0493\5\u00c6d\2\u0466\u0493\5")
        buf.write("\u00c8e\2\u0467\u0493\5\u00caf\2\u0468\u0493\5\u00ccg")
        buf.write("\2\u0469\u0493\5\u00d2j\2\u046a\u0493\5\u00d4k\2\u046b")
        buf.write("\u0493\5\u00d6l\2\u046c\u0493\5\u0250\u0129\2\u046d\u0493")
        buf.write("\5\u0242\u0122\2\u046e\u0493\5\u00d8m\2\u046f\u0493\5")
        buf.write("\u00dan\2\u0470\u0493\5\u00dco\2\u0471\u0493\5\u00dep")
        buf.write("\2\u0472\u0493\5\u00e0q\2\u0473\u0493\5\u0248\u0125\2")
        buf.write("\u0474\u0493\5\u00e2r\2\u0475\u0493\5\u00e4s\2\u0476\u0493")
        buf.write("\5\u00e6t\2\u0477\u0493\5\u00eav\2\u0478\u0493\5\u00ec")
        buf.write("w\2\u0479\u0493\5\u00eex\2\u047a\u0493\5\u00f0y\2\u047b")
        buf.write("\u0493\5\u00f2z\2\u047c\u0493\5\u00f4{\2\u047d\u0493\5")
        buf.write("\u00f6|\2\u047e\u0493\5\u00f8}\2\u047f\u0493\5\u00fa~")
        buf.write("\2\u0480\u0493\5\u00fc\177\2\u0481\u0493\5\u00fe\u0080")
        buf.write("\2\u0482\u0493\5\u0252\u012a\2\u0483\u0493\5\u0100\u0081")
        buf.write("\2\u0484\u0493\5\u0102\u0082\2\u0485\u0493\5\u0104\u0083")
        buf.write("\2\u0486\u0493\5\u0254\u012b\2\u0487\u0493\5\u024a\u0126")
        buf.write("\2\u0488\u0493\5\u025a\u012e\2\u0489\u0493\5\u0106\u0084")
        buf.write("\2\u048a\u0493\5\u0256\u012c\2\u048b\u0493\5\u0108\u0085")
        buf.write("\2\u048c\u0493\5\u010a\u0086\2\u048d\u0493\5\u010c\u0087")
        buf.write("\2\u048e\u0493\5\u010e\u0088\2\u048f\u0493\5\u0110\u0089")
        buf.write("\2\u0490\u0493\5\u0112\u008a\2\u0491\u0493\5\u01ec\u00f7")
        buf.write("\2\u0492\u03f3\3\2\2\2\u0492\u03f4\3\2\2\2\u0492\u03f5")
        buf.write("\3\2\2\2\u0492\u03f6\3\2\2\2\u0492\u03f7\3\2\2\2\u0492")
        buf.write("\u03f8\3\2\2\2\u0492\u03f9\3\2\2\2\u0492\u03fa\3\2\2\2")
        buf.write("\u0492\u03fb\3\2\2\2\u0492\u03fc\3\2\2\2\u0492\u03fd\3")
        buf.write("\2\2\2\u0492\u03fe\3\2\2\2\u0492\u03ff\3\2\2\2\u0492\u0400")
        buf.write("\3\2\2\2\u0492\u0401\3\2\2\2\u0492\u0402\3\2\2\2\u0492")
        buf.write("\u0403\3\2\2\2\u0492\u0404\3\2\2\2\u0492\u0405\3\2\2\2")
        buf.write("\u0492\u0406\3\2\2\2\u0492\u0407\3\2\2\2\u0492\u0408\3")
        buf.write("\2\2\2\u0492\u0409\3\2\2\2\u0492\u040a\3\2\2\2\u0492\u040b")
        buf.write("\3\2\2\2\u0492\u040c\3\2\2\2\u0492\u040d\3\2\2\2\u0492")
        buf.write("\u040e\3\2\2\2\u0492\u040f\3\2\2\2\u0492\u0410\3\2\2\2")
        buf.write("\u0492\u0411\3\2\2\2\u0492\u0412\3\2\2\2\u0492\u0413\3")
        buf.write("\2\2\2\u0492\u0414\3\2\2\2\u0492\u0415\3\2\2\2\u0492\u0416")
        buf.write("\3\2\2\2\u0492\u0417\3\2\2\2\u0492\u0418\3\2\2\2\u0492")
        buf.write("\u0419\3\2\2\2\u0492\u041a\3\2\2\2\u0492\u041b\3\2\2\2")
        buf.write("\u0492\u041c\3\2\2\2\u0492\u041d\3\2\2\2\u0492\u041e\3")
        buf.write("\2\2\2\u0492\u041f\3\2\2\2\u0492\u0420\3\2\2\2\u0492\u0421")
        buf.write("\3\2\2\2\u0492\u0422\3\2\2\2\u0492\u0423\3\2\2\2\u0492")
        buf.write("\u0424\3\2\2\2\u0492\u0425\3\2\2\2\u0492\u0426\3\2\2\2")
        buf.write("\u0492\u0427\3\2\2\2\u0492\u0428\3\2\2\2\u0492\u0429\3")
        buf.write("\2\2\2\u0492\u042a\3\2\2\2\u0492\u042b\3\2\2\2\u0492\u042c")
        buf.write("\3\2\2\2\u0492\u042d\3\2\2\2\u0492\u042e\3\2\2\2\u0492")
        buf.write("\u042f\3\2\2\2\u0492\u0430\3\2\2\2\u0492\u0431\3\2\2\2")
        buf.write("\u0492\u0432\3\2\2\2\u0492\u0433\3\2\2\2\u0492\u0434\3")
        buf.write("\2\2\2\u0492\u0435\3\2\2\2\u0492\u0436\3\2\2\2\u0492\u0437")
        buf.write("\3\2\2\2\u0492\u0438\3\2\2\2\u0492\u0439\3\2\2\2\u0492")
        buf.write("\u043a\3\2\2\2\u0492\u043b\3\2\2\2\u0492\u043c\3\2\2\2")
        buf.write("\u0492\u043d\3\2\2\2\u0492\u043e\3\2\2\2\u0492\u043f\3")
        buf.write("\2\2\2\u0492\u0440\3\2\2\2\u0492\u0441\3\2\2\2\u0492\u0442")
        buf.write("\3\2\2\2\u0492\u0443\3\2\2\2\u0492\u0444\3\2\2\2\u0492")
        buf.write("\u0445\3\2\2\2\u0492\u0446\3\2\2\2\u0492\u0447\3\2\2\2")
        buf.write("\u0492\u0448\3\2\2\2\u0492\u0449\3\2\2\2\u0492\u044a\3")
        buf.write("\2\2\2\u0492\u044b\3\2\2\2\u0492\u044c\3\2\2\2\u0492\u044d")
        buf.write("\3\2\2\2\u0492\u044e\3\2\2\2\u0492\u044f\3\2\2\2\u0492")
        buf.write("\u0450\3\2\2\2\u0492\u0451\3\2\2\2\u0492\u0452\3\2\2\2")
        buf.write("\u0492\u0453\3\2\2\2\u0492\u0454\3\2\2\2\u0492\u0455\3")
        buf.write("\2\2\2\u0492\u0456\3\2\2\2\u0492\u0457\3\2\2\2\u0492\u0458")
        buf.write("\3\2\2\2\u0492\u0459\3\2\2\2\u0492\u045a\3\2\2\2\u0492")
        buf.write("\u045b\3\2\2\2\u0492\u045c\3\2\2\2\u0492\u045d\3\2\2\2")
        buf.write("\u0492\u045e\3\2\2\2\u0492\u045f\3\2\2\2\u0492\u0460\3")
        buf.write("\2\2\2\u0492\u0461\3\2\2\2\u0492\u0462\3\2\2\2\u0492\u0463")
        buf.write("\3\2\2\2\u0492\u0464\3\2\2\2\u0492\u0465\3\2\2\2\u0492")
        buf.write("\u0466\3\2\2\2\u0492\u0467\3\2\2\2\u0492\u0468\3\2\2\2")
        buf.write("\u0492\u0469\3\2\2\2\u0492\u046a\3\2\2\2\u0492\u046b\3")
        buf.write("\2\2\2\u0492\u046c\3\2\2\2\u0492\u046d\3\2\2\2\u0492\u046e")
        buf.write("\3\2\2\2\u0492\u046f\3\2\2\2\u0492\u0470\3\2\2\2\u0492")
        buf.write("\u0471\3\2\2\2\u0492\u0472\3\2\2\2\u0492\u0473\3\2\2\2")
        buf.write("\u0492\u0474\3\2\2\2\u0492\u0475\3\2\2\2\u0492\u0476\3")
        buf.write("\2\2\2\u0492\u0477\3\2\2\2\u0492\u0478\3\2\2\2\u0492\u0479")
        buf.write("\3\2\2\2\u0492\u047a\3\2\2\2\u0492\u047b\3\2\2\2\u0492")
        buf.write("\u047c\3\2\2\2\u0492\u047d\3\2\2\2\u0492\u047e\3\2\2\2")
        buf.write("\u0492\u047f\3\2\2\2\u0492\u0480\3\2\2\2\u0492\u0481\3")
        buf.write("\2\2\2\u0492\u0482\3\2\2\2\u0492\u0483\3\2\2\2\u0492\u0484")
        buf.write("\3\2\2\2\u0492\u0485\3\2\2\2\u0492\u0486\3\2\2\2\u0492")
        buf.write("\u0487\3\2\2\2\u0492\u0488\3\2\2\2\u0492\u0489\3\2\2\2")
        buf.write("\u0492\u048a\3\2\2\2\u0492\u048b\3\2\2\2\u0492\u048c\3")
        buf.write("\2\2\2\u0492\u048d\3\2\2\2\u0492\u048e\3\2\2\2\u0492\u048f")
        buf.write("\3\2\2\2\u0492\u0490\3\2\2\2\u0492\u0491\3\2\2\2\u0493")
        buf.write("\r\3\2\2\2\u0494\u049a\5\u0266\u0134\2\u0495\u049a\5\u0268")
        buf.write("\u0135\2\u0496\u049a\5\u026a\u0136\2\u0497\u049a\5\u026c")
        buf.write("\u0137\2\u0498\u049a\5\u026e\u0138\2\u0499\u0494\3\2\2")
        buf.write("\2\u0499\u0495\3\2\2\2\u0499\u0496\3\2\2\2\u0499\u0497")
        buf.write("\3\2\2\2\u0499\u0498\3\2\2\2\u049a\17\3\2\2\2\u049b\u04a8")
        buf.write("\5\22\n\2\u049c\u04a8\5\24\13\2\u049d\u04a8\5\26\f\2\u049e")
        buf.write("\u04a8\5\30\r\2\u049f\u04a8\5\34\17\2\u04a0\u04a8\5\32")
        buf.write("\16\2\u04a1\u04a8\5\36\20\2\u04a2\u04a8\5&\24\2\u04a3")
        buf.write("\u04a8\5(\25\2\u04a4\u04a8\5*\26\2\u04a5\u04a8\5,\27\2")
        buf.write("\u04a6\u04a8\5.\30\2\u04a7\u049b\3\2\2\2\u04a7\u049c\3")
        buf.write("\2\2\2\u04a7\u049d\3\2\2\2\u04a7\u049e\3\2\2\2\u04a7\u049f")
        buf.write("\3\2\2\2\u04a7\u04a0\3\2\2\2\u04a7\u04a1\3\2\2\2\u04a7")
        buf.write("\u04a2\3\2\2\2\u04a7\u04a3\3\2\2\2\u04a7\u04a4\3\2\2\2")
        buf.write("\u04a7\u04a5\3\2\2\2\u04a7\u04a6\3\2\2\2\u04a8\21\3\2")
        buf.write("\2\2\u04a9\u04ab\7\34\2\2\u04aa\u04ac\7\u0338\2\2\u04ab")
        buf.write("\u04aa\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae\3\2\2\2")
        buf.write("\u04ad\u04af\5\6\4\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3")
        buf.write("\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\7m\2\2\u04b1\u04b3")
        buf.write("\7\u0338\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3")
        buf.write("\23\3\2\2\2\u04b4\u04b6\7!\2\2\u04b5\u04b7\7\u0338\2\2")
        buf.write("\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\25\3\2")
        buf.write("\2\2\u04b8\u04ba\7B\2\2\u04b9\u04bb\7\u0338\2\2\u04ba")
        buf.write("\u04b9\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\27\3\2\2\2\u04bc")
        buf.write("\u04bd\7\u0090\2\2\u04bd\u04bf\5\u03b6\u01dc\2\u04be\u04c0")
        buf.write("\7\u0338\2\2\u04bf\u04be\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0")
        buf.write("\u04c7\3\2\2\2\u04c1\u04c2\5\u03b6\u01dc\2\u04c2\u04c4")
        buf.write("\7\u0339\2\2\u04c3\u04c5\7\u0338\2\2\u04c4\u04c3\3\2\2")
        buf.write("\2\u04c4\u04c5\3\2\2\2\u04c5\u04c7\3\2\2\2\u04c6\u04bc")
        buf.write("\3\2\2\2\u04c6\u04c1\3\2\2\2\u04c7\31\3\2\2\2\u04c8\u04ca")
        buf.write("\7\u011a\2\2\u04c9\u04cb\5\u02cc\u0167\2\u04ca\u04c9\3")
        buf.write("\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cd\3\2\2\2\u04cc\u04ce")
        buf.write("\7\u0338\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce")
        buf.write("\33\3\2\2\2\u04cf\u04d0\7\u009a\2\2\u04d0\u04d1\5\u02e2")
        buf.write("\u0172\2\u04d1\u04d4\5\b\5\2\u04d2\u04d3\7k\2\2\u04d3")
        buf.write("\u04d5\5\b\5\2\u04d4\u04d2\3\2\2\2\u04d4\u04d5\3\2\2\2")
        buf.write("\u04d5\u04d7\3\2\2\2\u04d6\u04d8\7\u0338\2\2\u04d7\u04d6")
        buf.write("\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\35\3\2\2\2\u04d9\u04e0")
        buf.write("\7\u02ed\2\2\u04da\u04db\5 \21\2\u04db\u04dc\7\u0337\2")
        buf.write("\2\u04dc\u04dd\5\"\22\2\u04dd\u04de\7\u0337\2\2\u04de")
        buf.write("\u04df\5$\23\2\u04df\u04e1\3\2\2\2\u04e0\u04da\3\2\2\2")
        buf.write("\u04e0\u04e1\3\2\2\2\u04e1\u04e3\3\2\2\2\u04e2\u04e4\7")
        buf.write("\u0338\2\2\u04e3\u04e2\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4")
        buf.write("\37\3\2\2\2\u04e5\u04e6\t\2\2\2\u04e6!\3\2\2\2\u04e7\u04e8")
        buf.write("\t\3\2\2\u04e8#\3\2\2\2\u04e9\u04ea\t\2\2\2\u04ea%\3\2")
        buf.write("\2\2\u04eb\u04ec\7\34\2\2\u04ec\u04ee\7\u02f8\2\2\u04ed")
        buf.write("\u04ef\7\u0338\2\2\u04ee\u04ed\3\2\2\2\u04ee\u04ef\3\2")
        buf.write("\2\2\u04ef\u04f1\3\2\2\2\u04f0\u04f2\5\6\4\2\u04f1\u04f0")
        buf.write("\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3")
        buf.write("\u04f4\7m\2\2\u04f4\u04f6\7\u02f8\2\2\u04f5\u04f7\7\u0338")
        buf.write("\2\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f8")
        buf.write("\3\2\2\2\u04f8\u04f9\7\34\2\2\u04f9\u04fb\7\u01b2\2\2")
        buf.write("\u04fa\u04fc\7\u0338\2\2\u04fb\u04fa\3\2\2\2\u04fb\u04fc")
        buf.write("\3\2\2\2\u04fc\u04fe\3\2\2\2\u04fd\u04ff\5\6\4\2\u04fe")
        buf.write("\u04fd\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500\3\2\2\2")
        buf.write("\u0500\u0501\7m\2\2\u0501\u0503\7\u01b2\2\2\u0502\u0504")
        buf.write("\7\u0338\2\2\u0503\u0502\3\2\2\2\u0503\u0504\3\2\2\2\u0504")
        buf.write("\'\3\2\2\2\u0505\u0507\7\u0177\2\2\u0506\u0508\5\u01bc")
        buf.write("\u00df\2\u0507\u0506\3\2\2\2\u0507\u0508\3\2\2\2\u0508")
        buf.write("\u050a\3\2\2\2\u0509\u050b\7\u0337\2\2\u050a\u0509\3\2")
        buf.write("\2\2\u050a\u050b\3\2\2\2\u050b\u050e\3\2\2\2\u050c\u050d")
        buf.write("\t\4\2\2\u050d\u050f\5\u01c0\u00e1\2\u050e\u050c\3\2\2")
        buf.write("\2\u050e\u050f\3\2\2\2\u050f\u0511\3\2\2\2\u0510\u0512")
        buf.write("\5\u02cc\u0167\2\u0511\u0510\3\2\2\2\u0511\u0512\3\2\2")
        buf.write("\2\u0512\u0514\3\2\2\2\u0513\u0515\7\u0338\2\2\u0514\u0513")
        buf.write("\3\2\2\2\u0514\u0515\3\2\2\2\u0515)\3\2\2\2\u0516\u0517")
        buf.write("\7\u017a\2\2\u0517\u0521\5\u02e2\u0172\2\u0518\u0522\5")
        buf.write("\b\5\2\u0519\u051b\7!\2\2\u051a\u051c\7\u0338\2\2\u051b")
        buf.write("\u051a\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u0522\3\2\2\2")
        buf.write("\u051d\u051f\7B\2\2\u051e\u0520\7\u0338\2\2\u051f\u051e")
        buf.write("\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0522\3\2\2\2\u0521")
        buf.write("\u0518\3\2\2\2\u0521\u0519\3\2\2\2\u0521\u051d\3\2\2\2")
        buf.write("\u0522+\3\2\2\2\u0523\u0526\7\u0101\2\2\u0524\u0527\5")
        buf.write("\u02cc\u0167\2\u0525\u0527\7\u0317\2\2\u0526\u0524\3\2")
        buf.write("\2\2\u0526\u0525\3\2\2\2\u0527\u052c\3\2\2\2\u0528\u0529")
        buf.write("\7\u0337\2\2\u0529\u052b\7\u031a\2\2\u052a\u0528\3\2\2")
        buf.write("\2\u052b\u052e\3\2\2\2\u052c\u052a\3\2\2\2\u052c\u052d")
        buf.write("\3\2\2\2\u052d\u0530\3\2\2\2\u052e\u052c\3\2\2\2\u052f")
        buf.write("\u0531\7\u0338\2\2\u0530\u052f\3\2\2\2\u0530\u0531\3\2")
        buf.write("\2\2\u0531-\3\2\2\2\u0532\u0533\7\u0108\2\2\u0533\u0534")
        buf.write("\7\u0335\2\2\u0534\u0535\t\5\2\2\u0535\u0536\7\u0337\2")
        buf.write("\2\u0536\u0537\5\u02ca\u0166\2\u0537\u0538\7\u0337\2\2")
        buf.write("\u0538\u053d\5\u02ca\u0166\2\u0539\u053a\7\u0337\2\2\u053a")
        buf.write("\u053c\5\u02ca\u0166\2\u053b\u0539\3\2\2\2\u053c\u053f")
        buf.write("\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e")
        buf.write("\u0540\3\2\2\2\u053f\u053d\3\2\2\2\u0540\u0543\7\u0336")
        buf.write("\2\2\u0541\u0542\7\u017c\2\2\u0542\u0544\t\6\2\2\u0543")
        buf.write("\u0541\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0546\3\2\2\2")
        buf.write("\u0545\u0547\7\u0338\2\2\u0546\u0545\3\2\2\2\u0546\u0547")
        buf.write("\3\2\2\2\u0547\u0553\3\2\2\2\u0548\u0549\7\u0108\2\2\u0549")
        buf.write("\u054a\7\u031b\2\2\u054a\u054f\t\7\2\2\u054b\u054c\7\u0337")
        buf.write("\2\2\u054c\u054e\t\5\2\2\u054d\u054b\3\2\2\2\u054e\u0551")
        buf.write("\3\2\2\2\u054f\u054d\3\2\2\2\u054f\u0550\3\2\2\2\u0550")
        buf.write("\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0552\u0532\3\2\2\2")
        buf.write("\u0552\u0548\3\2\2\2\u0553/\3\2\2\2\u0554\u0555\7\u0338")
        buf.write("\2\2\u0555\61\3\2\2\2\u0556\u0564\5\u0262\u0132\2\u0557")
        buf.write("\u0564\5\u0264\u0133\2\u0558\u0564\5\u01aa\u00d6\2\u0559")
        buf.write("\u0564\5\u01a8\u00d5\2\u055a\u0564\5\u019e\u00d0\2\u055b")
        buf.write("\u0564\5\u01a2\u00d2\2\u055c\u0564\5\u0270\u0139\2\u055d")
        buf.write("\u0564\5\u01ac\u00d7\2\u055e\u0564\5\u0278\u013d\2\u055f")
        buf.write("\u0564\5\u0294\u014b\2\u0560\u0564\5\u0296\u014c\2\u0561")
        buf.write("\u0564\5\u029a\u014e\2\u0562\u0564\5\u029c\u014f\2\u0563")
        buf.write("\u0556\3\2\2\2\u0563\u0557\3\2\2\2\u0563\u0558\3\2\2\2")
        buf.write("\u0563\u0559\3\2\2\2\u0563\u055a\3\2\2\2\u0563\u055b\3")
        buf.write("\2\2\2\u0563\u055c\3\2\2\2\u0563\u055d\3\2\2\2\u0563\u055e")
        buf.write("\3\2\2\2\u0563\u055f\3\2\2\2\u0563\u0560\3\2\2\2\u0563")
        buf.write("\u0561\3\2\2\2\u0563\u0562\3\2\2\2\u0564\63\3\2\2\2\u0565")
        buf.write("\u0566\7\n\2\2\u0566\u0567\7\17\2\2\u0567\u0568\7\u0121")
        buf.write("\2\2\u0568\u0569\5\u03b6\u01dc\2\u0569\u0570\7\u017c\2")
        buf.write("\2\u056a\u056c\7\u0337\2\2\u056b\u056a\3\2\2\2\u056b\u056c")
        buf.write("\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056e\7\u025e\2\2\u056e")
        buf.write("\u056f\7\u0323\2\2\u056f\u0571\5\u03b6\u01dc\2\u0570\u056b")
        buf.write("\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0578\3\2\2\2\u0572")
        buf.write("\u0574\7\u0337\2\2\u0573\u0572\3\2\2\2\u0573\u0574\3\2")
        buf.write("\2\2\u0574\u0575\3\2\2\2\u0575\u0576\7\u00f4\2\2\u0576")
        buf.write("\u0577\7\u0323\2\2\u0577\u0579\7\u031f\2\2\u0578\u0573")
        buf.write("\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u0580\3\2\2\2\u057a")
        buf.write("\u057c\7\u0337\2\2\u057b\u057a\3\2\2\2\u057b\u057c\3\2")
        buf.write("\2\2\u057c\u057d\3\2\2\2\u057d\u057e\7\\\2\2\u057e\u057f")
        buf.write("\7\u0323\2\2\u057f\u0581\5\u03b6\u01dc\2\u0580\u057b\3")
        buf.write("\2\2\2\u0580\u0581\3\2\2\2\u0581\65\3\2\2\2\u0582\u0583")
        buf.write("\7I\2\2\u0583\u0584\7\17\2\2\u0584\u0585\7\u0121\2\2\u0585")
        buf.write("\u0586\5\u03b6\u01dc\2\u0586\u058d\7\u017c\2\2\u0587\u0589")
        buf.write("\7\u0337\2\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589")
        buf.write("\u058a\3\2\2\2\u058a\u058b\7\u00f4\2\2\u058b\u058c\7\u0323")
        buf.write("\2\2\u058c\u058e\7\u031f\2\2\u058d\u0588\3\2\2\2\u058d")
        buf.write("\u058e\3\2\2\2\u058e\u0595\3\2\2\2\u058f\u0591\7\u0337")
        buf.write("\2\2\u0590\u058f\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592")
        buf.write("\3\2\2\2\u0592\u0593\7\\\2\2\u0593\u0594\7\u0323\2\2\u0594")
        buf.write("\u0596\5\u03b6\u01dc\2\u0595\u0590\3\2\2\2\u0595\u0596")
        buf.write("\3\2\2\2\u0596\67\3\2\2\2\u0597\u0598\7h\2\2\u0598\u059b")
        buf.write("\7\u018c\2\2\u0599\u059a\7\u009a\2\2\u059a\u059c\7x\2")
        buf.write("\2\u059b\u0599\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u05a0")
        buf.write("\3\2\2\2\u059d\u059e\5\u03b6\u01dc\2\u059e\u059f\7\u0330")
        buf.write("\2\2\u059f\u05a1\3\2\2\2\u05a0\u059d\3\2\2\2\u05a0\u05a1")
        buf.write("\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3\5\u03b6\u01dc")
        buf.write("\2\u05a39\3\2\2\2\u05a4\u05a5\7h\2\2\u05a5\u05a6\7\17")
        buf.write("\2\2\u05a6\u05a7\7\u0121\2\2\u05a7\u05a8\5\u03b6\u01dc")
        buf.write("\2\u05a8;\3\2\2\2\u05a9\u05aa\5> \2\u05aa\u05ab\5\u03b6")
        buf.write("\u01dc\2\u05ab\u05ac\5@!\2\u05ac=\3\2\2\2\u05ad\u05ae")
        buf.write("\7\n\2\2\u05ae\u05af\7\u0198\2\2\u05af?\3\2\2\2\u05b0")
        buf.write("\u05b2\5B\"\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2")
        buf.write("\u05b2\u05b4\3\2\2\2\u05b3\u05b5\5X-\2\u05b4\u05b3\3\2")
        buf.write("\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6\u05b8")
        buf.write("\5F$\2\u05b7\u05b6\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05ba")
        buf.write("\3\2\2\2\u05b9\u05bb\5L\'\2\u05ba\u05b9\3\2\2\2\u05ba")
        buf.write("\u05bb\3\2\2\2\u05bbA\3\2\2\2\u05bc\u05bf\5D#\2\u05bd")
        buf.write("\u05c0\5\\/\2\u05be\u05c0\5T+\2\u05bf\u05bd\3\2\2\2\u05bf")
        buf.write("\u05be\3\2\2\2\u05c0C\3\2\2\2\u05c1\u05c2\7\u008c\2\2")
        buf.write("\u05c2E\3\2\2\2\u05c3\u05c4\5J&\2\u05c4\u05c5\5H%\2\u05c5")
        buf.write("G\3\2\2\2\u05c6\u05c9\7\6\2\2\u05c7\u05c9\5n8\2\u05c8")
        buf.write("\u05c6\3\2\2\2\u05c8\u05c7\3\2\2\2\u05c9I\3\2\2\2\u05ca")
        buf.write("\u05cb\7h\2\2\u05cbK\3\2\2\2\u05cc\u05cd\5N(\2\u05cd\u05ce")
        buf.write("\5P)\2\u05ceM\3\2\2\2\u05cf\u05d0\7\4\2\2\u05d0\u05d1")
        buf.write("\7\u0082\2\2\u05d1\u05d2\7\u008c\2\2\u05d2O\3\2\2\2\u05d3")
        buf.write("\u05d7\5R*\2\u05d4\u05d5\5V,\2\u05d5\u05d6\5\u03b6\u01dc")
        buf.write("\2\u05d6\u05d8\3\2\2\2\u05d7\u05d4\3\2\2\2\u05d7\u05d8")
        buf.write("\3\2\2\2\u05d8Q\3\2\2\2\u05d9\u05da\7\u031f\2\2\u05da")
        buf.write("S\3\2\2\2\u05db\u05dc\5V,\2\u05dc\u05dd\5\u03b6\u01dc")
        buf.write("\2\u05ddU\3\2\2\2\u05de\u05df\7\20\2\2\u05dfW\3\2\2\2")
        buf.write("\u05e0\u05e1\5Z.\2\u05e1\u05e2\5^\60\2\u05e2Y\3\2\2\2")
        buf.write("\u05e3\u05e4\7\u017c\2\2\u05e4[\3\2\2\2\u05e5\u05e9\5")
        buf.write("`\61\2\u05e6\u05e9\5j\66\2\u05e7\u05e9\7\u031f\2\2\u05e8")
        buf.write("\u05e5\3\2\2\2\u05e8\u05e6\3\2\2\2\u05e8\u05e7\3\2\2\2")
        buf.write("\u05e9]\3\2\2\2\u05ea\u05eb\b\60\1\2\u05eb\u05ec\7\u00f6")
        buf.write("\2\2\u05ec\u05ed\7\u0323\2\2\u05ed\u05f4\t\b\2\2\u05ee")
        buf.write("\u05ef\7\u0176\2\2\u05ef\u05f0\7\u0323\2\2\u05f0\u05f4")
        buf.write("\t\t\2\2\u05f1\u05f2\7\u0166\2\2\u05f2\u05f4\7R\2\2\u05f3")
        buf.write("\u05ea\3\2\2\2\u05f3\u05ee\3\2\2\2\u05f3\u05f1\3\2\2\2")
        buf.write("\u05f4\u05f9\3\2\2\2\u05f5\u05f6\f\3\2\2\u05f6\u05f8\7")
        buf.write("\u0337\2\2\u05f7\u05f5\3\2\2\2\u05f8\u05fb\3\2\2\2\u05f9")
        buf.write("\u05f7\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa_\3\2\2\2\u05fb")
        buf.write("\u05f9\3\2\2\2\u05fc\u05fd\5d\63\2\u05fd\u05fe\5b\62\2")
        buf.write("\u05fe\u05ff\5f\64\2\u05ffa\3\2\2\2\u0600\u0601\5\u03b6")
        buf.write("\u01dc\2\u0601c\3\2\2\2\u0602\u0603\7f\2\2\u0603e\3\2")
        buf.write("\2\2\u0604\u0605\5h\65\2\u0605\u0606\5f\64\2\u0606\u0609")
        buf.write("\3\2\2\2\u0607\u0609\5\u03b6\u01dc\2\u0608\u0604\3\2\2")
        buf.write("\2\u0608\u0607\3\2\2\2\u0609g\3\2\2\2\u060a\u060b\7\31")
        buf.write("\2\2\u060bi\3\2\2\2\u060c\u060d\5l\67\2\u060d\u060e\5")
        buf.write("f\64\2\u060ek\3\2\2\2\u060f\u0610\7\u01e5\2\2\u0610m\3")
        buf.write("\2\2\2\u0611\u0612\5p9\2\u0612\u0613\5j\66\2\u0613\u0614")
        buf.write("\7\u0318\2\2\u0614\u0615\7\u0337\2\2\u0615\u0618\3\2\2")
        buf.write("\2\u0616\u0618\5j\66\2\u0617\u0611\3\2\2\2\u0617\u0616")
        buf.write("\3\2\2\2\u0618o\3\2\2\2\u0619\u061a\7\u0318\2\2\u061a")
        buf.write("q\3\2\2\2\u061b\u061c\7I\2\2\u061c\u061d\7\u0198\2\2\u061d")
        buf.write("\u0620\5\u03b6\u01dc\2\u061e\u061f\7\24\2\2\u061f\u0621")
        buf.write("\5\u03b6\u01dc\2\u0620\u061e\3\2\2\2\u0620\u0621\3\2\2")
        buf.write("\2\u0621\u0622\3\2\2\2\u0622\u0627\7\u008c\2\2\u0623\u0625")
        buf.write("\7\u0337\2\2\u0624\u0623\3\2\2\2\u0624\u0625\3\2\2\2\u0625")
        buf.write("\u0626\3\2\2\2\u0626\u0628\t\n\2\2\u0627\u0624\3\2\2\2")
        buf.write("\u0628\u0629\3\2\2\2\u0629\u0627\3\2\2\2\u0629\u062a\3")
        buf.write("\2\2\2\u062a\u062f\3\2\2\2\u062b\u062c\7\u017c\2\2\u062c")
        buf.write("\u062d\7\u00f6\2\2\u062d\u062e\7\u0323\2\2\u062e\u0630")
        buf.write("\t\b\2\2\u062f\u062b\3\2\2\2\u062f\u0630\3\2\2\2\u0630")
        buf.write("s\3\2\2\2\u0631\u0632\7h\2\2\u0632\u0635\7\u0198\2\2\u0633")
        buf.write("\u0634\7\u009a\2\2\u0634\u0636\7x\2\2\u0635\u0633\3\2")
        buf.write("\2\2\u0635\u0636\3\2\2\2\u0636\u063b\3\2\2\2\u0637\u0639")
        buf.write("\7\u0337\2\2\u0638\u0637\3\2\2\2\u0638\u0639\3\2\2\2\u0639")
        buf.write("\u063a\3\2\2\2\u063a\u063c\5\u03b6\u01dc\2\u063b\u0638")
        buf.write("\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063b\3\2\2\2\u063d")
        buf.write("\u063e\3\2\2\2\u063e\u0642\3\2\2\2\u063f\u0640\7\u017c")
        buf.write("\2\2\u0640\u0641\7\u0264\2\2\u0641\u0643\7\u01db\2\2\u0642")
        buf.write("\u063f\3\2\2\2\u0642\u0643\3\2\2\2\u0643u\3\2\2\2\u0644")
        buf.write("\u0645\5x=\2\u0645\u064a\5\u03b6\u01dc\2\u0646\u064b\5")
        buf.write("z>\2\u0647\u0648\7\u02a9\2\2\u0648\u0649\7\u028c\2\2\u0649")
        buf.write("\u064b\7\u00ac\2\2\u064a\u0646\3\2\2\2\u064a\u0647\3\2")
        buf.write("\2\2\u064bw\3\2\2\2\u064c\u064d\7\n\2\2\u064d\u064e\7")
        buf.write("\22\2\2\u064e\u064f\7\u00ac\2\2\u064fy\3\2\2\2\u0650\u0651")
        buf.write("\5|?\2\u0651\u0654\5~@\2\u0652\u0653\7\u0337\2\2\u0653")
        buf.write("\u0655\5~@\2\u0654\u0652\3\2\2\2\u0654\u0655\3\2\2\2\u0655")
        buf.write("\u0656\3\2\2\2\u0656\u0657\7\u0336\2\2\u0657{\3\2\2\2")
        buf.write("\u0658\u0659\7\u017c\2\2\u0659\u065a\7\u028c\2\2\u065a")
        buf.write("\u065b\7\u00ac\2\2\u065b\u065c\7\u0335\2\2\u065c}\3\2")
        buf.write("\2\2\u065d\u065e\7\u01d3\2\2\u065e\u065f\7&\2\2\u065f")
        buf.write("\u0660\7\u00f4\2\2\u0660\u0661\7\u0323\2\2\u0661\u0668")
        buf.write("\7\u031f\2\2\u0662\u0663\7\u01ee\2\2\u0663\u0664\7&\2")
        buf.write("\2\u0664\u0665\7\u00f4\2\2\u0665\u0666\7\u0323\2\2\u0666")
        buf.write("\u0668\7\u031f\2\2\u0667\u065d\3\2\2\2\u0667\u0662\3\2")
        buf.write("\2\2\u0668\177\3\2\2\2\u0669\u066a\7I\2\2\u066a\u066b")
        buf.write("\7\22\2\2\u066b\u066c\7\u00ac\2\2\u066c\u066f\5\u03b6")
        buf.write("\u01dc\2\u066d\u066e\7\24\2\2\u066e\u0670\5\u03b6\u01dc")
        buf.write("\2\u066f\u066d\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u067e")
        buf.write("\3\2\2\2\u0671\u067c\7\u008c\2\2\u0672\u0673\7\u0082\2")
        buf.write("\2\u0673\u0674\7\u0323\2\2\u0674\u067d\7\u031f\2\2\u0675")
        buf.write("\u0676\7v\2\2\u0676\u0677\7\u0323\2\2\u0677\u067d\7\u031f")
        buf.write("\2\2\u0678\u0679\7\u0198\2\2\u0679\u067d\5\u03b6\u01dc")
        buf.write("\2\u067a\u067b\7\u0291\2\2\u067b\u067d\5\u03b6\u01dc\2")
        buf.write("\u067c\u0672\3\2\2\2\u067c\u0675\3\2\2\2\u067c\u0678\3")
        buf.write("\2\2\2\u067c\u067a\3\2\2\2\u067d\u067f\3\2\2\2\u067e\u0671")
        buf.write("\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u068c\3\2\2\2\u0680")
        buf.write("\u068a\7\u017c\2\2\u0681\u0682\7\u018d\2\2\u0682\u0683")
        buf.write("\7\u0323\2\2\u0683\u068b\t\13\2\2\u0684\u0685\7\u0292")
        buf.write("\2\2\u0685\u0686\7\u0323\2\2\u0686\u068b\7\u031f\2\2\u0687")
        buf.write("\u0688\7\u01c6\2\2\u0688\u0689\7\u0323\2\2\u0689\u068b")
        buf.write("\t\f\2\2\u068a\u0681\3\2\2\2\u068a\u0684\3\2\2\2\u068a")
        buf.write("\u0687\3\2\2\2\u068b\u068d\3\2\2\2\u068c\u0680\3\2\2\2")
        buf.write("\u068c\u068d\3\2\2\2\u068d\u0693\3\2\2\2\u068e\u068f\7")
        buf.write("\u01ee\2\2\u068f\u0690\7&\2\2\u0690\u0691\7\u00f4\2\2")
        buf.write("\u0691\u0692\7\u0323\2\2\u0692\u0694\7\u031f\2\2\u0693")
        buf.write("\u068e\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0081\3\2\2\2")
        buf.write("\u0695\u0696\7h\2\2\u0696\u0697\7\22\2\2\u0697\u0698\7")
        buf.write("\u00ac\2\2\u0698\u069c\5\u03b6\u01dc\2\u0699\u069a\7\u02a9")
        buf.write("\2\2\u069a\u069b\7\u0291\2\2\u069b\u069d\7\u00ac\2\2\u069c")
        buf.write("\u0699\3\2\2\2\u069c\u069d\3\2\2\2\u069d\u0083\3\2\2\2")
        buf.write("\u069e\u06a2\5\u008cG\2\u069f\u06a0\5\u0094K\2\u06a0\u06a1")
        buf.write("\5\u008aF\2\u06a1\u06a3\3\2\2\2\u06a2\u069f\3\2\2\2\u06a2")
        buf.write("\u06a3\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\5\u037a")
        buf.write("\u01be\2\u06a5\u06a6\5\u0088E\2\u06a6\u06a7\5\u0086D\2")
        buf.write("\u06a7\u0085\3\2\2\2\u06a8\u06ac\5\u03b6\u01dc\2\u06a9")
        buf.write("\u06aa\7\u012e\2\2\u06aa\u06ac\7\u027d\2\2\u06ab\u06a8")
        buf.write("\3\2\2\2\u06ab\u06a9\3\2\2\2\u06ac\u0087\3\2\2\2\u06ad")
        buf.write("\u06ae\7\u015d\2\2\u06ae\u0089\3\2\2\2\u06af\u06b0\7\u0339")
        buf.write("\2\2\u06b0\u06b1\7\u0339\2\2\u06b1\u008b\3\2\2\2\u06b2")
        buf.write("\u06b3\7\n\2\2\u06b3\u06b4\7\24\2\2\u06b4\u06b5\7\u00e5")
        buf.write("\2\2\u06b5\u008d\3\2\2\2\u06b6\u06ba\5\u008cG\2\u06b7")
        buf.write("\u06b8\5\u0096L\2\u06b8\u06b9\5\u008aF\2\u06b9\u06bb\3")
        buf.write("\2\2\2\u06ba\u06b7\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc")
        buf.write("\3\2\2\2\u06bc\u06bd\5\u037a\u01be\2\u06bd\u06be\5\u0088")
        buf.write("E\2\u06be\u06bf\5\u0086D\2\u06bf\u008f\3\2\2\2\u06c0\u06c4")
        buf.write("\5\u008cG\2\u06c1\u06c2\5\u0098M\2\u06c2\u06c3\5\u008a")
        buf.write("F\2\u06c3\u06c5\3\2\2\2\u06c4\u06c1\3\2\2\2\u06c4\u06c5")
        buf.write("\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06c7\5\u037c\u01bf")
        buf.write("\2\u06c7\u06c8\5\u0088E\2\u06c8\u06c9\5\u0086D\2\u06c9")
        buf.write("\u0091\3\2\2\2\u06ca\u06ce\5\u008cG\2\u06cb\u06cc\5\u009a")
        buf.write("N\2\u06cc\u06cd\5\u008aF\2\u06cd\u06cf\3\2\2\2\u06ce\u06cb")
        buf.write("\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0")
        buf.write("\u06d1\5\u037e\u01c0\2\u06d1\u06d2\5\u0088E\2\u06d2\u06d3")
        buf.write("\5\u0086D\2\u06d3\u0093\3\2\2\2\u06d4\u06f7\7\u0272\2")
        buf.write("\2\u06d5\u06f7\7\u0198\2\2\u06d6\u06d7\7\22\2\2\u06d7")
        buf.write("\u06f7\7\u00ac\2\2\u06d8\u06d9\7\u01a2\2\2\u06d9\u06f7")
        buf.write("\7\u0093\2\2\u06da\u06f7\7+\2\2\u06db\u06f7\7D\2\2\u06dc")
        buf.write("\u06f7\7\u02fb\2\2\u06dd\u06f7\7U\2\2\u06de\u06f7\7n\2")
        buf.write("\2\u06df\u06e0\7\u020b\2\2\u06e0\u06f7\7\u01b1\2\2\u06e1")
        buf.write("\u06e2\7\u020b\2\2\u06e2\u06f7\7\u02e1\2\2\u06e3\u06e4")
        buf.write("\7\u0251\2\2\u06e4\u06f7\7\u02fb\2\2\u06e5\u06e6\7\u02a7")
        buf.write("\2\2\u06e6\u06e7\7\u0138\2\2\u06e7\u06f7\7\u01a9\2\2\u06e8")
        buf.write("\u06f7\7\u0121\2\2\u06e9\u06f7\7\u02b8\2\2\u06ea\u06f7")
        buf.write("\7\u012e\2\2\u06eb\u06ec\7\u02c2\2\2\u06ec\u06ed\7\u0290")
        buf.write("\2\2\u06ed\u06f7\7\u0234\2\2\u06ee\u06ef\7\u0137\2\2\u06ef")
        buf.write("\u06f7\7\u0121\2\2\u06f0\u06f7\7\u0138\2\2\u06f1\u06f2")
        buf.write("\7\u02e6\2\2\u06f2\u06f7\7\u00ac\2\2\u06f3\u06f4\7\u030e")
        buf.write("\2\2\u06f4\u06f5\7\u012e\2\2\u06f5\u06f7\7\u01b8\2\2\u06f6")
        buf.write("\u06d4\3\2\2\2\u06f6\u06d5\3\2\2\2\u06f6\u06d6\3\2\2\2")
        buf.write("\u06f6\u06d8\3\2\2\2\u06f6\u06da\3\2\2\2\u06f6\u06db\3")
        buf.write("\2\2\2\u06f6\u06dc\3\2\2\2\u06f6\u06dd\3\2\2\2\u06f6\u06de")
        buf.write("\3\2\2\2\u06f6\u06df\3\2\2\2\u06f6\u06e1\3\2\2\2\u06f6")
        buf.write("\u06e3\3\2\2\2\u06f6\u06e5\3\2\2\2\u06f6\u06e8\3\2\2\2")
        buf.write("\u06f6\u06e9\3\2\2\2\u06f6\u06ea\3\2\2\2\u06f6\u06eb\3")
        buf.write("\2\2\2\u06f6\u06ee\3\2\2\2\u06f6\u06f0\3\2\2\2\u06f6\u06f1")
        buf.write("\3\2\2\2\u06f6\u06f3\3\2\2\2\u06f7\u0095\3\2\2\2\u06f8")
        buf.write("\u070e\7\u0272\2\2\u06f9\u070e\7\u0198\2\2\u06fa\u06fb")
        buf.write("\7\22\2\2\u06fb\u070e\7\u00ac\2\2\u06fc\u070e\7+\2\2\u06fd")
        buf.write("\u070e\7\u02fb\2\2\u06fe\u070e\7U\2\2\u06ff\u0700\7\u020b")
        buf.write("\2\2\u0700\u070e\7\u01b1\2\2\u0701\u0702\7\u020b\2\2\u0702")
        buf.write("\u070e\7\u02e1\2\2\u0703\u070e\7\u0121\2\2\u0704\u070e")
        buf.write("\7\u012e\2\2\u0705\u0706\7\u02c2\2\2\u0706\u0707\7\u0290")
        buf.write("\2\2\u0707\u070e\7\u0234\2\2\u0708\u0709\7\u02e6\2\2\u0709")
        buf.write("\u070e\7\u00ac\2\2\u070a\u070b\7\u030e\2\2\u070b\u070c")
        buf.write("\7\u012e\2\2\u070c\u070e\7\u01b8\2\2\u070d\u06f8\3\2\2")
        buf.write("\2\u070d\u06f9\3\2\2\2\u070d\u06fa\3\2\2\2\u070d\u06fc")
        buf.write("\3\2\2\2\u070d\u06fd\3\2\2\2\u070d\u06fe\3\2\2\2\u070d")
        buf.write("\u06ff\3\2\2\2\u070d\u0701\3\2\2\2\u070d\u0703\3\2\2\2")
        buf.write("\u070d\u0704\3\2\2\2\u070d\u0705\3\2\2\2\u070d\u0708\3")
        buf.write("\2\2\2\u070d\u070a\3\2\2\2\u070e\u0097\3\2\2\2\u070f\u0710")
        buf.write("\t\r\2\2\u0710\u0099\3\2\2\2\u0711\u0712\t\16\2\2\u0712")
        buf.write("\u009b\3\2\2\2\u0713\u0714\7h\2\2\u0714\u0715\7\u01a2")
        buf.write("\2\2\u0715\u0716\7\u0093\2\2\u0716\u0717\5\u03b6\u01dc")
        buf.write("\2\u0717\u009d\3\2\2\2\u0718\u0719\5\u00a0Q\2\u0719\u071a")
        buf.write("\5\u00a2R\2\u071a\u009f\3\2\2\2\u071b\u071c\7\n\2\2\u071c")
        buf.write("\u071d\7\u01a2\2\2\u071d\u071e\7\u0093\2\2\u071e\u071f")
        buf.write("\5\u03b6\u01dc\2\u071f\u00a1\3\2\2\2\u0720\u0721\7\u013d")
        buf.write("\2\2\u0721\u0731\7\u0335\2\2\u0722\u0723\7\26\2\2\u0723")
        buf.write("\u0724\7\u0323\2\2\u0724\u0732\t\17\2\2\u0725\u0726\7")
        buf.write("\u01fa\2\2\u0726\u0727\7\u0323\2\2\u0727\u0732\7\u031b")
        buf.write("\2\2\u0728\u0729\7\u0216\2\2\u0729\u072a\7\u0323\2\2\u072a")
        buf.write("\u0732\7\u031b\2\2\u072b\u072c\7\u01d2\2\2\u072c\u072d")
        buf.write("\7\u0323\2\2\u072d\u0732\t\t\2\2\u072e\u072f\7\u02b0\2")
        buf.write("\2\u072f\u0730\7\u0323\2\2\u0730\u0732\7\u031b\2\2\u0731")
        buf.write("\u0722\3\2\2\2\u0731\u0725\3\2\2\2\u0731\u0728\3\2\2\2")
        buf.write("\u0731\u072b\3\2\2\2\u0731\u072e\3\2\2\2\u0732\u0733\3")
        buf.write("\2\2\2\u0733\u087f\7\u0336\2\2\u0734\u0735\7\4\2\2\u0735")
        buf.write("\u0736\7U\2\2\u0736\u087f\5\u03b6\u01dc\2\u0737\u0738")
        buf.write("\7\u02a9\2\2\u0738\u0739\7U\2\2\u0739\u087f\5\u03b6\u01dc")
        buf.write("\2\u073a\u073b\7\4\2\2\u073b\u073c\7\u02ac\2\2\u073c\u073d")
        buf.write("\7\u00e5\2\2\u073d\u073e\7\u031f\2\2\u073e\u073f\7\u017c")
        buf.write("\2\2\u073f\u0743\7\u0335\2\2\u0740\u0741\7\u01ef\2\2\u0741")
        buf.write("\u0742\7\u0323\2\2\u0742\u0744\7\u031f\2\2\u0743\u0740")
        buf.write("\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u074b\3\2\2\2\u0745")
        buf.write("\u0747\7\u0337\2\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2")
        buf.write("\2\2\u0747\u0748\3\2\2\2\u0748\u0749\7\30\2\2\u0749\u074a")
        buf.write("\7\u0323\2\2\u074a\u074c\t\20\2\2\u074b\u0746\3\2\2\2")
        buf.write("\u074b\u074c\3\2\2\2\u074c\u0753\3\2\2\2\u074d\u074f\7")
        buf.write("\u0337\2\2\u074e\u074d\3\2\2\2\u074e\u074f\3\2\2\2\u074f")
        buf.write("\u0750\3\2\2\2\u0750\u0751\7\u01f8\2\2\u0751\u0752\7\u0323")
        buf.write("\2\2\u0752\u0754\t\21\2\2\u0753\u074e\3\2\2\2\u0753\u0754")
        buf.write("\3\2\2\2\u0754\u075b\3\2\2\2\u0755\u0757\7\u0337\2\2\u0756")
        buf.write("\u0755\3\2\2\2\u0756\u0757\3\2\2\2\u0757\u0758\3\2\2\2")
        buf.write("\u0758\u0759\7\u02c9\2\2\u0759\u075a\7\u0323\2\2\u075a")
        buf.write("\u075c\t\21\2\2\u075b\u0756\3\2\2\2\u075b\u075c\3\2\2")
        buf.write("\2\u075c\u0763\3\2\2\2\u075d\u075f\7\u0337\2\2\u075e\u075d")
        buf.write("\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0760\3\2\2\2\u0760")
        buf.write("\u0761\7\u01a4\2\2\u0761\u0762\7\u0323\2\2\u0762\u0764")
        buf.write("\7\u031b\2\2\u0763\u075e\3\2\2\2\u0763\u0764\3\2\2\2\u0764")
        buf.write("\u076e\3\2\2\2\u0765\u0767\7\u0337\2\2\u0766\u0765\3\2")
        buf.write("\2\2\u0766\u0767\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u0769")
        buf.write("\7\u0288\2\2\u0769\u076a\7\u0335\2\2\u076a\u076b\7\7\2")
        buf.write("\2\u076b\u076c\7\u0323\2\2\u076c\u076d\t\22\2\2\u076d")
        buf.write("\u076f\7\u0336\2\2\u076e\u0766\3\2\2\2\u076e\u076f\3\2")
        buf.write("\2\2\u076f\u0779\3\2\2\2\u0770\u0772\7\u0337\2\2\u0771")
        buf.write("\u0770\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0773\3\2\2\2")
        buf.write("\u0773\u0774\7\u02c5\2\2\u0774\u0775\7\u0335\2\2\u0775")
        buf.write("\u0776\7\7\2\2\u0776\u0777\7\u0323\2\2\u0777\u0778\7\u029d")
        buf.write("\2\2\u0778\u077a\7\u0336\2\2\u0779\u0771\3\2\2\2\u0779")
        buf.write("\u077a\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u087f\7\u0336")
        buf.write("\2\2\u077c\u077d\7\u02c5\2\2\u077d\u0786\7\u0335\2\2\u077e")
        buf.write("\u077f\7\7\2\2\u077f\u0780\7\u0323\2\2\u0780\u0787\t\23")
        buf.write("\2\2\u0781\u0782\7\u029e\2\2\u0782\u0783\7\u0323\2\2\u0783")
        buf.write("\u0784\7\u0335\2\2\u0784\u0785\7\u031f\2\2\u0785\u0787")
        buf.write("\7\u0336\2\2\u0786\u077e\3\2\2\2\u0786\u0781\3\2\2\2\u0787")
        buf.write("\u087f\3\2\2\2\u0788\u0789\7\u0288\2\2\u0789\u07a0\7\u0335")
        buf.write("\2\2\u078a\u078b\7\7\2\2\u078b\u078c\7\u0323\2\2\u078c")
        buf.write("\u07a1\t\23\2\2\u078d\u078e\7\u029e\2\2\u078e\u078f\7")
        buf.write("\u0323\2\2\u078f\u079a\7\u0335\2\2\u0790\u0792\7\u0337")
        buf.write("\2\2\u0791\u0790\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0793")
        buf.write("\3\2\2\2\u0793\u0795\7\u031f\2\2\u0794\u0791\3\2\2\2\u0795")
        buf.write("\u0798\3\2\2\2\u0796\u0794\3\2\2\2\u0796\u0797\3\2\2\2")
        buf.write("\u0797\u079b\3\2\2\2\u0798\u0796\3\2\2\2\u0799\u079b\7")
        buf.write("\u00d5\2\2\u079a\u0796\3\2\2\2\u079a\u0799\3\2\2\2\u079b")
        buf.write("\u079c\3\2\2\2\u079c\u07a1\7\u0336\2\2\u079d\u079e\7\u02cf")
        buf.write("\2\2\u079e\u079f\7\u0323\2\2\u079f\u07a1\7\u031b\2\2\u07a0")
        buf.write("\u078a\3\2\2\2\u07a0\u078d\3\2\2\2\u07a0\u079d\3\2\2\2")
        buf.write("\u07a1\u087f\3\2\2\2\u07a2\u07a3\7\u025b\2\2\u07a3\u07a4")
        buf.write("\7\u02ac\2\2\u07a4\u07a5\7\u00e5\2\2\u07a5\u07df\7\u031f")
        buf.write("\2\2\u07a6\u07a7\7\u017c\2\2\u07a7\u07b7\7\u0335\2\2\u07a8")
        buf.write("\u07a9\7\u01ef\2\2\u07a9\u07aa\7\u0323\2\2\u07aa\u07b8")
        buf.write("\7\u031f\2\2\u07ab\u07ac\7\30\2\2\u07ac\u07ad\7\u0323")
        buf.write("\2\2\u07ad\u07b8\t\20\2\2\u07ae\u07af\7\u01f8\2\2\u07af")
        buf.write("\u07b0\7\u0323\2\2\u07b0\u07b8\t\21\2\2\u07b1\u07b2\7")
        buf.write("\u02c9\2\2\u07b2\u07b3\7\u0323\2\2\u07b3\u07b8\t\21\2")
        buf.write("\2\u07b4\u07b5\7\u01a4\2\2\u07b5\u07b6\7\u0323\2\2\u07b6")
        buf.write("\u07b8\7\u031b\2\2\u07b7\u07a8\3\2\2\2\u07b7\u07ab\3\2")
        buf.write("\2\2\u07b7\u07ae\3\2\2\2\u07b7\u07b1\3\2\2\2\u07b7\u07b4")
        buf.write("\3\2\2\2\u07b8\u07e0\3\2\2\2\u07b9\u07ba\7\u02c5\2\2\u07ba")
        buf.write("\u07c3\7\u0335\2\2\u07bb\u07bc\7\7\2\2\u07bc\u07bd\7\u0323")
        buf.write("\2\2\u07bd\u07c4\t\23\2\2\u07be\u07bf\7\u029e\2\2\u07bf")
        buf.write("\u07c0\7\u0323\2\2\u07c0\u07c1\7\u0335\2\2\u07c1\u07c2")
        buf.write("\7\u031f\2\2\u07c2\u07c4\7\u0336\2\2\u07c3\u07bb\3\2\2")
        buf.write("\2\u07c3\u07be\3\2\2\2\u07c4\u07e0\3\2\2\2\u07c5\u07c6")
        buf.write("\7\u0288\2\2\u07c6\u07dd\7\u0335\2\2\u07c7\u07c8\7\7\2")
        buf.write("\2\u07c8\u07c9\7\u0323\2\2\u07c9\u07de\t\23\2\2\u07ca")
        buf.write("\u07cb\7\u029e\2\2\u07cb\u07cc\7\u0323\2\2\u07cc\u07d7")
        buf.write("\7\u0335\2\2\u07cd\u07cf\7\u0337\2\2\u07ce\u07cd\3\2\2")
        buf.write("\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d2")
        buf.write("\7\u031f\2\2\u07d1\u07ce\3\2\2\2\u07d2\u07d5\3\2\2\2\u07d3")
        buf.write("\u07d1\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d8\3\2\2\2")
        buf.write("\u07d5\u07d3\3\2\2\2\u07d6\u07d8\7\u00d5\2\2\u07d7\u07d3")
        buf.write("\3\2\2\2\u07d7\u07d6\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9")
        buf.write("\u07de\7\u0336\2\2\u07da\u07db\7\u02cf\2\2\u07db\u07dc")
        buf.write("\7\u0323\2\2\u07dc\u07de\7\u031b\2\2\u07dd\u07c7\3\2\2")
        buf.write("\2\u07dd\u07ca\3\2\2\2\u07dd\u07da\3\2\2\2\u07de\u07e0")
        buf.write("\3\2\2\2\u07df\u07a6\3\2\2\2\u07df\u07b9\3\2\2\2\u07df")
        buf.write("\u07c5\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u087f\7\u0336")
        buf.write("\2\2\u07e2\u07e3\7\u02a9\2\2\u07e3\u07e4\7\u02ac\2\2\u07e4")
        buf.write("\u07e5\7\u00e5\2\2\u07e5\u087f\7\u031f\2\2\u07e6\u087f")
        buf.write("\7\u00aa\2\2\u07e7\u07e8\7\u00aa\2\2\u07e8\u07e9\7\u01a2")
        buf.write("\2\2\u07e9\u07ea\7\u0093\2\2\u07ea\u0801\7\u00e5\2\2\u07eb")
        buf.write("\u07ed\7\u0337\2\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2")
        buf.write("\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\7\u031f\2\2\u07ef")
        buf.write("\u07f0\7\u017c\2\2\u07f0\u07f1\7\u0335\2\2\u07f1\u07f2")
        buf.write("\7\u0236\2\2\u07f2\u07f3\7\u0323\2\2\u07f3\u07f4\7\u031f")
        buf.write("\2\2\u07f4\u07f5\7\u0337\2\2\u07f5\u07f6\7\30\2\2\u07f6")
        buf.write("\u07f7\7\u0323\2\2\u07f7\u07f8\t\20\2\2\u07f8\u07f9\7")
        buf.write("\u0337\2\2\u07f9\u07fa\7\u01f8\2\2\u07fa\u07fb\7\u0323")
        buf.write("\2\2\u07fb\u07fc\7\u023f\2\2\u07fc\u07fd\7\u0337\2\2\u07fd")
        buf.write("\u07fe\7\u02c9\2\2\u07fe\u07ff\7\u0323\2\2\u07ff\u0800")
        buf.write("\t\21\2\2\u0800\u0802\7\u0336\2\2\u0801\u07ec\3\2\2\2")
        buf.write("\u0802\u0803\3\2\2\2\u0803\u0801\3\2\2\2\u0803\u0804\3")
        buf.write("\2\2\2\u0804\u087f\3\2\2\2\u0805\u0806\7\u025b\2\2\u0806")
        buf.write("\u0807\7\u01a2\2\2\u0807\u0808\7\u0093\2\2\u0808\u082b")
        buf.write("\7\u00e5\2\2\u0809\u080b\7\u0337\2\2\u080a\u0809\3\2\2")
        buf.write("\2\u080a\u080b\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d")
        buf.write("\7\u031f\2\2\u080d\u080e\7\u017c\2\2\u080e\u080f\7\u0335")
        buf.write("\2\2\u080f\u0810\7\u0236\2\2\u0810\u0811\7\u0323\2\2\u0811")
        buf.write("\u0818\7\u031f\2\2\u0812\u0814\7\u0337\2\2\u0813\u0812")
        buf.write("\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0815\3\2\2\2\u0815")
        buf.write("\u0816\7\30\2\2\u0816\u0817\7\u0323\2\2\u0817\u0819\t")
        buf.write("\20\2\2\u0818\u0813\3\2\2\2\u0818\u0819\3\2\2\2\u0819")
        buf.write("\u0820\3\2\2\2\u081a\u081c\7\u0337\2\2\u081b\u081a\3\2")
        buf.write("\2\2\u081b\u081c\3\2\2\2\u081c\u081d\3\2\2\2\u081d\u081e")
        buf.write("\7\u01f8\2\2\u081e\u081f\7\u0323\2\2\u081f\u0821\7\u023f")
        buf.write("\2\2\u0820\u081b\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0828")
        buf.write("\3\2\2\2\u0822\u0824\7\u0337\2\2\u0823\u0822\3\2\2\2\u0823")
        buf.write("\u0824\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u0826\7\u02c9")
        buf.write("\2\2\u0826\u0827\7\u0323\2\2\u0827\u0829\t\21\2\2\u0828")
        buf.write("\u0823\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u082a\3\2\2\2")
        buf.write("\u082a\u082c\7\u0336\2\2\u082b\u080a\3\2\2\2\u082c\u082d")
        buf.write("\3\2\2\2\u082d\u082b\3\2\2\2\u082d\u082e\3\2\2\2\u082e")
        buf.write("\u087f\3\2\2\2\u082f\u0830\7\u0092\2\2\u0830\u0831\7I")
        buf.write("\2\2\u0831\u0832\7\r\2\2\u0832\u087f\7U\2\2\u0833\u0834")
        buf.write("\7^\2\2\u0834\u0835\7I\2\2\u0835\u0836\7\r\2\2\u0836\u087f")
        buf.write("\7U\2\2\u0837\u087f\7~\2\2\u0838\u087f\7\u0206\2\2\u0839")
        buf.write("\u083a\7\4\2\2\u083a\u083b\7\u0235\2\2\u083b\u083c\7\u031f")
        buf.write("\2\2\u083c\u085e\7\u0335\2\2\u083d\u083e\7\u017c\2\2\u083e")
        buf.write("\u083f\7\u01df\2\2\u083f\u0840\7\u00e5\2\2\u0840\u0841")
        buf.write("\7\u0335\2\2\u0841\u0842\7\u00a6\2\2\u0842\u0843\7\u00a6")
        buf.write("\2\2\u0843\u0844\3\2\2\2\u0844\u085f\7\u0336\2\2\u0845")
        buf.write("\u0846\7\u017c\2\2\u0846\u0847\7\u0226\2\2\u0847\u0853")
        buf.write("\7\u0335\2\2\u0848\u084a\7\u0337\2\2\u0849\u0848\3\2\2")
        buf.write("\2\u0849\u084a\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u0850")
        buf.write("\7\u0335\2\2\u084c\u084d\7\u00a6\2\2\u084d\u084e\7\u0337")
        buf.write("\2\2\u084e\u0851\7\u00a6\2\2\u084f\u0851\7\u00a7\2\2\u0850")
        buf.write("\u084c\3\2\2\2\u0850\u084f\3\2\2\2\u0851\u0852\3\2\2\2")
        buf.write("\u0852\u0854\7\u0336\2\2\u0853\u0849\3\2\2\2\u0854\u0855")
        buf.write("\3\2\2\2\u0855\u0853\3\2\2\2\u0855\u0856\3\2\2\2\u0856")
        buf.write("\u0857\3\2\2\2\u0857\u085c\7\u0336\2\2\u0858\u0859\7\u0337")
        buf.write("\2\2\u0859\u085a\7\u0286\2\2\u085a\u085b\7\u0323\2\2\u085b")
        buf.write("\u085d\7\u031b\2\2\u085c\u0858\3\2\2\2\u085c\u085d\3\2")
        buf.write("\2\2\u085d\u085f\3\2\2\2\u085e\u083d\3\2\2\2\u085e\u0845")
        buf.write("\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u087f\7\u0336\2\2\u0861")
        buf.write("\u0862\7\u025b\2\2\u0862\u086f\7\u0235\2\2\u0863\u0864")
        buf.write("\7\4\2\2\u0864\u0865\7\u0226\2\2\u0865\u0869\7\u0335\2")
        buf.write("\2\u0866\u0867\7\u00a6\2\2\u0867\u086a\7\u00a6\2\2\u0868")
        buf.write("\u086a\7\u00a7\2\2\u0869\u0866\3\2\2\2\u0869\u0868\3\2")
        buf.write("\2\2\u086a\u086b\3\2\2\2\u086b\u0870\7\u0336\2\2\u086c")
        buf.write("\u086d\7\u0286\2\2\u086d\u086e\7\u0323\2\2\u086e\u0870")
        buf.write("\7\u031b\2\2\u086f\u0863\3\2\2\2\u086f\u086c\3\2\2\2\u0870")
        buf.write("\u087f\3\2\2\2\u0871\u0872\7\u0115\2\2\u0872\u0873\7\u0235")
        buf.write("\2\2\u0873\u087f\7\u031f\2\2\u0874\u0875\7\u02a9\2\2\u0875")
        buf.write("\u0876\7\u0235\2\2\u0876\u087f\7\u031f\2\2\u0877\u087f")
        buf.write("\7\u0273\2\2\u0878\u0879\7\u017c\2\2\u0879\u087a\7\u0335")
        buf.write("\2\2\u087a\u087b\7i\2\2\u087b\u087c\7\u0323\2\2\u087c")
        buf.write("\u087d\7\u00f8\2\2\u087d\u087f\7\u0336\2\2\u087e\u0720")
        buf.write("\3\2\2\2\u087e\u0734\3\2\2\2\u087e\u0737\3\2\2\2\u087e")
        buf.write("\u073a\3\2\2\2\u087e\u077c\3\2\2\2\u087e\u0788\3\2\2\2")
        buf.write("\u087e\u07a2\3\2\2\2\u087e\u07e2\3\2\2\2\u087e\u07e6\3")
        buf.write("\2\2\2\u087e\u07e7\3\2\2\2\u087e\u0805\3\2\2\2\u087e\u082f")
        buf.write("\3\2\2\2\u087e\u0833\3\2\2\2\u087e\u0837\3\2\2\2\u087e")
        buf.write("\u0838\3\2\2\2\u087e\u0839\3\2\2\2\u087e\u0861\3\2\2\2")
        buf.write("\u087e\u0871\3\2\2\2\u087e\u0874\3\2\2\2\u087e\u0877\3")
        buf.write("\2\2\2\u087e\u0878\3\2\2\2\u087f\u00a3\3\2\2\2\u0880\u0881")
        buf.write("\t\24\2\2\u0881\u0882\7\u01ab\2\2\u0882\u0883\7\u028a")
        buf.write("\2\2\u0883\u0884\5\u03b6\u01dc\2\u0884\u0885\7\u0086\2")
        buf.write("\2\u0885\u0886\7F\2\2\u0886\u0887\7\u013d\2\2\u0887\u0891")
        buf.write("\7\u0335\2\2\u0888\u0889\7E\2\2\u0889\u088c\7\u0323\2")
        buf.write("\2\u088a\u088d\5\u03b6\u01dc\2\u088b\u088d\7\r\2\2\u088c")
        buf.write("\u088a\3\2\2\2\u088c\u088b\3\2\2\2\u088d\u088f\3\2\2\2")
        buf.write("\u088e\u0890\7\u0337\2\2\u088f\u088e\3\2\2\2\u088f\u0890")
        buf.write("\3\2\2\2\u0890\u0892\3\2\2\2\u0891\u0888\3\2\2\2\u0891")
        buf.write("\u0892\3\2\2\2\u0892\u089f\3\2\2\2\u0893\u0894\7\u00ba")
        buf.write("\2\2\u0894\u089a\7\u0323\2\2\u0895\u0897\7g\2\2\u0896")
        buf.write("\u0895\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0898\3\2\2\2")
        buf.write("\u0898\u089b\5\u03b6\u01dc\2\u0899\u089b\7\r\2\2\u089a")
        buf.write("\u0896\3\2\2\2\u089a\u0899\3\2\2\2\u089b\u089d\3\2\2\2")
        buf.write("\u089c\u089e\7\u0337\2\2\u089d\u089c\3\2\2\2\u089d\u089e")
        buf.write("\3\2\2\2\u089e\u08a0\3\2\2\2\u089f\u0893\3\2\2\2\u089f")
        buf.write("\u08a0\3\2\2\2\u08a0\u08aa\3\2\2\2\u08a1\u08a2\7\u02a8")
        buf.write("\2\2\u08a2\u08a5\7\u0323\2\2\u08a3\u08a6\7\u031f\2\2\u08a4")
        buf.write("\u08a6\7\r\2\2\u08a5\u08a3\3\2\2\2\u08a5\u08a4\3\2\2\2")
        buf.write("\u08a6\u08a8\3\2\2\2\u08a7\u08a9\7\u0337\2\2\u08a8\u08a7")
        buf.write("\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08ab\3\2\2\2\u08aa")
        buf.write("\u08a1\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08b2\3\2\2\2")
        buf.write("\u08ac\u08ad\7\u028b\2\2\u08ad\u08b0\7\u0323\2\2\u08ae")
        buf.write("\u08b1\7\u031b\2\2\u08af\u08b1\7Z\2\2\u08b0\u08ae\3\2")
        buf.write("\2\2\u08b0\u08af\3\2\2\2\u08b1\u08b3\3\2\2\2\u08b2\u08ac")
        buf.write("\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4")
        buf.write("\u08b5\7\u0336\2\2\u08b5\u00a5\3\2\2\2\u08b6\u08b7\7h")
        buf.write("\2\2\u08b7\u08b8\7\u01ab\2\2\u08b8\u08b9\7\u028a\2\2\u08b9")
        buf.write("\u08ba\5\u03b6\u01dc\2\u08ba\u00a7\3\2\2\2\u08bb\u08bc")
        buf.write("\7\n\2\2\u08bc\u08bd\7+\2\2\u08bd\u08e5\5\u03b6\u01dc")
        buf.write("\2\u08be\u08bf\7\u02a9\2\2\u08bf\u08e6\7\u028d\2\2\u08c0")
        buf.write("\u08c1\7\u017c\2\2\u08c1\u08c2\7\u028c\2\2\u08c2\u08c3")
        buf.write("\7\u00ac\2\2\u08c3\u08da\7\u0335\2\2\u08c4\u08c5\7\u0082")
        buf.write("\2\2\u08c5\u08c6\7\u0323\2\2\u08c6\u08c8\7\u031f\2\2\u08c7")
        buf.write("\u08c9\7\u0337\2\2\u08c8\u08c7\3\2\2\2\u08c8\u08c9\3\2")
        buf.write("\2\2\u08c9\u08db\3\2\2\2\u08ca\u08cb\7\u01d3\2\2\u08cb")
        buf.write("\u08cc\7&\2\2\u08cc\u08cd\7\u00f4\2\2\u08cd\u08ce\7\u0323")
        buf.write("\2\2\u08ce\u08d0\7\u031f\2\2\u08cf\u08d1\7\u0337\2\2\u08d0")
        buf.write("\u08cf\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08db\3\2\2\2")
        buf.write("\u08d2\u08d3\7\u01ee\2\2\u08d3\u08d4\7&\2\2\u08d4\u08d5")
        buf.write("\7\u00f4\2\2\u08d5\u08d6\7\u0323\2\2\u08d6\u08d8\7\u031f")
        buf.write("\2\2\u08d7\u08d9\7\u0337\2\2\u08d8\u08d7\3\2\2\2\u08d8")
        buf.write("\u08d9\3\2\2\2\u08d9\u08db\3\2\2\2\u08da\u08c4\3\2\2\2")
        buf.write("\u08da\u08ca\3\2\2\2\u08da\u08d2\3\2\2\2\u08db\u08dc\3")
        buf.write("\2\2\2\u08dc\u08da\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08de")
        buf.write("\3\2\2\2\u08de\u08e6\7\u0336\2\2\u08df\u08e0\7\u017c\2")
        buf.write("\2\u08e0\u08e1\7\u0185\2\2\u08e1\u08e2\7\u0086\2\2\u08e2")
        buf.write("\u08e3\7\u01a5\2\2\u08e3\u08e4\7\u0323\2\2\u08e4\u08e6")
        buf.write("\t\t\2\2\u08e5\u08be\3\2\2\2\u08e5\u08c0\3\2\2\2\u08e5")
        buf.write("\u08df\3\2\2\2\u08e6\u00a9\3\2\2\2\u08e7\u08e8\7\n\2\2")
        buf.write("\u08e8\u08e9\78\2\2\u08e9\u08ea\7\u01ee\2\2\u08ea\u08eb")
        buf.write("\7\u00ac\2\2\u08eb\u08ec\5\u03b6\u01dc\2\u08ec\u08ed\t")
        buf.write("\25\2\2\u08ed\u08ee\7\u0304\2\2\u08ee\u08ef\7\u0335\2")
        buf.write("\2\u08ef\u08f0\7\u01b9\2\2\u08f0\u08f1\7\u0323\2\2\u08f1")
        buf.write("\u08fa\5\u03b6\u01dc\2\u08f2\u08f3\7\u0337\2\2\u08f3\u08f4")
        buf.write("\7\u018d\2\2\u08f4\u08f5\7\u0323\2\2\u08f5\u08f6\7\u031f")
        buf.write("\2\2\u08f6\u08f7\7\u0337\2\2\u08f7\u08f8\7\u01ed\2\2\u08f8")
        buf.write("\u08f9\7\u0323\2\2\u08f9\u08fb\7\u0320\2\2\u08fa\u08f2")
        buf.write("\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc")
        buf.write("\u08fd\7\u0336\2\2\u08fd\u00ab\3\2\2\2\u08fe\u08ff\7I")
        buf.write("\2\2\u08ff\u0900\78\2\2\u0900\u0901\7\u01ee\2\2\u0901")
        buf.write("\u0902\7\u00ac\2\2\u0902\u0903\5\u03b6\u01dc\2\u0903\u0904")
        buf.write("\7\u017c\2\2\u0904\u0918\7\u0172\2\2\u0905\u0907\7\u0335")
        buf.write("\2\2\u0906\u0908\7\u0337\2\2\u0907\u0906\3\2\2\2\u0907")
        buf.write("\u0908\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090a\7\u01b9")
        buf.write("\2\2\u090a\u090b\7\u0323\2\2\u090b\u090c\5\u03b6\u01dc")
        buf.write("\2\u090c\u090d\7\u0337\2\2\u090d\u090e\7\u018d\2\2\u090e")
        buf.write("\u090f\7\u0323\2\2\u090f\u0910\7\u031f\2\2\u0910\u0911")
        buf.write("\7\u0337\2\2\u0911\u0912\7\u01ed\2\2\u0912\u0913\7\u0323")
        buf.write("\2\2\u0913\u0914\7\u0320\2\2\u0914\u0916\7\u0336\2\2\u0915")
        buf.write("\u0917\7\u0337\2\2\u0916\u0915\3\2\2\2\u0916\u0917\3\2")
        buf.write("\2\2\u0917\u0919\3\2\2\2\u0918\u0905\3\2\2\2\u0919\u091a")
        buf.write("\3\2\2\2\u091a\u0918\3\2\2\2\u091a\u091b\3\2\2\2\u091b")
        buf.write("\u00ad\3\2\2\2\u091c\u091d\7h\2\2\u091d\u091e\7+\2\2\u091e")
        buf.write("\u091f\5\u03b6\u01dc\2\u091f\u00af\3\2\2\2\u0920\u0921")
        buf.write("\7h\2\2\u0921\u0922\78\2\2\u0922\u0923\7\u01ee\2\2\u0923")
        buf.write("\u0924\7\u00ac\2\2\u0924\u0925\5\u03b6\u01dc\2\u0925\u00b1")
        buf.write("\3\2\2\2\u0926\u0927\7h\2\2\u0927\u0928\78\2\2\u0928\u0929")
        buf.write("\7\u00bd\2\2\u0929\u092a\7\u00ac\2\2\u092a\u092b\5\u03b6")
        buf.write("\u01dc\2\u092b\u00b3\3\2\2\2\u092c\u092d\7h\2\2\u092d")
        buf.write("\u092e\7D\2\2\u092e\u092f\5\u03b6\u01dc\2\u092f\u00b5")
        buf.write("\3\2\2\2\u0930\u0931\7h\2\2\u0931\u0932\7\u01c7\2\2\u0932")
        buf.write("\u0933\5\u03b6\u01dc\2\u0933\u00b7\3\2\2\2\u0934\u0935")
        buf.write("\7h\2\2\u0935\u0936\7\u01c8\2\2\u0936\u0937\7\u0291\2")
        buf.write("\2\u0937\u0938\5\u03b6\u01dc\2\u0938\u00b9\3\2\2\2\u0939")
        buf.write("\u093a\7h\2\2\u093a\u093d\7U\2\2\u093b\u093c\7\u009a\2")
        buf.write("\2\u093c\u093e\7x\2\2\u093d\u093b\3\2\2\2\u093d\u093e")
        buf.write("\3\2\2\2\u093e\u0943\3\2\2\2\u093f\u0941\7\u0337\2\2\u0940")
        buf.write("\u093f\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0942\3\2\2\2")
        buf.write("\u0942\u0944\5\u03b6\u01dc\2\u0943\u0940\3\2\2\2\u0944")
        buf.write("\u0945\3\2\2\2\u0945\u0943\3\2\2\2\u0945\u0946\3\2\2\2")
        buf.write("\u0946\u00bb\3\2\2\2\u0947\u0948\7h\2\2\u0948\u0949\7")
        buf.write("U\2\2\u0949\u094a\7\u0199\2\2\u094a\u094b\7\u0145\2\2")
        buf.write("\u094b\u094c\5\u03b6\u01dc\2\u094c\u00bd\3\2\2\2\u094d")
        buf.write("\u094e\7h\2\2\u094e\u094f\7U\2\2\u094f\u0950\7\u02bf\2")
        buf.write("\2\u0950\u0951\7\u01c7\2\2\u0951\u0952\5\u03b6\u01dc\2")
        buf.write("\u0952\u00bf\3\2\2\2\u0953\u0954\7h\2\2\u0954\u0957\7")
        buf.write("Z\2\2\u0955\u0956\7\u009a\2\2\u0956\u0958\7x\2\2\u0957")
        buf.write("\u0955\3\2\2\2\u0957\u0958\3\2\2\2\u0958\u095a\3\2\2\2")
        buf.write("\u0959\u095b\7\u0337\2\2\u095a\u0959\3\2\2\2\u095a\u095b")
        buf.write("\3\2\2\2\u095b\u095f\3\2\2\2\u095c\u095d\5\u03b6\u01dc")
        buf.write("\2\u095d\u095e\7\u0330\2\2\u095e\u0960\3\2\2\2\u095f\u095c")
        buf.write("\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0961\3\2\2\2\u0961")
        buf.write("\u0962\5\u03b6\u01dc\2\u0962\u00c1\3\2\2\2\u0963\u0964")
        buf.write("\7h\2\2\u0964\u0965\7n\2\2\u0965\u0966\5\u03b6\u01dc\2")
        buf.write("\u0966\u00c3\3\2\2\2\u0967\u0968\7h\2\2\u0968\u0969\7")
        buf.write("|\2\2\u0969\u096a\7R\2\2\u096a\u096b\7\u0144\2\2\u096b")
        buf.write("\u096c\5\u03b6\u01dc\2\u096c\u00c5\3\2\2\2\u096d\u096e")
        buf.write("\7h\2\2\u096e\u096f\7|\2\2\u096f\u0970\7\u0082\2\2\u0970")
        buf.write("\u0971\7\u0208\2\2\u0971\u0972\5\u03b6\u01dc\2\u0972\u00c7")
        buf.write("\3\2\2\2\u0973\u0974\7h\2\2\u0974\u0975\7|\2\2\u0975\u0976")
        buf.write("\7\u00b2\2\2\u0976\u0979\5\u03b6\u01dc\2\u0977\u0978\7")
        buf.write("\24\2\2\u0978\u097a\5\u03b6\u01dc\2\u0979\u0977\3\2\2")
        buf.write("\2\u0979\u097a\3\2\2\2\u097a\u00c9\3\2\2\2\u097b\u097c")
        buf.write("\7h\2\2\u097c\u097d\7|\2\2\u097d\u097e\7\u02b2\2\2\u097e")
        buf.write("\u097f\7\u0285\2\2\u097f\u0980\5\u03b6\u01dc\2\u0980\u00cb")
        buf.write("\3\2\2\2\u0981\u0982\7h\2\2\u0982\u0983\7|\2\2\u0983\u0987")
        buf.write("\7\u0156\2\2\u0984\u0985\5\u03b6\u01dc\2\u0985\u0986\7")
        buf.write("\u0330\2\2\u0986\u0988\3\2\2\2\u0987\u0984\3\2\2\2\u0987")
        buf.write("\u0988\3\2\2\2\u0988\u098c\3\2\2\2\u0989\u098a\5\u03b6")
        buf.write("\u01dc\2\u098a\u098b\7\u0330\2\2\u098b\u098d\3\2\2\2\u098c")
        buf.write("\u0989\3\2\2\2\u098c\u098d\3\2\2\2\u098d\u098e\3\2\2\2")
        buf.write("\u098e\u098f\5\u03b6\u01dc\2\u098f\u00cd\3\2\2\2\u0990")
        buf.write("\u0991\7h\2\2\u0991\u0992\7r\2\2\u0992\u0997\7\u00dd\2")
        buf.write("\2\u0993\u0995\7\u0337\2\2\u0994\u0993\3\2\2\2\u0994\u0995")
        buf.write("\3\2\2\2\u0995\u0996\3\2\2\2\u0996\u0998\5\u03b6\u01dc")
        buf.write("\2\u0997\u0994\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u0997")
        buf.write("\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u099b\3\2\2\2\u099b")
        buf.write("\u09a0\7\u00e5\2\2\u099c\u09a1\7\u0137\2\2\u099d\u09a1")
        buf.write("\7U\2\2\u099e\u099f\7\u0294\2\2\u099f\u09a1\5\u03b6\u01dc")
        buf.write("\2\u09a0\u099c\3\2\2\2\u09a0\u099d\3\2\2\2\u09a0\u099e")
        buf.write("\3\2\2\2\u09a1\u00cf\3\2\2\2\u09a2\u09a3\7h\2\2\u09a3")
        buf.write("\u09a4\7r\2\2\u09a4\u09a5\7\u013b\2\2\u09a5\u09a6\5\u03b6")
        buf.write("\u01dc\2\u09a6\u09a7\7\u00e5\2\2\u09a7\u09a8\7\u0137\2")
        buf.write("\2\u09a8\u00d1\3\2\2\2\u09a9\u09aa\7h\2\2\u09aa\u09ab")
        buf.write("\7\u020b\2\2\u09ab\u09ac\7\u01b1\2\2\u09ac\u09ad\5\u03b6")
        buf.write("\u01dc\2\u09ad\u00d3\3\2\2\2\u09ae\u09af\7h\2\2\u09af")
        buf.write("\u09b0\7\u020b\2\2\u09b0\u09b1\7\u009e\2\2\u09b1\u09b5")
        buf.write("\7\u00e5\2\2\u09b2\u09b3\5\u03b6\u01dc\2\u09b3\u09b4\7")
        buf.write("\u0330\2\2\u09b4\u09b6\3\2\2\2\u09b5\u09b2\3\2\2\2\u09b5")
        buf.write("\u09b6\3\2\2\2\u09b6\u09b7\3\2\2\2\u09b7\u09b8\5\u03b6")
        buf.write("\u01dc\2\u09b8\u00d5\3\2\2\2\u09b9\u09ba\7h\2\2\u09ba")
        buf.write("\u09bb\7\u020b\2\2\u09bb\u09bc\7\u02e1\2\2\u09bc\u09bd")
        buf.write("\5\u03b6\u01dc\2\u09bd\u00d7\3\2\2\2\u09be\u09bf\7h\2")
        buf.write("\2\u09bf\u09c0\7\u023c\2\2\u09c0\u09c1\5\u03b6\u01dc\2")
        buf.write("\u09c1\u00d9\3\2\2\2\u09c2\u09c3\7h\2\2\u09c3\u09c4\7")
        buf.write("\u00bd\2\2\u09c4\u09c5\7\u00ac\2\2\u09c5\u00db\3\2\2\2")
        buf.write("\u09c6\u09c7\7h\2\2\u09c7\u09c8\7\u0251\2\2\u09c8\u09c9")
        buf.write("\7\u02fb\2\2\u09c9\u09ca\5\u03b6\u01dc\2\u09ca\u00dd\3")
        buf.write("\2\2\2\u09cb\u09cc\7h\2\2\u09cc\u09cd\7\u0280\2\2\u09cd")
        buf.write("\u09ce\7\u008e\2\2\u09ce\u09cf\5\u03b6\u01dc\2\u09cf\u00df")
        buf.write("\3\2\2\2\u09d0\u09d1\7h\2\2\u09d1\u09d2\7\u0280\2\2\u09d2")
        buf.write("\u09d3\7\u012f\2\2\u09d3\u09d4\5\u03b6\u01dc\2\u09d4\u00e1")
        buf.write("\3\2\2\2\u09d5\u09d6\7h\2\2\u09d6\u09da\7\u0294\2\2\u09d7")
        buf.write("\u09d8\5\u03b6\u01dc\2\u09d8\u09d9\7\u0330\2\2\u09d9\u09db")
        buf.write("\3\2\2\2\u09da\u09d7\3\2\2\2\u09da\u09db\3\2\2\2\u09db")
        buf.write("\u09df\3\2\2\2\u09dc\u09dd\5\u03b6\u01dc\2\u09dd\u09de")
        buf.write("\7\u0330\2\2\u09de\u09e0\3\2\2\2\u09df\u09dc\3\2\2\2\u09df")
        buf.write("\u09e0\3\2\2\2\u09e0\u09e1\3\2\2\2\u09e1\u09e2\5\u03b6")
        buf.write("\u01dc\2\u09e2\u00e3\3\2\2\2\u09e3\u09e4\7h\2\2\u09e4")
        buf.write("\u09e5\7\u02a7\2\2\u09e5\u09e6\7\u0138\2\2\u09e6\u09e7")
        buf.write("\7\u01a9\2\2\u09e7\u09e8\5\u03b6\u01dc\2\u09e8\u00e5\3")
        buf.write("\2\2\2\u09e9\u09ea\7h\2\2\u09ea\u09eb\7\u02b2\2\2\u09eb")
        buf.write("\u09ec\7\u0285\2\2\u09ec\u09ed\5\u03b6\u01dc\2\u09ed\u00e7")
        buf.write("\3\2\2\2\u09ee\u09ef\7h\2\2\u09ef\u09f2\7\u0121\2\2\u09f0")
        buf.write("\u09f1\7\u009a\2\2\u09f1\u09f3\7x\2\2\u09f2\u09f0\3\2")
        buf.write("\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f5")
        buf.write("\5\u03b6\u01dc\2\u09f5\u00e9\3\2\2\2\u09f6\u09f7\7h\2")
        buf.write("\2\u09f7\u09f8\7\u02b8\2\2\u09f8\u09f9\5\u03b6\u01dc\2")
        buf.write("\u09f9\u00eb\3\2\2\2\u09fa\u09fb\7h\2\2\u09fb\u09fe\7")
        buf.write("\u012a\2\2\u09fc\u09fd\7\u009a\2\2\u09fd\u09ff\7x\2\2")
        buf.write("\u09fe\u09fc\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a09\3")
        buf.write("\2\2\2\u0a00\u0a02\7\u0337\2\2\u0a01\u0a00\3\2\2\2\u0a01")
        buf.write("\u0a02\3\2\2\2\u0a02\u0a06\3\2\2\2\u0a03\u0a04\5\u03b6")
        buf.write("\u01dc\2\u0a04\u0a05\7\u0330\2\2\u0a05\u0a07\3\2\2\2\u0a06")
        buf.write("\u0a03\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07\u0a08\3\2\2\2")
        buf.write("\u0a08\u0a0a\5\u03b6\u01dc\2\u0a09\u0a01\3\2\2\2\u0a09")
        buf.write("\u0a0a\3\2\2\2\u0a0a\u00ed\3\2\2\2\u0a0b\u0a0c\7h\2\2")
        buf.write("\u0a0c\u0a0f\7\u012e\2\2\u0a0d\u0a0e\7\u009a\2\2\u0a0e")
        buf.write("\u0a10\7x\2\2\u0a0f\u0a0d\3\2\2\2\u0a0f\u0a10\3\2\2\2")
        buf.write("\u0a10\u0a11\3\2\2\2\u0a11\u0a12\5\u03b6\u01dc\2\u0a12")
        buf.write("\u00ef\3\2\2\2\u0a13\u0a14\7h\2\2\u0a14\u0a15\7\u02c2")
        buf.write("\2\2\u0a15\u0a16\7\u0290\2\2\u0a16\u0a17\7\u0234\2\2\u0a17")
        buf.write("\u0a18\5\u03b6\u01dc\2\u0a18\u00f1\3\2\2\2\u0a19\u0a1a")
        buf.write("\7h\2\2\u0a1a\u0a1b\7\u0130\2\2\u0a1b\u0a1e\7\u00fd\2")
        buf.write("\2\u0a1c\u0a1d\7\u009a\2\2\u0a1d\u0a1f\7x\2\2\u0a1e\u0a1c")
        buf.write("\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a23\3\2\2\2\u0a20")
        buf.write("\u0a21\5\u03b6\u01dc\2\u0a21\u0a22\7\u0330\2\2\u0a22\u0a24")
        buf.write("\3\2\2\2\u0a23\u0a20\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24")
        buf.write("\u0a25\3\2\2\2\u0a25\u0a26\5\u03b6\u01dc\2\u0a26\u00f3")
        buf.write("\3\2\2\2\u0a27\u0a28\7h\2\2\u0a28\u0a2b\7\u0136\2\2\u0a29")
        buf.write("\u0a2a\7\u009a\2\2\u0a2a\u0a2c\7x\2\2\u0a2b\u0a29\3\2")
        buf.write("\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a3b\3\2\2\2\u0a2d\u0a2f")
        buf.write("\7\u0337\2\2\u0a2e\u0a2d\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f")
        buf.write("\u0a33\3\2\2\2\u0a30\u0a31\5\u03b6\u01dc\2\u0a31\u0a32")
        buf.write("\7\u0330\2\2\u0a32\u0a34\3\2\2\2\u0a33\u0a30\3\2\2\2\u0a33")
        buf.write("\u0a34\3\2\2\2\u0a34\u0a38\3\2\2\2\u0a35\u0a36\5\u03b6")
        buf.write("\u01dc\2\u0a36\u0a37\7\u0330\2\2\u0a37\u0a39\3\2\2\2\u0a38")
        buf.write("\u0a35\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u0a3a\3\2\2\2")
        buf.write("\u0a3a\u0a3c\5\u03b6\u01dc\2\u0a3b\u0a2e\3\2\2\2\u0a3b")
        buf.write("\u0a3c\3\2\2\2\u0a3c\u00f5\3\2\2\2\u0a3d\u0a3e\7h\2\2")
        buf.write("\u0a3e\u0a3f\7\u0137\2\2\u0a3f\u0a40\7\u0199\2\2\u0a40")
        buf.write("\u0a41\5\u03b6\u01dc\2\u0a41\u00f7\3\2\2\2\u0a42\u0a43")
        buf.write("\7h\2\2\u0a43\u0a44\7\u0137\2\2\u0a44\u0a45\7\u0199\2")
        buf.write("\2\u0a45\u0a46\7\u0145\2\2\u0a46\u0a47\5\u03b6\u01dc\2")
        buf.write("\u0a47\u00f9\3\2\2\2\u0a48\u0a49\7h\2\2\u0a49\u0a4a\7")
        buf.write("\u0137\2\2\u0a4a\u0a4b\7\u0121\2\2\u0a4b\u0a4c\5\u03b6")
        buf.write("\u01dc\2\u0a4c\u00fb\3\2\2\2\u0a4d\u0a4e\7h\2\2\u0a4e")
        buf.write("\u0a4f\7\u0138\2\2\u0a4f\u0a50\5\u03b6\u01dc\2\u0a50\u00fd")
        buf.write("\3\2\2\2\u0a51\u0a53\7h\2\2\u0a52\u0a54\7\u01c3\2\2\u0a53")
        buf.write("\u0a52\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a55\3\2\2\2")
        buf.write("\u0a55\u0a56\7\u02d3\2\2\u0a56\u0a5a\7\u008c\2\2\u0a57")
        buf.write("\u0a58\5\u03b6\u01dc\2\u0a58\u0a59\7\u0330\2\2\u0a59\u0a5b")
        buf.write("\3\2\2\2\u0a5a\u0a57\3\2\2\2\u0a5a\u0a5b\3\2\2\2\u0a5b")
        buf.write("\u0a5c\3\2\2\2\u0a5c\u0a5d\5\u03b6\u01dc\2\u0a5d\u0a69")
        buf.write("\7&\2\2\u0a5e\u0a60\7\u0337\2\2\u0a5f\u0a5e\3\2\2\2\u0a5f")
        buf.write("\u0a60\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u0a62\7+\2\2")
        buf.write("\u0a62\u0a6a\5\u03b6\u01dc\2\u0a63\u0a65\7\u0337\2\2\u0a64")
        buf.write("\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a66\3\2\2\2")
        buf.write("\u0a66\u0a67\7\22\2\2\u0a67\u0a68\7\u00ac\2\2\u0a68\u0a6a")
        buf.write("\5\u03b6\u01dc\2\u0a69\u0a5f\3\2\2\2\u0a69\u0a64\3\2\2")
        buf.write("\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a69\3\2\2\2\u0a6b\u0a6c")
        buf.write("\3\2\2\2\u0a6c\u00ff\3\2\2\2\u0a6d\u0a6e\7h\2\2\u0a6e")
        buf.write("\u0a72\7\u014a\2\2\u0a6f\u0a70\5\u03b6\u01dc\2\u0a70\u0a71")
        buf.write("\7\u0330\2\2\u0a71\u0a73\3\2\2\2\u0a72\u0a6f\3\2\2\2\u0a72")
        buf.write("\u0a73\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a75\5\u03b6")
        buf.write("\u01dc\2\u0a75\u0a76\7\u0330\2\2\u0a76\u0a77\5\u03b6\u01dc")
        buf.write("\2\u0a77\u0101\3\2\2\2\u0a78\u0a79\7h\2\2\u0a79\u0a7a")
        buf.write("\7\u02e6\2\2\u0a7a\u0a7b\7\u00ac\2\2\u0a7b\u0a7f\5\u03b6")
        buf.write("\u01dc\2\u0a7c\u0a7d\7\u02a9\2\2\u0a7d\u0a7e\7\u0291\2")
        buf.write("\2\u0a7e\u0a80\7\u00ac\2\2\u0a7f\u0a7c\3\2\2\2\u0a7f\u0a80")
        buf.write("\3\2\2\2\u0a80\u0103\3\2\2\2\u0a81\u0a82\7h\2\2\u0a82")
        buf.write("\u0a85\7\u02e8\2\2\u0a83\u0a84\7\u009a\2\2\u0a84\u0a86")
        buf.write("\7x\2\2\u0a85\u0a83\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86")
        buf.write("\u0a8a\3\2\2\2\u0a87\u0a88\5\u03b6\u01dc\2\u0a88\u0a89")
        buf.write("\7\u0330\2\2\u0a89\u0a8b\3\2\2\2\u0a8a\u0a87\3\2\2\2\u0a8a")
        buf.write("\u0a8b\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8d\5\u03b6")
        buf.write("\u01dc\2\u0a8d\u0105\3\2\2\2\u0a8e\u0a8f\7h\2\2\u0a8f")
        buf.write("\u0a92\7\u0171\2\2\u0a90\u0a91\7\u009a\2\2\u0a91\u0a93")
        buf.write("\7x\2\2\u0a92\u0a90\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93")
        buf.write("\u0a94\3\2\2\2\u0a94\u0a95\5\u03b6\u01dc\2\u0a95\u0107")
        buf.write("\3\2\2\2\u0a96\u0a97\7h\2\2\u0a97\u0a98\7\u030d\2\2\u0a98")
        buf.write("\u0a99\7\u0093\2\2\u0a99\u0a9a\5\u03b6\u01dc\2\u0a9a\u0109")
        buf.write("\3\2\2\2\u0a9b\u0a9c\7h\2\2\u0a9c\u0a9d\7\u030e\2\2\u0a9d")
        buf.write("\u0a9e\7\u012e\2\2\u0a9e\u0aa2\7\u01b8\2\2\u0a9f\u0aa0")
        buf.write("\5\u03b6\u01dc\2\u0aa0\u0aa1\7\u0330\2\2\u0aa1\u0aa3\3")
        buf.write("\2\2\2\u0aa2\u0a9f\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa4")
        buf.write("\3\2\2\2\u0aa4\u0aa5\5\u03b6\u01dc\2\u0aa5\u010b\3\2\2")
        buf.write("\2\u0aa6\u0aa7\7\u01e2\2\2\u0aa7\u0ab6\7\u0163\2\2\u0aa8")
        buf.write("\u0aaa\7\u0337\2\2\u0aa9\u0aa8\3\2\2\2\u0aa9\u0aaa\3\2")
        buf.write("\2\2\u0aaa\u0aae\3\2\2\2\u0aab\u0aac\5\u03b6\u01dc\2\u0aac")
        buf.write("\u0aad\7\u0330\2\2\u0aad\u0aaf\3\2\2\2\u0aae\u0aab\3\2")
        buf.write("\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab2")
        buf.write("\5\u03b6\u01dc\2\u0ab1\u0aa9\3\2\2\2\u0ab2\u0ab3\3\2\2")
        buf.write("\2\u0ab3\u0ab1\3\2\2\2\u0ab3\u0ab4\3\2\2\2\u0ab4\u0ab7")
        buf.write("\3\2\2\2\u0ab5\u0ab7\7\6\2\2\u0ab6\u0ab1\3\2\2\2\u0ab6")
        buf.write("\u0ab5\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0ac2\7\u00e5")
        buf.write("\2\2\u0ab9\u0aba\5\u03b6\u01dc\2\u0aba\u0abb\7\u0330\2")
        buf.write("\2\u0abb\u0abd\3\2\2\2\u0abc\u0ab9\3\2\2\2\u0abc\u0abd")
        buf.write("\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0ac3\5\u03b6\u01dc")
        buf.write("\2\u0abf\u0ac3\7U\2\2\u0ac0\u0ac1\7\6\2\2\u0ac1\u0ac3")
        buf.write("\7\u0137\2\2\u0ac2\u0abc\3\2\2\2\u0ac2\u0abf\3\2\2\2\u0ac2")
        buf.write("\u0ac0\3\2\2\2\u0ac3\u010d\3\2\2\2\u0ac4\u0ac5\7\u01eb")
        buf.write("\2\2\u0ac5\u0ad4\7\u0163\2\2\u0ac6\u0ac8\7\u0337\2\2\u0ac7")
        buf.write("\u0ac6\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0acc\3\2\2\2")
        buf.write("\u0ac9\u0aca\5\u03b6\u01dc\2\u0aca\u0acb\7\u0330\2\2\u0acb")
        buf.write("\u0acd\3\2\2\2\u0acc\u0ac9\3\2\2\2\u0acc\u0acd\3\2\2\2")
        buf.write("\u0acd\u0ace\3\2\2\2\u0ace\u0ad0\5\u03b6\u01dc\2\u0acf")
        buf.write("\u0ac7\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0acf\3\2\2\2")
        buf.write("\u0ad1\u0ad2\3\2\2\2\u0ad2\u0ad5\3\2\2\2\u0ad3\u0ad5\7")
        buf.write("\6\2\2\u0ad4\u0acf\3\2\2\2\u0ad4\u0ad3\3\2\2\2\u0ad5\u0ad6")
        buf.write("\3\2\2\2\u0ad6\u0ae0\7\u00e5\2\2\u0ad7\u0ad8\5\u03b6\u01dc")
        buf.write("\2\u0ad8\u0ad9\7\u0330\2\2\u0ad9\u0adb\3\2\2\2\u0ada\u0ad7")
        buf.write("\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc")
        buf.write("\u0ae1\5\u03b6\u01dc\2\u0add\u0ae1\7U\2\2\u0ade\u0adf")
        buf.write("\7\6\2\2\u0adf\u0ae1\7\u0137\2\2\u0ae0\u0ada\3\2\2\2\u0ae0")
        buf.write("\u0add\3\2\2\2\u0ae0\u0ade\3\2\2\2\u0ae1\u010f\3\2\2\2")
        buf.write("\u0ae2\u0ae3\7\u023a\2\2\u0ae3\u0ae4\7\u0156\2\2\u0ae4")
        buf.write("\u0ae5\5\u0382\u01c2\2\u0ae5\u0ae6\7\u009b\2\2\u0ae6\u0ae7")
        buf.write("\t\26\2\2\u0ae7\u0aeb\7\u025a\2\2\u0ae8\u0ae9\7\u0309")
        buf.write("\2\2\u0ae9\u0aec\7\u031b\2\2\u0aea\u0aec\7\u026d\2\2\u0aeb")
        buf.write("\u0ae8\3\2\2\2\u0aeb\u0aea\3\2\2\2\u0aeb\u0aec\3\2\2\2")
        buf.write("\u0aec\u0aee\3\2\2\2\u0aed\u0aef\7\u0338\2\2\u0aee\u0aed")
        buf.write("\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0111\3\2\2\2\u0af0")
        buf.write("\u0af1\7\u0164\2\2\u0af1\u0af2\7\u0156\2\2\u0af2\u0b06")
        buf.write("\5\u0382\u01c2\2\u0af3\u0af4\7\u017c\2\2\u0af4\u0af5\7")
        buf.write("\u0335\2\2\u0af5\u0af6\7\u0281\2\2\u0af6\u0b00\7\u0335")
        buf.write("\2\2\u0af7\u0af9\7\u0337\2\2\u0af8\u0af7\3\2\2\2\u0af8")
        buf.write("\u0af9\3\2\2\2\u0af9\u0afe\3\2\2\2\u0afa\u0aff\7\u031b")
        buf.write("\2\2\u0afb\u0afc\7\u031b\2\2\u0afc\u0afd\7\u015d\2\2\u0afd")
        buf.write("\u0aff\7\u031b\2\2\u0afe\u0afa\3\2\2\2\u0afe\u0afb\3\2")
        buf.write("\2\2\u0aff\u0b01\3\2\2\2\u0b00\u0af8\3\2\2\2\u0b01\u0b02")
        buf.write("\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03")
        buf.write("\u0b04\3\2\2\2\u0b04\u0b05\7\u0336\2\2\u0b05\u0b07\7\u0336")
        buf.write("\2\2\u0b06\u0af3\3\2\2\2\u0b06\u0b07\3\2\2\2\u0b07\u0113")
        buf.write("\3\2\2\2\u0b08\u0b09\7I\2\2\u0b09\u0b0a\78\2\2\u0b0a\u0b0b")
        buf.write("\7\u00bd\2\2\u0b0b\u0b0c\7\u00ac\2\2\u0b0c\u0b0d\5\u03b6")
        buf.write("\u01dc\2\u0b0d\u0b0e\7\u017c\2\2\u0b0e\u0b0f\7\u0335\2")
        buf.write("\2\u0b0f\u0b10\7\u00ae\2\2\u0b10\u0b11\7\u0323\2\2\u0b11")
        buf.write("\u0b12\7\u031f\2\2\u0b12\u0b13\7\u0337\2\2\u0b13\u0b14")
        buf.write("\7\u00ad\2\2\u0b14\u0b15\7\u0323\2\2\u0b15\u0b16\7\u031f")
        buf.write("\2\2\u0b16\u0b17\7\u0336\2\2\u0b17\u0115\3\2\2\2\u0b18")
        buf.write("\u0b19\7\n\2\2\u0b19\u0b1a\7\u01c7\2\2\u0b1a\u0b1b\5\u03b6")
        buf.write("\u01dc\2\u0b1b\u0b1c\7\u017c\2\2\u0b1c\u0b1d\7\u0097\2")
        buf.write("\2\u0b1d\u0b1e\7\u0323\2\2\u0b1e\u0b23\7\u031f\2\2\u0b1f")
        buf.write("\u0b20\7\u0337\2\2\u0b20\u0b21\7\u02c7\2\2\u0b21\u0b22")
        buf.write("\7\u0323\2\2\u0b22\u0b24\7\u031f\2\2\u0b23\u0b1f\3\2\2")
        buf.write("\2\u0b23\u0b24\3\2\2\2\u0b24\u0117\3\2\2\2\u0b25\u0b26")
        buf.write("\7I\2\2\u0b26\u0b27\7\u01c7\2\2\u0b27\u0b28\5\u03b6\u01dc")
        buf.write("\2\u0b28\u0b29\7\u017c\2\2\u0b29\u0b2a\7\u0097\2\2\u0b2a")
        buf.write("\u0b2b\7\u0323\2\2\u0b2b\u0b30\7\u031f\2\2\u0b2c\u0b2d")
        buf.write("\7\u0337\2\2\u0b2d\u0b2e\7\u02c7\2\2\u0b2e\u0b2f\7\u0323")
        buf.write("\2\2\u0b2f\u0b31\7\u031f\2\2\u0b30\u0b2c\3\2\2\2\u0b30")
        buf.write("\u0b31\3\2\2\2\u0b31\u0b36\3\2\2\2\u0b32\u0b33\7\u0086")
        buf.write("\2\2\u0b33\u0b34\7\u01c8\2\2\u0b34\u0b35\7\u0291\2\2\u0b35")
        buf.write("\u0b37\5\u03b6\u01dc\2\u0b36\u0b32\3\2\2\2\u0b36\u0b37")
        buf.write("\3\2\2\2\u0b37\u0119\3\2\2\2\u0b38\u0b39\7\n\2\2\u0b39")
        buf.write("\u0b3a\7\u01c8\2\2\u0b3a\u0b3b\7\u0291\2\2\u0b3b\u0b40")
        buf.write("\5\u03b6\u01dc\2\u0b3c\u0b3d\7\u008c\2\2\u0b3d\u0b3e\7")
        buf.write("\u0082\2\2\u0b3e\u0b3f\7\u0323\2\2\u0b3f\u0b41\7\u031f")
        buf.write("\2\2\u0b40\u0b3c\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b43")
        buf.write("\3\2\2\2\u0b42\u0b44\t\27\2\2\u0b43\u0b42\3\2\2\2\u0b43")
        buf.write("\u0b44\3\2\2\2\u0b44\u011b\3\2\2\2\u0b45\u0b46\7I\2\2")
        buf.write("\u0b46\u0b47\7\u01c8\2\2\u0b47\u0b48\7\u0291\2\2\u0b48")
        buf.write("\u0b49\5\u03b6\u01dc\2\u0b49\u0b4a\7\u008c\2\2\u0b4a\u0b4b")
        buf.write("\7\u0082\2\2\u0b4b\u0b4c\7\u0323\2\2\u0b4c\u0b4d\7\u031f")
        buf.write("\2\2\u0b4d\u011d\3\2\2\2\u0b4e\u0b4f\7I\2\2\u0b4f\u0b50")
        buf.write("\7r\2\2\u0b50\u0b51\7\u00dd\2\2\u0b51\u0b52\5\u03b6\u01dc")
        buf.write("\2\u0b52\u0b57\7\u00e5\2\2\u0b53\u0b58\7\u0137\2\2\u0b54")
        buf.write("\u0b58\7U\2\2\u0b55\u0b56\7\u0294\2\2\u0b56\u0b58\5\u03b6")
        buf.write("\u01dc\2\u0b57\u0b53\3\2\2\2\u0b57\u0b54\3\2\2\2\u0b57")
        buf.write("\u0b55\3\2\2\2\u0b58\u0b5b\3\2\2\2\u0b59\u0b5a\7\u017c")
        buf.write("\2\2\u0b5a\u0b5c\7\u0080\2\2\u0b5b\u0b59\3\2\2\2\u0b5b")
        buf.write("\u0b5c\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b62\7\u0086")
        buf.write("\2\2\u0b5e\u0b60\7\u0337\2\2\u0b5f\u0b5e\3\2\2\2\u0b5f")
        buf.write("\u0b60\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u0b63\5\u03b6")
        buf.write("\u01dc\2\u0b62\u0b5f\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64")
        buf.write("\u0b62\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b66\3\2\2\2")
        buf.write("\u0b66\u0b67\7\u015d\2\2\u0b67\u0b68\7\u0138\2\2\u0b68")
        buf.write("\u0b69\7\u031f\2\2\u0b69\u0b6a\7\u0337\2\2\u0b6a\u0b6b")
        buf.write("\7\u031f\2\2\u0b6b\u011f\3\2\2\2\u0b6c\u0b6d\t\24\2\2")
        buf.write("\u0b6d\u0b6e\7r\2\2\u0b6e\u0b6f\7\u013b\2\2\u0b6f\u0b70")
        buf.write("\5\u03b6\u01dc\2\u0b70\u0b71\7\u00e5\2\2\u0b71\u0bb5\7")
        buf.write("\u0137\2\2\u0b72\u0b74\7\u0337\2\2\u0b73\u0b72\3\2\2\2")
        buf.write("\u0b73\u0b74\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0b76\7")
        buf.write("\4\2\2\u0b76\u0b7a\7r\2\2\u0b77\u0b78\5\u03b6\u01dc\2")
        buf.write("\u0b78\u0b79\7\u0330\2\2\u0b79\u0b7b\3\2\2\2\u0b7a\u0b77")
        buf.write("\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c")
        buf.write("\u0b7d\5\u03b6\u01dc\2\u0b7d\u0b7e\7\u0330\2\2\u0b7e\u0b7f")
        buf.write("\5\u03b6\u01dc\2\u0b7f\u0bb0\3\2\2\2\u0b80\u0b8e\7\u0335")
        buf.write("\2\2\u0b81\u0b8b\7\u013d\2\2\u0b82\u0b84\7\u0337\2\2\u0b83")
        buf.write("\u0b82\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b85\3\2\2\2")
        buf.write("\u0b85\u0b86\5\u03b6\u01dc\2\u0b86\u0b87\7\u0323\2\2\u0b87")
        buf.write("\u0b88\t\30\2\2\u0b88\u0b8a\3\2\2\2\u0b89\u0b83\3\2\2")
        buf.write("\2\u0b8a\u0b8d\3\2\2\2\u0b8b\u0b89\3\2\2\2\u0b8b\u0b8c")
        buf.write("\3\2\2\2\u0b8c\u0b8f\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8e")
        buf.write("\u0b81\3\2\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0ba4\3\2\2\2")
        buf.write("\u0b90\u0b91\7\u0183\2\2\u0b91\u0b9e\7\u0335\2\2\u0b92")
        buf.write("\u0b94\7\u0337\2\2\u0b93\u0b92\3\2\2\2\u0b93\u0b94\3\2")
        buf.write("\2\2\u0b94\u0b98\3\2\2\2\u0b95\u0b96\5\u03b6\u01dc\2\u0b96")
        buf.write("\u0b97\7\u0330\2\2\u0b97\u0b99\3\2\2\2\u0b98\u0b95\3\2")
        buf.write("\2\2\u0b98\u0b99\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a\u0b9b")
        buf.write("\5\u03b6\u01dc\2\u0b9b\u0b9c\7\u0330\2\2\u0b9c\u0b9d\5")
        buf.write("\u03b6\u01dc\2\u0b9d\u0b9f\3\2\2\2\u0b9e\u0b93\3\2\2\2")
        buf.write("\u0b9f\u0ba0\3\2\2\2\u0ba0\u0b9e\3\2\2\2\u0ba0\u0ba1\3")
        buf.write("\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba3\7\u0336\2\2\u0ba3")
        buf.write("\u0ba5\3\2\2\2\u0ba4\u0b90\3\2\2\2\u0ba5\u0ba6\3\2\2\2")
        buf.write("\u0ba6\u0ba4\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0baa\3")
        buf.write("\2\2\2\u0ba8\u0ba9\7\u0179\2\2\u0ba9\u0bab\5\u0122\u0092")
        buf.write("\2\u0baa\u0ba8\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bac")
        buf.write("\3\2\2\2\u0bac\u0bad\7\u0336\2\2\u0bad\u0baf\3\2\2\2\u0bae")
        buf.write("\u0b80\3\2\2\2\u0baf\u0bb2\3\2\2\2\u0bb0\u0bae\3\2\2\2")
        buf.write("\u0bb0\u0bb1\3\2\2\2\u0bb1\u0bb4\3\2\2\2\u0bb2\u0bb0\3")
        buf.write("\2\2\2\u0bb3\u0b73\3\2\2\2\u0bb4\u0bb7\3\2\2\2\u0bb5\u0bb3")
        buf.write("\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bc8\3\2\2\2\u0bb7")
        buf.write("\u0bb5\3\2\2\2\u0bb8\u0bba\7\u0337\2\2\u0bb9\u0bb8\3\2")
        buf.write("\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0bbc")
        buf.write("\7h\2\2\u0bbc\u0bc0\7r\2\2\u0bbd\u0bbe\5\u03b6\u01dc\2")
        buf.write("\u0bbe\u0bbf\7\u0330\2\2\u0bbf\u0bc1\3\2\2\2\u0bc0\u0bbd")
        buf.write("\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2")
        buf.write("\u0bc3\5\u03b6\u01dc\2\u0bc3\u0bc4\7\u0330\2\2\u0bc4\u0bc5")
        buf.write("\5\u03b6\u01dc\2\u0bc5\u0bc7\3\2\2\2\u0bc6\u0bb9\3\2\2")
        buf.write("\2\u0bc7\u0bca\3\2\2\2\u0bc8\u0bc6\3\2\2\2\u0bc8\u0bc9")
        buf.write("\3\2\2\2\u0bc9\u0bf4\3\2\2\2\u0bca\u0bc8\3\2\2\2\u0bcb")
        buf.write("\u0bcc\7\4\2\2\u0bcc\u0bd0\7\u0159\2\2\u0bcd\u0bce\5\u03b6")
        buf.write("\u01dc\2\u0bce\u0bcf\7\u0330\2\2\u0bcf\u0bd1\3\2\2\2\u0bd0")
        buf.write("\u0bcd\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd2\3\2\2\2")
        buf.write("\u0bd2\u0bd3\5\u03b6\u01dc\2\u0bd3\u0bd4\7\u0330\2\2\u0bd4")
        buf.write("\u0bd5\5\u03b6\u01dc\2\u0bd5\u0bef\3\2\2\2\u0bd6\u0bd7")
        buf.write("\7\u0335\2\2\u0bd7\u0be7\7\u013d\2\2\u0bd8\u0bda\7\u0337")
        buf.write("\2\2\u0bd9\u0bd8\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda\u0bdb")
        buf.write("\3\2\2\2\u0bdb\u0bdc\5\u03b6\u01dc\2\u0bdc\u0be5\7\u0323")
        buf.write("\2\2\u0bdd\u0bdf\7\u0335\2\2\u0bde\u0bdd\3\2\2\2\u0bde")
        buf.write("\u0bdf\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be2\7\u031b")
        buf.write("\2\2\u0be1\u0be3\7\u0336\2\2\u0be2\u0be1\3\2\2\2\u0be2")
        buf.write("\u0be3\3\2\2\2\u0be3\u0be6\3\2\2\2\u0be4\u0be6\7\u031f")
        buf.write("\2\2\u0be5\u0bde\3\2\2\2\u0be5\u0be4\3\2\2\2\u0be6\u0be8")
        buf.write("\3\2\2\2\u0be7\u0bd9\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9")
        buf.write("\u0be7\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0beb\3\2\2\2")
        buf.write("\u0beb\u0bec\7\u0336\2\2\u0bec\u0bee\3\2\2\2\u0bed\u0bd6")
        buf.write("\3\2\2\2\u0bee\u0bf1\3\2\2\2\u0bef\u0bed\3\2\2\2\u0bef")
        buf.write("\u0bf0\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bef\3\2\2\2")
        buf.write("\u0bf2\u0bcb\3\2\2\2\u0bf3\u0bf6\3\2\2\2\u0bf4\u0bf2\3")
        buf.write("\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0c04\3\2\2\2\u0bf6\u0bf4")
        buf.write("\3\2\2\2\u0bf7\u0bf8\7h\2\2\u0bf8\u0bfc\7\u0159\2\2\u0bf9")
        buf.write("\u0bfa\5\u03b6\u01dc\2\u0bfa\u0bfb\7\u0330\2\2\u0bfb\u0bfd")
        buf.write("\3\2\2\2\u0bfc\u0bf9\3\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd")
        buf.write("\u0bfe\3\2\2\2\u0bfe\u0bff\5\u03b6\u01dc\2\u0bff\u0c00")
        buf.write("\7\u0330\2\2\u0c00\u0c01\5\u03b6\u01dc\2\u0c01\u0c03\3")
        buf.write("\2\2\2\u0c02\u0bf7\3\2\2\2\u0c03\u0c06\3\2\2\2\u0c04\u0c02")
        buf.write("\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05\u0c48\3\2\2\2\u0c06")
        buf.write("\u0c04\3\2\2\2\u0c07\u0c08\7\u017c\2\2\u0c08\u0c10\7\u0335")
        buf.write("\2\2\u0c09\u0c0b\7\u0337\2\2\u0c0a\u0c09\3\2\2\2\u0c0a")
        buf.write("\u0c0b\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u0c0d\7\u00be")
        buf.write("\2\2\u0c0d\u0c0e\7\u0323\2\2\u0c0e\u0c0f\7\u031b\2\2\u0c0f")
        buf.write("\u0c11\t\31\2\2\u0c10\u0c0a\3\2\2\2\u0c10\u0c11\3\2\2")
        buf.write("\2\u0c11\u0c18\3\2\2\2\u0c12\u0c14\7\u0337\2\2\u0c13\u0c12")
        buf.write("\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15")
        buf.write("\u0c16\7t\2\2\u0c16\u0c17\7\u0323\2\2\u0c17\u0c19\t\32")
        buf.write("\2\2\u0c18\u0c13\3\2\2\2\u0c18\u0c19\3\2\2\2\u0c19\u0c24")
        buf.write("\3\2\2\2\u0c1a\u0c1c\7\u0337\2\2\u0c1b\u0c1a\3\2\2\2\u0c1b")
        buf.write("\u0c1c\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1e\7\u00c1")
        buf.write("\2\2\u0c1e\u0c22\7\u0323\2\2\u0c1f\u0c20\7\u031b\2\2\u0c20")
        buf.write("\u0c23\7\u02c6\2\2\u0c21\u0c23\7\u009f\2\2\u0c22\u0c1f")
        buf.write("\3\2\2\2\u0c22\u0c21\3\2\2\2\u0c23\u0c25\3\2\2\2\u0c24")
        buf.write("\u0c1b\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c2d\3\2\2\2")
        buf.write("\u0c26\u0c28\7\u0337\2\2\u0c27\u0c26\3\2\2\2\u0c27\u0c28")
        buf.write("\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2a\7\u00c2\2\2\u0c2a")
        buf.write("\u0c2b\7\u0323\2\2\u0c2b\u0c2c\7\u031b\2\2\u0c2c\u0c2e")
        buf.write("\t\31\2\2\u0c2d\u0c27\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e")
        buf.write("\u0c35\3\2\2\2\u0c2f\u0c31\7\u0337\2\2\u0c30\u0c2f\3\2")
        buf.write("\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c33")
        buf.write("\7\u00c8\2\2\u0c33\u0c34\7\u0323\2\2\u0c34\u0c36\t\33")
        buf.write("\2\2\u0c35\u0c30\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c3d")
        buf.write("\3\2\2\2\u0c37\u0c39\7\u0337\2\2\u0c38\u0c37\3\2\2\2\u0c38")
        buf.write("\u0c39\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u0c3b\7\u015f")
        buf.write("\2\2\u0c3b\u0c3c\7\u0323\2\2\u0c3c\u0c3e\t\t\2\2\u0c3d")
        buf.write("\u0c38\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c45\3\2\2\2")
        buf.write("\u0c3f\u0c41\7\u0337\2\2\u0c40\u0c3f\3\2\2\2\u0c40\u0c41")
        buf.write("\3\2\2\2\u0c41\u0c42\3\2\2\2\u0c42\u0c43\7\u014f\2\2\u0c43")
        buf.write("\u0c44\7\u0323\2\2\u0c44\u0c46\t\t\2\2\u0c45\u0c40\3\2")
        buf.write("\2\2\u0c45\u0c46\3\2\2\2\u0c46\u0c47\3\2\2\2\u0c47\u0c49")
        buf.write("\7\u0336\2\2\u0c48\u0c07\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49")
        buf.write("\u0c4d\3\2\2\2\u0c4a\u0c4b\7\u014b\2\2\u0c4b\u0c4c\7\u0323")
        buf.write("\2\2\u0c4c\u0c4e\t\34\2\2\u0c4d\u0c4a\3\2\2\2\u0c4d\u0c4e")
        buf.write("\3\2\2\2\u0c4e\u0121\3\2\2\2\u0c4f\u0c51\7\u0337\2\2\u0c50")
        buf.write("\u0c4f\3\2\2\2\u0c50\u0c51\3\2\2\2\u0c51\u0c53\3\2\2\2")
        buf.write("\u0c52\u0c54\t\35\2\2\u0c53\u0c52\3\2\2\2\u0c53\u0c54")
        buf.write("\3\2\2\2\u0c54\u0c56\3\2\2\2\u0c55\u0c57\7\u00dc\2\2\u0c56")
        buf.write("\u0c55\3\2\2\2\u0c56\u0c57\3\2\2\2\u0c57\u0c5d\3\2\2\2")
        buf.write("\u0c58\u0c5e\5\u0124\u0093\2\u0c59\u0c5a\7\u0335\2\2\u0c5a")
        buf.write("\u0c5b\5\u0122\u0092\2\u0c5b\u0c5c\7\u0336\2\2\u0c5c\u0c5e")
        buf.write("\3\2\2\2\u0c5d\u0c58\3\2\2\2\u0c5d\u0c59\3\2\2\2\u0c5e")
        buf.write("\u0c60\3\2\2\2\u0c5f\u0c50\3\2\2\2\u0c60\u0c61\3\2\2\2")
        buf.write("\u0c61\u0c5f\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0123\3")
        buf.write("\2\2\2\u0c63\u0c69\5\u0126\u0094\2\u0c64\u0c65\7\u0335")
        buf.write("\2\2\u0c65\u0c66\5\u0122\u0092\2\u0c66\u0c67\7\u0336\2")
        buf.write("\2\u0c67\u0c69\3\2\2\2\u0c68\u0c63\3\2\2\2\u0c68\u0c64")
        buf.write("\3\2\2\2\u0c69\u0125\3\2\2\2\u0c6a\u0c87\5\u03b6\u01dc")
        buf.write("\2\u0c6b\u0c76\5\u03b6\u01dc\2\u0c6c\u0c6d\5\u03b6\u01dc")
        buf.write("\2\u0c6d\u0c6e\7\u0330\2\2\u0c6e\u0c70\3\2\2\2\u0c6f\u0c6c")
        buf.write("\3\2\2\2\u0c6f\u0c70\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71")
        buf.write("\u0c72\5\u03b6\u01dc\2\u0c72\u0c73\7\u0330\2\2\u0c73\u0c74")
        buf.write("\5\u03b6\u01dc\2\u0c74\u0c76\3\2\2\2\u0c75\u0c6b\3\2\2")
        buf.write("\2\u0c75\u0c6f\3\2\2\2\u0c76\u0c82\3\2\2\2\u0c77\u0c83")
        buf.write("\7\u0323\2\2\u0c78\u0c79\7\u0325\2\2\u0c79\u0c83\7\u0324")
        buf.write("\2\2\u0c7a\u0c7b\7\u0326\2\2\u0c7b\u0c83\7\u0323\2\2\u0c7c")
        buf.write("\u0c83\7\u0324\2\2\u0c7d\u0c7e\7\u0324\2\2\u0c7e\u0c83")
        buf.write("\7\u0323\2\2\u0c7f\u0c83\7\u0325\2\2\u0c80\u0c81\7\u0325")
        buf.write("\2\2\u0c81\u0c83\7\u0323\2\2\u0c82\u0c77\3\2\2\2\u0c82")
        buf.write("\u0c78\3\2\2\2\u0c82\u0c7a\3\2\2\2\u0c82\u0c7c\3\2\2\2")
        buf.write("\u0c82\u0c7d\3\2\2\2\u0c82\u0c7f\3\2\2\2\u0c82\u0c80\3")
        buf.write("\2\2\2\u0c83\u0c84\3\2\2\2\u0c84\u0c85\t\30\2\2\u0c85")
        buf.write("\u0c87\3\2\2\2\u0c86\u0c6a\3\2\2\2\u0c86\u0c75\3\2\2\2")
        buf.write("\u0c87\u0ca3\3\2\2\2\u0c88\u0c89\5\u03b6\u01dc\2\u0c89")
        buf.write("\u0c8a\7\u0330\2\2\u0c8a\u0c8c\3\2\2\2\u0c8b\u0c88\3\2")
        buf.write("\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d\u0c8e")
        buf.write("\5\u03b6\u01dc\2\u0c8e\u0c8f\7\u0330\2\2\u0c8f\u0c90\5")
        buf.write("\u03b6\u01dc\2\u0c90\u0c9e\7\u0335\2\2\u0c91\u0c9f\5\u03b6")
        buf.write("\u01dc\2\u0c92\u0c93\5\u03b6\u01dc\2\u0c93\u0c94\7\u0330")
        buf.write("\2\2\u0c94\u0c96\3\2\2\2\u0c95\u0c92\3\2\2\2\u0c95\u0c96")
        buf.write("\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97\u0c98\5\u03b6\u01dc")
        buf.write("\2\u0c98\u0c99\7\u0330\2\2\u0c99\u0c9a\5\u03b6\u01dc\2")
        buf.write("\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9c\7\u0337\2\2\u0c9c\u0c9d")
        buf.write("\t\30\2\2\u0c9d\u0c9f\3\2\2\2\u0c9e\u0c91\3\2\2\2\u0c9e")
        buf.write("\u0c95\3\2\2\2\u0c9f\u0ca0\3\2\2\2\u0ca0\u0ca1\7\u0336")
        buf.write("\2\2\u0ca1\u0ca3\3\2\2\2\u0ca2\u0c86\3\2\2\2\u0ca2\u0c8b")
        buf.write("\3\2\2\2\u0ca3\u0127\3\2\2\2\u0ca4\u0ca5\7\n\2\2\u0ca5")
        buf.write("\u0ca6\7|\2\2\u0ca6\u0ca7\7R\2\2\u0ca7\u0ca8\7\u0144\2")
        buf.write("\2\u0ca8\u0ca9\5\u03b6\u01dc\2\u0ca9\u0cb9\7\u013d\2\2")
        buf.write("\u0caa\u0cab\7\u0239\2\2\u0cab\u0cac\7\u0323\2\2\u0cac")
        buf.write("\u0cae\t\36\2\2\u0cad\u0caf\7\u0337\2\2\u0cae\u0cad\3")
        buf.write("\2\2\2\u0cae\u0caf\3\2\2\2\u0caf\u0cba\3\2\2\2\u0cb0\u0cb1")
        buf.write("\7\u02b3\2\2\u0cb1\u0cb2\7\u0323\2\2\u0cb2\u0cb4\t\36")
        buf.write("\2\2\u0cb3\u0cb5\7\u0337\2\2\u0cb4\u0cb3\3\2\2\2\u0cb4")
        buf.write("\u0cb5\3\2\2\2\u0cb5\u0cba\3\2\2\2\u0cb6\u0cb7\7\u01c7")
        buf.write("\2\2\u0cb7\u0cb8\7\u0323\2\2\u0cb8\u0cba\5\u03b6\u01dc")
        buf.write("\2\u0cb9\u0caa\3\2\2\2\u0cb9\u0cb0\3\2\2\2\u0cb9\u0cb6")
        buf.write("\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cb9\3\2\2\2\u0cbb")
        buf.write("\u0cbc\3\2\2\2\u0cbc\u0cd4\3\2\2\2\u0cbd\u0cbe\7\n\2\2")
        buf.write("\u0cbe\u0cbf\7|\2\2\u0cbf\u0cc0\7R\2\2\u0cc0\u0cc1\7\u0144")
        buf.write("\2\2\u0cc1\u0cc2\5\u03b6\u01dc\2\u0cc2\u0cc3\7\u017c\2")
        buf.write("\2\u0cc3\u0cc4\7\u0335\2\2\u0cc4\u0cc5\7\u02fb\2\2\u0cc5")
        buf.write("\u0cc6\7\u0323\2\2\u0cc6\u0cc7\7\u01aa\2\2\u0cc7\u0cc8")
        buf.write("\7\u0337\2\2\u0cc8\u0cc9\7\u0239\2\2\u0cc9\u0cca\7\u0323")
        buf.write("\2\2\u0cca\u0ccf\7\u031f\2\2\u0ccb\u0ccc\7\u0337\2\2\u0ccc")
        buf.write("\u0ccd\7\u01c7\2\2\u0ccd\u0cce\7\u0323\2\2\u0cce\u0cd0")
        buf.write("\5\u03b6\u01dc\2\u0ccf\u0ccb\3\2\2\2\u0ccf\u0cd0\3\2\2")
        buf.write("\2\u0cd0\u0cd1\3\2\2\2\u0cd1\u0cd2\7\u0336\2\2\u0cd2\u0cd4")
        buf.write("\3\2\2\2\u0cd3\u0ca4\3\2\2\2\u0cd3\u0cbd\3\2\2\2\u0cd4")
        buf.write("\u0129\3\2\2\2\u0cd5\u0cd6\7\n\2\2\u0cd6\u0cd7\7|\2\2")
        buf.write("\u0cd7\u0cd8\7\u00b2\2\2\u0cd8\u0cdb\5\u03b6\u01dc\2\u0cd9")
        buf.write("\u0cda\7\24\2\2\u0cda\u0cdc\5\u03b6\u01dc\2\u0cdb\u0cd9")
        buf.write("\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0cdd\3\2\2\2\u0cdd")
        buf.write("\u0cde\t\37\2\2\u0cde\u0cdf\7\u0335\2\2\u0cdf\u0ce0\7")
        buf.write("\u01be\2\2\u0ce0\u0ce4\7\u0323\2\2\u0ce1\u0ce5\7\u031f")
        buf.write("\2\2\u0ce2\u0ce5\7\u0320\2\2\u0ce3\u0ce5\7\u00d5\2\2\u0ce4")
        buf.write("\u0ce1\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce4\u0ce3\3\2\2\2")
        buf.write("\u0ce5\u0ce6\3\2\2\2\u0ce6\u0ce7\7\u0337\2\2\u0ce7\u0ce8")
        buf.write("\7\u00fc\2\2\u0ce8\u0cea\7\u0323\2\2\u0ce9\u0ceb\t \2")
        buf.write("\2\u0cea\u0ce9\3\2\2\2\u0cea\u0ceb\3\2\2\2\u0ceb\u0cec")
        buf.write("\3\2\2\2\u0cec\u0ced\7\u0336\2\2\u0ced\u0cee\3\2\2\2\u0cee")
        buf.write("\u0cf8\7\u017c\2\2\u0cef\u0cf1\7\u0337\2\2\u0cf0\u0cef")
        buf.write("\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2")
        buf.write("\u0cf3\7\u00b0\2\2\u0cf3\u0cf4\7\u0323\2\2\u0cf4\u0cf9")
        buf.write("\t!\2\2\u0cf5\u0cf6\7T\2\2\u0cf6\u0cf7\7\u0323\2\2\u0cf7")
        buf.write("\u0cf9\5\u03b6\u01dc\2\u0cf8\u0cf0\3\2\2\2\u0cf8\u0cf5")
        buf.write("\3\2\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u0cf8\3\2\2\2\u0cfa")
        buf.write("\u0cfb\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfd\7\u0336")
        buf.write("\2\2\u0cfd\u012b\3\2\2\2\u0cfe\u0cff\7I\2\2\u0cff\u0d00")
        buf.write("\7|\2\2\u0d00\u0d01\7\u00b2\2\2\u0d01\u0d04\5\u03b6\u01dc")
        buf.write("\2\u0d02\u0d03\7\24\2\2\u0d03\u0d05\5\u03b6\u01dc\2\u0d04")
        buf.write("\u0d02\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d06\3\2\2\2")
        buf.write("\u0d06\u0d08\7\u008c\2\2\u0d07\u0d09\7\u0337\2\2\u0d08")
        buf.write("\u0d07\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09\u0d0b\3\2\2\2")
        buf.write("\u0d0a\u0d0c\7\u0335\2\2\u0d0b\u0d0a\3\2\2\2\u0d0b\u0d0c")
        buf.write("\3\2\2\2\u0d0c\u0d0f\3\2\2\2\u0d0d\u0d0e\7\u01be\2\2\u0d0e")
        buf.write("\u0d10\7\u0323\2\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d10\3\2")
        buf.write("\2\2\u0d10\u0d14\3\2\2\2\u0d11\u0d15\7\u031f\2\2\u0d12")
        buf.write("\u0d15\7\u0320\2\2\u0d13\u0d15\7\u00d5\2\2\u0d14\u0d11")
        buf.write("\3\2\2\2\u0d14\u0d12\3\2\2\2\u0d14\u0d13\3\2\2\2\u0d15")
        buf.write("\u0d1d\3\2\2\2\u0d16\u0d17\7\u0337\2\2\u0d17\u0d18\7\u00fc")
        buf.write("\2\2\u0d18\u0d1a\7\u0323\2\2\u0d19\u0d1b\t \2\2\u0d1a")
        buf.write("\u0d19\3\2\2\2\u0d1a\u0d1b\3\2\2\2\u0d1b\u0d1c\3\2\2\2")
        buf.write("\u0d1c\u0d1e\7\u0336\2\2\u0d1d\u0d16\3\2\2\2\u0d1d\u0d1e")
        buf.write("\3\2\2\2\u0d1e\u0d2e\3\2\2\2\u0d1f\u0d29\7\u017c\2\2\u0d20")
        buf.write("\u0d22\7\u0337\2\2\u0d21\u0d20\3\2\2\2\u0d21\u0d22\3\2")
        buf.write("\2\2\u0d22\u0d23\3\2\2\2\u0d23\u0d24\7\u00b0\2\2\u0d24")
        buf.write("\u0d25\7\u0323\2\2\u0d25\u0d2a\t!\2\2\u0d26\u0d27\7T\2")
        buf.write("\2\u0d27\u0d28\7\u0323\2\2\u0d28\u0d2a\5\u03b6\u01dc\2")
        buf.write("\u0d29\u0d21\3\2\2\2\u0d29\u0d26\3\2\2\2\u0d2a\u0d2b\3")
        buf.write("\2\2\2\u0d2b\u0d29\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2d")
        buf.write("\3\2\2\2\u0d2d\u0d2f\7\u0336\2\2\u0d2e\u0d1f\3\2\2\2\u0d2e")
        buf.write("\u0d2f\3\2\2\2\u0d2f\u012d\3\2\2\2\u0d30\u0d31\7\n\2\2")
        buf.write("\u0d31\u0d32\7|\2\2\u0d32\u0d33\7\u02b2\2\2\u0d33\u0d36")
        buf.write("\7\u0285\2\2\u0d34\u0d37\5\u03b6\u01dc\2\u0d35\u0d37\7")
        buf.write("\u01d4\2\2\u0d36\u0d34\3\2\2\2\u0d36\u0d35\3\2\2\2\u0d37")
        buf.write("\u0d38\3\2\2\2\u0d38\u0d39\7\u017c\2\2\u0d39\u0d3a\7\u0335")
        buf.write("\2\2\u0d3a\u0d3b\7\u0243\2\2\u0d3b\u0d3c\7\u0323\2\2\u0d3c")
        buf.write("\u0d62\7\u031b\2\2\u0d3d\u0d3f\7\u0337\2\2\u0d3e\u0d3d")
        buf.write("\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u0d40\3\2\2\2\u0d40")
        buf.write("\u0d41\7\u018a\2\2\u0d41\u0d42\7\u01c4\2\2\u0d42\u0d50")
        buf.write("\7\u0323\2\2\u0d43\u0d51\7\u019b\2\2\u0d44\u0d46\7\u0337")
        buf.write("\2\2\u0d45\u0d44\3\2\2\2\u0d45\u0d46\3\2\2\2\u0d46\u0d47")
        buf.write("\3\2\2\2\u0d47\u0d48\7\u031b\2\2\u0d48\u0d49\7\u015d\2")
        buf.write("\2\u0d49\u0d4d\7\u031b\2\2\u0d4a\u0d4b\7\u0337\2\2\u0d4b")
        buf.write("\u0d4d\7\u031b\2\2\u0d4c\u0d45\3\2\2\2\u0d4c\u0d4a\3\2")
        buf.write("\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e\u0d4c\3\2\2\2\u0d4e\u0d4f")
        buf.write("\3\2\2\2\u0d4f\u0d51\3\2\2\2\u0d50\u0d43\3\2\2\2\u0d50")
        buf.write("\u0d4c\3\2\2\2\u0d51\u0d63\3\2\2\2\u0d52\u0d53\7\u026f")
        buf.write("\2\2\u0d53\u0d5e\7\u0323\2\2\u0d54\u0d56\7\u0337\2\2\u0d55")
        buf.write("\u0d54\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d57\3\2\2\2")
        buf.write("\u0d57\u0d58\7\u031b\2\2\u0d58\u0d59\7\u015d\2\2\u0d59")
        buf.write("\u0d5f\7\u031b\2\2\u0d5a\u0d5c\7\u0337\2\2\u0d5b\u0d5a")
        buf.write("\3\2\2\2\u0d5b\u0d5c\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d")
        buf.write("\u0d5f\7\u031b\2\2\u0d5e\u0d55\3\2\2\2\u0d5e\u0d5b\3\2")
        buf.write("\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d5e\3\2\2\2\u0d60\u0d61")
        buf.write("\3\2\2\2\u0d61\u0d63\3\2\2\2\u0d62\u0d3e\3\2\2\2\u0d62")
        buf.write("\u0d52\3\2\2\2\u0d63\u0d6a\3\2\2\2\u0d64\u0d66\7\u0337")
        buf.write("\2\2\u0d65\u0d64\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d67")
        buf.write("\3\2\2\2\u0d67\u0d68\7\u0247\2\2\u0d68\u0d69\7\u0323\2")
        buf.write("\2\u0d69\u0d6b\7\u031b\2\2\u0d6a\u0d65\3\2\2\2\u0d6a\u0d6b")
        buf.write("\3\2\2\2\u0d6b\u0d72\3\2\2\2\u0d6c\u0d6e\7\u0337\2\2\u0d6d")
        buf.write("\u0d6c\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d6f\3\2\2\2")
        buf.write("\u0d6f\u0d70\7\u0248\2\2\u0d70\u0d71\7\u0323\2\2\u0d71")
        buf.write("\u0d73\7\u031b\2\2\u0d72\u0d6d\3\2\2\2\u0d72\u0d73\3\2")
        buf.write("\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d75\7\u0336\2\2\u0d75")
        buf.write("\u012f\3\2\2\2\u0d76\u0d77\7I\2\2\u0d77\u0d78\7|\2\2\u0d78")
        buf.write("\u0d79\7\u02b2\2\2\u0d79\u0d7a\7\u0285\2\2\u0d7a\u0d7b")
        buf.write("\5\u03b6\u01dc\2\u0d7b\u0d7c\7\u017c\2\2\u0d7c\u0d7d\7")
        buf.write("\u0335\2\2\u0d7d\u0d7e\7\u0243\2\2\u0d7e\u0d7f\7\u0323")
        buf.write("\2\2\u0d7f\u0da5\7\u031b\2\2\u0d80\u0d82\7\u0337\2\2\u0d81")
        buf.write("\u0d80\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d83\3\2\2\2")
        buf.write("\u0d83\u0d84\7\u018a\2\2\u0d84\u0d85\7\u01c4\2\2\u0d85")
        buf.write("\u0d93\7\u0323\2\2\u0d86\u0d94\7\u019b\2\2\u0d87\u0d89")
        buf.write("\7\u0337\2\2\u0d88\u0d87\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89")
        buf.write("\u0d8a\3\2\2\2\u0d8a\u0d8b\7\u031b\2\2\u0d8b\u0d8c\7\u015d")
        buf.write("\2\2\u0d8c\u0d90\7\u031b\2\2\u0d8d\u0d8e\7\u0337\2\2\u0d8e")
        buf.write("\u0d90\7\u031b\2\2\u0d8f\u0d88\3\2\2\2\u0d8f\u0d8d\3\2")
        buf.write("\2\2\u0d90\u0d91\3\2\2\2\u0d91\u0d8f\3\2\2\2\u0d91\u0d92")
        buf.write("\3\2\2\2\u0d92\u0d94\3\2\2\2\u0d93\u0d86\3\2\2\2\u0d93")
        buf.write("\u0d8f\3\2\2\2\u0d94\u0da6\3\2\2\2\u0d95\u0d96\7\u026f")
        buf.write("\2\2\u0d96\u0da1\7\u0323\2\2\u0d97\u0d99\7\u0337\2\2\u0d98")
        buf.write("\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9a\3\2\2\2")
        buf.write("\u0d9a\u0d9b\7\u031b\2\2\u0d9b\u0d9c\7\u015d\2\2\u0d9c")
        buf.write("\u0da2\7\u031b\2\2\u0d9d\u0d9f\7\u0337\2\2\u0d9e\u0d9d")
        buf.write("\3\2\2\2\u0d9e\u0d9f\3\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0")
        buf.write("\u0da2\7\u031b\2\2\u0da1\u0d98\3\2\2\2\u0da1\u0d9e\3\2")
        buf.write("\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da1\3\2\2\2\u0da3\u0da4")
        buf.write("\3\2\2\2\u0da4\u0da6\3\2\2\2\u0da5\u0d81\3\2\2\2\u0da5")
        buf.write("\u0d95\3\2\2\2\u0da6\u0dad\3\2\2\2\u0da7\u0da9\7\u0337")
        buf.write("\2\2\u0da8\u0da7\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0daa")
        buf.write("\3\2\2\2\u0daa\u0dab\7\u0247\2\2\u0dab\u0dac\7\u0323\2")
        buf.write("\2\u0dac\u0dae\7\u031b\2\2\u0dad\u0da8\3\2\2\2\u0dad\u0dae")
        buf.write("\3\2\2\2\u0dae\u0db5\3\2\2\2\u0daf\u0db1\7\u0337\2\2\u0db0")
        buf.write("\u0daf\3\2\2\2\u0db0\u0db1\3\2\2\2\u0db1\u0db2\3\2\2\2")
        buf.write("\u0db2\u0db3\7\u0248\2\2\u0db3\u0db4\7\u0323\2\2\u0db4")
        buf.write("\u0db6\7\u031b\2\2\u0db5\u0db0\3\2\2\2\u0db5\u0db6\3\2")
        buf.write("\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db8\7\u0336\2\2\u0db8")
        buf.write("\u0131\3\2\2\2\u0db9\u0dba\7\n\2\2\u0dba\u0dbb\7\u020b")
        buf.write("\2\2\u0dbb\u0dbc\7\u01b1\2\2\u0dbc\u0dc7\5\u03b6\u01dc")
        buf.write("\2\u0dbd\u0dc2\7\u02a1\2\2\u0dbe\u0dbf\7\u017c\2\2\u0dbf")
        buf.write("\u0dc0\7\u0182\2\2\u0dc0\u0dc1\7\u0323\2\2\u0dc1\u0dc3")
        buf.write("\t\t\2\2\u0dc2\u0dbe\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3")
        buf.write("\u0dc8\3\2\2\2\u0dc4\u0dc8\7\u02aa\2\2\u0dc5\u0dc6\7\20")
        buf.write("\2\2\u0dc6\u0dc8\7Z\2\2\u0dc7\u0dbd\3\2\2\2\u0dc7\u0dc4")
        buf.write("\3\2\2\2\u0dc7\u0dc5\3\2\2\2\u0dc8\u0133\3\2\2\2\u0dc9")
        buf.write("\u0dca\7I\2\2\u0dca\u0dcb\7\u020b\2\2\u0dcb\u0dcc\7\u01b1")
        buf.write("\2\2\u0dcc\u0dd0\5\u03b6\u01dc\2\u0dcd\u0dce\7\u00e5\2")
        buf.write("\2\u0dce\u0dcf\7\u01fd\2\2\u0dcf\u0dd1\5\u03b6\u01dc\2")
        buf.write("\u0dd0\u0dcd\3\2\2\2\u0dd0\u0dd1\3\2\2\2\u0dd1\u0dd5\3")
        buf.write("\2\2\2\u0dd2\u0dd3\7\u009b\2\2\u0dd3\u0dd4\7\u0283\2\2")
        buf.write("\u0dd4\u0dd6\7\u031f\2\2\u0dd5\u0dd2\3\2\2\2\u0dd5\u0dd6")
        buf.write("\3\2\2\2\u0dd6\u0ddb\3\2\2\2\u0dd7\u0dd8\7\u017c\2\2\u0dd8")
        buf.write("\u0dd9\7\u0182\2\2\u0dd9\u0dda\7\u0323\2\2\u0dda\u0ddc")
        buf.write("\t\t\2\2\u0ddb\u0dd7\3\2\2\2\u0ddb\u0ddc\3\2\2\2\u0ddc")
        buf.write("\u0ddf\3\2\2\2\u0ddd\u0dde\7\20\2\2\u0dde\u0de0\7Z\2\2")
        buf.write("\u0ddf\u0ddd\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de3\3")
        buf.write("\2\2\2\u0de1\u0de2\7\24\2\2\u0de2\u0de4\5\u03b6\u01dc")
        buf.write("\2\u0de3\u0de1\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4\u0135")
        buf.write("\3\2\2\2\u0de5\u0de6\7\n\2\2\u0de6\u0de7\7\u020b\2\2\u0de7")
        buf.write("\u0de8\7\u02e1\2\2\u0de8\u0df6\5\u03b6\u01dc\2\u0de9\u0dea")
        buf.write("\7\4\2\2\u0dea\u0deb\7\u031f\2\2\u0deb\u0dec\7\u00b0\2")
        buf.write("\2\u0dec\u0df7\t\"\2\2\u0ded\u0df4\7h\2\2\u0dee\u0def")
        buf.write("\7\u031f\2\2\u0def\u0df0\7\u00b0\2\2\u0df0\u0df5\t\"\2")
        buf.write("\2\u0df1\u0df2\7\6\2\2\u0df2\u0df5\t\"\2\2\u0df3\u0df5")
        buf.write("\7\6\2\2\u0df4\u0dee\3\2\2\2\u0df4\u0df1\3\2\2\2\u0df4")
        buf.write("\u0df3\3\2\2\2\u0df5\u0df7\3\2\2\2\u0df6\u0de9\3\2\2\2")
        buf.write("\u0df6\u0ded\3\2\2\2\u0df7\u0137\3\2\2\2\u0df8\u0df9\7")
        buf.write("I\2\2\u0df9\u0dfa\7\u020b\2\2\u0dfa\u0dfb\7\u02e1\2\2")
        buf.write("\u0dfb\u0e07\5\u03b6\u01dc\2\u0dfc\u0e05\7\u008c\2\2\u0dfd")
        buf.write("\u0dfe\5\u03b6\u01dc\2\u0dfe\u0dff\7\u0330\2\2\u0dff\u0e01")
        buf.write("\3\2\2\2\u0e00\u0dfd\3\2\2\2\u0e00\u0e01\3\2\2\2\u0e01")
        buf.write("\u0e02\3\2\2\2\u0e02\u0e06\5\u03b6\u01dc\2\u0e03\u0e04")
        buf.write("\7\u0154\2\2\u0e04\u0e06\7\u02e1\2\2\u0e05\u0e00\3\2\2")
        buf.write("\2\u0e05\u0e03\3\2\2\2\u0e06\u0e08\3\2\2\2\u0e07\u0dfc")
        buf.write("\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u0e0b\3\2\2\2\u0e09")
        buf.write("\u0e0a\7\24\2\2\u0e0a\u0e0c\5\u03b6\u01dc\2\u0e0b\u0e09")
        buf.write("\3\2\2\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0139\3\2\2\2\u0e0d")
        buf.write("\u0e0e\7\n\2\2\u0e0e\u0e0f\7\u023c\2\2\u0e0f\u0e53\5\u03b6")
        buf.write("\u01dc\2\u0e10\u0e12\t\27\2\2\u0e11\u0e10\3\2\2\2\u0e11")
        buf.write("\u0e12\3\2\2\2\u0e12\u0e54\3\2\2\2\u0e13\u0e21\7\u017c")
        buf.write("\2\2\u0e14\u0e15\7\u00f4\2\2\u0e15\u0e19\7\u0323\2\2\u0e16")
        buf.write("\u0e1a\7\u031f\2\2\u0e17\u0e18\7\u0320\2\2\u0e18\u0e1a")
        buf.write("\7\u0095\2\2\u0e19\u0e16\3\2\2\2\u0e19\u0e17\3\2\2\2\u0e1a")
        buf.write("\u0e1e\3\2\2\2\u0e1b\u0e1d\t#\2\2\u0e1c\u0e1b\3\2\2\2")
        buf.write("\u0e1d\u0e20\3\2\2\2\u0e1e\u0e1c\3\2\2\2\u0e1e\u0e1f\3")
        buf.write("\2\2\2\u0e1f\u0e22\3\2\2\2\u0e20\u0e1e\3\2\2\2\u0e21\u0e14")
        buf.write("\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e2c\3\2\2\2\u0e23")
        buf.write("\u0e24\7\u00e4\2\2\u0e24\u0e25\7\u0323\2\2\u0e25\u0e29")
        buf.write("\7\u031f\2\2\u0e26\u0e28\t#\2\2\u0e27\u0e26\3\2\2\2\u0e28")
        buf.write("\u0e2b\3\2\2\2\u0e29\u0e27\3\2\2\2\u0e29\u0e2a\3\2\2\2")
        buf.write("\u0e2a\u0e2d\3\2\2\2\u0e2b\u0e29\3\2\2\2\u0e2c\u0e23\3")
        buf.write("\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e31\3\2\2\2\u0e2e\u0e2f")
        buf.write("\7[\2\2\u0e2f\u0e30\7\u0323\2\2\u0e30\u0e32\5\u03b6\u01dc")
        buf.write("\2\u0e31\u0e2e\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u0e36")
        buf.write("\3\2\2\2\u0e33\u0e34\7\u01d6\2\2\u0e34\u0e35\7\u0323\2")
        buf.write("\2\u0e35\u0e37\5\u03b6\u01dc\2\u0e36\u0e33\3\2\2\2\u0e36")
        buf.write("\u0e37\3\2\2\2\u0e37\u0e3b\3\2\2\2\u0e38\u0e39\7\u025e")
        buf.write("\2\2\u0e39\u0e3a\7\u0323\2\2\u0e3a\u0e3c\5\u03b6\u01dc")
        buf.write("\2\u0e3b\u0e38\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0e40")
        buf.write("\3\2\2\2\u0e3d\u0e3e\7\60\2\2\u0e3e\u0e3f\7\u0323\2\2")
        buf.write("\u0e3f\u0e41\t\t\2\2\u0e40\u0e3d\3\2\2\2\u0e40\u0e41\3")
        buf.write("\2\2\2\u0e41\u0e45\3\2\2\2\u0e42\u0e43\7\61\2\2\u0e43")
        buf.write("\u0e44\7\u0323\2\2\u0e44\u0e46\t\t\2\2\u0e45\u0e42\3\2")
        buf.write("\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e4a\3\2\2\2\u0e47\u0e48")
        buf.write("\7\u01c7\2\2\u0e48\u0e49\7\u0323\2\2\u0e49\u0e4b\5\u03b6")
        buf.write("\u01dc\2\u0e4a\u0e47\3\2\2\2\u0e4a\u0e4b\3\2\2\2\u0e4b")
        buf.write("\u0e4e\3\2\2\2\u0e4c\u0e4d\7\u0264\2\2\u0e4d\u0e4f\7\u01c7")
        buf.write("\2\2\u0e4e\u0e4c\3\2\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u0e54")
        buf.write("\3\2\2\2\u0e50\u0e51\t\25\2\2\u0e51\u0e52\7\u01c7\2\2")
        buf.write("\u0e52\u0e54\5\u03b6\u01dc\2\u0e53\u0e11\3\2\2\2\u0e53")
        buf.write("\u0e13\3\2\2\2\u0e53\u0e50\3\2\2\2\u0e54\u013b\3\2\2\2")
        buf.write("\u0e55\u0e56\7I\2\2\u0e56\u0e57\7\u023c\2\2\u0e57\u0eb2")
        buf.write("\5\u03b6\u01dc\2\u0e58\u0e66\7\u017c\2\2\u0e59\u0e5a\7")
        buf.write("\u00f4\2\2\u0e5a\u0e5e\7\u0323\2\2\u0e5b\u0e5f\7\u031f")
        buf.write("\2\2\u0e5c\u0e5d\7\u0320\2\2\u0e5d\u0e5f\7\u0095\2\2\u0e5e")
        buf.write("\u0e5b\3\2\2\2\u0e5e\u0e5c\3\2\2\2\u0e5f\u0e63\3\2\2\2")
        buf.write("\u0e60\u0e62\t#\2\2\u0e61\u0e60\3\2\2\2\u0e62\u0e65\3")
        buf.write("\2\2\2\u0e63\u0e61\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e67")
        buf.write("\3\2\2\2\u0e65\u0e63\3\2\2\2\u0e66\u0e59\3\2\2\2\u0e66")
        buf.write("\u0e67\3\2\2\2\u0e67\u0e6e\3\2\2\2\u0e68\u0e6a\7\u0337")
        buf.write("\2\2\u0e69\u0e68\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6b")
        buf.write("\3\2\2\2\u0e6b\u0e6c\7\u0140\2\2\u0e6c\u0e6d\7\u0323\2")
        buf.write("\2\u0e6d\u0e6f\7\u0320\2\2\u0e6e\u0e69\3\2\2\2\u0e6e\u0e6f")
        buf.write("\3\2\2\2\u0e6f\u0e76\3\2\2\2\u0e70\u0e72\7\u0337\2\2\u0e71")
        buf.write("\u0e70\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72\u0e73\3\2\2\2")
        buf.write("\u0e73\u0e74\7[\2\2\u0e74\u0e75\7\u0323\2\2\u0e75\u0e77")
        buf.write("\5\u03b6\u01dc\2\u0e76\u0e71\3\2\2\2\u0e76\u0e77\3\2\2")
        buf.write("\2\u0e77\u0e7e\3\2\2\2\u0e78\u0e7a\7\u0337\2\2\u0e79\u0e78")
        buf.write("\3\2\2\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b")
        buf.write("\u0e7c\7\u01d6\2\2\u0e7c\u0e7d\7\u0323\2\2\u0e7d\u0e7f")
        buf.write("\5\u03b6\u01dc\2\u0e7e\u0e79\3\2\2\2\u0e7e\u0e7f\3\2\2")
        buf.write("\2\u0e7f\u0e86\3\2\2\2\u0e80\u0e82\7\u0337\2\2\u0e81\u0e80")
        buf.write("\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83")
        buf.write("\u0e84\7\61\2\2\u0e84\u0e85\7\u0323\2\2\u0e85\u0e87\t")
        buf.write("\t\2\2\u0e86\u0e81\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e8e")
        buf.write("\3\2\2\2\u0e88\u0e8a\7\u0337\2\2\u0e89\u0e88\3\2\2\2\u0e89")
        buf.write("\u0e8a\3\2\2\2\u0e8a\u0e8b\3\2\2\2\u0e8b\u0e8c\7\60\2")
        buf.write("\2\u0e8c\u0e8d\7\u0323\2\2\u0e8d\u0e8f\t\t\2\2\u0e8e\u0e89")
        buf.write("\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e96\3\2\2\2\u0e90")
        buf.write("\u0e92\7\u0337\2\2\u0e91\u0e90\3\2\2\2\u0e91\u0e92\3\2")
        buf.write("\2\2\u0e92\u0e93\3\2\2\2\u0e93\u0e94\7\u01c7\2\2\u0e94")
        buf.write("\u0e95\7\u0323\2\2\u0e95\u0e97\5\u03b6\u01dc\2\u0e96\u0e91")
        buf.write("\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u0eb3\3\2\2\2\u0e98")
        buf.write("\u0eb0\7\u008c\2\2\u0e99\u0e9a\7\u017b\2\2\u0e9a\u0ea1")
        buf.write("\7\u017c\2\2\u0e9b\u0e9d\7\u0337\2\2\u0e9c\u0e9b\3\2\2")
        buf.write("\2\u0e9c\u0e9d\3\2\2\2\u0e9d\u0e9e\3\2\2\2\u0e9e\u0e9f")
        buf.write("\7[\2\2\u0e9f\u0ea0\7\u0323\2\2\u0ea0\u0ea2\5\u03b6\u01dc")
        buf.write("\2\u0ea1\u0e9c\3\2\2\2\u0ea1\u0ea2\3\2\2\2\u0ea2\u0ea9")
        buf.write("\3\2\2\2\u0ea3\u0ea5\7\u0337\2\2\u0ea4\u0ea3\3\2\2\2\u0ea4")
        buf.write("\u0ea5\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u0ea7\7\u01d6")
        buf.write("\2\2\u0ea7\u0ea8\7\u0323\2\2\u0ea8\u0eaa\7\u031f\2\2\u0ea9")
        buf.write("\u0ea4\3\2\2\2\u0ea9\u0eaa\3\2\2\2\u0eaa\u0eb1\3\2\2\2")
        buf.write("\u0eab\u0eac\7+\2\2\u0eac\u0eb1\5\u03b6\u01dc\2\u0ead")
        buf.write("\u0eae\7\22\2\2\u0eae\u0eaf\7\u00ac\2\2\u0eaf\u0eb1\5")
        buf.write("\u03b6\u01dc\2\u0eb0\u0e99\3\2\2\2\u0eb0\u0eab\3\2\2\2")
        buf.write("\u0eb0\u0ead\3\2\2\2\u0eb1\u0eb3\3\2\2\2\u0eb2\u0e58\3")
        buf.write("\2\2\2\u0eb2\u0e98\3\2\2\2\u0eb3\u013d\3\2\2\2\u0eb4\u0eb5")
        buf.write("\7\n\2\2\u0eb5\u0eb6\7\u023c\2\2\u0eb6\u0ec8\5\u03b6\u01dc")
        buf.write("\2\u0eb7\u0eb9\t\27\2\2\u0eb8\u0eb7\3\2\2\2\u0eb8\u0eb9")
        buf.write("\3\2\2\2\u0eb9\u0ec9\3\2\2\2\u0eba\u0ec6\7\u017c\2\2\u0ebb")
        buf.write("\u0ebc\7\u00f4\2\2\u0ebc\u0ebd\7\u0323\2\2\u0ebd\u0ec1")
        buf.write("\7\u031f\2\2\u0ebe\u0ebf\7\u00e4\2\2\u0ebf\u0ec0\7\u0323")
        buf.write("\2\2\u0ec0\u0ec2\7\u031f\2\2\u0ec1\u0ebe\3\2\2\2\u0ec1")
        buf.write("\u0ec2\3\2\2\2\u0ec2\u0ec7\3\2\2\2\u0ec3\u0ec4\7\u025e")
        buf.write("\2\2\u0ec4\u0ec5\7\u0323\2\2\u0ec5\u0ec7\5\u03b6\u01dc")
        buf.write("\2\u0ec6\u0ebb\3\2\2\2\u0ec6\u0ec3\3\2\2\2\u0ec7\u0ec9")
        buf.write("\3\2\2\2\u0ec8\u0eb8\3\2\2\2\u0ec8\u0eba\3\2\2\2\u0ec9")
        buf.write("\u013f\3\2\2\2\u0eca\u0ecb\7I\2\2\u0ecb\u0ecc\7\u023c")
        buf.write("\2\2\u0ecc\u0ecd\5\u03b6\u01dc\2\u0ecd\u0ece\7\u017c\2")
        buf.write("\2\u0ece\u0ecf\7\u00f4\2\2\u0ecf\u0ed0\7\u0323\2\2\u0ed0")
        buf.write("\u0ed4\7\u031f\2\2\u0ed1\u0ed2\7\u0140\2\2\u0ed2\u0ed3")
        buf.write("\7\u0323\2\2\u0ed3\u0ed5\7\u0320\2\2\u0ed4\u0ed1\3\2\2")
        buf.write("\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0141\3\2\2\2\u0ed6\u0ed7")
        buf.write("\7\n\2\2\u0ed7\u0ed8\7\u023c\2\2\u0ed8\u0ef0\5\u03b6\u01dc")
        buf.write("\2\u0ed9\u0edb\t\27\2\2\u0eda\u0ed9\3\2\2\2\u0eda\u0edb")
        buf.write("\3\2\2\2\u0edb\u0ef1\3\2\2\2\u0edc\u0eee\7\u017c\2\2\u0edd")
        buf.write("\u0ede\7\u00f4\2\2\u0ede\u0edf\7\u0323\2\2\u0edf\u0ee9")
        buf.write("\7\u031f\2\2\u0ee0\u0ee1\7\u00e4\2\2\u0ee1\u0ee2\7\u0323")
        buf.write("\2\2\u0ee2\u0ee6\7\u031f\2\2\u0ee3\u0ee5\t#\2\2\u0ee4")
        buf.write("\u0ee3\3\2\2\2\u0ee5\u0ee8\3\2\2\2\u0ee6\u0ee4\3\2\2\2")
        buf.write("\u0ee6\u0ee7\3\2\2\2\u0ee7\u0eea\3\2\2\2\u0ee8\u0ee6\3")
        buf.write("\2\2\2\u0ee9\u0ee0\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eef")
        buf.write("\3\2\2\2\u0eeb\u0eec\7\u025e\2\2\u0eec\u0eed\7\u0323\2")
        buf.write("\2\u0eed\u0eef\5\u03b6\u01dc\2\u0eee\u0edd\3\2\2\2\u0eee")
        buf.write("\u0eeb\3\2\2\2\u0eef\u0ef1\3\2\2\2\u0ef0\u0eda\3\2\2\2")
        buf.write("\u0ef0\u0edc\3\2\2\2\u0ef1\u0143\3\2\2\2\u0ef2\u0ef3\7")
        buf.write("I\2\2\u0ef3\u0ef4\7\u023c\2\2\u0ef4\u0f05\5\u03b6\u01dc")
        buf.write("\2\u0ef5\u0ef6\7\u017c\2\2\u0ef6\u0ef7\7\u00f4\2\2\u0ef7")
        buf.write("\u0ef8\7\u0323\2\2\u0ef8\u0efa\7\u031f\2\2\u0ef9\u0efb")
        buf.write("\7\u00ce\2\2\u0efa\u0ef9\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb")
        buf.write("\u0f01\3\2\2\2\u0efc\u0efd\7\60\2\2\u0efd\u0eff\7\u0323")
        buf.write("\2\2\u0efe\u0f00\t\t\2\2\u0eff\u0efe\3\2\2\2\u0eff\u0f00")
        buf.write("\3\2\2\2\u0f00\u0f02\3\2\2\2\u0f01\u0efc\3\2\2\2\u0f01")
        buf.write("\u0f02\3\2\2\2\u0f02\u0f06\3\2\2\2\u0f03\u0f04\7\u008c")
        buf.write("\2\2\u0f04\u0f06\7\u017b\2\2\u0f05\u0ef5\3\2\2\2\u0f05")
        buf.write("\u0f03\3\2\2\2\u0f06\u0145\3\2\2\2\u0f07\u0f08\7\n\2\2")
        buf.write("\u0f08\u0f09\7\u00bd\2\2\u0f09\u0f1f\7\u00ac\2\2\u0f0a")
        buf.write("\u0f0c\7\u0205\2\2\u0f0b\u0f0a\3\2\2\2\u0f0b\u0f0c\3\2")
        buf.write("\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f0e\7\u010f\2\2\u0f0e")
        buf.write("\u0f0f\7\u017c\2\2\u0f0f\u0f10\7\u01ee\2\2\u0f10\u0f11")
        buf.write("\7&\2\2\u0f11\u0f12\7\u00f4\2\2\u0f12\u0f13\7\u0323\2")
        buf.write("\2\u0f13\u0f20\7\u031f\2\2\u0f14\u0f15\t\25\2\2\u0f15")
        buf.write("\u0f16\7\u01ee\2\2\u0f16\u0f1d\7&\2\2\u0f17\u0f18\7\u0138")
        buf.write("\2\2\u0f18\u0f19\7\u00bd\2\2\u0f19\u0f1e\7\u00ac\2\2\u0f1a")
        buf.write("\u0f1b\7\u00f4\2\2\u0f1b\u0f1c\7\u0323\2\2\u0f1c\u0f1e")
        buf.write("\7\u031f\2\2\u0f1d\u0f17\3\2\2\2\u0f1d\u0f1a\3\2\2\2\u0f1e")
        buf.write("\u0f20\3\2\2\2\u0f1f\u0f0b\3\2\2\2\u0f1f\u0f14\3\2\2\2")
        buf.write("\u0f20\u0147\3\2\2\2\u0f21\u0f22\7I\2\2\u0f22\u0f23\7")
        buf.write("\u00bd\2\2\u0f23\u0f24\7\u00ac\2\2\u0f24\u0f25\7\u01ee")
        buf.write("\2\2\u0f25\u0f26\7&\2\2\u0f26\u0f27\7\u00f4\2\2\u0f27")
        buf.write("\u0f28\7\u0323\2\2\u0f28\u0f29\7\u031f\2\2\u0f29\u0149")
        buf.write("\3\2\2\2\u0f2a\u0f2b\7\n\2\2\u0f2b\u0f2c\7\u00bd\2\2\u0f2c")
        buf.write("\u0f48\7\u00ac\2\2\u0f2d\u0f2f\7\u0205\2\2\u0f2e\u0f2d")
        buf.write("\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f30\3\2\2\2\u0f30")
        buf.write("\u0f31\7\u010f\2\2\u0f31\u0f32\7\u017c\2\2\u0f32\u0f33")
        buf.write("\7\u01ee\2\2\u0f33\u0f34\7&\2\2\u0f34\u0f35\7\u00f4\2")
        buf.write("\2\u0f35\u0f36\7\u0323\2\2\u0f36\u0f49\7\u031f\2\2\u0f37")
        buf.write("\u0f38\7\4\2\2\u0f38\u0f39\7\u01ee\2\2\u0f39\u0f40\7&")
        buf.write("\2\2\u0f3a\u0f3b\7\u0138\2\2\u0f3b\u0f3c\7\u00bd\2\2\u0f3c")
        buf.write("\u0f41\7\u00ac\2\2\u0f3d\u0f3e\7\u00f4\2\2\u0f3e\u0f3f")
        buf.write("\7\u0323\2\2\u0f3f\u0f41\7\u031f\2\2\u0f40\u0f3a\3\2\2")
        buf.write("\2\u0f40\u0f3d\3\2\2\2\u0f41\u0f49\3\2\2\2\u0f42\u0f43")
        buf.write("\7h\2\2\u0f43\u0f44\7\u01ee\2\2\u0f44\u0f45\7&\2\2\u0f45")
        buf.write("\u0f46\7\u00f4\2\2\u0f46\u0f47\7\u0323\2\2\u0f47\u0f49")
        buf.write("\7\u031f\2\2\u0f48\u0f2e\3\2\2\2\u0f48\u0f37\3\2\2\2\u0f48")
        buf.write("\u0f42\3\2\2\2\u0f49\u014b\3\2\2\2\u0f4a\u0f4b\7I\2\2")
        buf.write("\u0f4b\u0f4c\7\u00bd\2\2\u0f4c\u0f52\7\u00ac\2\2\u0f4d")
        buf.write("\u0f4e\7\u01ee\2\2\u0f4e\u0f4f\7&\2\2\u0f4f\u0f50\7\u00f4")
        buf.write("\2\2\u0f50\u0f51\7\u0323\2\2\u0f51\u0f53\7\u031f\2\2\u0f52")
        buf.write("\u0f4d\3\2\2\2\u0f52\u0f53\3\2\2\2\u0f53\u014d\3\2\2\2")
        buf.write("\u0f54\u0f55\7\n\2\2\u0f55\u0f56\7\u0251\2\2\u0f56\u0f57")
        buf.write("\7\u02fb\2\2\u0f57\u0f58\5\u03b6\u01dc\2\u0f58\u0f59\7")
        buf.write("\u0303\2\2\u0f59\u0f62\7\u0323\2\2\u0f5a\u0f63\7\u00d5")
        buf.write("\2\2\u0f5b\u0f63\7\u01ea\2\2\u0f5c\u0f63\7\u030a\2\2\u0f5d")
        buf.write("\u0f5e\7\u0302\2\2\u0f5e\u0f5f\7\u017c\2\2\u0f5f\u0f60")
        buf.write("\7\u012e\2\2\u0f60\u0f61\7\u01b8\2\2\u0f61\u0f63\5\u03b6")
        buf.write("\u01dc\2\u0f62\u0f5a\3\2\2\2\u0f62\u0f5b\3\2\2\2\u0f62")
        buf.write("\u0f5c\3\2\2\2\u0f62\u0f5d\3\2\2\2\u0f63\u014f\3\2\2\2")
        buf.write("\u0f64\u0f65\7\n\2\2\u0f65\u0f66\7\u0280\2\2\u0f66\u0f67")
        buf.write("\7\u008e\2\2\u0f67\u0f68\5\u03b6\u01dc\2\u0f68\u0f69\7")
        buf.write("\u0335\2\2\u0f69\u0f6a\7\u0336\2\2\u0f6a\u0f6b\t$\2\2")
        buf.write("\u0f6b\u0f6c\7\u0297\2\2\u0f6c\u0f6d\7\u0335\2\2\u0f6d")
        buf.write("\u0f6e\7\u031b\2\2\u0f6e\u0f6f\7\u0336\2\2\u0f6f\u0151")
        buf.write("\3\2\2\2\u0f70\u0f71\7\n\2\2\u0f71\u0f72\7\u0280\2\2\u0f72")
        buf.write("\u0f73\7\u012f\2\2\u0f73\u0f74\5\u03b6\u01dc\2\u0f74\u0f75")
        buf.write("\7\u0263\2\2\u0f75\u0f77\7\u0170\2\2\u0f76\u0f78\5\u03b6")
        buf.write("\u01dc\2\u0f77\u0f76\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78")
        buf.write("\u0153\3\2\2\2\u0f79\u0f7a\7\n\2\2\u0f7a\u0f7b\7\u02a7")
        buf.write("\2\2\u0f7b\u0f7c\7\u0138\2\2\u0f7c\u0f7d\7\u01a9\2\2\u0f7d")
        buf.write("\u0f7e\5\u03b6\u01dc\2\u0f7e\u0f82\7\u017c\2\2\u0f7f\u0f80")
        buf.write("\7\u0171\2\2\u0f80\u0f81\7\u0323\2\2\u0f81\u0f83\5\u03b6")
        buf.write("\u01dc\2\u0f82\u0f7f\3\2\2\2\u0f82\u0f83\3\2\2\2\u0f83")
        buf.write("\u0f88\3\2\2\2\u0f84\u0f85\7\u0337\2\2\u0f85\u0f86\7\f")
        buf.write("\2\2\u0f86\u0f87\7\u0323\2\2\u0f87\u0f89\t\t\2\2\u0f88")
        buf.write("\u0f84\3\2\2\2\u0f88\u0f89\3\2\2\2\u0f89\u0155\3\2\2\2")
        buf.write("\u0f8a\u0f8b\7I\2\2\u0f8b\u0f8c\7\u02a7\2\2\u0f8c\u0f8d")
        buf.write("\7\u0138\2\2\u0f8d\u0f8e\7\u01a9\2\2\u0f8e\u0f91\5\u03b6")
        buf.write("\u01dc\2\u0f8f\u0f90\7\24\2\2\u0f90\u0f92\5\u03b6\u01dc")
        buf.write("\2\u0f91\u0f8f\3\2\2\2\u0f91\u0f92\3\2\2\2\u0f92\u0f93")
        buf.write("\3\2\2\2\u0f93\u0f94\7\u015d\2\2\u0f94\u0f95\7\u0138\2")
        buf.write("\2\u0f95\u0f96\7\u031f\2\2\u0f96\u0f9a\7\u017c\2\2\u0f97")
        buf.write("\u0f98\7\u0171\2\2\u0f98\u0f99\7\u0323\2\2\u0f99\u0f9b")
        buf.write("\5\u03b6\u01dc\2\u0f9a\u0f97\3\2\2\2\u0f9a\u0f9b\3\2\2")
        buf.write("\2\u0f9b\u0fa0\3\2\2\2\u0f9c\u0f9d\7\u0337\2\2\u0f9d\u0f9e")
        buf.write("\7\f\2\2\u0f9e\u0f9f\7\u0323\2\2\u0f9f\u0fa1\t\t\2\2\u0fa0")
        buf.write("\u0f9c\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0157\3\2\2\2")
        buf.write("\u0fa2\u0fa3\7I\2\2\u0fa3\u0fa4\7\u02b2\2\2\u0fa4\u0fa5")
        buf.write("\7\u0285\2\2\u0fa5\u100c\5\u03b6\u01dc\2\u0fa6\u0fa7\7")
        buf.write("\u017c\2\2\u0fa7\u0fae\7\u0335\2\2\u0fa8\u0faa\7\u0337")
        buf.write("\2\2\u0fa9\u0fa8\3\2\2\2\u0fa9\u0faa\3\2\2\2\u0faa\u0fab")
        buf.write("\3\2\2\2\u0fab\u0fac\7\u0254\2\2\u0fac\u0fad\7\u0323\2")
        buf.write("\2\u0fad\u0faf\7\u031b\2\2\u0fae\u0fa9\3\2\2\2\u0fae\u0faf")
        buf.write("\3\2\2\2\u0faf\u0fb6\3\2\2\2\u0fb0\u0fb2\7\u0337\2\2\u0fb1")
        buf.write("\u0fb0\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u0fb3\3\2\2\2")
        buf.write("\u0fb3\u0fb4\7\u0243\2\2\u0fb4\u0fb5\7\u0323\2\2\u0fb5")
        buf.write("\u0fb7\7\u031b\2\2\u0fb6\u0fb1\3\2\2\2\u0fb6\u0fb7\3\2")
        buf.write("\2\2\u0fb7\u0fbe\3\2\2\2\u0fb8\u0fba\7\u0337\2\2\u0fb9")
        buf.write("\u0fb8\3\2\2\2\u0fb9\u0fba\3\2\2\2\u0fba\u0fbb\3\2\2\2")
        buf.write("\u0fbb\u0fbc\7\u01af\2\2\u0fbc\u0fbd\7\u0323\2\2\u0fbd")
        buf.write("\u0fbf\7\u031b\2\2\u0fbe\u0fb9\3\2\2\2\u0fbe\u0fbf\3\2")
        buf.write("\2\2\u0fbf\u0fe9\3\2\2\2\u0fc0\u0fc2\7\u0337\2\2\u0fc1")
        buf.write("\u0fc0\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fc3\3\2\2\2")
        buf.write("\u0fc3\u0fc4\7\u018a\2\2\u0fc4\u0fc5\7\u012d\2\2\u0fc5")
        buf.write("\u0fe7\7\u0323\2\2\u0fc6\u0fe8\7\u019b\2\2\u0fc7\u0fd1")
        buf.write("\7\u0335\2\2\u0fc8\u0fca\7\u0337\2\2\u0fc9\u0fc8\3\2\2")
        buf.write("\2\u0fc9\u0fca\3\2\2\2\u0fca\u0fcf\3\2\2\2\u0fcb\u0fd0")
        buf.write("\7\u031b\2\2\u0fcc\u0fcd\7\u031b\2\2\u0fcd\u0fce\7\u015d")
        buf.write("\2\2\u0fce\u0fd0\7\u031b\2\2\u0fcf\u0fcb\3\2\2\2\u0fcf")
        buf.write("\u0fcc\3\2\2\2\u0fd0\u0fd2\3\2\2\2\u0fd1\u0fc9\3\2\2\2")
        buf.write("\u0fd2\u0fd3\3\2\2\2\u0fd3\u0fd1\3\2\2\2\u0fd3\u0fd4\3")
        buf.write("\2\2\2\u0fd4\u0fd5\3\2\2\2\u0fd5\u0fe8\7\u0336\2\2\u0fd6")
        buf.write("\u0fd7\7\u026f\2\2\u0fd7\u0fd8\7\u0323\2\2\u0fd8\u0fe2")
        buf.write("\7\u0335\2\2\u0fd9\u0fdb\7\u0337\2\2\u0fda\u0fd9\3\2\2")
        buf.write("\2\u0fda\u0fdb\3\2\2\2\u0fdb\u0fe0\3\2\2\2\u0fdc\u0fe1")
        buf.write("\7\u031b\2\2\u0fdd\u0fde\7\u031b\2\2\u0fde\u0fdf\7\u015d")
        buf.write("\2\2\u0fdf\u0fe1\7\u031b\2\2\u0fe0\u0fdc\3\2\2\2\u0fe0")
        buf.write("\u0fdd\3\2\2\2\u0fe1\u0fe3\3\2\2\2\u0fe2\u0fda\3\2\2\2")
        buf.write("\u0fe3\u0fe4\3\2\2\2\u0fe4\u0fe2\3\2\2\2\u0fe4\u0fe5\3")
        buf.write("\2\2\2\u0fe5\u0fe6\3\2\2\2\u0fe6\u0fe8\7\u0336\2\2\u0fe7")
        buf.write("\u0fc6\3\2\2\2\u0fe7\u0fc7\3\2\2\2\u0fe7\u0fd6\3\2\2\2")
        buf.write("\u0fe8\u0fea\3\2\2\2\u0fe9\u0fc1\3\2\2\2\u0fe9\u0fea\3")
        buf.write("\2\2\2\u0fea\u0ff1\3\2\2\2\u0feb\u0fed\7\u0337\2\2\u0fec")
        buf.write("\u0feb\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u0fee\3\2\2\2")
        buf.write("\u0fee\u0fef\7\u0256\2\2\u0fef\u0ff0\7\u0323\2\2\u0ff0")
        buf.write("\u0ff2\7\u031b\2\2\u0ff1\u0fec\3\2\2\2\u0ff1\u0ff2\3\2")
        buf.write("\2\2\u0ff2\u0ff9\3\2\2\2\u0ff3\u0ff5\7\u0337\2\2\u0ff4")
        buf.write("\u0ff3\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0ff6\3\2\2\2")
        buf.write("\u0ff6\u0ff7\7\u0247\2\2\u0ff7\u0ff8\7\u0323\2\2\u0ff8")
        buf.write("\u0ffa\7\u031b\2\2\u0ff9\u0ff4\3\2\2\2\u0ff9\u0ffa\3\2")
        buf.write("\2\2\u0ffa\u1001\3\2\2\2\u0ffb\u0ffd\7\u0337\2\2\u0ffc")
        buf.write("\u0ffb\3\2\2\2\u0ffc\u0ffd\3\2\2\2\u0ffd\u0ffe\3\2\2\2")
        buf.write("\u0ffe\u0fff\7\u0255\2\2\u0fff\u1000\7\u0323\2\2\u1000")
        buf.write("\u1002\7\u031b\2\2\u1001\u0ffc\3\2\2\2\u1001\u1002\3\2")
        buf.write("\2\2\u1002\u1009\3\2\2\2\u1003\u1005\7\u0337\2\2\u1004")
        buf.write("\u1003\3\2\2\2\u1004\u1005\3\2\2\2\u1005\u1006\3\2\2\2")
        buf.write("\u1006\u1007\7\u0246\2\2\u1007\u1008\7\u0323\2\2\u1008")
        buf.write("\u100a\7\u031b\2\2\u1009\u1004\3\2\2\2\u1009\u100a\3\2")
        buf.write("\2\2\u100a\u100b\3\2\2\2\u100b\u100d\7\u0336\2\2\u100c")
        buf.write("\u0fa6\3\2\2\2\u100c\u100d\3\2\2\2\u100d\u0159\3\2\2\2")
        buf.write("\u100e\u100f\7\n\2\2\u100f\u1010\7\u02b2\2\2\u1010\u1026")
        buf.write("\7\u0091\2\2\u1011\u1027\t%\2\2\u1012\u1013\7\u017c\2")
        buf.write("\2\u1013\u1014\7\u0335\2\2\u1014\u1015\7\62\2\2\u1015")
        buf.write("\u101b\7\u0323\2\2\u1016\u1017\5\u03b6\u01dc\2\u1017\u1018")
        buf.write("\7\u0330\2\2\u1018\u1019\5\u03b6\u01dc\2\u1019\u101c\3")
        buf.write("\2\2\2\u101a\u101c\7\u00df\2\2\u101b\u1016\3\2\2\2\u101b")
        buf.write("\u101a\3\2\2\2\u101c\u101d\3\2\2\2\u101d\u1027\7\u0336")
        buf.write("\2\2\u101e\u101f\7\u0114\2\2\u101f\u1027\7\u014a\2\2\u1020")
        buf.write("\u1021\7\u017c\2\2\u1021\u1022\7\u0335\2\2\u1022\u1023")
        buf.write("\7\u00c4\2\2\u1023\u1024\7\u0323\2\2\u1024\u1025\7\u031b")
        buf.write("\2\2\u1025\u1027\7\u0336\2\2\u1026\u1011\3\2\2\2\u1026")
        buf.write("\u1012\3\2\2\2\u1026\u101e\3\2\2\2\u1026\u1020\3\2\2\2")
        buf.write("\u1027\u015b\3\2\2\2\u1028\u1029\7\n\2\2\u1029\u102a\7")
        buf.write("\u0121\2\2\u102a\u1032\5\u03b6\u01dc\2\u102b\u102c\t\25")
        buf.write("\2\2\u102c\u102d\7\u00c7\2\2\u102d\u1033\5\u03b6\u01dc")
        buf.write("\2\u102e\u102f\7\u017c\2\2\u102f\u1030\7\u025e\2\2\u1030")
        buf.write("\u1031\7\u0323\2\2\u1031\u1033\5\u03b6\u01dc\2\u1032\u102b")
        buf.write("\3\2\2\2\u1032\u102e\3\2\2\2\u1033\u015d\3\2\2\2\u1034")
        buf.write("\u1035\7I\2\2\u1035\u1036\7\u0121\2\2\u1036\u1039\5\u03b6")
        buf.write("\u01dc\2\u1037\u1038\7\24\2\2\u1038\u103a\5\u03b6\u01dc")
        buf.write("\2\u1039\u1037\3\2\2\2\u1039\u103a\3\2\2\2\u103a\u015f")
        buf.write("\3\2\2\2\u103b\u103c\7I\2\2\u103c\u103d\7\u02b8\2\2\u103d")
        buf.write("\u1040\5\u03b6\u01dc\2\u103e\u103f\7\24\2\2\u103f\u1041")
        buf.write("\5\u03b6\u01dc\2\u1040\u103e\3\2\2\2\u1040\u1041\3\2\2")
        buf.write("\2\u1041\u1042\3\2\2\2\u1042\u1049\7\u017c\2\2\u1043\u1045")
        buf.write("\7\u0337\2\2\u1044\u1043\3\2\2\2\u1044\u1045\3\2\2\2\u1045")
        buf.write("\u1046\3\2\2\2\u1046\u1047\7\u013a\2\2\u1047\u1048\7\u0323")
        buf.write("\2\2\u1048\u104a\7\u031f\2\2\u1049\u1044\3\2\2\2\u1049")
        buf.write("\u104a\3\2\2\2\u104a\u1051\3\2\2\2\u104b\u104d\7\u0337")
        buf.write("\2\2\u104c\u104b\3\2\2\2\u104c\u104d\3\2\2\2\u104d\u104e")
        buf.write("\3\2\2\2\u104e\u104f\7\u01ac\2\2\u104f\u1050\7\u0323\2")
        buf.write("\2\u1050\u1052\7\u031f\2\2\u1051\u104c\3\2\2\2\u1051\u1052")
        buf.write("\3\2\2\2\u1052\u1059\3\2\2\2\u1053\u1055\7\u0337\2\2\u1054")
        buf.write("\u1053\3\2\2\2\u1054\u1055\3\2\2\2\u1055\u1056\3\2\2\2")
        buf.write("\u1056\u1057\7\u00b3\2\2\u1057\u1058\7\u0323\2\2\u1058")
        buf.write("\u105a\7\u031b\2\2\u1059\u1054\3\2\2\2\u1059\u105a\3\2")
        buf.write("\2\2\u105a\u105c\3\2\2\2\u105b\u105d\7\u0337\2\2\u105c")
        buf.write("\u105b\3\2\2\2\u105c\u105d\3\2\2\2\u105d\u105e\3\2\2\2")
        buf.write("\u105e\u105f\7\u0186\2\2\u105f\u1060\7\u0323\2\2\u1060")
        buf.write("\u1065\t&\2\2\u1061\u1062\7\u0337\2\2\u1062\u1063\7\u0258")
        buf.write("\2\2\u1063\u1064\7\u0323\2\2\u1064\u1066\t&\2\2\u1065")
        buf.write("\u1061\3\2\2\2\u1065\u1066\3\2\2\2\u1066\u0161\3\2\2\2")
        buf.write("\u1067\u1068\7I\2\2\u1068\u106c\7\u012a\2\2\u1069\u106a")
        buf.write("\5\u03b6\u01dc\2\u106a\u106b\7\u0330\2\2\u106b\u106d\3")
        buf.write("\2\2\2\u106c\u1069\3\2\2\2\u106c\u106d\3\2\2\2\u106d\u106e")
        buf.write("\3\2\2\2\u106e\u106f\5\u03b6\u01dc\2\u106f\u1070\7\20")
        buf.write("\2\2\u1070\u1071\5\u02e2\u0172\2\u1071\u0163\3\2\2\2\u1072")
        buf.write("\u1073\7\n\2\2\u1073\u1074\7\u012e\2\2\u1074\u1075\5\u03b6")
        buf.write("\u01dc\2\u1075\u107f\7\u0162\2\2\u1076\u107c\7\u0272\2")
        buf.write("\2\u1077\u107c\7\u02fb\2\2\u1078\u1079\7\u030e\2\2\u1079")
        buf.write("\u107a\7\u012e\2\2\u107a\u107c\7\u01b8\2\2\u107b\u1076")
        buf.write("\3\2\2\2\u107b\u1077\3\2\2\2\u107b\u1078\3\2\2\2\u107c")
        buf.write("\u107d\3\2\2\2\u107d\u107e\7\u0339\2\2\u107e\u1080\7\u0339")
        buf.write("\2\2\u107f\u107b\3\2\2\2\u107f\u1080\3\2\2\2\u1080\u1081")
        buf.write("\3\2\2\2\u1081\u1084\5\u03b6\u01dc\2\u1082\u1083\7\u0330")
        buf.write("\2\2\u1083\u1085\5\u03b6\u01dc\2\u1084\u1082\3\2\2\2\u1084")
        buf.write("\u1085\3\2\2\2\u1085\u0165\3\2\2\2\u1086\u1087\7I\2\2")
        buf.write("\u1087\u108f\7\u012e\2\2\u1088\u1090\5\u03b6\u01dc\2\u1089")
        buf.write("\u108a\7\24\2\2\u108a\u1090\5\u03b6\u01dc\2\u108b\u108c")
        buf.write("\5\u03b6\u01dc\2\u108c\u108d\7\24\2\2\u108d\u108e\5\u03b6")
        buf.write("\u01dc\2\u108e\u1090\3\2\2\2\u108f\u1088\3\2\2\2\u108f")
        buf.write("\u1089\3\2\2\2\u108f\u108b\3\2\2\2\u1090\u10ad\3\2\2\2")
        buf.write("\u1091\u10ac\5\u01ee\u00f8\2\u1092\u10ac\5\u01f2\u00fa")
        buf.write("\2\u1093\u1094\t\'\2\2\u1094\u1095\t(\2\2\u1095\u1099")
        buf.write("\7\u00e5\2\2\u1096\u1097\7\u012e\2\2\u1097\u1098\7\u0339")
        buf.write("\2\2\u1098\u109a\7\u0339\2\2\u1099\u1096\3\2\2\2\u1099")
        buf.write("\u109a\3\2\2\2\u109a\u109b\3\2\2\2\u109b\u109c\5\u03b6")
        buf.write("\u01dc\2\u109c\u109d\7\u015d\2\2\u109d\u109e\5\u03b6\u01dc")
        buf.write("\2\u109e\u10ac\3\2\2\2\u109f\u10a0\7\u011d\2\2\u10a0\u10a1")
        buf.write("\t(\2\2\u10a1\u10a5\7\u00e5\2\2\u10a2\u10a3\7\u012e\2")
        buf.write("\2\u10a3\u10a4\7\u0339\2\2\u10a4\u10a6\7\u0339\2\2\u10a5")
        buf.write("\u10a2\3\2\2\2\u10a5\u10a6\3\2\2\2\u10a6\u10a7\3\2\2\2")
        buf.write("\u10a7\u10a8\5\u03b6\u01dc\2\u10a8\u10a9\7\u008c\2\2\u10a9")
        buf.write("\u10aa\5\u03b6\u01dc\2\u10aa\u10ac\3\2\2\2\u10ab\u1091")
        buf.write("\3\2\2\2\u10ab\u1092\3\2\2\2\u10ab\u1093\3\2\2\2\u10ab")
        buf.write("\u109f\3\2\2\2\u10ac\u10af\3\2\2\2\u10ad\u10ab\3\2\2\2")
        buf.write("\u10ad\u10ae\3\2\2\2\u10ae\u0167\3\2\2\2\u10af\u10ad\3")
        buf.write("\2\2\2\u10b0\u10b1\7I\2\2\u10b1\u10b2\7\u012e\2\2\u10b2")
        buf.write("\u10b5\5\u03b6\u01dc\2\u10b3\u10b4\7\24\2\2\u10b4\u10b6")
        buf.write("\5\u03b6\u01dc\2\u10b5\u10b3\3\2\2\2\u10b5\u10b6\3\2\2")
        buf.write("\2\u10b6\u0169\3\2\2\2\u10b7\u10b8\7\n\2\2\u10b8\u10b9")
        buf.write("\7\u012e\2\2\u10b9\u10ba\5\u03b6\u01dc\2\u10ba\u10be\7")
        buf.write("\u0162\2\2\u10bb\u10bc\7\u0272\2\2\u10bc\u10bd\7\u0339")
        buf.write("\2\2\u10bd\u10bf\7\u0339\2\2\u10be\u10bb\3\2\2\2\u10be")
        buf.write("\u10bf\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c3\5\u03b6")
        buf.write("\u01dc\2\u10c1\u10c2\7\u0330\2\2\u10c2\u10c4\7\u031c\2")
        buf.write("\2\u10c3\u10c1\3\2\2\2\u10c3\u10c4\3\2\2\2\u10c4\u016b")
        buf.write("\3\2\2\2\u10c5\u10c6\7I\2\2\u10c6\u10c7\7\u02c2\2\2\u10c7")
        buf.write("\u10c8\7\u0290\2\2\u10c8\u10c9\7\u0234\2\2\u10c9\u10d1")
        buf.write("\5\u03b6\u01dc\2\u10ca\u10ce\7\u008c\2\2\u10cb\u10cc\5")
        buf.write("\u03b6\u01dc\2\u10cc\u10cd\7\u0330\2\2\u10cd\u10cf\3\2")
        buf.write("\2\2\u10ce\u10cb\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf\u10d0")
        buf.write("\3\2\2\2\u10d0\u10d2\5\u03b6\u01dc\2\u10d1\u10ca\3\2\2")
        buf.write("\2\u10d1\u10d2\3\2\2\2\u10d2\u10d5\3\2\2\2\u10d3\u10d4")
        buf.write("\7\24\2\2\u10d4\u10d6\5\u03b6\u01dc\2\u10d5\u10d3\3\2")
        buf.write("\2\2\u10d5\u10d6\3\2\2\2\u10d6\u016d\3\2\2\2\u10d7\u10d8")
        buf.write("\7I\2\2\u10d8\u10d9\7\u0130\2\2\u10d9\u10dd\7\u00fd\2")
        buf.write("\2\u10da\u10db\5\u03b6\u01dc\2\u10db\u10dc\7\u0330\2\2")
        buf.write("\u10dc\u10de\3\2\2\2\u10dd\u10da\3\2\2\2\u10dd\u10de\3")
        buf.write("\2\2\2\u10de\u10df\3\2\2\2\u10df\u1108\5\u03b6\u01dc\2")
        buf.write("\u10e0\u10e2\7\u0337\2\2\u10e1\u10e0\3\2\2\2\u10e1\u10e2")
        buf.write("\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3\u10e5\7\4\2\2\u10e4")
        buf.write("\u10e6\t)\2\2\u10e5\u10e4\3\2\2\2\u10e5\u10e6\3\2\2\2")
        buf.write("\u10e6\u10e7\3\2\2\2\u10e7\u10e8\7\u00ff\2\2\u10e8\u10e9")
        buf.write("\5\u03b6\u01dc\2\u10e9\u10ea\7\u0330\2\2\u10ea\u10eb\5")
        buf.write("\u03b6\u01dc\2\u10eb\u10f0\7\u0335\2\2\u10ec\u10ee\7\u0337")
        buf.write("\2\2\u10ed\u10ec\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee\u10ef")
        buf.write("\3\2\2\2\u10ef\u10f1\5\u03b6\u01dc\2\u10f0\u10ed\3\2\2")
        buf.write("\2\u10f1\u10f2\3\2\2\2\u10f2\u10f0\3\2\2\2\u10f2\u10f3")
        buf.write("\3\2\2\2\u10f3\u10f4\3\2\2\2\u10f4\u10f5\7\u0336\2\2\u10f5")
        buf.write("\u10f6\7\u00e5\2\2\u10f6\u10f7\5\u03b6\u01dc\2\u10f7\u10f8")
        buf.write("\7\u0330\2\2\u10f8\u1105\5\u03b6\u01dc\2\u10f9\u10fb\7")
        buf.write("\u0337\2\2\u10fa\u10f9\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb")
        buf.write("\u10fc\3\2\2\2\u10fc\u10fd\7\u018b\2\2\u10fd\u1104\t*")
        buf.write("\2\2\u10fe\u1100\7\u0337\2\2\u10ff\u10fe\3\2\2\2\u10ff")
        buf.write("\u1100\3\2\2\2\u1100\u1101\3\2\2\2\u1101\u1102\7\33\2")
        buf.write("\2\u1102\u1104\t+\2\2\u1103\u10fa\3\2\2\2\u1103\u10ff")
        buf.write("\3\2\2\2\u1104\u1107\3\2\2\2\u1105\u1103\3\2\2\2\u1105")
        buf.write("\u1106\3\2\2\2\u1106\u1109\3\2\2\2\u1107\u1105\3\2\2\2")
        buf.write("\u1108\u10e1\3\2\2\2\u1109\u110a\3\2\2\2\u110a\u1108\3")
        buf.write("\2\2\2\u110a\u110b\3\2\2\2\u110b\u1116\3\2\2\2\u110c\u110d")
        buf.write("\7\u017c\2\2\u110d\u110e\7\u0335\2\2\u110e\u110f\7\u014b")
        buf.write("\2\2\u110f\u1110\7\u0323\2\2\u1110\u1113\t\t\2\2\u1111")
        buf.write("\u1112\7\u02be\2\2\u1112\u1114\t\t\2\2\u1113\u1111\3\2")
        buf.write("\2\2\u1113\u1114\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1117")
        buf.write("\7\u0336\2\2\u1116\u110c\3\2\2\2\u1116\u1117\3\2\2\2\u1117")
        buf.write("\u111b\3\2\2\2\u1118\u1119\7\u00dc\2\2\u1119\u111a\7\u0086")
        buf.write("\2\2\u111a\u111c\7\u0112\2\2\u111b\u1118\3\2\2\2\u111b")
        buf.write("\u111c\3\2\2\2\u111c\u016f\3\2\2\2\u111d\u111e\7\n\2\2")
        buf.write("\u111e\u1122\7\u0136\2\2\u111f\u1120\5\u03b6\u01dc\2\u1120")
        buf.write("\u1121\7\u0330\2\2\u1121\u1123\3\2\2\2\u1122\u111f\3\2")
        buf.write("\2\2\u1122\u1123\3\2\2\2\u1123\u1124\3\2\2\2\u1124\u112a")
        buf.write("\5\u03b6\u01dc\2\u1125\u1128\7\u0115\2\2\u1126\u1127\7")
        buf.write("\u017c\2\2\u1127\u1129\7\u031b\2\2\u1128\u1126\3\2\2\2")
        buf.write("\u1128\u1129\3\2\2\2\u1129\u112b\3\2\2\2\u112a\u1125\3")
        buf.write("\2\2\2\u112a\u112b\3\2\2\2\u112b\u112f\3\2\2\2\u112c\u112d")
        buf.write("\7\u009d\2\2\u112d\u112e\7&\2\2\u112e\u1130\7\u031b\2")
        buf.write("\2\u112f\u112c\3\2\2\2\u112f\u1130\3\2\2\2\u1130\u1135")
        buf.write("\3\2\2\2\u1131\u1132\7\u00cc\2\2\u1132\u1136\7\u031b\2")
        buf.write("\2\u1133\u1134\7\u0264\2\2\u1134\u1136\7\u00cc\2\2\u1135")
        buf.write("\u1131\3\2\2\2\u1135\u1133\3\2\2\2\u1135\u1136\3\2\2\2")
        buf.write("\u1136\u113b\3\2\2\2\u1137\u1138\7\u00c0\2\2\u1138\u113c")
        buf.write("\7\u031b\2\2\u1139\u113a\7\u0264\2\2\u113a\u113c\7\u00c0")
        buf.write("\2\2\u113b\u1137\3\2\2\2\u113b\u1139\3\2\2\2\u113b\u113c")
        buf.write("\3\2\2\2\u113c\u1140\3\2\2\2\u113d\u1141\7Q\2\2\u113e")
        buf.write("\u113f\7\u0264\2\2\u113f\u1141\7Q\2\2\u1140\u113d\3\2")
        buf.write("\2\2\u1140\u113e\3\2\2\2\u1140\u1141\3\2\2\2\u1141\u1146")
        buf.write("\3\2\2\2\u1142\u1143\7\'\2\2\u1143\u1147\7\u031b\2\2\u1144")
        buf.write("\u1145\7\u0264\2\2\u1145\u1147\7\'\2\2\u1146\u1142\3\2")
        buf.write("\2\2\u1146\u1144\3\2\2\2\u1146\u1147\3\2\2\2\u1147\u0171")
        buf.write("\3\2\2\2\u1148\u1149\7I\2\2\u1149\u114d\7\u0136\2\2\u114a")
        buf.write("\u114b\5\u03b6\u01dc\2\u114b\u114c\7\u0330\2\2\u114c\u114e")
        buf.write("\3\2\2\2\u114d\u114a\3\2\2\2\u114d\u114e\3\2\2\2\u114e")
        buf.write("\u114f\3\2\2\2\u114f\u1152\5\u03b6\u01dc\2\u1150\u1151")
        buf.write("\7\20\2\2\u1151\u1153\5\u03ae\u01d8\2\u1152\u1150\3\2")
        buf.write("\2\2\u1152\u1153\3\2\2\2\u1153\u1157\3\2\2\2\u1154\u1155")
        buf.write("\7\u014d\2\2\u1155\u1156\7\u017c\2\2\u1156\u1158\7\u031b")
        buf.write("\2\2\u1157\u1154\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u115f")
        buf.write("\3\2\2\2\u1159\u115a\7\u009d\2\2\u115a\u115c\7&\2\2\u115b")
        buf.write("\u115d\7\u033e\2\2\u115c\u115b\3\2\2\2\u115c\u115d\3\2")
        buf.write("\2\2\u115d\u115e\3\2\2\2\u115e\u1160\7\u031b\2\2\u115f")
        buf.write("\u1159\3\2\2\2\u115f\u1160\3\2\2\2\u1160\u1167\3\2\2\2")
        buf.write("\u1161\u1163\7\u00cc\2\2\u1162\u1164\7\u031b\2\2\u1163")
        buf.write("\u1162\3\2\2\2\u1163\u1164\3\2\2\2\u1164\u1168\3\2\2\2")
        buf.write("\u1165\u1166\7\u0264\2\2\u1166\u1168\7\u00cc\2\2\u1167")
        buf.write("\u1161\3\2\2\2\u1167\u1165\3\2\2\2\u1167\u1168\3\2\2\2")
        buf.write("\u1168\u116f\3\2\2\2\u1169\u116b\7\u00c0\2\2\u116a\u116c")
        buf.write("\7\u031b\2\2\u116b\u116a\3\2\2\2\u116b\u116c\3\2\2\2\u116c")
        buf.write("\u1170\3\2\2\2\u116d\u116e\7\u0264\2\2\u116e\u1170\7\u00c0")
        buf.write("\2\2\u116f\u1169\3\2\2\2\u116f\u116d\3\2\2\2\u116f\u1170")
        buf.write("\3\2\2\2\u1170\u1174\3\2\2\2\u1171\u1175\7Q\2\2\u1172")
        buf.write("\u1173\7\u0264\2\2\u1173\u1175\7Q\2\2\u1174\u1171\3\2")
        buf.write("\2\2\u1174\u1172\3\2\2\2\u1174\u1175\3\2\2\2\u1175\u117c")
        buf.write("\3\2\2\2\u1176\u1178\7\'\2\2\u1177\u1179\7\u031b\2\2\u1178")
        buf.write("\u1177\3\2\2\2\u1178\u1179\3\2\2\2\u1179\u117d\3\2\2\2")
        buf.write("\u117a\u117b\7\u0264\2\2\u117b\u117d\7\'\2\2\u117c\u1176")
        buf.write("\3\2\2\2\u117c\u117a\3\2\2\2\u117c\u117d\3\2\2\2\u117d")
        buf.write("\u0173\3\2\2\2\u117e\u117f\7\n\2\2\u117f\u1180\7\u0137")
        buf.write("\2\2\u1180\u1181\7\u0199\2\2\u1181\u1205\5\u03b6\u01dc")
        buf.write("\2\u1182\u11af\7\u015d\2\2\u1183\u1184\7\u0082\2\2\u1184")
        buf.write("\u11a9\7\u0335\2\2\u1185\u1187\7\u0337\2\2\u1186\u1185")
        buf.write("\3\2\2\2\u1186\u1187\3\2\2\2\u1187\u1188\3\2\2\2\u1188")
        buf.write("\u1189\7\u01ff\2\2\u1189\u118a\7\u0323\2\2\u118a\u11a8")
        buf.write("\7\u031f\2\2\u118b\u118d\7\u0337\2\2\u118c\u118b\3\2\2")
        buf.write("\2\u118c\u118d\3\2\2\2\u118d\u118e\3\2\2\2\u118e\u118f")
        buf.write("\7\u024d\2\2\u118f\u1193\7\u0323\2\2\u1190\u1191\7\u031b")
        buf.write("\2\2\u1191\u1194\t,\2\2\u1192\u1194\7\u0300\2\2\u1193")
        buf.write("\u1190\3\2\2\2\u1193\u1192\3\2\2\2\u1194\u11a8\3\2\2\2")
        buf.write("\u1195\u1197\7\u0337\2\2\u1196\u1195\3\2\2\2\u1196\u1197")
        buf.write("\3\2\2\2\u1197\u1198\3\2\2\2\u1198\u1199\7\u024a\2\2\u1199")
        buf.write("\u119a\7\u0323\2\2\u119a\u11a8\t-\2\2\u119b\u119d\7\u0337")
        buf.write("\2\2\u119c\u119b\3\2\2\2\u119c\u119d\3\2\2\2\u119d\u119e")
        buf.write("\3\2\2\2\u119e\u119f\7\u0245\2\2\u119f\u11a0\7\u0323\2")
        buf.write("\2\u11a0\u11a8\7\u031b\2\2\u11a1\u11a3\7\u0337\2\2\u11a2")
        buf.write("\u11a1\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a4\3\2\2\2")
        buf.write("\u11a4\u11a5\7\u02b1\2\2\u11a5\u11a6\7\u0323\2\2\u11a6")
        buf.write("\u11a8\t\t\2\2\u11a7\u1186\3\2\2\2\u11a7\u118c\3\2\2\2")
        buf.write("\u11a7\u1196\3\2\2\2\u11a7\u119c\3\2\2\2\u11a7\u11a2\3")
        buf.write("\2\2\2\u11a8\u11ab\3\2\2\2\u11a9\u11a7\3\2\2\2\u11a9\u11aa")
        buf.write("\3\2\2\2\u11aa\u11ac\3\2\2\2\u11ab\u11a9\3\2\2\2\u11ac")
        buf.write("\u11b0\7\u0336\2\2\u11ad\u11b0\7\u0195\2\2\u11ae\u11b0")
        buf.write("\7\u02c8\2\2\u11af\u1183\3\2\2\2\u11af\u11ad\3\2\2\2\u11af")
        buf.write("\u11ae\3\2\2\2\u11b0\u11b2\3\2\2\2\u11b1\u1182\3\2\2\2")
        buf.write("\u11b1\u11b2\3\2\2\2\u11b2\u11cd\3\2\2\2\u11b3\u11b4\7")
        buf.write("\u017c\2\2\u11b4\u11c9\7\u0335\2\2\u11b5\u11b7\7\u0337")
        buf.write("\2\2\u11b6\u11b5\3\2\2\2\u11b6\u11b7\3\2\2\2\u11b7\u11b8")
        buf.write("\3\2\2\2\u11b8\u11b9\7\u0295\2\2\u11b9\u11ba\7\u0323\2")
        buf.write("\2\u11ba\u11c8\7\u031b\2\2\u11bb\u11bd\7\u0337\2\2\u11bc")
        buf.write("\u11bb\3\2\2\2\u11bc\u11bd\3\2\2\2\u11bd\u11be\3\2\2\2")
        buf.write("\u11be\u11bf\7\u00e6\2\2\u11bf\u11c0\7\u0323\2\2\u11c0")
        buf.write("\u11c8\t.\2\2\u11c1\u11c3\7\u0337\2\2\u11c2\u11c1\3\2")
        buf.write("\2\2\u11c2\u11c3\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4\u11c5")
        buf.write("\7\u014b\2\2\u11c5\u11c6\7\u0323\2\2\u11c6\u11c8\t\t\2")
        buf.write("\2\u11c7\u11b6\3\2\2\2\u11c7\u11bc\3\2\2\2\u11c7\u11c2")
        buf.write("\3\2\2\2\u11c8\u11cb\3\2\2\2\u11c9\u11c7\3\2\2\2\u11c9")
        buf.write("\u11ca\3\2\2\2\u11ca\u11cc\3\2\2\2\u11cb\u11c9\3\2\2\2")
        buf.write("\u11cc\u11ce\7\u0336\2\2\u11cd\u11b3\3\2\2\2\u11cd\u11ce")
        buf.write("\3\2\2\2\u11ce\u11fd\3\2\2\2\u11cf\u11fb\7\u0179\2\2\u11d0")
        buf.write("\u11d2\7\u0337\2\2\u11d1\u11d0\3\2\2\2\u11d1\u11d2\3\2")
        buf.write("\2\2\u11d2\u11d4\3\2\2\2\u11d3\u11d5\7\u00dc\2\2\u11d4")
        buf.write("\u11d3\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u11d6\3\2\2\2")
        buf.write("\u11d6\u11e2\5\u03b6\u01dc\2\u11d7\u11e3\7\u0323\2\2\u11d8")
        buf.write("\u11d9\7\u0325\2\2\u11d9\u11e3\7\u0324\2\2\u11da\u11db")
        buf.write("\7\u0326\2\2\u11db\u11e3\7\u0323\2\2\u11dc\u11e3\7\u0324")
        buf.write("\2\2\u11dd\u11de\7\u0324\2\2\u11de\u11e3\7\u0323\2\2\u11df")
        buf.write("\u11e3\7\u0325\2\2\u11e0\u11e1\7\u0325\2\2\u11e1\u11e3")
        buf.write("\7\u0323\2\2\u11e2\u11d7\3\2\2\2\u11e2\u11d8\3\2\2\2\u11e2")
        buf.write("\u11da\3\2\2\2\u11e2\u11dc\3\2\2\2\u11e2\u11dd\3\2\2\2")
        buf.write("\u11e2\u11df\3\2\2\2\u11e2\u11e0\3\2\2\2\u11e3\u11e4\3")
        buf.write("\2\2\2\u11e4\u11e5\t\30\2\2\u11e5\u11fc\3\2\2\2\u11e6")
        buf.write("\u11e8\7\u0337\2\2\u11e7\u11e6\3\2\2\2\u11e7\u11e8\3\2")
        buf.write("\2\2\u11e8\u11e9\3\2\2\2\u11e9\u11eb\t\35\2\2\u11ea\u11ec")
        buf.write("\7\u00dc\2\2\u11eb\u11ea\3\2\2\2\u11eb\u11ec\3\2\2\2\u11ec")
        buf.write("\u11f8\3\2\2\2\u11ed\u11f9\7\u0323\2\2\u11ee\u11ef\7\u0325")
        buf.write("\2\2\u11ef\u11f9\7\u0324\2\2\u11f0\u11f1\7\u0326\2\2\u11f1")
        buf.write("\u11f9\7\u0323\2\2\u11f2\u11f9\7\u0324\2\2\u11f3\u11f4")
        buf.write("\7\u0324\2\2\u11f4\u11f9\7\u0323\2\2\u11f5\u11f9\7\u0325")
        buf.write("\2\2\u11f6\u11f7\7\u0325\2\2\u11f7\u11f9\7\u0323\2\2\u11f8")
        buf.write("\u11ed\3\2\2\2\u11f8\u11ee\3\2\2\2\u11f8\u11f0\3\2\2\2")
        buf.write("\u11f8\u11f2\3\2\2\2\u11f8\u11f3\3\2\2\2\u11f8\u11f5\3")
        buf.write("\2\2\2\u11f8\u11f6\3\2\2\2\u11f9\u11fa\3\2\2\2\u11fa\u11fc")
        buf.write("\t\30\2\2\u11fb\u11d1\3\2\2\2\u11fb\u11e7\3\2\2\2\u11fc")
        buf.write("\u11fe\3\2\2\2\u11fd\u11cf\3\2\2\2\u11fd\u11fe\3\2\2\2")
        buf.write("\u11fe\u1206\3\2\2\2\u11ff\u1200\7\u02a9\2\2\u1200\u1206")
        buf.write("\7\u0179\2\2\u1201\u1202\7\u025b\2\2\u1202\u1203\7\u025e")
        buf.write("\2\2\u1203\u1204\7\u0323\2\2\u1204\u1206\5\u03b6\u01dc")
        buf.write("\2\u1205\u11b1\3\2\2\2\u1205\u11ff\3\2\2\2\u1205\u1201")
        buf.write("\3\2\2\2\u1206\u0175\3\2\2\2\u1207\u1208\7I\2\2\u1208")
        buf.write("\u1209\7\u0137\2\2\u1209\u120a\7\u0199\2\2\u120a\u1294")
        buf.write("\5\u03b6\u01dc\2\u120b\u1238\7\u015d\2\2\u120c\u120d\7")
        buf.write("\u0082\2\2\u120d\u1232\7\u0335\2\2\u120e\u1210\7\u0337")
        buf.write("\2\2\u120f\u120e\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1211")
        buf.write("\3\2\2\2\u1211\u1212\7\u01ff\2\2\u1212\u1213\7\u0323\2")
        buf.write("\2\u1213\u1231\7\u031f\2\2\u1214\u1216\7\u0337\2\2\u1215")
        buf.write("\u1214\3\2\2\2\u1215\u1216\3\2\2\2\u1216\u1217\3\2\2\2")
        buf.write("\u1217\u1218\7\u024d\2\2\u1218\u121c\7\u0323\2\2\u1219")
        buf.write("\u121a\7\u031b\2\2\u121a\u121d\t,\2\2\u121b\u121d\7\u0300")
        buf.write("\2\2\u121c\u1219\3\2\2\2\u121c\u121b\3\2\2\2\u121d\u1231")
        buf.write("\3\2\2\2\u121e\u1220\7\u0337\2\2\u121f\u121e\3\2\2\2\u121f")
        buf.write("\u1220\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1222\7\u024a")
        buf.write("\2\2\u1222\u1223\7\u0323\2\2\u1223\u1231\t-\2\2\u1224")
        buf.write("\u1226\7\u0337\2\2\u1225\u1224\3\2\2\2\u1225\u1226\3\2")
        buf.write("\2\2\u1226\u1227\3\2\2\2\u1227\u1228\7\u0245\2\2\u1228")
        buf.write("\u1229\7\u0323\2\2\u1229\u1231\7\u031b\2\2\u122a\u122c")
        buf.write("\7\u0337\2\2\u122b\u122a\3\2\2\2\u122b\u122c\3\2\2\2\u122c")
        buf.write("\u122d\3\2\2\2\u122d\u122e\7\u02b1\2\2\u122e\u122f\7\u0323")
        buf.write("\2\2\u122f\u1231\t\t\2\2\u1230\u120f\3\2\2\2\u1230\u1215")
        buf.write("\3\2\2\2\u1230\u121f\3\2\2\2\u1230\u1225\3\2\2\2\u1230")
        buf.write("\u122b\3\2\2\2\u1231\u1234\3\2\2\2\u1232\u1230\3\2\2\2")
        buf.write("\u1232\u1233\3\2\2\2\u1233\u1235\3\2\2\2\u1234\u1232\3")
        buf.write("\2\2\2\u1235\u1239\7\u0336\2\2\u1236\u1239\7\u0195\2\2")
        buf.write("\u1237\u1239\7\u02c8\2\2\u1238\u120c\3\2\2\2\u1238\u1236")
        buf.write("\3\2\2\2\u1238\u1237\3\2\2\2\u1239\u123b\3\2\2\2\u123a")
        buf.write("\u120b\3\2\2\2\u123a\u123b\3\2\2\2\u123b\u125c\3\2\2\2")
        buf.write("\u123c\u123d\7\u017c\2\2\u123d\u1258\7\u0335\2\2\u123e")
        buf.write("\u1240\7\u0337\2\2\u123f\u123e\3\2\2\2\u123f\u1240\3\2")
        buf.write("\2\2\u1240\u1241\3\2\2\2\u1241\u1242\7\u0295\2\2\u1242")
        buf.write("\u1243\7\u0323\2\2\u1243\u1257\7\u031b\2\2\u1244\u1246")
        buf.write("\7\u0337\2\2\u1245\u1244\3\2\2\2\u1245\u1246\3\2\2\2\u1246")
        buf.write("\u1247\3\2\2\2\u1247\u1248\7\u00e6\2\2\u1248\u1249\7\u0323")
        buf.write("\2\2\u1249\u1257\t.\2\2\u124a\u124c\7\u0337\2\2\u124b")
        buf.write("\u124a\3\2\2\2\u124b\u124c\3\2\2\2\u124c\u124d\3\2\2\2")
        buf.write("\u124d\u124e\7\u014b\2\2\u124e\u124f\7\u0323\2\2\u124f")
        buf.write("\u1257\t\t\2\2\u1250\u1252\7\u0337\2\2\u1251\u1250\3\2")
        buf.write("\2\2\u1251\u1252\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u1254")
        buf.write("\7\u019a\2\2\u1254\u1255\7\u0323\2\2\u1255\u1257\5\u03b6")
        buf.write("\u01dc\2\u1256\u123f\3\2\2\2\u1256\u1245\3\2\2\2\u1256")
        buf.write("\u124b\3\2\2\2\u1256\u1251\3\2\2\2\u1257\u125a\3\2\2\2")
        buf.write("\u1258\u1256\3\2\2\2\u1258\u1259\3\2\2\2\u1259\u125b\3")
        buf.write("\2\2\2\u125a\u1258\3\2\2\2\u125b\u125d\7\u0336\2\2\u125c")
        buf.write("\u123c\3\2\2\2\u125c\u125d\3\2\2\2\u125d\u128c\3\2\2\2")
        buf.write("\u125e\u128a\7\u0179\2\2\u125f\u1261\7\u0337\2\2\u1260")
        buf.write("\u125f\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u1263\3\2\2\2")
        buf.write("\u1262\u1264\7\u00dc\2\2\u1263\u1262\3\2\2\2\u1263\u1264")
        buf.write("\3\2\2\2\u1264\u1265\3\2\2\2\u1265\u1271\5\u03b6\u01dc")
        buf.write("\2\u1266\u1272\7\u0323\2\2\u1267\u1268\7\u0325\2\2\u1268")
        buf.write("\u1272\7\u0324\2\2\u1269\u126a\7\u0326\2\2\u126a\u1272")
        buf.write("\7\u0323\2\2\u126b\u1272\7\u0324\2\2\u126c\u126d\7\u0324")
        buf.write("\2\2\u126d\u1272\7\u0323\2\2\u126e\u1272\7\u0325\2\2\u126f")
        buf.write("\u1270\7\u0325\2\2\u1270\u1272\7\u0323\2\2\u1271\u1266")
        buf.write("\3\2\2\2\u1271\u1267\3\2\2\2\u1271\u1269\3\2\2\2\u1271")
        buf.write("\u126b\3\2\2\2\u1271\u126c\3\2\2\2\u1271\u126e\3\2\2\2")
        buf.write("\u1271\u126f\3\2\2\2\u1272\u1273\3\2\2\2\u1273\u1274\t")
        buf.write("\30\2\2\u1274\u128b\3\2\2\2\u1275\u1277\7\u0337\2\2\u1276")
        buf.write("\u1275\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u1278\3\2\2\2")
        buf.write("\u1278\u127a\t\35\2\2\u1279\u127b\7\u00dc\2\2\u127a\u1279")
        buf.write("\3\2\2\2\u127a\u127b\3\2\2\2\u127b\u1287\3\2\2\2\u127c")
        buf.write("\u1288\7\u0323\2\2\u127d\u127e\7\u0325\2\2\u127e\u1288")
        buf.write("\7\u0324\2\2\u127f\u1280\7\u0326\2\2\u1280\u1288\7\u0323")
        buf.write("\2\2\u1281\u1288\7\u0324\2\2\u1282\u1283\7\u0324\2\2\u1283")
        buf.write("\u1288\7\u0323\2\2\u1284\u1288\7\u0325\2\2\u1285\u1286")
        buf.write("\7\u0325\2\2\u1286\u1288\7\u0323\2\2\u1287\u127c\3\2\2")
        buf.write("\2\u1287\u127d\3\2\2\2\u1287\u127f\3\2\2\2\u1287\u1281")
        buf.write("\3\2\2\2\u1287\u1282\3\2\2\2\u1287\u1284\3\2\2\2\u1287")
        buf.write("\u1285\3\2\2\2\u1288\u1289\3\2\2\2\u1289\u128b\t\30\2")
        buf.write("\2\u128a\u1260\3\2\2\2\u128a\u1276\3\2\2\2\u128b\u128d")
        buf.write("\3\2\2\2\u128c\u125e\3\2\2\2\u128c\u128d\3\2\2\2\u128d")
        buf.write("\u1295\3\2\2\2\u128e\u128f\7\u02a9\2\2\u128f\u1295\7\u0179")
        buf.write("\2\2\u1290\u1291\7\u025b\2\2\u1291\u1292\7\u025e\2\2\u1292")
        buf.write("\u1293\7\u0323\2\2\u1293\u1295\5\u03b6\u01dc\2\u1294\u123a")
        buf.write("\3\2\2\2\u1294\u128e\3\2\2\2\u1294\u1290\3\2\2\2\u1295")
        buf.write("\u0177\3\2\2\2\u1296\u1297\7\n\2\2\u1297\u1298\7\u0137")
        buf.write("\2\2\u1298\u1299\7\u0199\2\2\u1299\u129a\7\u0145\2\2\u129a")
        buf.write("\u129f\5\u03b6\u01dc\2\u129b\u129c\7\u0086\2\2\u129c\u129d")
        buf.write("\7\u0137\2\2\u129d\u129e\7\u0199\2\2\u129e\u12a0\5\u03b6")
        buf.write("\u01dc\2\u129f\u129b\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0")
        buf.write("\u12a8\3\2\2\2\u12a1\u12a2\t\25\2\2\u12a2\u12a3\7\u0335")
        buf.write("\2\2\u12a3\u12a4\5\u03b6\u01dc\2\u12a4\u12a5\7\u0336\2")
        buf.write("\2\u12a5\u12a7\3\2\2\2\u12a6\u12a1\3\2\2\2\u12a7\u12aa")
        buf.write("\3\2\2\2\u12a8\u12a6\3\2\2\2\u12a8\u12a9\3\2\2\2\u12a9")
        buf.write("\u12b1\3\2\2\2\u12aa\u12a8\3\2\2\2\u12ab\u12ac\7\u017c")
        buf.write("\2\2\u12ac\u12ad\7\u0335\2\2\u12ad\u12ae\7\u014b\2\2\u12ae")
        buf.write("\u12af\7\u0323\2\2\u12af\u12b0\t\t\2\2\u12b0\u12b2\7\u0336")
        buf.write("\2\2\u12b1\u12ab\3\2\2\2\u12b1\u12b2\3\2\2\2\u12b2\u0179")
        buf.write("\3\2\2\2\u12b3\u12b4\7I\2\2\u12b4\u12b5\7\u0137\2\2\u12b5")
        buf.write("\u12b6\7\u0199\2\2\u12b6\u12b7\7\u0145\2\2\u12b7\u12bc")
        buf.write("\5\u03b6\u01dc\2\u12b8\u12b9\7\u0086\2\2\u12b9\u12ba\7")
        buf.write("\u0137\2\2\u12ba\u12bb\7\u0199\2\2\u12bb\u12bd\5\u03b6")
        buf.write("\u01dc\2\u12bc\u12b8\3\2\2\2\u12bc\u12bd\3\2\2\2\u12bd")
        buf.write("\u12c5\3\2\2\2\u12be\u12bf\7\4\2\2\u12bf\u12c0\7\u0335")
        buf.write("\2\2\u12c0\u12c1\5\u03b6\u01dc\2\u12c1\u12c2\7\u0336\2")
        buf.write("\2\u12c2\u12c4\3\2\2\2\u12c3\u12be\3\2\2\2\u12c4\u12c7")
        buf.write("\3\2\2\2\u12c5\u12c3\3\2\2\2\u12c5\u12c6\3\2\2\2\u12c6")
        buf.write("\u12ce\3\2\2\2\u12c7\u12c5\3\2\2\2\u12c8\u12c9\7\u017c")
        buf.write("\2\2\u12c9\u12ca\7\u0335\2\2\u12ca\u12cb\7\u014b\2\2\u12cb")
        buf.write("\u12cc\7\u0323\2\2\u12cc\u12cd\t\t\2\2\u12cd\u12cf\7\u0336")
        buf.write("\2\2\u12ce\u12c8\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf\u017b")
        buf.write("\3\2\2\2\u12d0\u12d1\7\n\2\2\u12d1\u12d2\7\u0137\2\2\u12d2")
        buf.write("\u12d3\7<\2\2\u12d3\u133d\7\u013d\2\2\u12d4\u12d5\7\u0104")
        buf.write("\2\2\u12d5\u12f9\7\u018a\2\2\u12d6\u12d7\7\u01c4\2\2\u12d7")
        buf.write("\u12e7\7\u0323\2\2\u12d8\u12e8\7\u019b\2\2\u12d9\u12db")
        buf.write("\7\u0337\2\2\u12da\u12d9\3\2\2\2\u12da\u12db\3\2\2\2\u12db")
        buf.write("\u12dc\3\2\2\2\u12dc\u12e4\7\u031b\2\2\u12dd\u12df\7\u0337")
        buf.write("\2\2\u12de\u12dd\3\2\2\2\u12de\u12df\3\2\2\2\u12df\u12e0")
        buf.write("\3\2\2\2\u12e0\u12e1\7\u031b\2\2\u12e1\u12e2\7\u015d\2")
        buf.write("\2\u12e2\u12e4\7\u031b\2\2\u12e3\u12da\3\2\2\2\u12e3\u12de")
        buf.write("\3\2\2\2\u12e4\u12e5\3\2\2\2\u12e5\u12e3\3\2\2\2\u12e5")
        buf.write("\u12e6\3\2\2\2\u12e6\u12e8\3\2\2\2\u12e7\u12d8\3\2\2\2")
        buf.write("\u12e7\u12e3\3\2\2\2\u12e8\u12fa\3\2\2\2\u12e9\u12ea\7")
        buf.write("\u026f\2\2\u12ea\u12f5\7\u0323\2\2\u12eb\u12ed\7\u0337")
        buf.write("\2\2\u12ec\u12eb\3\2\2\2\u12ec\u12ed\3\2\2\2\u12ed\u12ee")
        buf.write("\3\2\2\2\u12ee\u12f6\7\u031b\2\2\u12ef\u12f1\7\u0337\2")
        buf.write("\2\u12f0\u12ef\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u12f2")
        buf.write("\3\2\2\2\u12f2\u12f3\7\u031b\2\2\u12f3\u12f4\7\u015d\2")
        buf.write("\2\u12f4\u12f6\7\u031b\2\2\u12f5\u12ec\3\2\2\2\u12f5\u12f0")
        buf.write("\3\2\2\2\u12f6\u12f7\3\2\2\2\u12f7\u12f5\3\2\2\2\u12f7")
        buf.write("\u12f8\3\2\2\2\u12f8\u12fa\3\2\2\2\u12f9\u12d6\3\2\2\2")
        buf.write("\u12f9\u12e9\3\2\2\2\u12fa\u133e\3\2\2\2\u12fb\u12fc\7")
        buf.write("`\2\2\u12fc\u130c\7\u00bb\2\2\u12fd\u130d\7\u00e5\2\2")
        buf.write("\u12fe\u130d\7\u00e2\2\2\u12ff\u1300\7\u0283\2\2\u1300")
        buf.write("\u1301\7\u0323\2\2\u1301\u130d\t/\2\2\u1302\u1303\7\u00c3")
        buf.write("\2\2\u1303\u1307\7\u0323\2\2\u1304\u1305\7\u031b\2\2\u1305")
        buf.write("\u1308\7\u024e\2\2\u1306\u1308\7Z\2\2\u1307\u1304\3\2")
        buf.write("\2\2\u1307\u1306\3\2\2\2\u1308\u130d\3\2\2\2\u1309\u130a")
        buf.write("\7\u0245\2\2\u130a\u130b\7\u0323\2\2\u130b\u130d\t\60")
        buf.write("\2\2\u130c\u12fd\3\2\2\2\u130c\u12fe\3\2\2\2\u130c\u12ff")
        buf.write("\3\2\2\2\u130c\u1302\3\2\2\2\u130c\u1309\3\2\2\2\u130d")
        buf.write("\u133e\3\2\2\2\u130e\u130f\7~\2\2\u130f\u1310\7\64\2\2")
        buf.write("\u1310\u1322\7\u0290\2\2\u1311\u1312\7\u0174\2\2\u1312")
        buf.write("\u1313\7\u0323\2\2\u1313\u1323\t/\2\2\u1314\u1315\7\u0147")
        buf.write("\2\2\u1315\u1316\7\u0323\2\2\u1316\u1323\t/\2\2\u1317")
        buf.write("\u1318\7\u0148\2\2\u1318\u1319\7\u0323\2\2\u1319\u1323")
        buf.write("\t/\2\2\u131a\u131b\7\u0149\2\2\u131b\u1323\t/\2\2\u131c")
        buf.write("\u131d\7\177\2\2\u131d\u131e\7\u0323\2\2\u131e\u1323\t")
        buf.write("/\2\2\u131f\u1320\7\u0096\2\2\u1320\u1321\7\u0323\2\2")
        buf.write("\u1321\u1323\t\60\2\2\u1322\u1311\3\2\2\2\u1322\u1314")
        buf.write("\3\2\2\2\u1322\u1317\3\2\2\2\u1322\u131a\3\2\2\2\u1322")
        buf.write("\u131c\3\2\2\2\u1322\u131f\3\2\2\2\u1323\u133e\3\2\2\2")
        buf.write("\u1324\u1325\7\u0214\2\2\u1325\u1326\7\64\2\2\u1326\u1327")
        buf.write("\7A\2\2\u1327\u1328\7\u0323\2\2\u1328\u133e\t\61\2\2\u1329")
        buf.write("\u132a\7#\2\2\u132a\u132b\7\u0285\2\2\u132b\u1338\7{\2")
        buf.write("\2\u132c\u132d\7\u00e5\2\2\u132d\u132e\7\u0335\2\2\u132e")
        buf.write("\u132f\7\u0083\2\2\u132f\u1330\7\u0323\2\2\u1330\u1331")
        buf.write("\7\u031f\2\2\u1331\u1332\7\u0337\2\2\u1332\u1333\7\u02d6")
        buf.write("\2\2\u1333\u1334\7\u0323\2\2\u1334\u1335\7\u031b\2\2\u1335")
        buf.write("\u1336\t\62\2\2\u1336\u1339\7\u0336\2\2\u1337\u1339\7")
        buf.write("\u00e2\2\2\u1338\u132c\3\2\2\2\u1338\u1337\3\2\2\2\u1339")
        buf.write("\u133e\3\2\2\2\u133a\u133b\7\u013d\2\2\u133b\u133c\7\u0142")
        buf.write("\2\2\u133c\u133e\t\t\2\2\u133d\u12d4\3\2\2\2\u133d\u12fb")
        buf.write("\3\2\2\2\u133d\u130e\3\2\2\2\u133d\u1324\3\2\2\2\u133d")
        buf.write("\u1329\3\2\2\2\u133d\u133a\3\2\2\2\u133e\u017d\3\2\2\2")
        buf.write("\u133f\u1340\7\n\2\2\u1340\u1341\7\u0137\2\2\u1341\u1342")
        buf.write("\7\u0121\2\2\u1342\u134a\5\u03b6\u01dc\2\u1343\u1344\t")
        buf.write("\25\2\2\u1344\u1345\7\u00c7\2\2\u1345\u134b\5\u03b6\u01dc")
        buf.write("\2\u1346\u1347\7\u017c\2\2\u1347\u1348\7\u025e\2\2\u1348")
        buf.write("\u1349\7\u0323\2\2\u1349\u134b\5\u03b6\u01dc\2\u134a\u1343")
        buf.write("\3\2\2\2\u134a\u1346\3\2\2\2\u134b\u017f\3\2\2\2\u134c")
        buf.write("\u134d\7I\2\2\u134d\u134e\7\u0137\2\2\u134e\u134f\7\u0121")
        buf.write("\2\2\u134f\u1352\5\u03b6\u01dc\2\u1350\u1351\7\24\2\2")
        buf.write("\u1351\u1353\5\u03b6\u01dc\2\u1352\u1350\3\2\2\2\u1352")
        buf.write("\u1353\3\2\2\2\u1353\u0181\3\2\2\2\u1354\u1355\7\n\2\2")
        buf.write("\u1355\u1356\7\u0137\2\2\u1356\u1357\7\u0121\2\2\u1357")
        buf.write("\u1358\5\u03b6\u01dc\2\u1358\u1359\t\25\2\2\u1359\u135a")
        buf.write("\7\u00c7\2\2\u135a\u135b\5\u03b6\u01dc\2\u135b\u0183\3")
        buf.write("\2\2\2\u135c\u135d\7\n\2\2\u135d\u135e\7\u0138\2\2\u135e")
        buf.write("\u1366\5\u03b6\u01dc\2\u135f\u1360\7\u00e5\2\2\u1360\u1361")
        buf.write("\7\u0294\2\2\u1361\u1362\5\u03b6\u01dc\2\u1362\u1363\7")
        buf.write("\u0330\2\2\u1363\u1364\3\2\2\2\u1364\u1365\5\u03b6\u01dc")
        buf.write("\2\u1365\u1367\3\2\2\2\u1366\u135f\3\2\2\2\u1366\u1367")
        buf.write("\3\2\2\2\u1367\u136f\3\2\2\2\u1368\u136a\7\u0337\2\2\u1369")
        buf.write("\u1368\3\2\2\2\u1369\u136a\3\2\2\2\u136a\u136b\3\2\2\2")
        buf.write("\u136b\u136c\t\25\2\2\u136c\u136e\5\u03b6\u01dc\2\u136d")
        buf.write("\u1369\3\2\2\2\u136e\u1371\3\2\2\2\u136f\u136d\3\2\2\2")
        buf.write("\u136f\u1370\3\2\2\2\u1370\u0185\3\2\2\2\u1371\u136f\3")
        buf.write("\2\2\2\u1372\u1373\7I\2\2\u1373\u1374\7\u0138\2\2\u1374")
        buf.write("\u1377\5\u03b6\u01dc\2\u1375\u1376\7\24\2\2\u1376\u1378")
        buf.write("\5\u03b6\u01dc\2\u1377\u1375\3\2\2\2\u1377\u1378\3\2\2")
        buf.write("\2\u1378\u1379\3\2\2\2\u1379\u137a\7\u00e5\2\2\u137a\u137e")
        buf.write("\7\u0294\2\2\u137b\u137c\5\u03b6\u01dc\2\u137c\u137d\7")
        buf.write("\u0330\2\2\u137d\u137f\3\2\2\2\u137e\u137b\3\2\2\2\u137e")
        buf.write("\u137f\3\2\2\2\u137f\u1380\3\2\2\2\u1380\u138e\5\u03b6")
        buf.write("\u01dc\2\u1381\u1389\7\u0335\2\2\u1382\u1384\7\u0337\2")
        buf.write("\2\u1383\u1382\3\2\2\2\u1383\u1384\3\2\2\2\u1384\u1387")
        buf.write("\3\2\2\2\u1385\u1388\5\u03b6\u01dc\2\u1386\u1388\7Z\2")
        buf.write("\2\u1387\u1385\3\2\2\2\u1387\u1386\3\2\2\2\u1388\u138a")
        buf.write("\3\2\2\2\u1389\u1383\3\2\2\2\u138a\u138b\3\2\2\2\u138b")
        buf.write("\u1389\3\2\2\2\u138b\u138c\3\2\2\2\u138c\u138d\3\2\2\2")
        buf.write("\u138d\u138f\7\u0336\2\2\u138e\u1381\3\2\2\2\u138e\u138f")
        buf.write("\3\2\2\2\u138f\u0187\3\2\2\2\u1390\u1391\7\n\2\2\u1391")
        buf.write("\u1392\7\u0138\2\2\u1392\u1393\7\u00bd\2\2\u1393\u13a9")
        buf.write("\7\u00ac\2\2\u1394\u1396\7\u0205\2\2\u1395\u1394\3\2\2")
        buf.write("\2\u1395\u1396\3\2\2\2\u1396\u1397\3\2\2\2\u1397\u13aa")
        buf.write("\7\u010f\2\2\u1398\u13a7\7\u017c\2\2\u1399\u139a\7\u0275")
        buf.write("\2\2\u139a\u139b\7\u0323\2\2\u139b\u139c\7\u031f\2\2\u139c")
        buf.write("\u139d\7\u0337\2\2\u139d\u139e\7\u00e4\2\2\u139e\u139f")
        buf.write("\7\u0323\2\2\u139f\u13a8\7\u031f\2\2\u13a0\u13a1\7\u0260")
        buf.write("\2\2\u13a1\u13a2\7\u0323\2\2\u13a2\u13a3\7\u031f\2\2\u13a3")
        buf.write("\u13a4\7\u0337\2\2\u13a4\u13a5\7\u0262\2\2\u13a5\u13a6")
        buf.write("\7\u0323\2\2\u13a6\u13a8\7\u031f\2\2\u13a7\u1399\3\2\2")
        buf.write("\2\u13a7\u13a0\3\2\2\2\u13a7\u13a8\3\2\2\2\u13a8\u13aa")
        buf.write("\3\2\2\2\u13a9\u1395\3\2\2\2\u13a9\u1398\3\2\2\2\u13aa")
        buf.write("\u0189\3\2\2\2\u13ab\u13ac\7\n\2\2\u13ac\u13ad\7\u02e6")
        buf.write("\2\2\u13ad\u13ae\7\u00ac\2\2\u13ae\u13af\5\u03b6\u01dc")
        buf.write("\2\u13af\u13b0\t\25\2\2\u13b0\u13b1\7\u01ee\2\2\u13b1")
        buf.write("\u13bd\7&\2\2\u13b2\u13b3\7+\2\2\u13b3\u13be\5\u03b6\u01dc")
        buf.write("\2\u13b4\u13b5\7\u00f4\2\2\u13b5\u13b6\7\u0323\2\2\u13b6")
        buf.write("\u13be\7\u031f\2\2\u13b7\u13b8\7\u02e6\2\2\u13b8\u13b9")
        buf.write("\7\u00ac\2\2\u13b9\u13be\5\u03b6\u01dc\2\u13ba\u13bb\7")
        buf.write("\22\2\2\u13bb\u13bc\7\u00ac\2\2\u13bc\u13be\5\u03b6\u01dc")
        buf.write("\2\u13bd\u13b2\3\2\2\2\u13bd\u13b4\3\2\2\2\u13bd\u13b7")
        buf.write("\3\2\2\2\u13bd\u13ba\3\2\2\2\u13be\u018b\3\2\2\2\u13bf")
        buf.write("\u13c0\7\n\2\2\u13c0\u13c1\7\u02e6\2\2\u13c1\u13c2\7\u00ac")
        buf.write("\2\2\u13c2\u13c5\5\u03b6\u01dc\2\u13c3\u13c4\7\24\2\2")
        buf.write("\u13c4\u13c6\5\u03b6\u01dc\2\u13c5\u13c3\3\2\2\2\u13c5")
        buf.write("\u13c6\3\2\2\2\u13c6\u13ca\3\2\2\2\u13c7\u13c8\7\u008c")
        buf.write("\2\2\u13c8\u13c9\7\u0291\2\2\u13c9\u13cb\5\u03b6\u01dc")
        buf.write("\2\u13ca\u13c7\3\2\2\2\u13ca\u13cb\3\2\2\2\u13cb\u13cc")
        buf.write("\3\2\2\2\u13cc\u13ed\7\u017c\2\2\u13cd\u13ce\7\u022c\2")
        buf.write("\2\u13ce\u13cf\7\u0323\2\2\u13cf\u13dd\7\u031f\2\2\u13d0")
        buf.write("\u13d1\7\u018d\2\2\u13d1\u13d2\7\u0323\2\2\u13d2\u13dd")
        buf.write("\t\63\2\2\u13d3\u13d4\7\u021a\2\2\u13d4\u13d5\7\u0323")
        buf.write("\2\2\u13d5\u13dd\7\u031f\2\2\u13d6\u13d7\7\u0292\2\2\u13d7")
        buf.write("\u13d8\7\u0323\2\2\u13d8\u13dd\7\u031f\2\2\u13d9\u13da")
        buf.write("\7\u01c6\2\2\u13da\u13db\7\u0323\2\2\u13db\u13dd\t\f\2")
        buf.write("\2\u13dc\u13cd\3\2\2\2\u13dc\u13d0\3\2\2\2\u13dc\u13d3")
        buf.write("\3\2\2\2\u13dc\u13d6\3\2\2\2\u13dc\u13d9\3\2\2\2\u13dd")
        buf.write("\u13ee\3\2\2\2\u13de\u13df\7\u01ee\2\2\u13df\u13eb\7&")
        buf.write("\2\2\u13e0\u13e1\7+\2\2\u13e1\u13ec\5\u03b6\u01dc\2\u13e2")
        buf.write("\u13e3\7\u00f4\2\2\u13e3\u13e4\7\u0323\2\2\u13e4\u13ec")
        buf.write("\7\u031f\2\2\u13e5\u13e6\7\u02e6\2\2\u13e6\u13e7\7\u00ac")
        buf.write("\2\2\u13e7\u13ec\5\u03b6\u01dc\2\u13e8\u13e9\7\22\2\2")
        buf.write("\u13e9\u13ea\7\u00ac\2\2\u13ea\u13ec\5\u03b6\u01dc\2\u13eb")
        buf.write("\u13e0\3\2\2\2\u13eb\u13e2\3\2\2\2\u13eb\u13e5\3\2\2\2")
        buf.write("\u13eb\u13e8\3\2\2\2\u13ec\u13ee\3\2\2\2\u13ed\u13dc\3")
        buf.write("\2\2\2\u13ed\u13de\3\2\2\2\u13ee\u018d\3\2\2\2\u13ef\u13f0")
        buf.write("\7I\2\2\u13f0\u13f4\7\u02e8\2\2\u13f1\u13f2\5\u03b6\u01dc")
        buf.write("\2\u13f2\u13f3\7\u0330\2\2\u13f3\u13f5\3\2\2\2\u13f4\u13f1")
        buf.write("\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5\u13f6\3\2\2\2\u13f6")
        buf.write("\u13f7\5\u03b6\u01dc\2\u13f7\u1412\7\u0086\2\2\u13f8\u13f9")
        buf.write("\5\u03b6\u01dc\2\u13f9\u13fa\7\u0330\2\2\u13fa\u13fc\3")
        buf.write("\2\2\2\u13fb\u13f8\3\2\2\2\u13fb\u13fc\3\2\2\2\u13fc\u1400")
        buf.write("\3\2\2\2\u13fd\u13fe\5\u03b6\u01dc\2\u13fe\u13ff\7\u0330")
        buf.write("\2\2\u13ff\u1401\3\2\2\2\u1400\u13fd\3\2\2\2\u1400\u1401")
        buf.write("\3\2\2\2\u1401\u1405\3\2\2\2\u1402\u1403\5\u03b6\u01dc")
        buf.write("\2\u1403\u1404\7\u0330\2\2\u1404\u1406\3\2\2\2\u1405\u1402")
        buf.write("\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u1407\3\2\2\2\u1407")
        buf.write("\u1413\5\u03b6\u01dc\2\u1408\u1409\5\u03b6\u01dc\2\u1409")
        buf.write("\u140a\7\u0330\2\2\u140a\u140c\3\2\2\2\u140b\u1408\3\2")
        buf.write("\2\2\u140b\u140c\3\2\2\2\u140c\u1410\3\2\2\2\u140d\u140e")
        buf.write("\5\u03b6\u01dc\2\u140e\u140f\7\u0330\2\2\u140f\u1411\3")
        buf.write("\2\2\2\u1410\u140d\3\2\2\2\u1410\u1411\3\2\2\2\u1411\u1413")
        buf.write("\3\2\2\2\u1412\u13fb\3\2\2\2\u1412\u140b\3\2\2\2\u1413")
        buf.write("\u018f\3\2\2\2\u1414\u1415\7\n\2\2\u1415\u1416\7\u0171")
        buf.write("\2\2\u1416\u1417\5\u03b6\u01dc\2\u1417\u144a\7\u017c\2")
        buf.write("\2\u1418\u141a\7\u0337\2\2\u1419\u1418\3\2\2\2\u1419\u141a")
        buf.write("\3\2\2\2\u141a\u141b\3\2\2\2\u141b\u141c\7\u025e\2\2\u141c")
        buf.write("\u141d\7\u0323\2\2\u141d\u144b\5\u03b6\u01dc\2\u141e\u1420")
        buf.write("\7\u0337\2\2\u141f\u141e\3\2\2\2\u141f\u1420\3\2\2\2\u1420")
        buf.write("\u1421\3\2\2\2\u1421\u1422\7\\\2\2\u1422\u1425\7\u0323")
        buf.write("\2\2\u1423\u1426\5\u03b6\u01dc\2\u1424\u1426\7\u00df\2")
        buf.write("\2\u1425\u1423\3\2\2\2\u1425\u1424\3\2\2\2\u1426\u144b")
        buf.write("\3\2\2\2\u1427\u1429\7\u0337\2\2\u1428\u1427\3\2\2\2\u1428")
        buf.write("\u1429\3\2\2\2\u1429\u142a\3\2\2\2\u142a\u142b\7\u023c")
        buf.write("\2\2\u142b\u142c\7\u0323\2\2\u142c\u144b\5\u03b6\u01dc")
        buf.write("\2\u142d\u142f\7\u0337\2\2\u142e\u142d\3\2\2\2\u142e\u142f")
        buf.write("\3\2\2\2\u142f\u1430\3\2\2\2\u1430\u1431\7\u00f4\2\2\u1431")
        buf.write("\u1432\7\u0323\2\2\u1432\u1436\7\u031f\2\2\u1433\u1434")
        buf.write("\7\u00e4\2\2\u1434\u1435\7\u0323\2\2\u1435\u1437\7\u031f")
        buf.write("\2\2\u1436\u1433\3\2\2\2\u1437\u1438\3\2\2\2\u1438\u1436")
        buf.write("\3\2\2\2\u1438\u1439\3\2\2\2\u1439\u144b\3\2\2\2\u143a")
        buf.write("\u143c\7\u0337\2\2\u143b\u143a\3\2\2\2\u143b\u143c\3\2")
        buf.write("\2\2\u143c\u143d\3\2\2\2\u143d\u143e\7\u01d6\2\2\u143e")
        buf.write("\u1442\7\u0323\2\2\u143f\u1443\7\u00d5\2\2\u1440\u1443")
        buf.write("\7\u031b\2\2\u1441\u1443\5\u03b6\u01dc\2\u1442\u143f\3")
        buf.write("\2\2\2\u1442\u1440\3\2\2\2\u1442\u1441\3\2\2\2\u1443\u144b")
        buf.write("\3\2\2\2\u1444\u1446\7\u0337\2\2\u1445\u1444\3\2\2\2\u1445")
        buf.write("\u1446\3\2\2\2\u1446\u1447\3\2\2\2\u1447\u1448\7\u018e")
        buf.write("\2\2\u1448\u1449\7\u0323\2\2\u1449\u144b\t\t\2\2\u144a")
        buf.write("\u1419\3\2\2\2\u144a\u141f\3\2\2\2\u144a\u1428\3\2\2\2")
        buf.write("\u144a\u142e\3\2\2\2\u144a\u143b\3\2\2\2\u144a\u1445\3")
        buf.write("\2\2\2\u144b\u144c\3\2\2\2\u144c\u144a\3\2\2\2\u144c\u144d")
        buf.write("\3\2\2\2\u144d\u0191\3\2\2\2\u144e\u144f\7I\2\2\u144f")
        buf.write("\u1450\7\u0171\2\2\u1450\u1454\5\u03b6\u01dc\2\u1451\u1452")
        buf.write("\t\64\2\2\u1452\u1453\7\u023c\2\2\u1453\u1455\5\u03b6")
        buf.write("\u01dc\2\u1454\u1451\3\2\2\2\u1454\u1455\3\2\2\2\u1455")
        buf.write("\u1468\3\2\2\2\u1456\u1465\7\u017c\2\2\u1457\u1459\7\u0337")
        buf.write("\2\2\u1458\u1457\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u145a")
        buf.write("\3\2\2\2\u145a\u145b\7\\\2\2\u145b\u145c\7\u0323\2\2\u145c")
        buf.write("\u1464\5\u03b6\u01dc\2\u145d\u145f\7\u0337\2\2\u145e\u145d")
        buf.write("\3\2\2\2\u145e\u145f\3\2\2\2\u145f\u1460\3\2\2\2\u1460")
        buf.write("\u1461\7\u018e\2\2\u1461\u1462\7\u0323\2\2\u1462\u1464")
        buf.write("\t\t\2\2\u1463\u1458\3\2\2\2\u1463\u145e\3\2\2\2\u1464")
        buf.write("\u1467\3\2\2\2\u1465\u1463\3\2\2\2\u1465\u1466\3\2\2\2")
        buf.write("\u1466\u1469\3\2\2\2\u1467\u1465\3\2\2\2\u1468\u1456\3")
        buf.write("\2\2\2\u1468\u1469\3\2\2\2\u1469\u14e1\3\2\2\2\u146a\u146b")
        buf.write("\7I\2\2\u146b\u14bc\7\u0171\2\2\u146c\u148f\5\u03b6\u01dc")
        buf.write("\2\u146d\u148c\7\u017c\2\2\u146e\u1470\7\u0337\2\2\u146f")
        buf.write("\u146e\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u1471\3\2\2\2")
        buf.write("\u1471\u1472\7\\\2\2\u1472\u1473\7\u0323\2\2\u1473\u148b")
        buf.write("\5\u03b6\u01dc\2\u1474\u1476\7\u0337\2\2\u1475\u1474\3")
        buf.write("\2\2\2\u1475\u1476\3\2\2\2\u1476\u1477\3\2\2\2\u1477\u1478")
        buf.write("\7\u01d6\2\2\u1478\u147c\7\u0323\2\2\u1479\u147d\7\u00d5")
        buf.write("\2\2\u147a\u147d\7\u031b\2\2\u147b\u147d\5\u03b6\u01dc")
        buf.write("\2\u147c\u1479\3\2\2\2\u147c\u147a\3\2\2\2\u147c\u147b")
        buf.write("\3\2\2\2\u147d\u148b\3\2\2\2\u147e\u1480\7\u0337\2\2\u147f")
        buf.write("\u147e\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u1481\3\2\2\2")
        buf.write("\u1481\u1482\7\u0140\2\2\u1482\u1483\7\u0323\2\2\u1483")
        buf.write("\u148b\7\u0320\2\2\u1484\u1486\7\u0337\2\2\u1485\u1484")
        buf.write("\3\2\2\2\u1485\u1486\3\2\2\2\u1486\u1487\3\2\2\2\u1487")
        buf.write("\u1488\7\u018e\2\2\u1488\u1489\7\u0323\2\2\u1489\u148b")
        buf.write("\t\t\2\2\u148a\u146f\3\2\2\2\u148a\u1475\3\2\2\2\u148a")
        buf.write("\u147f\3\2\2\2\u148a\u1485\3\2\2\2\u148b\u148e\3\2\2\2")
        buf.write("\u148c\u148a\3\2\2\2\u148c\u148d\3\2\2\2\u148d\u1490\3")
        buf.write("\2\2\2\u148e\u148c\3\2\2\2\u148f\u146d\3\2\2\2\u148f\u1490")
        buf.write("\3\2\2\2\u1490\u14bd\3\2\2\2\u1491\u1492\5\u03b6\u01dc")
        buf.write("\2\u1492\u1493\7\u017c\2\2\u1493\u1494\7\u00f4\2\2\u1494")
        buf.write("\u1495\7\u0323\2\2\u1495\u14b4\7\u031f\2\2\u1496\u1498")
        buf.write("\7\u0337\2\2\u1497\u1496\3\2\2\2\u1497\u1498\3\2\2\2\u1498")
        buf.write("\u1499\3\2\2\2\u1499\u149a\7\\\2\2\u149a\u149b\7\u0323")
        buf.write("\2\2\u149b\u14b3\5\u03b6\u01dc\2\u149c\u149e\7\u0337\2")
        buf.write("\2\u149d\u149c\3\2\2\2\u149d\u149e\3\2\2\2\u149e\u149f")
        buf.write("\3\2\2\2\u149f\u14a0\7\u01d6\2\2\u14a0\u14a4\7\u0323\2")
        buf.write("\2\u14a1\u14a5\7\u00d5\2\2\u14a2\u14a5\7\u031b\2\2\u14a3")
        buf.write("\u14a5\5\u03b6\u01dc\2\u14a4\u14a1\3\2\2\2\u14a4\u14a2")
        buf.write("\3\2\2\2\u14a4\u14a3\3\2\2\2\u14a5\u14b3\3\2\2\2\u14a6")
        buf.write("\u14a8\7\u0337\2\2\u14a7\u14a6\3\2\2\2\u14a7\u14a8\3\2")
        buf.write("\2\2\u14a8\u14a9\3\2\2\2\u14a9\u14aa\7\u0140\2\2\u14aa")
        buf.write("\u14ab\7\u0323\2\2\u14ab\u14b3\7\u0320\2\2\u14ac\u14ae")
        buf.write("\7\u0337\2\2\u14ad\u14ac\3\2\2\2\u14ad\u14ae\3\2\2\2\u14ae")
        buf.write("\u14af\3\2\2\2\u14af\u14b0\7\u018e\2\2\u14b0\u14b1\7\u0323")
        buf.write("\2\2\u14b1\u14b3\t\t\2\2\u14b2\u1497\3\2\2\2\u14b2\u149d")
        buf.write("\3\2\2\2\u14b2\u14a7\3\2\2\2\u14b2\u14ad\3\2\2\2\u14b3")
        buf.write("\u14b6\3\2\2\2\u14b4\u14b2\3\2\2\2\u14b4\u14b5\3\2\2\2")
        buf.write("\u14b5\u14bd\3\2\2\2\u14b6\u14b4\3\2\2\2\u14b7\u14b8\5")
        buf.write("\u03b6\u01dc\2\u14b8\u14b9\7\u008c\2\2\u14b9\u14ba\7|")
        buf.write("\2\2\u14ba\u14bb\7\u0291\2\2\u14bb\u14bd\3\2\2\2\u14bc")
        buf.write("\u146c\3\2\2\2\u14bc\u1491\3\2\2\2\u14bc\u14b7\3\2\2\2")
        buf.write("\u14bd\u14e1\3\2\2\2\u14be\u14bf\7I\2\2\u14bf\u14c0\7")
        buf.write("\u0171\2\2\u14c0\u14db\5\u03b6\u01dc\2\u14c1\u14c2\7\u017e")
        buf.write("\2\2\u14c2\u14d1\7\u023c\2\2\u14c3\u14c5\7\u0337\2\2\u14c4")
        buf.write("\u14c3\3\2\2\2\u14c4\u14c5\3\2\2\2\u14c5\u14c6\3\2\2\2")
        buf.write("\u14c6\u14c7\7\\\2\2\u14c7\u14c8\7\u0323\2\2\u14c8\u14d0")
        buf.write("\5\u03b6\u01dc\2\u14c9\u14cb\7\u0337\2\2\u14ca\u14c9\3")
        buf.write("\2\2\2\u14ca\u14cb\3\2\2\2\u14cb\u14cc\3\2\2\2\u14cc\u14cd")
        buf.write("\7\u018e\2\2\u14cd\u14ce\7\u0323\2\2\u14ce\u14d0\t\t\2")
        buf.write("\2\u14cf\u14c4\3\2\2\2\u14cf\u14ca\3\2\2\2\u14d0\u14d3")
        buf.write("\3\2\2\2\u14d1\u14cf\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2")
        buf.write("\u14dc\3\2\2\2\u14d3\u14d1\3\2\2\2\u14d4\u14d5\t\64\2")
        buf.write("\2\u14d5\u14d6\7+\2\2\u14d6\u14dc\5\u03b6\u01dc\2\u14d7")
        buf.write("\u14d8\t\64\2\2\u14d8\u14d9\7\22\2\2\u14d9\u14da\7\u00ac")
        buf.write("\2\2\u14da\u14dc\5\u03b6\u01dc\2\u14db\u14c1\3\2\2\2\u14db")
        buf.write("\u14d4\3\2\2\2\u14db\u14d7\3\2\2\2\u14dc\u14e1\3\2\2\2")
        buf.write("\u14dd\u14de\7I\2\2\u14de\u14df\7\u0171\2\2\u14df\u14e1")
        buf.write("\5\u03b6\u01dc\2\u14e0\u144e\3\2\2\2\u14e0\u146a\3\2\2")
        buf.write("\2\u14e0\u14be\3\2\2\2\u14e0\u14dd\3\2\2\2\u14e1\u0193")
        buf.write("\3\2\2\2\u14e2\u14e3\7I\2\2\u14e3\u14e4\7\u0171\2\2\u14e4")
        buf.write("\u14ea\5\u03b6\u01dc\2\u14e5\u14e6\t\64\2\2\u14e6\u14e7")
        buf.write("\7\u023c\2\2\u14e7\u14eb\5\u03b6\u01dc\2\u14e8\u14e9\7")
        buf.write("\u017e\2\2\u14e9\u14eb\7\u023c\2\2\u14ea\u14e5\3\2\2\2")
        buf.write("\u14ea\u14e8\3\2\2\2\u14ea\u14eb\3\2\2\2\u14eb\u14f0\3")
        buf.write("\2\2\2\u14ec\u14ed\7\u017c\2\2\u14ed\u14ee\7\\\2\2\u14ee")
        buf.write("\u14ef\7\u0323\2\2\u14ef\u14f1\5\u03b6\u01dc\2\u14f0\u14ec")
        buf.write("\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u14ff\3\2\2\2\u14f2")
        buf.write("\u14f3\7I\2\2\u14f3\u14f4\7\u0171\2\2\u14f4\u14f5\5\u03b6")
        buf.write("\u01dc\2\u14f5\u14f6\7\u008c\2\2\u14f6\u14f7\7|\2\2\u14f7")
        buf.write("\u14fc\7\u0291\2\2\u14f8\u14f9\7\u017c\2\2\u14f9\u14fa")
        buf.write("\7\\\2\2\u14fa\u14fb\7\u0323\2\2\u14fb\u14fd\5\u03b6\u01dc")
        buf.write("\2\u14fc\u14f8\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u14ff")
        buf.write("\3\2\2\2\u14fe\u14e2\3\2\2\2\u14fe\u14f2\3\2\2\2\u14ff")
        buf.write("\u0195\3\2\2\2\u1500\u1501\7\n\2\2\u1501\u1502\7\u0171")
        buf.write("\2\2\u1502\u1503\5\u03b6\u01dc\2\u1503\u151c\7\u017c\2")
        buf.write("\2\u1504\u1506\7\u0337\2\2\u1505\u1504\3\2\2\2\u1505\u1506")
        buf.write("\3\2\2\2\u1506\u1507\3\2\2\2\u1507\u1508\7\u025e\2\2\u1508")
        buf.write("\u1509\7\u0323\2\2\u1509\u151d\5\u03b6\u01dc\2\u150a\u150c")
        buf.write("\7\u0337\2\2\u150b\u150a\3\2\2\2\u150b\u150c\3\2\2\2\u150c")
        buf.write("\u150d\3\2\2\2\u150d\u150e\7\\\2\2\u150e\u150f\7\u0323")
        buf.write("\2\2\u150f\u151d\5\u03b6\u01dc\2\u1510\u1512\7\u0337\2")
        buf.write("\2\u1511\u1510\3\2\2\2\u1511\u1512\3\2\2\2\u1512\u1513")
        buf.write("\3\2\2\2\u1513\u1514\7\u023c\2\2\u1514\u1515\7\u0323\2")
        buf.write("\2\u1515\u151d\5\u03b6\u01dc\2\u1516\u1518\7\u0337\2\2")
        buf.write("\u1517\u1516\3\2\2\2\u1517\u1518\3\2\2\2\u1518\u1519\3")
        buf.write("\2\2\2\u1519\u151a\7\u018e\2\2\u151a\u151b\7\u0323\2\2")
        buf.write("\u151b\u151d\t\t\2\2\u151c\u1505\3\2\2\2\u151c\u150b\3")
        buf.write("\2\2\2\u151c\u1511\3\2\2\2\u151c\u1517\3\2\2\2\u151d\u151e")
        buf.write("\3\2\2\2\u151e\u151c\3\2\2\2\u151e\u151f\3\2\2\2\u151f")
        buf.write("\u0197\3\2\2\2\u1520\u1521\7\n\2\2\u1521\u1522\7\u030d")
        buf.write("\2\2\u1522\u1525\7\u0093\2\2\u1523\u1526\5\u03b6\u01dc")
        buf.write("\2\u1524\u1526\7\u01d4\2\2\u1525\u1523\3\2\2\2\u1525\u1524")
        buf.write("\3\2\2\2\u1526\u1546\3\2\2\2\u1527\u1528\7\u017c\2\2\u1528")
        buf.write("\u1541\7\u0335\2\2\u1529\u152a\7\u021e\2\2\u152a\u152b")
        buf.write("\7\u0323\2\2\u152b\u1542\t\65\2\2\u152c\u152e\7\u0337")
        buf.write("\2\2\u152d\u152c\3\2\2\2\u152d\u152e\3\2\2\2\u152e\u152f")
        buf.write("\3\2\2\2\u152f\u1530\7\u02ae\2\2\u1530\u1531\7\u0323\2")
        buf.write("\2\u1531\u1542\7\u031b\2\2\u1532\u1534\7\u0337\2\2\u1533")
        buf.write("\u1532\3\2\2\2\u1533\u1534\3\2\2\2\u1534\u1535\3\2\2\2")
        buf.write("\u1535\u1536\7\u02ad\2\2\u1536\u1537\7\u0323\2\2\u1537")
        buf.write("\u1542\7\u031b\2\2\u1538\u1539\7\u02af\2\2\u1539\u153a")
        buf.write("\7\u0323\2\2\u153a\u1542\7\u031b\2\2\u153b\u153c\7\u0244")
        buf.write("\2\2\u153c\u153d\7\u0323\2\2\u153d\u1542\7\u031b\2\2\u153e")
        buf.write("\u153f\7\u0211\2\2\u153f\u1540\7\u0323\2\2\u1540\u1542")
        buf.write("\7\u031b\2\2\u1541\u1529\3\2\2\2\u1541\u152d\3\2\2\2\u1541")
        buf.write("\u1533\3\2\2\2\u1541\u1538\3\2\2\2\u1541\u153b\3\2\2\2")
        buf.write("\u1541\u153e\3\2\2\2\u1542\u1543\3\2\2\2\u1543\u1541\3")
        buf.write("\2\2\2\u1543\u1544\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u1547")
        buf.write("\7\u0336\2\2\u1546\u1527\3\2\2\2\u1546\u1547\3\2\2\2\u1547")
        buf.write("\u154d\3\2\2\2\u1548\u154b\7\u0301\2\2\u1549\u154c\5\u03b6")
        buf.write("\u01dc\2\u154a\u154c\7\u01d4\2\2\u154b\u1549\3\2\2\2\u154b")
        buf.write("\u154a\3\2\2\2\u154c\u154e\3\2\2\2\u154d\u1548\3\2\2\2")
        buf.write("\u154d\u154e\3\2\2\2\u154e\u0199\3\2\2\2\u154f\u1550\7")
        buf.write("I\2\2\u1550\u1551\7\u030d\2\2\u1551\u1552\7\u0093\2\2")
        buf.write("\u1552\u1572\5\u03b6\u01dc\2\u1553\u1554\7\u017c\2\2\u1554")
        buf.write("\u156d\7\u0335\2\2\u1555\u1556\7\u021e\2\2\u1556\u1557")
        buf.write("\7\u0323\2\2\u1557\u156e\t\65\2\2\u1558\u155a\7\u0337")
        buf.write("\2\2\u1559\u1558\3\2\2\2\u1559\u155a\3\2\2\2\u155a\u155b")
        buf.write("\3\2\2\2\u155b\u155c\7\u02ae\2\2\u155c\u155d\7\u0323\2")
        buf.write("\2\u155d\u156e\7\u031b\2\2\u155e\u1560\7\u0337\2\2\u155f")
        buf.write("\u155e\3\2\2\2\u155f\u1560\3\2\2\2\u1560\u1561\3\2\2\2")
        buf.write("\u1561\u1562\7\u02ad\2\2\u1562\u1563\7\u0323\2\2\u1563")
        buf.write("\u156e\7\u031b\2\2\u1564\u1565\7\u02af\2\2\u1565\u1566")
        buf.write("\7\u0323\2\2\u1566\u156e\7\u031b\2\2\u1567\u1568\7\u0244")
        buf.write("\2\2\u1568\u1569\7\u0323\2\2\u1569\u156e\7\u031b\2\2\u156a")
        buf.write("\u156b\7\u0211\2\2\u156b\u156c\7\u0323\2\2\u156c\u156e")
        buf.write("\7\u031b\2\2\u156d\u1555\3\2\2\2\u156d\u1559\3\2\2\2\u156d")
        buf.write("\u155f\3\2\2\2\u156d\u1564\3\2\2\2\u156d\u1567\3\2\2\2")
        buf.write("\u156d\u156a\3\2\2\2\u156e\u156f\3\2\2\2\u156f\u156d\3")
        buf.write("\2\2\2\u156f\u1570\3\2\2\2\u1570\u1571\3\2\2\2\u1571\u1573")
        buf.write("\7\u0336\2\2\u1572\u1553\3\2\2\2\u1572\u1573\3\2\2\2\u1573")
        buf.write("\u1581\3\2\2\2\u1574\u1577\7\u0301\2\2\u1575\u1578\5\u03b6")
        buf.write("\u01dc\2\u1576\u1578\7\u01d4\2\2\u1577\u1575\3\2\2\2\u1577")
        buf.write("\u1576\3\2\2\2\u1577\u1578\3\2\2\2\u1578\u157f\3\2\2\2")
        buf.write("\u1579\u157b\7\u0337\2\2\u157a\u1579\3\2\2\2\u157a\u157b")
        buf.write("\3\2\2\2\u157b\u157c\3\2\2\2\u157c\u157d\7|\2\2\u157d")
        buf.write("\u1580\5\u03b6\u01dc\2\u157e\u1580\7\u01d4\2\2\u157f\u157a")
        buf.write("\3\2\2\2\u157f\u157e\3\2\2\2\u157f\u1580\3\2\2\2\u1580")
        buf.write("\u1582\3\2\2\2\u1581\u1574\3\2\2\2\u1581\u1582\3\2\2\2")
        buf.write("\u1582\u019b\3\2\2\2\u1583\u1584\7I\2\2\u1584\u1585\7")
        buf.write("\u030e\2\2\u1585\u1586\7\u012e\2\2\u1586\u158a\7\u01b8")
        buf.write("\2\2\u1587\u1588\5\u03b6\u01dc\2\u1588\u1589\7\u0330\2")
        buf.write("\2\u1589\u158b\3\2\2\2\u158a\u1587\3\2\2\2\u158a\u158b")
        buf.write("\3\2\2\2\u158b\u158c\3\2\2\2\u158c\u158d\5\u03b6\u01dc")
        buf.write("\2\u158d\u1591\7\20\2\2\u158e\u1592\7\u031f\2\2\u158f")
        buf.write("\u1592\5\u03b6\u01dc\2\u1590\u1592\7\u031a\2\2\u1591\u158e")
        buf.write("\3\2\2\2\u1591\u158f\3\2\2\2\u1591\u1590\3\2\2\2\u1592")
        buf.write("\u019d\3\2\2\2\u1593\u1594\7I\2\2\u1594\u1597\7\u0294")
        buf.write("\2\2\u1595\u1598\5\u0380\u01c1\2\u1596\u1598\5\u03b6\u01dc")
        buf.write("\2\u1597\u1595\3\2\2\2\u1597\u1596\3\2\2\2\u1598\u159a")
        buf.write("\3\2\2\2\u1599\u159b\5\u01a0\u00d1\2\u159a\u1599\3\2\2")
        buf.write("\2\u159a\u159b\3\2\2\2\u159b\u159f\3\2\2\2\u159c\u159d")
        buf.write("\7\u00e5\2\2\u159d\u15a0\5\u03b6\u01dc\2\u159e\u15a0\7")
        buf.write("Z\2\2\u159f\u159c\3\2\2\2\u159f\u159e\3\2\2\2\u159f\u15a0")
        buf.write("\3\2\2\2\u15a0\u019f\3\2\2\2\u15a1\u15a8\7\u017c\2\2\u15a2")
        buf.write("\u15a3\7\u02de\2\2\u15a3\u15a4\7\u0323\2\2\u15a4\u15a6")
        buf.write("\t\t\2\2\u15a5\u15a7\7\u0337\2\2\u15a6\u15a5\3\2\2\2\u15a6")
        buf.write("\u15a7\3\2\2\2\u15a7\u15a9\3\2\2\2\u15a8\u15a2\3\2\2\2")
        buf.write("\u15a8\u15a9\3\2\2\2\u15a9\u15b0\3\2\2\2\u15aa\u15ab\7")
        buf.write("\u02b5\2\2\u15ab\u15ac\7\u0323\2\2\u15ac\u15ae\t\t\2\2")
        buf.write("\u15ad\u15af\7\u0337\2\2\u15ae\u15ad\3\2\2\2\u15ae\u15af")
        buf.write("\3\2\2\2\u15af\u15b1\3\2\2\2\u15b0\u15aa\3\2\2\2\u15b0")
        buf.write("\u15b1\3\2\2\2\u15b1\u15df\3\2\2\2\u15b2\u15b3\7\u0184")
        buf.write("\2\2\u15b3\u15d9\7\u0335\2\2\u15b4\u15b5\7\u02de\2\2\u15b5")
        buf.write("\u15b6\7\u0323\2\2\u15b6\u15b8\t\t\2\2\u15b7\u15b9\7\u0337")
        buf.write("\2\2\u15b8\u15b7\3\2\2\2\u15b8\u15b9\3\2\2\2\u15b9\u15bb")
        buf.write("\3\2\2\2\u15ba\u15b4\3\2\2\2\u15ba\u15bb\3\2\2\2\u15bb")
        buf.write("\u15c2\3\2\2\2\u15bc\u15bd\7\u028f\2\2\u15bd\u15be\7\u0323")
        buf.write("\2\2\u15be\u15c0\5\u0386\u01c4\2\u15bf\u15c1\7\u0337\2")
        buf.write("\2\u15c0\u15bf\3\2\2\2\u15c0\u15c1\3\2\2\2\u15c1\u15c3")
        buf.write("\3\2\2\2\u15c2\u15bc\3\2\2\2\u15c2\u15c3\3\2\2\2\u15c3")
        buf.write("\u15ca\3\2\2\2\u15c4\u15c5\7\u0249\2\2\u15c5\u15c6\7\u0323")
        buf.write("\2\2\u15c6\u15c8\7\u031b\2\2\u15c7\u15c9\7\u0337\2\2\u15c8")
        buf.write("\u15c7\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9\u15cb\3\2\2\2")
        buf.write("\u15ca\u15c4\3\2\2\2\u15ca\u15cb\3\2\2\2\u15cb\u15d6\3")
        buf.write("\2\2\2\u15cc\u15cd\7w\2\2\u15cd\u15d1\7\20\2\2\u15ce\u15d2")
        buf.write("\7\u02ca\2\2\u15cf\u15d2\7\u031f\2\2\u15d0\u15d2\7\u027d")
        buf.write("\2\2\u15d1\u15ce\3\2\2\2\u15d1\u15cf\3\2\2\2\u15d1\u15d0")
        buf.write("\3\2\2\2\u15d2\u15d4\3\2\2\2\u15d3\u15d5\7\u0337\2\2\u15d4")
        buf.write("\u15d3\3\2\2\2\u15d4\u15d5\3\2\2\2\u15d5\u15d7\3\2\2\2")
        buf.write("\u15d6\u15cc\3\2\2\2\u15d6\u15d7\3\2\2\2\u15d7\u15da\3")
        buf.write("\2\2\2\u15d8\u15da\7h\2\2\u15d9\u15ba\3\2\2\2\u15d9\u15d8")
        buf.write("\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u15dd\7\u0336\2\2\u15dc")
        buf.write("\u15de\7\u0337\2\2\u15dd\u15dc\3\2\2\2\u15dd\u15de\3\2")
        buf.write("\2\2\u15de\u15e0\3\2\2\2\u15df\u15b2\3\2\2\2\u15df\u15e0")
        buf.write("\3\2\2\2\u15e0\u15e8\3\2\2\2\u15e1\u15e2\7\u0284\2\2\u15e2")
        buf.write("\u15e3\7\u0335\2\2\u15e3\u15e4\7\u02de\2\2\u15e4\u15e5")
        buf.write("\7\u0323\2\2\u15e5\u15e6\t\t\2\2\u15e6\u15e7\3\2\2\2\u15e7")
        buf.write("\u15e9\7\u0336\2\2\u15e8\u15e1\3\2\2\2\u15e8\u15e9\3\2")
        buf.write("\2\2\u15e9\u01a1\3\2\2\2\u15ea\u15eb\7\n\2\2\u15eb\u15ee")
        buf.write("\7\u0294\2\2\u15ec\u15ef\5\u0380\u01c1\2\u15ed\u15ef\5")
        buf.write("\u03b6\u01dc\2\u15ee\u15ec\3\2\2\2\u15ee\u15ed\3\2\2\2")
        buf.write("\u15ef\u15f2\3\2\2\2\u15f0\u15f3\5\u01a0\u00d1\2\u15f1")
        buf.write("\u15f3\5\u01a4\u00d3\2\u15f2\u15f0\3\2\2\2\u15f2\u15f1")
        buf.write("\3\2\2\2\u15f3\u01a3\3\2\2\2\u15f4\u15fa\7\u02a1\2\2\u15f5")
        buf.write("\u15f6\7\u017c\2\2\u15f6\u15f7\7\u0335\2\2\u15f7\u15f8")
        buf.write("\5\u01a6\u00d4\2\u15f8\u15f9\7\u0336\2\2\u15f9\u15fb\3")
        buf.write("\2\2\2\u15fa\u15f5\3\2\2\2\u15fa\u15fb\3\2\2\2\u15fb\u160a")
        buf.write("\3\2\2\2\u15fc\u1601\7\u02aa\2\2\u15fd\u15fe\7\u017c\2")
        buf.write("\2\u15fe\u15ff\7\u0237\2\2\u15ff\u1600\7\u0323\2\2\u1600")
        buf.write("\u1602\t\t\2\2\u1601\u15fd\3\2\2\2\u1601\u1602\3\2\2\2")
        buf.write("\u1602\u160a\3\2\2\2\u1603\u1604\7\u025c\2\2\u1604\u1607")
        buf.write("\7\u015d\2\2\u1605\u1608\5\u03b6\u01dc\2\u1606\u1608\7")
        buf.write("Z\2\2\u1607\u1605\3\2\2\2\u1607\u1606\3\2\2\2\u1608\u160a")
        buf.write("\3\2\2\2\u1609\u15f4\3\2\2\2\u1609\u15fc\3\2\2\2\u1609")
        buf.write("\u1603\3\2\2\2\u160a\u01a5\3\2\2\2\u160b\u160c\7\u024b")
        buf.write("\2\2\u160c\u160d\7\u0323\2\2\u160d\u160e\7\u031b\2\2\u160e")
        buf.write("\u01a7\3\2\2\2\u160f\u1610\7I\2\2\u1610\u1611\7D\2\2\u1611")
        buf.write("\u1614\5\u03a0\u01d1\2\u1612\u1613\7\24\2\2\u1613\u1615")
        buf.write("\5\u03b6\u01dc\2\u1614\u1612\3\2\2\2\u1614\u1615\3\2\2")
        buf.write("\2\u1615\u1616\3\2\2\2\u1616\u1621\7\u0335\2\2\u1617\u161a")
        buf.write("\5\u03b6\u01dc\2\u1618\u161a\7Z\2\2\u1619\u1617\3\2\2")
        buf.write("\2\u1619\u1618\3\2\2\2\u161a\u161b\3\2\2\2\u161b\u161c")
        buf.write("\7\u02cd\2\2\u161c\u161d\7&\2\2\u161d\u161f\t\66\2\2\u161e")
        buf.write("\u1620\7\u0337\2\2\u161f\u161e\3\2\2\2\u161f\u1620\3\2")
        buf.write("\2\2\u1620\u1622\3\2\2\2\u1621\u1619\3\2\2\2\u1622\u1623")
        buf.write("\3\2\2\2\u1623\u1621\3\2\2\2\u1623\u1624\3\2\2\2\u1624")
        buf.write("\u1625\3\2\2\2\u1625\u1626\7\u0336\2\2\u1626\u01a9\3\2")
        buf.write("\2\2\u1627\u162e\5\u039c\u01cf\2\u1628\u162e\5\u039e\u01d0")
        buf.write("\2\u1629\u162e\5\u03a4\u01d3\2\u162a\u162e\5\u03a8\u01d5")
        buf.write("\2\u162b\u162e\5\u03ac\u01d7\2\u162c\u162e\5\u03a6\u01d4")
        buf.write("\2\u162d\u1627\3\2\2\2\u162d\u1628\3\2\2\2\u162d\u1629")
        buf.write("\3\2\2\2\u162d\u162a\3\2\2\2\u162d\u162b\3\2\2\2\u162d")
        buf.write("\u162c\3\2\2\2\u162e\u01ab\3\2\2\2\u162f\u1630\7I\2\2")
        buf.write("\u1630\u1631\7\u0251\2\2\u1631\u1632\7\u02fb\2\2\u1632")
        buf.write("\u1635\5\u03b6\u01dc\2\u1633\u1634\7\24\2\2\u1634\u1636")
        buf.write("\5\u03b6\u01dc\2\u1635\u1633\3\2\2\2\u1635\u1636\3\2\2")
        buf.write("\2\u1636\u1637\3\2\2\2\u1637\u1638\7\u0303\2\2\u1638\u1641")
        buf.write("\7\u0323\2\2\u1639\u1642\7\u00d5\2\2\u163a\u1642\7\u01ea")
        buf.write("\2\2\u163b\u1642\7\u030a\2\2\u163c\u163d\7\u0302\2\2\u163d")
        buf.write("\u163e\7\u017c\2\2\u163e\u163f\7\u012e\2\2\u163f\u1640")
        buf.write("\7\u01b8\2\2\u1640\u1642\5\u03b6\u01dc\2\u1641\u1639\3")
        buf.write("\2\2\2\u1641\u163a\3\2\2\2\u1641\u163b\3\2\2\2\u1641\u163c")
        buf.write("\3\2\2\2\u1642\u01ad\3\2\2\2\u1643\u1645\5\u02da\u016e")
        buf.write("\2\u1644\u1643\3\2\2\2\u1644\u1645\3\2\2\2\u1645\u1646")
        buf.write("\3\2\2\2\u1646\u164e\7\u00c9\2\2\u1647\u1648\7\u015e\2")
        buf.write("\2\u1648\u1649\7\u0335\2\2\u1649\u164a\5\u02cc\u0167\2")
        buf.write("\u164a\u164c\7\u0336\2\2\u164b\u164d\7\u00f5\2\2\u164c")
        buf.write("\u164b\3\2\2\2\u164c\u164d\3\2\2\2\u164d\u164f\3\2\2\2")
        buf.write("\u164e\u1647\3\2\2\2\u164e\u164f\3\2\2\2\u164f\u1651\3")
        buf.write("\2\2\2\u1650\u1652\7\u00a5\2\2\u1651\u1650\3\2\2\2\u1651")
        buf.write("\u1652\3\2\2\2\u1652\u1653\3\2\2\2\u1653\u1655\5\u0388")
        buf.write("\u01c5\2\u1654\u1656\5\u034e\u01a8\2\u1655\u1654\3\2\2")
        buf.write("\2\u1655\u1656\3\2\2\2\u1656\u1658\3\2\2\2\u1657\u1659")
        buf.write("\5\u0348\u01a5\2\u1658\u1657\3\2\2\2\u1658\u1659\3\2\2")
        buf.write("\2\u1659\u165a\3\2\2\2\u165a\u165b\7\u0301\2\2\u165b\u165c")
        buf.write("\5\u0314\u018b\2\u165c\u165d\7\u00e5\2\2\u165d\u1668\5")
        buf.write("\u02e2\u0172\2\u165e\u165f\7\u0178\2\2\u165f\u1662\7\u00bc")
        buf.write("\2\2\u1660\u1661\7\13\2\2\u1661\u1663\5\u02e2\u0172\2")
        buf.write("\u1662\u1660\3\2\2\2\u1662\u1663\3\2\2\2\u1663\u1664\3")
        buf.write("\2\2\2\u1664\u1665\7\u015c\2\2\u1665\u1667\5\u01b0\u00d9")
        buf.write("\2\u1666\u165e\3\2\2\2\u1667\u166a\3\2\2\2\u1668\u1666")
        buf.write("\3\2\2\2\u1668\u1669\3\2\2\2\u1669\u1678\3\2\2\2\u166a")
        buf.write("\u1668\3\2\2\2\u166b\u166c\7\u0178\2\2\u166c\u166d\7\u00dc")
        buf.write("\2\2\u166d\u1670\7\u00bc\2\2\u166e\u166f\7&\2\2\u166f")
        buf.write("\u1671\7\u0159\2\2\u1670\u166e\3\2\2\2\u1670\u1671\3\2")
        buf.write("\2\2\u1671\u1674\3\2\2\2\u1672\u1673\7\13\2\2\u1673\u1675")
        buf.write("\5\u02e2\u0172\2\u1674\u1672\3\2\2\2\u1674\u1675\3\2\2")
        buf.write("\2\u1675\u1676\3\2\2\2\u1676\u1677\7\u015c\2\2\u1677\u1679")
        buf.write("\5\u01b2\u00da\2\u1678\u166b\3\2\2\2\u1678\u1679\3\2\2")
        buf.write("\2\u1679\u1687\3\2\2\2\u167a\u167b\7\u0178\2\2\u167b\u167c")
        buf.write("\7\u00dc\2\2\u167c\u167d\7\u00bc\2\2\u167d\u167e\7&\2")
        buf.write("\2\u167e\u1681\7\u0144\2\2\u167f\u1680\7\13\2\2\u1680")
        buf.write("\u1682\5\u02e2\u0172\2\u1681\u167f\3\2\2\2\u1681\u1682")
        buf.write("\3\2\2\2\u1682\u1683\3\2\2\2\u1683\u1684\7\u015c\2\2\u1684")
        buf.write("\u1686\5\u01b0\u00d9\2\u1685\u167a\3\2\2\2\u1686\u1689")
        buf.write("\3\2\2\2\u1687\u1685\3\2\2\2\u1687\u1688\3\2\2\2\u1688")
        buf.write("\u168b\3\2\2\2\u1689\u1687\3\2\2\2\u168a\u168c\5\u01c4")
        buf.write("\u00e3\2\u168b\u168a\3\2\2\2\u168b\u168c\3\2\2\2\u168c")
        buf.write("\u168e\3\2\2\2\u168d\u168f\5\u0300\u0181\2\u168e\u168d")
        buf.write("\3\2\2\2\u168e\u168f\3\2\2\2\u168f\u1690\3\2\2\2\u1690")
        buf.write("\u1691\7\u0338\2\2\u1691\u01af\3\2\2\2\u1692\u1693\7\u016c")
        buf.write("\2\2\u1693\u1694\7\u013d\2\2\u1694\u1699\5\u02de\u0170")
        buf.write("\2\u1695\u1696\7\u0337\2\2\u1696\u1698\5\u02de\u0170\2")
        buf.write("\u1697\u1695\3\2\2\2\u1698\u169b\3\2\2\2\u1699\u1697\3")
        buf.write("\2\2\2\u1699\u169a\3\2\2\2\u169a\u169e\3\2\2\2\u169b\u1699")
        buf.write("\3\2\2\2\u169c\u169e\7]\2\2\u169d\u1692\3\2\2\2\u169d")
        buf.write("\u169c\3\2\2\2\u169e\u01b1\3\2\2\2\u169f\u16a4\7\u00a2")
        buf.write("\2\2\u16a0\u16a1\7\u0335\2\2\u16a1\u16a2\5\u038e\u01c8")
        buf.write("\2\u16a2\u16a3\7\u0336\2\2\u16a3\u16a5\3\2\2\2\u16a4\u16a0")
        buf.write("\3\2\2\2\u16a4\u16a5\3\2\2\2\u16a5\u16a9\3\2\2\2\u16a6")
        buf.write("\u16aa\5\u0358\u01ad\2\u16a7\u16a8\7Z\2\2\u16a8\u16aa")
        buf.write("\7\u0172\2\2\u16a9\u16a6\3\2\2\2\u16a9\u16a7\3\2\2\2\u16aa")
        buf.write("\u01b3\3\2\2\2\u16ab\u16ad\5\u02da\u016e\2\u16ac\u16ab")
        buf.write("\3\2\2\2\u16ac\u16ad\3\2\2\2\u16ad\u16ae\3\2\2\2\u16ae")
        buf.write("\u16b8\7]\2\2\u16af\u16b0\7\u015e\2\2\u16b0\u16b1\7\u0335")
        buf.write("\2\2\u16b1\u16b2\5\u02cc\u0167\2\u16b2\u16b4\7\u0336\2")
        buf.write("\2\u16b3\u16b5\7\u00f5\2\2\u16b4\u16b3\3\2\2\2\u16b4\u16b5")
        buf.write("\3\2\2\2\u16b5\u16b9\3\2\2\2\u16b6\u16b7\7\u015e\2\2\u16b7")
        buf.write("\u16b9\7\u031b\2\2\u16b8\u16af\3\2\2\2\u16b8\u16b6\3\2")
        buf.write("\2\2\u16b8\u16b9\3\2\2\2\u16b9\u16bb\3\2\2\2\u16ba\u16bc")
        buf.write("\7\u008c\2\2\u16bb\u16ba\3\2\2\2\u16bb\u16bc\3\2\2\2\u16bc")
        buf.write("\u16bd\3\2\2\2\u16bd\u16bf\5\u01b6\u00dc\2\u16be\u16c0")
        buf.write("\5\u034e\u01a8\2\u16bf\u16be\3\2\2\2\u16bf\u16c0\3\2\2")
        buf.write("\2\u16c0\u16c2\3\2\2\2\u16c1\u16c3\5\u01c4\u00e3\2\u16c2")
        buf.write("\u16c1\3\2\2\2\u16c2\u16c3\3\2\2\2\u16c3\u16c6\3\2\2\2")
        buf.write("\u16c4\u16c5\7\u008c\2\2\u16c5\u16c7\5\u0314\u018b\2\u16c6")
        buf.write("\u16c4\3\2\2\2\u16c6\u16c7\3\2\2\2\u16c7\u16d5\3\2\2\2")
        buf.write("\u16c8\u16d3\7\u0179\2\2\u16c9\u16d4\5\u02e2\u0172\2\u16ca")
        buf.write("\u16cb\7K\2\2\u16cb\u16d1\7\u00e1\2\2\u16cc\u16ce\7\u020f")
        buf.write("\2\2\u16cd\u16cc\3\2\2\2\u16cd\u16ce\3\2\2\2\u16ce\u16cf")
        buf.write("\3\2\2\2\u16cf\u16d2\5\u0390\u01c9\2\u16d0\u16d2\7\u031a")
        buf.write("\2\2\u16d1\u16cd\3\2\2\2\u16d1\u16d0\3\2\2\2\u16d2\u16d4")
        buf.write("\3\2\2\2\u16d3\u16c9\3\2\2\2\u16d3\u16ca\3\2\2\2\u16d4")
        buf.write("\u16d6\3\2\2\2\u16d5\u16c8\3\2\2\2\u16d5\u16d6\3\2\2\2")
        buf.write("\u16d6\u16d8\3\2\2\2\u16d7\u16d9\5\u02f8\u017d\2\u16d8")
        buf.write("\u16d7\3\2\2\2\u16d8\u16d9\3\2\2\2\u16d9\u16db\3\2\2\2")
        buf.write("\u16da\u16dc\5\u0300\u0181\2\u16db\u16da\3\2\2\2\u16db")
        buf.write("\u16dc\3\2\2\2\u16dc\u16de\3\2\2\2\u16dd\u16df\7\u0338")
        buf.write("\2\2\u16de\u16dd\3\2\2\2\u16de\u16df\3\2\2\2\u16df\u01b5")
        buf.write("\3\2\2\2\u16e0\u16e5\5\u0388\u01c5\2\u16e1\u16e5\5\u034a")
        buf.write("\u01a6\2\u16e2\u16e5\5\u025c\u012f\2\u16e3\u16e5\7\u031a")
        buf.write("\2\2\u16e4\u16e0\3\2\2\2\u16e4\u16e1\3\2\2\2\u16e4\u16e2")
        buf.write("\3\2\2\2\u16e4\u16e3\3\2\2\2\u16e5\u01b7\3\2\2\2\u16e6")
        buf.write("\u16e8\5\u02da\u016e\2\u16e7\u16e6\3\2\2\2\u16e7\u16e8")
        buf.write("\3\2\2\2\u16e8\u16e9\3\2\2\2\u16e9\u16f1\7\u00a2\2\2\u16ea")
        buf.write("\u16eb\7\u015e\2\2\u16eb\u16ec\7\u0335\2\2\u16ec\u16ed")
        buf.write("\5\u02cc\u0167\2\u16ed\u16ef\7\u0336\2\2\u16ee\u16f0\7")
        buf.write("\u00f5\2\2\u16ef\u16ee\3\2\2\2\u16ef\u16f0\3\2\2\2\u16f0")
        buf.write("\u16f2\3\2\2\2\u16f1\u16ea\3\2\2\2\u16f1\u16f2\3\2\2\2")
        buf.write("\u16f2\u16f4\3\2\2\2\u16f3\u16f5\7\u00a5\2\2\u16f4\u16f3")
        buf.write("\3\2\2\2\u16f4\u16f5\3\2\2\2\u16f5\u16f8\3\2\2\2\u16f6")
        buf.write("\u16f9\5\u0388\u01c5\2\u16f7\u16f9\5\u025c\u012f\2\u16f8")
        buf.write("\u16f6\3\2\2\2\u16f8\u16f7\3\2\2\2\u16f9\u16fb\3\2\2\2")
        buf.write("\u16fa\u16fc\5\u034e\u01a8\2\u16fb\u16fa\3\2\2\2\u16fb")
        buf.write("\u16fc\3\2\2\2\u16fc\u1701\3\2\2\2\u16fd\u16fe\7\u0335")
        buf.write("\2\2\u16fe\u16ff\5\u038e\u01c8\2\u16ff\u1700\7\u0336\2")
        buf.write("\2\u1700\u1702\3\2\2\2\u1701\u16fd\3\2\2\2\u1701\u1702")
        buf.write("\3\2\2\2\u1702\u1704\3\2\2\2\u1703\u1705\5\u01c4\u00e3")
        buf.write("\2\u1704\u1703\3\2\2\2\u1704\u1705\3\2\2\2\u1705\u1706")
        buf.write("\3\2\2\2\u1706\u1708\5\u01ba\u00de\2\u1707\u1709\5\u02f8")
        buf.write("\u017d\2\u1708\u1707\3\2\2\2\u1708\u1709\3\2\2\2\u1709")
        buf.write("\u170b\3\2\2\2\u170a\u170c\5\u0300\u0181\2\u170b\u170a")
        buf.write("\3\2\2\2\u170b\u170c\3\2\2\2\u170c\u170e\3\2\2\2\u170d")
        buf.write("\u170f\7\u0338\2\2\u170e\u170d\3\2\2\2\u170e\u170f\3\2")
        buf.write("\2\2\u170f\u01b9\3\2\2\2\u1710\u1716\5\u0358\u01ad\2\u1711")
        buf.write("\u1716\5\u0332\u019a\2\u1712\u1716\5\u0270\u0139\2\u1713")
        buf.write("\u1714\7Z\2\2\u1714\u1716\7\u0172\2\2\u1715\u1710\3\2")
        buf.write("\2\2\u1715\u1711\3\2\2\2\u1715\u1712\3\2\2\2\u1715\u1713")
        buf.write("\3\2\2\2\u1716\u01bb\3\2\2\2\u1717\u1719\7\u0335\2\2\u1718")
        buf.write("\u1717\3\2\2\2\u1718\u1719\3\2\2\2\u1719\u171a\3\2\2\2")
        buf.write("\u171a\u171f\7\u02a2\2\2\u171b\u1720\7\6\2\2\u171c\u1720")
        buf.write("\7c\2\2\u171d\u1720\5\u02f0\u0179\2\u171e\u1720\7\u033a")
        buf.write("\2\2\u171f\u171b\3\2\2\2\u171f\u171c\3\2\2\2\u171f\u171d")
        buf.write("\3\2\2\2\u171f\u171e\3\2\2\2\u1720\u1729\3\2\2\2\u1721")
        buf.write("\u1722\7\u031a\2\2\u1722\u1723\7\u0323\2\2\u1723\u1725")
        buf.write("\5\u02cc\u0167\2\u1724\u1726\7\u0337\2\2\u1725\u1724\3")
        buf.write("\2\2\2\u1725\u1726\3\2\2\2\u1726\u1728\3\2\2\2\u1727\u1721")
        buf.write("\3\2\2\2\u1728\u172b\3\2\2\2\u1729\u1727\3\2\2\2\u1729")
        buf.write("\u172a\3\2\2\2\u172a\u172c\3\2\2\2\u172b\u1729\3\2\2\2")
        buf.write("\u172c\u172d\7\u008c\2\2\u172d\u1733\5\u0380\u01c1\2\u172e")
        buf.write("\u172f\7\u00a5\2\2\u172f\u1730\5\u03b6\u01dc\2\u1730\u1731")
        buf.write("\7\u0179\2\2\u1731\u1732\5\u02e2\u0172\2\u1732\u1734\3")
        buf.write("\2\2\2\u1733\u172e\3\2\2\2\u1733\u1734\3\2\2\2\u1734\u1736")
        buf.write("\3\2\2\2\u1735\u1737\7\u0336\2\2\u1736\u1735\3\2\2\2\u1736")
        buf.write("\u1737\3\2\2\2\u1737\u01bd\3\2\2\2\u1738\u173a\5\u02da")
        buf.write("\u016e\2\u1739\u1738\3\2\2\2\u1739\u173a\3\2\2\2\u173a")
        buf.write("\u173b\3\2\2\2\u173b\u173d\5\u02ea\u0176\2\u173c\u173e")
        buf.write("\5\u02f6\u017c\2\u173d\u173c\3\2\2\2\u173d\u173e\3\2\2")
        buf.write("\2\u173e\u1740\3\2\2\2\u173f\u1741\5\u02f8\u017d\2\u1740")
        buf.write("\u173f\3\2\2\2\u1740\u1741\3\2\2\2\u1741\u1743\3\2\2\2")
        buf.write("\u1742\u1744\5\u0300\u0181\2\u1743\u1742\3\2\2\2\u1743")
        buf.write("\u1744\3\2\2\2\u1744\u1746\3\2\2\2\u1745\u1747\7\u0338")
        buf.write("\2\2\u1746\u1745\3\2\2\2\u1746\u1747\3\2\2\2\u1747\u01bf")
        buf.write("\3\2\2\2\u1748\u174b\7\u031a\2\2\u1749\u174b\5\u03b2\u01da")
        buf.write("\2\u174a\u1748\3\2\2\2\u174a\u1749\3\2\2\2\u174b\u01c1")
        buf.write("\3\2\2\2\u174c\u174e\5\u02da\u016e\2\u174d\u174c\3\2\2")
        buf.write("\2\u174d\u174e\3\2\2\2\u174e\u174f\3\2\2\2\u174f\u1757")
        buf.write("\7\u016c\2\2\u1750\u1751\7\u015e\2\2\u1751\u1752\7\u0335")
        buf.write("\2\2\u1752\u1753\5\u02cc\u0167\2\u1753\u1755\7\u0336\2")
        buf.write("\2\u1754\u1756\7\u00f5\2\2\u1755\u1754\3\2\2\2\u1755\u1756")
        buf.write("\3\2\2\2\u1756\u1758\3\2\2\2\u1757\u1750\3\2\2\2\u1757")
        buf.write("\u1758\3\2\2\2\u1758\u175b\3\2\2\2\u1759\u175c\5\u0388")
        buf.write("\u01c5\2\u175a\u175c\5\u025c\u012f\2\u175b\u1759\3\2\2")
        buf.write("\2\u175b\u175a\3\2\2\2\u175c\u175e\3\2\2\2\u175d\u175f")
        buf.write("\5\u034c\u01a7\2\u175e\u175d\3\2\2\2\u175e\u175f\3\2\2")
        buf.write("\2\u175f\u1760\3\2\2\2\u1760\u1761\7\u013d\2\2\u1761\u1766")
        buf.write("\5\u02de\u0170\2\u1762\u1763\7\u0337\2\2\u1763\u1765\5")
        buf.write("\u02de\u0170\2\u1764\u1762\3\2\2\2\u1765\u1768\3\2\2\2")
        buf.write("\u1766\u1764\3\2\2\2\u1766\u1767\3\2\2\2\u1767\u176a\3")
        buf.write("\2\2\2\u1768\u1766\3\2\2\2\u1769\u176b\5\u01c4\u00e3\2")
        buf.write("\u176a\u1769\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u176e\3")
        buf.write("\2\2\2\u176c\u176d\7\u008c\2\2\u176d\u176f\5\u0314\u018b")
        buf.write("\2\u176e\u176c\3\2\2\2\u176e\u176f\3\2\2\2\u176f\u177d")
        buf.write("\3\2\2\2\u1770\u177b\7\u0179\2\2\u1771\u177c\5\u02e0\u0171")
        buf.write("\2\u1772\u1773\7K\2\2\u1773\u1779\7\u00e1\2\2\u1774\u1776")
        buf.write("\7\u020f\2\2\u1775\u1774\3\2\2\2\u1775\u1776\3\2\2\2\u1776")
        buf.write("\u1777\3\2\2\2\u1777\u177a\5\u0390\u01c9\2\u1778\u177a")
        buf.write("\7\u031a\2\2\u1779\u1775\3\2\2\2\u1779\u1778\3\2\2\2\u177a")
        buf.write("\u177c\3\2\2\2\u177b\u1771\3\2\2\2\u177b\u1772\3\2\2\2")
        buf.write("\u177c\u177e\3\2\2\2\u177d\u1770\3\2\2\2\u177d\u177e\3")
        buf.write("\2\2\2\u177e\u1780\3\2\2\2\u177f\u1781\5\u02f8\u017d\2")
        buf.write("\u1780\u177f\3\2\2\2\u1780\u1781\3\2\2\2\u1781\u1783\3")
        buf.write("\2\2\2\u1782\u1784\5\u0300\u0181\2\u1783\u1782\3\2\2\2")
        buf.write("\u1783\u1784\3\2\2\2\u1784\u1786\3\2\2\2\u1785\u1787\7")
        buf.write("\u0338\2\2\u1786\u1785\3\2\2\2\u1786\u1787\3\2\2\2\u1787")
        buf.write("\u01c3\3\2\2\2\u1788\u1789\7\u027c\2\2\u1789\u178e\5\u01c6")
        buf.write("\u00e4\2\u178a\u178b\7\u0337\2\2\u178b\u178d\5\u01c6\u00e4")
        buf.write("\2\u178c\u178a\3\2\2\2\u178d\u1790\3\2\2\2\u178e\u178c")
        buf.write("\3\2\2\2\u178e\u178f\3\2\2\2\u178f\u179c\3\2\2\2\u1790")
        buf.write("\u178e\3\2\2\2\u1791\u1794\7\u00a5\2\2\u1792\u1795\7\u031a")
        buf.write("\2\2\u1793\u1795\5\u0382\u01c2\2\u1794\u1792\3\2\2\2\u1794")
        buf.write("\u1793\3\2\2\2\u1795\u179a\3\2\2\2\u1796\u1797\7\u0335")
        buf.write("\2\2\u1797\u1798\5\u038e\u01c8\2\u1798\u1799\7\u0336\2")
        buf.write("\2\u1799\u179b\3\2\2\2\u179a\u1796\3\2\2\2\u179a\u179b")
        buf.write("\3\2\2\2\u179b\u179d\3\2\2\2\u179c\u1791\3\2\2\2\u179c")
        buf.write("\u179d\3\2\2\2\u179d\u01c5\3\2\2\2\u179e\u17a1\5\u01c8")
        buf.write("\u00e5\2\u179f\u17a1\5\u02cc\u0167\2\u17a0\u179e\3\2\2")
        buf.write("\2\u17a0\u179f\3\2\2\2\u17a1\u17a3\3\2\2\2\u17a2\u17a4")
        buf.write("\5\u0346\u01a4\2\u17a3\u17a2\3\2\2\2\u17a3\u17a4\3\2\2")
        buf.write("\2\u17a4\u01c7\3\2\2\2\u17a5\u17a9\7\u01d9\2\2\u17a6\u17a9")
        buf.write("\7\u0224\2\2\u17a7\u17a9\5\u0382\u01c2\2\u17a8\u17a5\3")
        buf.write("\2\2\2\u17a8\u17a6\3\2\2\2\u17a8\u17a7\3\2\2\2\u17a9\u17aa")
        buf.write("\3\2\2\2\u17aa\u17ad\7\u0330\2\2\u17ab\u17ae\7\u033a\2")
        buf.write("\2\u17ac\u17ae\5\u03b6\u01dc\2\u17ad\u17ab\3\2\2\2\u17ad")
        buf.write("\u17ac\3\2\2\2\u17ae\u17b1\3\2\2\2\u17af\u17b1\7\u0313")
        buf.write("\2\2\u17b0\u17a8\3\2\2\2\u17b0\u17af\3\2\2\2\u17b1\u01c9")
        buf.write("\3\2\2\2\u17b2\u17b3\7I\2\2\u17b3\u17b4\7U\2\2\u17b4\u17b8")
        buf.write("\5\u03b6\u01dc\2\u17b5\u17b6\7>\2\2\u17b6\u17b7\7\u0323")
        buf.write("\2\2\u17b7\u17b9\t\67\2\2\u17b8\u17b5\3\2\2\2\u17b8\u17b9")
        buf.write("\3\2\2\2\u17b9\u17c6\3\2\2\2\u17ba\u17bc\7\u00e5\2\2\u17bb")
        buf.write("\u17bd\7\u0100\2\2\u17bc\u17bb\3\2\2\2\u17bc\u17bd\3\2")
        buf.write("\2\2\u17bd\u17be\3\2\2\2\u17be\u17c3\5\u0374\u01bb\2\u17bf")
        buf.write("\u17c0\7\u0337\2\2\u17c0\u17c2\5\u0374\u01bb\2\u17c1\u17bf")
        buf.write("\3\2\2\2\u17c2\u17c5\3\2\2\2\u17c3\u17c1\3\2\2\2\u17c3")
        buf.write("\u17c4\3\2\2\2\u17c4\u17c7\3\2\2\2\u17c5\u17c3\3\2\2\2")
        buf.write("\u17c6\u17ba\3\2\2\2\u17c6\u17c7\3\2\2\2\u17c7\u17d2\3")
        buf.write("\2\2\2\u17c8\u17c9\7\u00bb\2\2\u17c9\u17ca\7\u00e5\2\2")
        buf.write("\u17ca\u17cf\5\u0374\u01bb\2\u17cb\u17cc\7\u0337\2\2\u17cc")
        buf.write("\u17ce\5\u0374\u01bb\2\u17cd\u17cb\3\2\2\2\u17ce\u17d1")
        buf.write("\3\2\2\2\u17cf\u17cd\3\2\2\2\u17cf\u17d0\3\2\2\2\u17d0")
        buf.write("\u17d3\3\2\2\2\u17d1\u17cf\3\2\2\2\u17d2\u17c8\3\2\2\2")
        buf.write("\u17d2\u17d3\3\2\2\2\u17d3\u17d6\3\2\2\2\u17d4\u17d5\7")
        buf.write("\67\2\2\u17d5\u17d7\5\u03b6\u01dc\2\u17d6\u17d4\3\2\2")
        buf.write("\2\u17d6\u17d7\3\2\2\2\u17d7\u17e1\3\2\2\2\u17d8\u17d9")
        buf.write("\7\u017c\2\2\u17d9\u17de\5\u0370\u01b9\2\u17da\u17db\7")
        buf.write("\u0337\2\2\u17db\u17dd\5\u0370\u01b9\2\u17dc\u17da\3\2")
        buf.write("\2\2\u17dd\u17e0\3\2\2\2\u17de\u17dc\3\2\2\2\u17de\u17df")
        buf.write("\3\2\2\2\u17df\u17e2\3\2\2\2\u17e0\u17de\3\2\2\2\u17e1")
        buf.write("\u17d8\3\2\2\2\u17e1\u17e2\3\2\2\2\u17e2\u01cb\3\2\2\2")
        buf.write("\u17e3\u17e5\7I\2\2\u17e4\u17e6\7\u0168\2\2\u17e5\u17e4")
        buf.write("\3\2\2\2\u17e5\u17e6\3\2\2\2\u17e6\u17e8\3\2\2\2\u17e7")
        buf.write("\u17e9\5\u0394\u01cb\2\u17e8\u17e7\3\2\2\2\u17e8\u17e9")
        buf.write("\3\2\2\2\u17e9\u17ea\3\2\2\2\u17ea\u17eb\7\u009e\2\2\u17eb")
        buf.write("\u17ec\5\u03b6\u01dc\2\u17ec\u17ed\7\u00e5\2\2\u17ed\u17ee")
        buf.write("\5\u032c\u0197\2\u17ee\u17ef\7\u0335\2\2\u17ef\u17f0\5")
        buf.write("\u038c\u01c7\2\u17f0\u17f6\7\u0336\2\2\u17f1\u17f2\7\u009c")
        buf.write("\2\2\u17f2\u17f3\7\u0335\2\2\u17f3\u17f4\5\u038e\u01c8")
        buf.write("\2\u17f4\u17f5\7\u0336\2\2\u17f5\u17f7\3\2\2\2\u17f6\u17f1")
        buf.write("\3\2\2\2\u17f6\u17f7\3\2\2\2\u17f7\u17fa\3\2\2\2\u17f8")
        buf.write("\u17f9\7\u0179\2\2\u17f9\u17fb\5\u02e2\u0172\2\u17fa\u17f8")
        buf.write("\3\2\2\2\u17fa\u17fb\3\2\2\2\u17fb\u17fd\3\2\2\2\u17fc")
        buf.write("\u17fe\5\u02bc\u015f\2\u17fd\u17fc\3\2\2\2\u17fd\u17fe")
        buf.write("\3\2\2\2\u17fe\u1801\3\2\2\2\u17ff\u1800\7\u00e5\2\2\u1800")
        buf.write("\u1802\5\u03b6\u01dc\2\u1801\u17ff\3\2\2\2\u1801\u1802")
        buf.write("\3\2\2\2\u1802\u1804\3\2\2\2\u1803\u1805\7\u0338\2\2\u1804")
        buf.write("\u1803\3\2\2\2\u1804\u1805\3\2\2\2\u1805\u01cd\3\2\2\2")
        buf.write("\u1806\u1809\7I\2\2\u1807\u1808\7\u00ed\2\2\u1808\u180a")
        buf.write("\7\n\2\2\u1809\u1807\3\2\2\2\u1809\u180a\3\2\2\2\u180a")
        buf.write("\u180d\3\2\2\2\u180b\u180d\7\n\2\2\u180c\u1806\3\2\2\2")
        buf.write("\u180c\u180b\3\2\2\2\u180d\u180e\3\2\2\2\u180e\u180f\t")
        buf.write("8\2\2\u180f\u1812\5\u0386\u01c4\2\u1810\u1811\7\u0338")
        buf.write("\2\2\u1811\u1813\7\u031b\2\2\u1812\u1810\3\2\2\2\u1812")
        buf.write("\u1813\3\2\2\2\u1813\u1822\3\2\2\2\u1814\u1816\7\u0335")
        buf.write("\2\2\u1815\u1814\3\2\2\2\u1815\u1816\3\2\2\2\u1816\u1817")
        buf.write("\3\2\2\2\u1817\u181c\5\u01e4\u00f3\2\u1818\u1819\7\u0337")
        buf.write("\2\2\u1819\u181b\5\u01e4\u00f3\2\u181a\u1818\3\2\2\2\u181b")
        buf.write("\u181e\3\2\2\2\u181c\u181a\3\2\2\2\u181c\u181d\3\2\2\2")
        buf.write("\u181d\u1820\3\2\2\2\u181e\u181c\3\2\2\2\u181f\u1821\7")
        buf.write("\u0336\2\2\u1820\u181f\3\2\2\2\u1820\u1821\3\2\2\2\u1821")
        buf.write("\u1823\3\2\2\2\u1822\u1815\3\2\2\2\u1822\u1823\3\2\2\2")
        buf.write("\u1823\u182d\3\2\2\2\u1824\u1825\7\u017c\2\2\u1825\u182a")
        buf.write("\5\u01e6\u00f4\2\u1826\u1827\7\u0337\2\2\u1827\u1829\5")
        buf.write("\u01e6\u00f4\2\u1828\u1826\3\2\2\2\u1829\u182c\3\2\2\2")
        buf.write("\u182a\u1828\3\2\2\2\u182a\u182b\3\2\2\2\u182b\u182e\3")
        buf.write("\2\2\2\u182c\u182a\3\2\2\2\u182d\u1824\3\2\2\2\u182d\u182e")
        buf.write("\3\2\2\2\u182e\u1831\3\2\2\2\u182f\u1830\7\u0086\2\2\u1830")
        buf.write("\u1832\7\u0112\2\2\u1831\u182f\3\2\2\2\u1831\u1832\3\2")
        buf.write("\2\2\u1832\u1833\3\2\2\2\u1833\u1834\7\20\2\2\u1834\u1835")
        buf.write("\5\6\4\2\u1835\u01cf\3\2\2\2\u1836\u1839\5\u01d2\u00ea")
        buf.write("\2\u1837\u1839\5\u01d8\u00ed\2\u1838\u1836\3\2\2\2\u1838")
        buf.write("\u1837\3\2\2\2\u1839\u01d1\3\2\2\2\u183a\u183d\7I\2\2")
        buf.write("\u183b\u183c\7\u00ed\2\2\u183c\u183e\7\n\2\2\u183d\u183b")
        buf.write("\3\2\2\2\u183d\u183e\3\2\2\2\u183e\u1841\3\2\2\2\u183f")
        buf.write("\u1841\7\n\2\2\u1840\u183a\3\2\2\2\u1840\u183f\3\2\2\2")
        buf.write("\u1841\u1842\3\2\2\2\u1842\u1843\7\u0163\2\2\u1843\u1844")
        buf.write("\5\u0384\u01c3\2\u1844\u1845\7\u00e5\2\2\u1845\u184f\5")
        buf.write("\u0382\u01c2\2\u1846\u1847\7\u017c\2\2\u1847\u184c\5\u01d4")
        buf.write("\u00eb\2\u1848\u1849\7\u0337\2\2\u1849\u184b\5\u01d4\u00eb")
        buf.write("\2\u184a\u1848\3\2\2\2\u184b\u184e\3\2\2\2\u184c\u184a")
        buf.write("\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u1850\3\2\2\2\u184e")
        buf.write("\u184c\3\2\2\2\u184f\u1846\3\2\2\2\u184f\u1850\3\2\2\2")
        buf.write("\u1850\u1855\3\2\2\2\u1851\u1856\7\u0086\2\2\u1852\u1856")
        buf.write("\7\u018b\2\2\u1853\u1854\7\u00a3\2\2\u1854\u1856\7\u00e1")
        buf.write("\2\2\u1855\u1851\3\2\2\2\u1855\u1852\3\2\2\2\u1855\u1853")
        buf.write("\3\2\2\2\u1856\u1857\3\2\2\2\u1857\u185c\5\u01d6\u00ec")
        buf.write("\2\u1858\u1859\7\u0337\2\2\u1859\u185b\5\u01d6\u00ec\2")
        buf.write("\u185a\u1858\3\2\2\2\u185b\u185e\3\2\2\2\u185c\u185a\3")
        buf.write("\2\2\2\u185c\u185d\3\2\2\2\u185d\u1861\3\2\2\2\u185e\u185c")
        buf.write("\3\2\2\2\u185f\u1860\7\u017c\2\2\u1860\u1862\7\16\2\2")
        buf.write("\u1861\u185f\3\2\2\2\u1861\u1862\3\2\2\2\u1862\u1866\3")
        buf.write("\2\2\2\u1863\u1864\7\u00dc\2\2\u1864\u1865\7\u0086\2\2")
        buf.write("\u1865\u1867\7\u0112\2\2\u1866\u1863\3\2\2\2\u1866\u1867")
        buf.write("\3\2\2\2\u1867\u1868\3\2\2\2\u1868\u1869\7\20\2\2\u1869")
        buf.write("\u186a\5\6\4\2\u186a\u01d3\3\2\2\2\u186b\u186e\7\u01ee")
        buf.write("\2\2\u186c\u186e\5\u02a2\u0152\2\u186d\u186b\3\2\2\2\u186d")
        buf.write("\u186c\3\2\2\2\u186e\u01d5\3\2\2\2\u186f\u1870\t9\2\2")
        buf.write("\u1870\u01d7\3\2\2\2\u1871\u1874\7I\2\2\u1872\u1873\7")
        buf.write("\u00ed\2\2\u1873\u1875\7\n\2\2\u1874\u1872\3\2\2\2\u1874")
        buf.write("\u1875\3\2\2\2\u1875\u1878\3\2\2\2\u1876\u1878\7\n\2\2")
        buf.write("\u1877\u1871\3\2\2\2\u1877\u1876\3\2\2\2\u1878\u1879\3")
        buf.write("\2\2\2\u1879\u187a\7\u0163\2\2\u187a\u187b\5\u0384\u01c3")
        buf.write("\2\u187b\u187f\7\u00e5\2\2\u187c\u187d\7\6\2\2\u187d\u1880")
        buf.write("\7\u0137\2\2\u187e\u1880\7U\2\2\u187f\u187c\3\2\2\2\u187f")
        buf.write("\u187e\3\2\2\2\u1880\u188a\3\2\2\2\u1881\u1882\7\u017c")
        buf.write("\2\2\u1882\u1887\5\u01d4\u00eb\2\u1883\u1884\7\u0337\2")
        buf.write("\2\u1884\u1886\5\u01d4\u00eb\2\u1885\u1883\3\2\2\2\u1886")
        buf.write("\u1889\3\2\2\2\u1887\u1885\3\2\2\2\u1887\u1888\3\2\2\2")
        buf.write("\u1888\u188b\3\2\2\2\u1889\u1887\3\2\2\2\u188a\u1881\3")
        buf.write("\2\2\2\u188a\u188b\3\2\2\2\u188b\u188c\3\2\2\2\u188c\u188d")
        buf.write("\t:\2\2\u188d\u1892\5\u01da\u00ee\2\u188e\u188f\7\u0337")
        buf.write("\2\2\u188f\u1891\5\u01d6\u00ec\2\u1890\u188e\3\2\2\2\u1891")
        buf.write("\u1894\3\2\2\2\u1892\u1890\3\2\2\2\u1892\u1893\3\2\2\2")
        buf.write("\u1893\u1895\3\2\2\2\u1894\u1892\3\2\2\2\u1895\u1896\7")
        buf.write("\20\2\2\u1896\u1897\5\6\4\2\u1897\u01d9\3\2\2\2\u1898")
        buf.write("\u1899\5\u03b8\u01dd\2\u1899\u01db\3\2\2\2\u189a\u189d")
        buf.write("\7I\2\2\u189b\u189c\7\u00ed\2\2\u189c\u189e\7\n\2\2\u189d")
        buf.write("\u189b\3\2\2\2\u189d\u189e\3\2\2\2\u189e\u18a1\3\2\2\2")
        buf.write("\u189f\u18a1\7\n\2\2\u18a0\u189a\3\2\2\2\u18a0\u189f\3")
        buf.write("\2\2\2\u18a1\u18a2\3\2\2\2\u18a2\u18a3\7\u008e\2\2\u18a3")
        buf.write("\u18b1\5\u0386\u01c4\2\u18a4\u18a5\7\u0335\2\2\u18a5\u18aa")
        buf.write("\5\u01e4\u00f3\2\u18a6\u18a7\7\u0337\2\2\u18a7\u18a9\5")
        buf.write("\u01e4\u00f3\2\u18a8\u18a6\3\2\2\2\u18a9\u18ac\3\2\2\2")
        buf.write("\u18aa\u18a8\3\2\2\2\u18aa\u18ab\3\2\2\2\u18ab\u18ad\3")
        buf.write("\2\2\2\u18ac\u18aa\3\2\2\2\u18ad\u18ae\7\u0336\2\2\u18ae")
        buf.write("\u18b2\3\2\2\2\u18af\u18b0\7\u0335\2\2\u18b0\u18b2\7\u0336")
        buf.write("\2\2\u18b1\u18a4\3\2\2\2\u18b1\u18af\3\2\2\2\u18b2\u18b6")
        buf.write("\3\2\2\2\u18b3\u18b7\5\u01de\u00f0\2\u18b4\u18b7\5\u01e0")
        buf.write("\u00f1\2\u18b5\u18b7\5\u01e2\u00f2\2\u18b6\u18b3\3\2\2")
        buf.write("\2\u18b6\u18b4\3\2\2\2\u18b6\u18b5\3\2\2\2\u18b7\u18b9")
        buf.write("\3\2\2\2\u18b8\u18ba\7\u0338\2\2\u18b9\u18b8\3\2\2\2\u18b9")
        buf.write("\u18ba\3\2\2\2\u18ba\u01dd\3\2\2\2\u18bb\u18bc\7\u011b")
        buf.write("\2\2\u18bc\u18c6\7\u0156\2\2\u18bd\u18be\7\u017c\2\2\u18be")
        buf.write("\u18c3\5\u01e8\u00f5\2\u18bf\u18c0\7\u0337\2\2\u18c0\u18c2")
        buf.write("\5\u01e8\u00f5\2\u18c1\u18bf\3\2\2\2\u18c2\u18c5\3\2\2")
        buf.write("\2\u18c3\u18c1\3\2\2\2\u18c3\u18c4\3\2\2\2\u18c4\u18c7")
        buf.write("\3\2\2\2\u18c5\u18c3\3\2\2\2\u18c6\u18bd\3\2\2\2\u18c6")
        buf.write("\u18c7\3\2\2\2\u18c7\u18c9\3\2\2\2\u18c8\u18ca\7\20\2")
        buf.write("\2\u18c9\u18c8\3\2\2\2\u18c9\u18ca\3\2\2\2\u18ca\u18cb")
        buf.write("\3\2\2\2\u18cb\u18d1\7\u011a\2\2\u18cc\u18cd\7\u0335\2")
        buf.write("\2\u18cd\u18ce\5\u01be\u00e0\2\u18ce\u18cf\7\u0336\2\2")
        buf.write("\u18cf\u18d2\3\2\2\2\u18d0\u18d2\5\u01be\u00e0\2\u18d1")
        buf.write("\u18cc\3\2\2\2\u18d1\u18d0\3\2\2\2\u18d2\u01df\3\2\2\2")
        buf.write("\u18d3\u18d4\7\u011b\2\2\u18d4\u18d5\7\u031a\2\2\u18d5")
        buf.write("\u18df\5\u02a6\u0154\2\u18d6\u18d7\7\u017c\2\2\u18d7\u18dc")
        buf.write("\5\u01e8\u00f5\2\u18d8\u18d9\7\u0337\2\2\u18d9\u18db\5")
        buf.write("\u01e8\u00f5\2\u18da\u18d8\3\2\2\2\u18db\u18de\3\2\2\2")
        buf.write("\u18dc\u18da\3\2\2\2\u18dc\u18dd\3\2\2\2\u18dd\u18e0\3")
        buf.write("\2\2\2\u18de\u18dc\3\2\2\2\u18df\u18d6\3\2\2\2\u18df\u18e0")
        buf.write("\3\2\2\2\u18e0\u18e2\3\2\2\2\u18e1\u18e3\7\20\2\2\u18e2")
        buf.write("\u18e1\3\2\2\2\u18e2\u18e3\3\2\2\2\u18e3\u18e4\3\2\2\2")
        buf.write("\u18e4\u18e8\7\34\2\2\u18e5\u18e7\5\b\5\2\u18e6\u18e5")
        buf.write("\3\2\2\2\u18e7\u18ea\3\2\2\2\u18e8\u18e6\3\2\2\2\u18e8")
        buf.write("\u18e9\3\2\2\2\u18e9\u18eb\3\2\2\2\u18ea\u18e8\3\2\2\2")
        buf.write("\u18eb\u18ed\7\u011a\2\2\u18ec\u18ee\7\u0338\2\2\u18ed")
        buf.write("\u18ec\3\2\2\2\u18ed\u18ee\3\2\2\2\u18ee\u18ef\3\2\2\2")
        buf.write("\u18ef\u18f1\7m\2\2\u18f0\u18f2\7\u0338\2\2\u18f1\u18f0")
        buf.write("\3\2\2\2\u18f1\u18f2\3\2\2\2\u18f2\u01e1\3\2\2\2\u18f3")
        buf.write("\u18f4\7\u011b\2\2\u18f4\u18fe\5\u03ae\u01d8\2\u18f5\u18f6")
        buf.write("\7\u017c\2\2\u18f6\u18fb\5\u01e8\u00f5\2\u18f7\u18f8\7")
        buf.write("\u0337\2\2\u18f8\u18fa\5\u01e8\u00f5\2\u18f9\u18f7\3\2")
        buf.write("\2\2\u18fa\u18fd\3\2\2\2\u18fb\u18f9\3\2\2\2\u18fb\u18fc")
        buf.write("\3\2\2\2\u18fc\u18ff\3\2\2\2\u18fd\u18fb\3\2\2\2\u18fe")
        buf.write("\u18f5\3\2\2\2\u18fe\u18ff\3\2\2\2\u18ff\u1901\3\2\2\2")
        buf.write("\u1900\u1902\7\20\2\2\u1901\u1900\3\2\2\2\u1901\u1902")
        buf.write("\3\2\2\2\u1902\u1903\3\2\2\2\u1903\u1907\7\34\2\2\u1904")
        buf.write("\u1906\5\b\5\2\u1905\u1904\3\2\2\2\u1906\u1909\3\2\2\2")
        buf.write("\u1907\u1905\3\2\2\2\u1907\u1908\3\2\2\2\u1908\u190a\3")
        buf.write("\2\2\2\u1909\u1907\3\2\2\2\u190a\u190b\7\u011a\2\2\u190b")
        buf.write("\u190d\5\u02cc\u0167\2\u190c\u190e\7\u0338\2\2\u190d\u190c")
        buf.write("\3\2\2\2\u190d\u190e\3\2\2\2\u190e\u190f\3\2\2\2\u190f")
        buf.write("\u1910\7m\2\2\u1910\u01e3\3\2\2\2\u1911\u1915\7\u031a")
        buf.write("\2\2\u1912\u1913\5\u03b6\u01dc\2\u1913\u1914\7\u0330\2")
        buf.write("\2\u1914\u1916\3\2\2\2\u1915\u1912\3\2\2\2\u1915\u1916")
        buf.write("\3\2\2\2\u1916\u1918\3\2\2\2\u1917\u1919\7\20\2\2\u1918")
        buf.write("\u1917\3\2\2\2\u1918\u1919\3\2\2\2\u1919\u191a\3\2\2\2")
        buf.write("\u191a\u191c\5\u03ae\u01d8\2\u191b\u191d\7\u0173\2\2\u191c")
        buf.write("\u191b\3\2\2\2\u191c\u191d\3\2\2\2\u191d\u1920\3\2\2\2")
        buf.write("\u191e\u191f\7\u0323\2\2\u191f\u1921\5\u03b0\u01d9\2\u1920")
        buf.write("\u191e\3\2\2\2\u1920\u1921\3\2\2\2\u1921\u1923\3\2\2\2")
        buf.write("\u1922\u1924\t;\2\2\u1923\u1922\3\2\2\2\u1923\u1924\3")
        buf.write("\2\2\2\u1924\u01e5\3\2\2\2\u1925\u1929\7\u01ee\2\2\u1926")
        buf.write("\u1929\7\u02a3\2\2\u1927\u1929\5\u02a2\u0152\2\u1928\u1925")
        buf.write("\3\2\2\2\u1928\u1926\3\2\2\2\u1928\u1927\3\2\2\2\u1929")
        buf.write("\u01e7\3\2\2\2\u192a\u1937\7\u01ee\2\2\u192b\u1937\7\u02be")
        buf.write("\2\2\u192c\u192d\7\u011b\2\2\u192d\u192e\7\u00df\2\2\u192e")
        buf.write("\u192f\7\u00e5\2\2\u192f\u1930\7\u00df\2\2\u1930\u1937")
        buf.write("\7\u0222\2\2\u1931\u1932\7(\2\2\u1932\u1933\7\u00e5\2")
        buf.write("\2\u1933\u1934\7\u00df\2\2\u1934\u1937\7\u0222\2\2\u1935")
        buf.write("\u1937\5\u02a2\u0152\2\u1936\u192a\3\2\2\2\u1936\u192b")
        buf.write("\3\2\2\2\u1936\u192c\3\2\2\2\u1936\u1931\3\2\2\2\u1936")
        buf.write("\u1935\3\2\2\2\u1937\u01e9\3\2\2\2\u1938\u1939\7I\2\2")
        buf.write("\u1939\u193a\7\u014a\2\2\u193a\u193b\5\u03b6\u01dc\2\u193b")
        buf.write("\u193c\7\u00e5\2\2\u193c\u193d\5\u032c\u0197\2\u193d\u193e")
        buf.write("\7\u0335\2\2\u193e\u193f\5\u038e\u01c8\2\u193f\u1952\7")
        buf.write("\u0336\2\2\u1940\u1946\7\u017c\2\2\u1941\u1947\7\u020a")
        buf.write("\2\2\u1942\u1943\7\u02bd\2\2\u1943\u1944\7\u031b\2\2\u1944")
        buf.write("\u1947\t<\2\2\u1945\u1947\7\u02dd\2\2\u1946\u1941\3\2")
        buf.write("\2\2\u1946\u1942\3\2\2\2\u1946\u1945\3\2\2\2\u1947\u194a")
        buf.write("\3\2\2\2\u1948\u1949\7\u0337\2\2\u1949\u194b\7\u026b\2")
        buf.write("\2\u194a\u1948\3\2\2\2\u194a\u194b\3\2\2\2\u194b\u1950")
        buf.write("\3\2\2\2\u194c\u194d\7\u0337\2\2\u194d\u194e\7\u0220\2")
        buf.write("\2\u194e\u194f\7\u0323\2\2\u194f\u1951\5\u0392\u01ca\2")
        buf.write("\u1950\u194c\3\2\2\2\u1950\u1951\3\2\2\2\u1951\u1953\3")
        buf.write("\2\2\2\u1952\u1940\3\2\2\2\u1952\u1953\3\2\2\2\u1953\u1955")
        buf.write("\3\2\2\2\u1954\u1956\7\u0338\2\2\u1955\u1954\3\2\2\2\u1955")
        buf.write("\u1956\3\2\2\2\u1956\u01eb\3\2\2\2\u1957\u1959\7\u016c")
        buf.write("\2\2\u1958\u195a\t=\2\2\u1959\u1958\3\2\2\2\u1959\u195a")
        buf.write("\3\2\2\2\u195a\u195b\3\2\2\2\u195b\u195c\7\u014a\2\2\u195c")
        buf.write("\u195e\5\u0380\u01c1\2\u195d\u195f\5\u03b6\u01dc\2\u195e")
        buf.write("\u195d\3\2\2\2\u195e\u195f\3\2\2\2\u195f\u1963\3\2\2\2")
        buf.write("\u1960\u1961\7\u0301\2\2\u1961\u1962\7\u031b\2\2\u1962")
        buf.write("\u1964\7\u0172\2\2\u1963\u1960\3\2\2\2\u1963\u1964\3\2")
        buf.write("\2\2\u1964\u01ed\3\2\2\2\u1965\u1966\7I\2\2\u1966\u1967")
        buf.write("\7\u0156\2\2\u1967\u1968\5\u0382\u01c2\2\u1968\u1969\7")
        buf.write("\u0335\2\2\u1969\u196b\5\u02ac\u0157\2\u196a\u196c\7\u0337")
        buf.write("\2\2\u196b\u196a\3\2\2\2\u196b\u196c\3\2\2\2\u196c\u196d")
        buf.write("\3\2\2\2\u196d\u1970\7\u0336\2\2\u196e\u196f\7\u023a\2")
        buf.write("\2\u196f\u1971\5\u03b8\u01dd\2\u1970\u196e\3\2\2\2\u1970")
        buf.write("\u1971\3\2\2\2\u1971\u1975\3\2\2\2\u1972\u1974\5\u01f0")
        buf.write("\u00f9\2\u1973\u1972\3\2\2\2\u1974\u1977\3\2\2\2\u1975")
        buf.write("\u1973\3\2\2\2\u1975\u1976\3\2\2\2\u1976\u197b\3\2\2\2")
        buf.write("\u1977\u1975\3\2\2\2\u1978\u1979\7\u00e5\2\2\u1979\u197c")
        buf.write("\5\u03b6\u01dc\2\u197a\u197c\7Z\2\2\u197b\u1978\3\2\2")
        buf.write("\2\u197b\u197a\3\2\2\2\u197b\u197c\3\2\2\2\u197c\u1980")
        buf.write("\3\2\2\2\u197d\u197e\7\u02ec\2\2\u197e\u1981\5\u03b6\u01dc")
        buf.write("\2\u197f\u1981\7Z\2\2\u1980\u197d\3\2\2\2\u1980\u197f")
        buf.write("\3\2\2\2\u1980\u1981\3\2\2\2\u1981\u1983\3\2\2\2\u1982")
        buf.write("\u1984\7\u0338\2\2\u1983\u1982\3\2\2\2\u1983\u1984\3\2")
        buf.write("\2\2\u1984\u01ef\3\2\2\2\u1985\u1999\7\u017c\2\2\u1986")
        buf.write("\u1987\7\u0335\2\2\u1987\u198c\5\u02be\u0160\2\u1988\u1989")
        buf.write("\7\u0337\2\2\u1989\u198b\5\u02be\u0160\2\u198a\u1988\3")
        buf.write("\2\2\2\u198b\u198e\3\2\2\2\u198c\u198a\3\2\2\2\u198c\u198d")
        buf.write("\3\2\2\2\u198d\u198f\3\2\2\2\u198e\u198c\3\2\2\2\u198f")
        buf.write("\u1990\7\u0336\2\2\u1990\u199a\3\2\2\2\u1991\u1996\5\u02be")
        buf.write("\u0160\2\u1992\u1993\7\u0337\2\2\u1993\u1995\5\u02be\u0160")
        buf.write("\2\u1994\u1992\3\2\2\2\u1995\u1998\3\2\2\2\u1996\u1994")
        buf.write("\3\2\2\2\u1996\u1997\3\2\2\2\u1997\u199a\3\2\2\2\u1998")
        buf.write("\u1996\3\2\2\2\u1999\u1986\3\2\2\2\u1999\u1991\3\2\2\2")
        buf.write("\u199a\u01f1\3\2\2\2\u199b\u199c\7I\2\2\u199c\u199d\7")
        buf.write("\u0175\2\2\u199d\u19a2\5\u0384\u01c3\2\u199e\u199f\7\u0335")
        buf.write("\2\2\u199f\u19a0\5\u038e\u01c8\2\u19a0\u19a1\7\u0336\2")
        buf.write("\2\u19a1\u19a3\3\2\2\2\u19a2\u199e\3\2\2\2\u19a2\u19a3")
        buf.write("\3\2\2\2\u19a3\u19ad\3\2\2\2\u19a4\u19a5\7\u017c\2\2\u19a5")
        buf.write("\u19aa\5\u01f4\u00fb\2\u19a6\u19a7\7\u0337\2\2\u19a7\u19a9")
        buf.write("\5\u01f4\u00fb\2\u19a8\u19a6\3\2\2\2\u19a9\u19ac\3\2\2")
        buf.write("\2\u19aa\u19a8\3\2\2\2\u19aa\u19ab\3\2\2\2\u19ab\u19ae")
        buf.write("\3\2\2\2\u19ac\u19aa\3\2\2\2\u19ad\u19a4\3\2\2\2\u19ad")
        buf.write("\u19ae\3\2\2\2\u19ae\u19af\3\2\2\2\u19af\u19b0\7\20\2")
        buf.write("\2\u19b0\u19b4\5\u01be\u00e0\2\u19b1\u19b2\7\u017c\2\2")
        buf.write("\u19b2\u19b3\7.\2\2\u19b3\u19b5\7\u00ec\2\2\u19b4\u19b1")
        buf.write("\3\2\2\2\u19b4\u19b5\3\2\2\2\u19b5\u19b7\3\2\2\2\u19b6")
        buf.write("\u19b8\7\u0338\2\2\u19b7\u19b6\3\2\2\2\u19b7\u19b8\3\2")
        buf.write("\2\2\u19b8\u01f3\3\2\2\2\u19b9\u19ba\t>\2\2\u19ba\u01f5")
        buf.write("\3\2\2\2\u19bb\u19bc\7\n\2\2\u19bc\u19bd\7\u0156\2\2\u19bd")
        buf.write("\u19e9\5\u0382\u01c2\2\u19be\u19bf\7\u013d\2\2\u19bf\u19c0")
        buf.write("\7\u0335\2\2\u19c0\u19c1\7\u023b\2\2\u19c1\u19c2\7\u0323")
        buf.write("\2\2\u19c2\u19c3\t?\2\2\u19c3\u19ea\7\u0336\2\2\u19c4")
        buf.write("\u19c5\7\4\2\2\u19c5\u19ea\5\u02ae\u0158\2\u19c6\u19c7")
        buf.write("\7\n\2\2\u19c7\u19c8\78\2\2\u19c8\u19ea\5\u02b0\u0159")
        buf.write("\2\u19c9\u19ca\7h\2\2\u19ca\u19cb\78\2\2\u19cb\u19ea\5")
        buf.write("\u03b6\u01dc\2\u19cc\u19cd\7h\2\2\u19cd\u19ce\7=\2\2\u19ce")
        buf.write("\u19ea\5\u03b6\u01dc\2\u19cf\u19d0\7\u017c\2\2\u19d0\u19d1")
        buf.write("\7.\2\2\u19d1\u19d2\7\4\2\2\u19d2\u19d3\7=\2\2\u19d3\u19d4")
        buf.write("\5\u03b6\u01dc\2\u19d4\u19d5\7\u0089\2\2\u19d5\u19d6\7")
        buf.write("\u00ac\2\2\u19d6\u19d7\7\u0335\2\2\u19d7\u19d8\5\u038e")
        buf.write("\u01c8\2\u19d8\u19d9\7\u0336\2\2\u19d9\u19da\7\u010e\2")
        buf.write("\2\u19da\u19db\5\u0382\u01c2\2\u19db\u19dc\7\u0335\2\2")
        buf.write("\u19dc\u19dd\5\u038e\u01c8\2\u19dd\u19de\7\u0336\2\2\u19de")
        buf.write("\u19ea\3\2\2\2\u19df\u19e0\7.\2\2\u19e0\u19e1\7=\2\2\u19e1")
        buf.write("\u19ea\5\u03b6\u01dc\2\u19e2\u19e3\t\27\2\2\u19e3\u19e5")
        buf.write("\7\u0163\2\2\u19e4\u19e6\5\u03b6\u01dc\2\u19e5\u19e4\3")
        buf.write("\2\2\2\u19e5\u19e6\3\2\2\2\u19e6\u19ea\3\2\2\2\u19e7\u19e8")
        buf.write("\7\u02a1\2\2\u19e8\u19ea\5\u01f0\u00f9\2\u19e9\u19be\3")
        buf.write("\2\2\2\u19e9\u19c4\3\2\2\2\u19e9\u19c6\3\2\2\2\u19e9\u19c9")
        buf.write("\3\2\2\2\u19e9\u19cc\3\2\2\2\u19e9\u19cf\3\2\2\2\u19e9")
        buf.write("\u19df\3\2\2\2\u19e9\u19e2\3\2\2\2\u19e9\u19e7\3\2\2\2")
        buf.write("\u19ea\u19ec\3\2\2\2\u19eb\u19ed\7\u0338\2\2\u19ec\u19eb")
        buf.write("\3\2\2\2\u19ec\u19ed\3\2\2\2\u19ed\u01f7\3\2\2\2\u19ee")
        buf.write("\u19ef\7\n\2\2\u19ef\u19f2\7U\2\2\u19f0\u19f3\5\u03b6")
        buf.write("\u01dc\2\u19f1\u19f3\7K\2\2\u19f2\u19f0\3\2\2\2\u19f2")
        buf.write("\u19f1\3\2\2\2\u19f3\u1a00\3\2\2\2\u19f4\u19f5\7\u025b")
        buf.write("\2\2\u19f5\u19f6\7\u025e\2\2\u19f6\u19f7\7\u0323\2\2\u19f7")
        buf.write("\u1a01\5\u03b6\u01dc\2\u19f8\u19f9\7\67\2\2\u19f9\u1a01")
        buf.write("\5\u03b6\u01dc\2\u19fa\u19fb\7\u013d\2\2\u19fb\u19fe\5")
        buf.write("\u01fa\u00fe\2\u19fc\u19fd\7\u017c\2\2\u19fd\u19ff\5\u0240")
        buf.write("\u0121\2\u19fe\u19fc\3\2\2\2\u19fe\u19ff\3\2\2\2\u19ff")
        buf.write("\u1a01\3\2\2\2\u1a00\u19f4\3\2\2\2\u1a00\u19f8\3\2\2\2")
        buf.write("\u1a00\u19fa\3\2\2\2\u1a01\u1a03\3\2\2\2\u1a02\u1a04\7")
        buf.write("\u0338\2\2\u1a03\u1a02\3\2\2\2\u1a03\u1a04\3\2\2\2\u1a04")
        buf.write("\u01f9\3\2\2\2\u1a05\u1a1d\5\u01fc\u00ff\2\u1a06\u1a1d")
        buf.write("\5\u01fe\u0100\2\u1a07\u1a1d\5\u0202\u0102\2\u1a08\u1a1d")
        buf.write("\5\u0204\u0103\2\u1a09\u1a1d\5\u0208\u0105\2\u1a0a\u1a1d")
        buf.write("\5\u0222\u0112\2\u1a0b\u1a1d\5\u0224\u0113\2\u1a0c\u1a1d")
        buf.write("\5\u0226\u0114\2\u1a0d\u1a1d\5\u0228\u0115\2\u1a0e\u1a1d")
        buf.write("\5\u022a\u0116\2\u1a0f\u1a1d\5\u022c\u0117\2\u1a10\u1a1d")
        buf.write("\5\u022e\u0118\2\u1a11\u1a12\7\u0200\2\2\u1a12\u1a1d\5")
        buf.write("\u0372\u01ba\2\u1a13\u1a1d\5\u0230\u0119\2\u1a14\u1a1d")
        buf.write("\5\u0232\u011a\2\u1a15\u1a1d\5\u0234\u011b\2\u1a16\u1a1d")
        buf.write("\5\u0236\u011c\2\u1a17\u1a1d\5\u0238\u011d\2\u1a18\u1a1d")
        buf.write("\5\u023a\u011e\2\u1a19\u1a1d\5\u023c\u011f\2\u1a1a\u1a1d")
        buf.write("\5\u023e\u0120\2\u1a1b\u1a1d\5\u0240\u0121\2\u1a1c\u1a05")
        buf.write("\3\2\2\2\u1a1c\u1a06\3\2\2\2\u1a1c\u1a07\3\2\2\2\u1a1c")
        buf.write("\u1a08\3\2\2\2\u1a1c\u1a09\3\2\2\2\u1a1c\u1a0a\3\2\2\2")
        buf.write("\u1a1c\u1a0b\3\2\2\2\u1a1c\u1a0c\3\2\2\2\u1a1c\u1a0d\3")
        buf.write("\2\2\2\u1a1c\u1a0e\3\2\2\2\u1a1c\u1a0f\3\2\2\2\u1a1c\u1a10")
        buf.write("\3\2\2\2\u1a1c\u1a11\3\2\2\2\u1a1c\u1a13\3\2\2\2\u1a1c")
        buf.write("\u1a14\3\2\2\2\u1a1c\u1a15\3\2\2\2\u1a1c\u1a16\3\2\2\2")
        buf.write("\u1a1c\u1a17\3\2\2\2\u1a1c\u1a18\3\2\2\2\u1a1c\u1a19\3")
        buf.write("\2\2\2\u1a1c\u1a1a\3\2\2\2\u1a1c\u1a1b\3\2\2\2\u1a1d\u01fb")
        buf.write("\3\2\2\2\u1a1e\u1a1f\7\u019d\2\2\u1a1f\u1a30\5\u0392\u01ca")
        buf.write("\2\u1a20\u1a21\7\u019e\2\2\u1a21\u1a30\7\u00e2\2\2\u1a22")
        buf.write("\u1a27\7\u00e5\2\2\u1a23\u1a24\7\u0220\2\2\u1a24\u1a25")
        buf.write("\7\u0323\2\2\u1a25\u1a28\7\u00e5\2\2\u1a26\u1a28\7\u00e2")
        buf.write("\2\2\u1a27\u1a23\3\2\2\2\u1a27\u1a26\3\2\2\2\u1a28\u1a30")
        buf.write("\3\2\2\2\u1a29\u1a2a\7\u019f\2\2\u1a2a\u1a30\5\u0392\u01ca")
        buf.write("\2\u1a2b\u1a2c\7\u01a0\2\2\u1a2c\u1a30\5\u0392\u01ca\2")
        buf.write("\u1a2d\u1a2e\7\u01a1\2\2\u1a2e\u1a30\t\t\2\2\u1a2f\u1a1e")
        buf.write("\3\2\2\2\u1a2f\u1a20\3\2\2\2\u1a2f\u1a22\3\2\2\2\u1a2f")
        buf.write("\u1a29\3\2\2\2\u1a2f\u1a2b\3\2\2\2\u1a2f\u1a2d\3\2\2\2")
        buf.write("\u1a30\u01fd\3\2\2\2\u1a31\u1a32\7\u01b4\2\2\u1a32\u1a42")
        buf.write("\7\u0323\2\2\u1a33\u1a43\7\u00e2\2\2\u1a34\u1a3f\7\u00e5")
        buf.write("\2\2\u1a35\u1a3a\5\u0200\u0101\2\u1a36\u1a37\7\u0337\2")
        buf.write("\2\u1a37\u1a39\5\u0200\u0101\2\u1a38\u1a36\3\2\2\2\u1a39")
        buf.write("\u1a3c\3\2\2\2\u1a3a\u1a38\3\2\2\2\u1a3a\u1a3b\3\2\2\2")
        buf.write("\u1a3b\u1a3e\3\2\2\2\u1a3c\u1a3a\3\2\2\2\u1a3d\u1a35\3")
        buf.write("\2\2\2\u1a3e\u1a41\3\2\2\2\u1a3f\u1a3d\3\2\2\2\u1a3f\u1a40")
        buf.write("\3\2\2\2\u1a40\u1a43\3\2\2\2\u1a41\u1a3f\3\2\2\2\u1a42")
        buf.write("\u1a33\3\2\2\2\u1a42\u1a34\3\2\2\2\u1a43\u01ff\3\2\2\2")
        buf.write("\u1a44\u1a45\7\u019c\2\2\u1a45\u1a46\7\u0323\2\2\u1a46")
        buf.write("\u1a4b\5\u0392\u01ca\2\u1a47\u1a48\7\u01b3\2\2\u1a48\u1a49")
        buf.write("\7\u0323\2\2\u1a49\u1a4b\t@\2\2\u1a4a\u1a44\3\2\2\2\u1a4a")
        buf.write("\u1a47\3\2\2\2\u1a4b\u0201\3\2\2\2\u1a4c\u1a4d\7>\2\2")
        buf.write("\u1a4d\u1a4e\7\u0323\2\2\u1a4e\u1a4f\t\67\2\2\u1a4f\u0203")
        buf.write("\3\2\2\2\u1a50\u1a51\7\u01c9\2\2\u1a51\u1a55\5\u0392\u01ca")
        buf.write("\2\u1a52\u1a53\7\u01ca\2\2\u1a53\u1a55\tA\2\2\u1a54\u1a50")
        buf.write("\3\2\2\2\u1a54\u1a52\3\2\2\2\u1a55\u0205\3\2\2\2\u1a56")
        buf.write("\u1a57\7\n\2\2\u1a57\u1a58\7n\2\2\u1a58\u1a5b\5\u03b6")
        buf.write("\u01dc\2\u1a59\u1a5a\7\24\2\2\u1a5a\u1a5c\5\u03b6\u01dc")
        buf.write("\2\u1a5b\u1a59\3\2\2\2\u1a5b\u1a5c\3\2\2\2\u1a5c\u1a64")
        buf.write("\3\2\2\2\u1a5d\u1a5e\7\u014b\2\2\u1a5e\u1a62\7\u0323\2")
        buf.write("\2\u1a5f\u1a63\7\u014e\2\2\u1a60\u1a63\7\u0151\2\2\u1a61")
        buf.write("\u1a63\7\u01e4\2\2\u1a62\u1a5f\3\2\2\2\u1a62\u1a60\3\2")
        buf.write("\2\2\u1a62\u1a61\3\2\2\2\u1a63\u1a65\3\2\2\2\u1a64\u1a5d")
        buf.write("\3\2\2\2\u1a64\u1a65\3\2\2\2\u1a65\u1a66\3\2\2\2\u1a66")
        buf.write("\u1a67\7\20\2\2\u1a67\u1a68\7\u015a\2\2\u1a68\u1a69\7")
        buf.write("\u0335\2\2\u1a69\u1a6a\7\u00b8\2\2\u1a6a\u1a6b\7\u0323")
        buf.write("\2\2\u1a6b\u1a70\7\u031b\2\2\u1a6c\u1a6d\7\u0337\2\2\u1a6d")
        buf.write("\u1a6e\7\u00b7\2\2\u1a6e\u1a6f\7\u0323\2\2\u1a6f\u1a71")
        buf.write("\tB\2\2\u1a70\u1a6c\3\2\2\2\u1a70\u1a71\3\2\2\2\u1a71")
        buf.write("\u1a72\3\2\2\2\u1a72\u1ae0\7\u0336\2\2\u1a73\u1ae1\7\u02f9")
        buf.write("\2\2\u1a74\u1a75\7\u0086\2\2\u1a75\u1a76\7\u0139\2\2\u1a76")
        buf.write("\u1a77\7\u0335\2\2\u1a77\u1a78\7\25\2\2\u1a78\u1a89\7")
        buf.write("\u0323\2\2\u1a79\u1a7b\7\u017b\2\2\u1a7a\u1a7c\tC\2\2")
        buf.write("\u1a7b\u1a7a\3\2\2\2\u1a7b\u1a7c\3\2\2\2\u1a7c\u1a7f\3")
        buf.write("\2\2\2\u1a7d\u1a7e\7+\2\2\u1a7e\u1a80\5\u03b6\u01dc\2")
        buf.write("\u1a7f\u1a7d\3\2\2\2\u1a7f\u1a80\3\2\2\2\u1a80\u1a8a\3")
        buf.write("\2\2\2\u1a81\u1a82\7+\2\2\u1a82\u1a84\5\u03b6\u01dc\2")
        buf.write("\u1a83\u1a85\7\u017b\2\2\u1a84\u1a83\3\2\2\2\u1a84\u1a85")
        buf.write("\3\2\2\2\u1a85\u1a87\3\2\2\2\u1a86\u1a88\tC\2\2\u1a87")
        buf.write("\u1a86\3\2\2\2\u1a87\u1a88\3\2\2\2\u1a88\u1a8a\3\2\2\2")
        buf.write("\u1a89\u1a79\3\2\2\2\u1a89\u1a81\3\2\2\2\u1a8a\u1a9c\3")
        buf.write("\2\2\2\u1a8b\u1a8d\7\u0337\2\2\u1a8c\u1a8b\3\2\2\2\u1a8c")
        buf.write("\u1a8d\3\2\2\2\u1a8d\u1a8e\3\2\2\2\u1a8e\u1a8f\7\u01ee")
        buf.write("\2\2\u1a8f\u1a90\7\u0323\2\2\u1a90\u1a9a\tD\2\2\u1a91")
        buf.write("\u1a98\7\u018d\2\2\u1a92\u1a99\7\5\2\2\u1a93\u1a99\7\u029a")
        buf.write("\2\2\u1a94\u1a95\7\5\2\2\u1a95\u1a99\7\u029a\2\2\u1a96")
        buf.write("\u1a97\7\u029a\2\2\u1a97\u1a99\7\5\2\2\u1a98\u1a92\3\2")
        buf.write("\2\2\u1a98\u1a93\3\2\2\2\u1a98\u1a94\3\2\2\2\u1a98\u1a96")
        buf.write("\3\2\2\2\u1a99\u1a9b\3\2\2\2\u1a9a\u1a91\3\2\2\2\u1a9a")
        buf.write("\u1a9b\3\2\2\2\u1a9b\u1a9d\3\2\2\2\u1a9c\u1a8c\3\2\2\2")
        buf.write("\u1a9c\u1a9d\3\2\2\2\u1a9d\u1aa4\3\2\2\2\u1a9e\u1aa0\7")
        buf.write("\u0337\2\2\u1a9f\u1a9e\3\2\2\2\u1a9f\u1aa0\3\2\2\2\u1aa0")
        buf.write("\u1aa1\3\2\2\2\u1aa1\u1aa2\7\u00ca\2\2\u1aa2\u1aa3\7\u0323")
        buf.write("\2\2\u1aa3\u1aa5\tE\2\2\u1aa4\u1a9f\3\2\2\2\u1aa4\u1aa5")
        buf.write("\3\2\2\2\u1aa5\u1aac\3\2\2\2\u1aa6\u1aa8\7\u0337\2\2\u1aa7")
        buf.write("\u1aa6\3\2\2\2\u1aa7\u1aa8\3\2\2\2\u1aa8\u1aa9\3\2\2\2")
        buf.write("\u1aa9\u1aaa\7\u00cb\2\2\u1aaa\u1aab\7\u0323\2\2\u1aab")
        buf.write("\u1aad\7\u031b\2\2\u1aac\u1aa7\3\2\2\2\u1aac\u1aad\3\2")
        buf.write("\2\2\u1aad\u1aae\3\2\2\2\u1aae\u1ae1\7\u0336\2\2\u1aaf")
        buf.write("\u1ab0\7\u0086\2\2\u1ab0\u1ab1\7V\2\2\u1ab1\u1ab2\7\u0335")
        buf.write("\2\2\u1ab2\u1ab3\7\25\2\2\u1ab3\u1ac4\7\u0323\2\2\u1ab4")
        buf.write("\u1ab6\7\u017b\2\2\u1ab5\u1ab7\tC\2\2\u1ab6\u1ab5\3\2")
        buf.write("\2\2\u1ab6\u1ab7\3\2\2\2\u1ab7\u1aba\3\2\2\2\u1ab8\u1ab9")
        buf.write("\7+\2\2\u1ab9\u1abb\5\u03b6\u01dc\2\u1aba\u1ab8\3\2\2")
        buf.write("\2\u1aba\u1abb\3\2\2\2\u1abb\u1ac5\3\2\2\2\u1abc\u1abd")
        buf.write("\7+\2\2\u1abd\u1abf\5\u03b6\u01dc\2\u1abe\u1ac0\7\u017b")
        buf.write("\2\2\u1abf\u1abe\3\2\2\2\u1abf\u1ac0\3\2\2\2\u1ac0\u1ac2")
        buf.write("\3\2\2\2\u1ac1\u1ac3\tC\2\2\u1ac2\u1ac1\3\2\2\2\u1ac2")
        buf.write("\u1ac3\3\2\2\2\u1ac3\u1ac5\3\2\2\2\u1ac4\u1ab4\3\2\2\2")
        buf.write("\u1ac4\u1abc\3\2\2\2\u1ac5\u1ad7\3\2\2\2\u1ac6\u1ac8\7")
        buf.write("\u0337\2\2\u1ac7\u1ac6\3\2\2\2\u1ac7\u1ac8\3\2\2\2\u1ac8")
        buf.write("\u1ac9\3\2\2\2\u1ac9\u1aca\7\u01ee\2\2\u1aca\u1acb\7\u0323")
        buf.write("\2\2\u1acb\u1ad5\tD\2\2\u1acc\u1ad3\7\u018d\2\2\u1acd")
        buf.write("\u1ad4\7\5\2\2\u1ace\u1ad4\7\u029a\2\2\u1acf\u1ad0\7\5")
        buf.write("\2\2\u1ad0\u1ad4\7\u029a\2\2\u1ad1\u1ad2\7\u029a\2\2\u1ad2")
        buf.write("\u1ad4\7\5\2\2\u1ad3\u1acd\3\2\2\2\u1ad3\u1ace\3\2\2\2")
        buf.write("\u1ad3\u1acf\3\2\2\2\u1ad3\u1ad1\3\2\2\2\u1ad4\u1ad6\3")
        buf.write("\2\2\2\u1ad5\u1acc\3\2\2\2\u1ad5\u1ad6\3\2\2\2\u1ad6\u1ad8")
        buf.write("\3\2\2\2\u1ad7\u1ac7\3\2\2\2\u1ad7\u1ad8\3\2\2\2\u1ad8")
        buf.write("\u1ada\3\2\2\2\u1ad9\u1adb\7\u0337\2\2\u1ada\u1ad9\3\2")
        buf.write("\2\2\u1ada\u1adb\3\2\2\2\u1adb\u1adc\3\2\2\2\u1adc\u1add")
        buf.write("\7\u0121\2\2\u1add\u1ade\7\u0323\2\2\u1ade\u1adf\tF\2")
        buf.write("\2\u1adf\u1ae1\7\u0336\2\2\u1ae0\u1a73\3\2\2\2\u1ae0\u1a74")
        buf.write("\3\2\2\2\u1ae0\u1aaf\3\2\2\2\u1ae1\u0207\3\2\2\2\u1ae2")
        buf.write("\u1ae3\5\u020a\u0106\2\u1ae3\u0209\3\2\2\2\u1ae4\u1ae5")
        buf.write("\5\u020c\u0107\2\u1ae5\u1ae6\5\u0212\u010a\2\u1ae6\u1aeb")
        buf.write("\3\2\2\2\u1ae7\u1ae8\5\u020e\u0108\2\u1ae8\u1ae9\5\u0214")
        buf.write("\u010b\2\u1ae9\u1aeb\3\2\2\2\u1aea\u1ae4\3\2\2\2\u1aea")
        buf.write("\u1ae7\3\2\2\2\u1aeb\u020b\3\2\2\2\u1aec\u1aed\7\u0282")
        buf.write("\2\2\u1aed\u020d\3\2\2\2\u1aee\u1aef\7\u017f\2\2\u1aef")
        buf.write("\u020f\3\2\2\2\u1af0\u1af1\7\u0323\2\2\u1af1\u0211\3\2")
        buf.write("\2\2\u1af2\u1af3\5\u0210\u0109\2\u1af3\u1af4\5\u0218\u010d")
        buf.write("\2\u1af4\u1aff\3\2\2\2\u1af5\u1aff\7~\2\2\u1af6\u1aff")
        buf.write("\7\u0088\2\2\u1af7\u1aff\7\u00e2\2\2\u1af8\u1aff\7\u0118")
        buf.write("\2\2\u1af9\u1afa\7\u0129\2\2\u1afa\u1aff\tG\2\2\u1afb")
        buf.write("\u1aff\7\u02e5\2\2\u1afc\u1afd\7\u02f0\2\2\u1afd\u1aff")
        buf.write("\7\u031b\2\2\u1afe\u1af2\3\2\2\2\u1afe\u1af5\3\2\2\2\u1afe")
        buf.write("\u1af6\3\2\2\2\u1afe\u1af7\3\2\2\2\u1afe\u1af8\3\2\2\2")
        buf.write("\u1afe\u1af9\3\2\2\2\u1afe\u1afb\3\2\2\2\u1afe\u1afc\3")
        buf.write("\2\2\2\u1aff\u0213\3\2\2\2\u1b00\u1b01\5\u0210\u0109\2")
        buf.write("\u1b01\u1b02\5\u0216\u010c\2\u1b02\u1b05\3\2\2\2\u1b03")
        buf.write("\u1b05\7\u00e2\2\2\u1b04\u1b00\3\2\2\2\u1b04\u1b03\3\2")
        buf.write("\2\2\u1b05\u0215\3\2\2\2\u1b06\u1b07\5\u0218\u010d\2\u1b07")
        buf.write("\u0217\3\2\2\2\u1b08\u1b09\5\u021c\u010f\2\u1b09\u1b0a")
        buf.write("\5\u0220\u0111\2\u1b0a\u1b0b\5\u021a\u010e\2\u1b0b\u1b0c")
        buf.write("\5\u021e\u0110\2\u1b0c\u0219\3\2\2\2\u1b0d\u1b0e\7\u0339")
        buf.write("\2\2\u1b0e\u021b\3\2\2\2\u1b0f\u1b10\7\u015a\2\2\u1b10")
        buf.write("\u1b11\7\u0339\2\2\u1b11\u1b12\7g\2\2\u1b12\u021d\3\2")
        buf.write("\2\2\u1b13\u1b14\7\u031b\2\2\u1b14\u021f\3\2\2\2\u1b15")
        buf.write("\u1b16\5\u03b6\u01dc\2\u1b16\u1b17\7\u0330\2\2\u1b17\u1b18")
        buf.write("\5\u0220\u0111\2\u1b18\u1b20\3\2\2\2\u1b19\u1b1a\5\u03b6")
        buf.write("\u01dc\2\u1b1a\u1b1b\7\u0330\2\2\u1b1b\u1b1e\3\2\2\2\u1b1c")
        buf.write("\u1b1e\5\u03b6\u01dc\2\u1b1d\u1b19\3\2\2\2\u1b1d\u1b1c")
        buf.write("\3\2\2\2\u1b1e\u1b20\3\2\2\2\u1b1f\u1b15\3\2\2\2\u1b1f")
        buf.write("\u1b1d\3\2\2\2\u1b20\u0221\3\2\2\2\u1b21\u1b22\7\u01cb")
        buf.write("\2\2\u1b22\u1b23\5\u0392\u01ca\2\u1b23\u0223\3\2\2\2\u1b24")
        buf.write("\u1b25\7\u01ee\2\2\u1b25\u1b26\5\u0392\u01ca\2\u1b26\u0225")
        buf.write("\3\2\2\2\u1b27\u1b28\tH\2\2\u1b28\u0227\3\2\2\2\u1b29")
        buf.write("\u1b2a\tI\2\2\u1b2a\u0229\3\2\2\2\u1b2b\u1b2c\tJ\2\2\u1b2c")
        buf.write("\u022b\3\2\2\2\u1b2d\u1b2e\7\u01d8\2\2\u1b2e\u1b2f\7\u0323")
        buf.write("\2\2\u1b2f\u1b30\tK\2\2\u1b30\u022d\3\2\2\2\u1b31\u1b32")
        buf.write("\7\u01d1\2\2\u1b32\u1b4b\5\u0392\u01ca\2\u1b33\u1b34\7")
        buf.write("\u02f7\2\2\u1b34\u1b4b\5\u0392\u01ca\2\u1b35\u1b36\7\u01d6")
        buf.write("\2\2\u1b36\u1b39\7\u0323\2\2\u1b37\u1b3a\5\u03b6\u01dc")
        buf.write("\2\u1b38\u1b3a\7\u031f\2\2\u1b39\u1b37\3\2\2\2\u1b39\u1b38")
        buf.write("\3\2\2\2\u1b3a\u1b4b\3\2\2\2\u1b3b\u1b3c\7\u01d5\2\2\u1b3c")
        buf.write("\u1b3f\7\u0323\2\2\u1b3d\u1b40\5\u03b6\u01dc\2\u1b3e\u1b40")
        buf.write("\7\u031f\2\2\u1b3f\u1b3d\3\2\2\2\u1b3f\u1b3e\3\2\2\2\u1b40")
        buf.write("\u1b4b\3\2\2\2\u1b41\u1b42\7\u025f\2\2\u1b42\u1b43\7\u0323")
        buf.write("\2\2\u1b43\u1b4b\t\t\2\2\u1b44\u1b45\7\u02f4\2\2\u1b45")
        buf.write("\u1b46\7\u0323\2\2\u1b46\u1b4b\t\t\2\2\u1b47\u1b48\7\u02fa")
        buf.write("\2\2\u1b48\u1b49\7\u0323\2\2\u1b49\u1b4b\7\u031b\2\2\u1b4a")
        buf.write("\u1b31\3\2\2\2\u1b4a\u1b33\3\2\2\2\u1b4a\u1b35\3\2\2\2")
        buf.write("\u1b4a\u1b3b\3\2\2\2\u1b4a\u1b41\3\2\2\2\u1b4a\u1b44\3")
        buf.write("\2\2\2\u1b4a\u1b47\3\2\2\2\u1b4b\u022f\3\2\2\2\u1b4c\u1b55")
        buf.write("\7\u0214\2\2\u1b4d\u1b4e\7\u01a2\2\2\u1b4e\u1b4f\7\u0093")
        buf.write("\2\2\u1b4f\u1b50\7\u0323\2\2\u1b50\u1b53\5\u03b6\u01dc")
        buf.write("\2\u1b51\u1b53\7\u00e2\2\2\u1b52\u1b4d\3\2\2\2\u1b52\u1b51")
        buf.write("\3\2\2\2\u1b53\u1b56\3\2\2\2\u1b54\u1b56\tL\2\2\u1b55")
        buf.write("\u1b52\3\2\2\2\u1b55\u1b54\3\2\2\2\u1b56\u0231\3\2\2\2")
        buf.write("\u1b57\u1b58\7\u0259\2\2\u1b58\u1b59\t\t\2\2\u1b59\u0233")
        buf.write("\3\2\2\2\u1b5a\u1b5b\7\u027f\2\2\u1b5b\u1b5c\tM\2\2\u1b5c")
        buf.write("\u0235\3\2\2\2\u1b5d\u1b5e\7\u02a4\2\2\u1b5e\u1b64\tN")
        buf.write("\2\2\u1b5f\u1b60\7\u02f3\2\2\u1b60\u1b64\5\u0392\u01ca")
        buf.write("\2\u1b61\u1b62\7\u027e\2\2\u1b62\u1b64\tO\2\2\u1b63\u1b5d")
        buf.write("\3\2\2\2\u1b63\u1b5f\3\2\2\2\u1b63\u1b61\3\2\2\2\u1b64")
        buf.write("\u0237\3\2\2\2\u1b65\u1b6c\7\u01ec\2\2\u1b66\u1b6c\7\u01e3")
        buf.write("\2\2\u1b67\u1b6c\7\u0261\2\2\u1b68\u1b6c\7\u01f0\2\2\u1b69")
        buf.write("\u1b6a\7\u0218\2\2\u1b6a\u1b6c\5\u0392\u01ca\2\u1b6b\u1b65")
        buf.write("\3\2\2\2\u1b6b\u1b66\3\2\2\2\u1b6b\u1b67\3\2\2\2\u1b6b")
        buf.write("\u1b68\3\2\2\2\u1b6b\u1b69\3\2\2\2\u1b6c\u0239\3\2\2\2")
        buf.write("\u1b6d\u1b6e\7\u018f\2\2\u1b6e\u1b73\5\u0392\u01ca\2\u1b6f")
        buf.write("\u1b70\7\u029c\2\2\u1b70\u1b73\t\t\2\2\u1b71\u1b73\t\t")
        buf.write("\2\2\u1b72\u1b6d\3\2\2\2\u1b72\u1b6f\3\2\2\2\u1b72\u1b71")
        buf.write("\3\2\2\2\u1b73\u023b\3\2\2\2\u1b74\u1b75\7\u0191\2\2\u1b75")
        buf.write("\u1b8a\5\u0392\u01ca\2\u1b76\u1b77\7\u0192\2\2\u1b77\u1b8a")
        buf.write("\5\u0392\u01ca\2\u1b78\u1b79\7\u0193\2\2\u1b79\u1b8a\5")
        buf.write("\u0392\u01ca\2\u1b7a\u1b7b\7\u0194\2\2\u1b7b\u1b8a\5\u0392")
        buf.write("\u01ca\2\u1b7c\u1b7d\7\u0197\2\2\u1b7d\u1b8a\5\u0392\u01ca")
        buf.write("\2\u1b7e\u1b7f\7\u01bb\2\2\u1b7f\u1b80\7\u0323\2\2\u1b80")
        buf.write("\u1b8a\7\u031b\2\2\u1b81\u1b82\7\u01bd\2\2\u1b82\u1b8a")
        buf.write("\5\u0392\u01ca\2\u1b83\u1b84\7\u0271\2\2\u1b84\u1b8a\5")
        buf.write("\u0392\u01ca\2\u1b85\u1b86\7\u0296\2\2\u1b86\u1b8a\5\u0392")
        buf.write("\u01ca\2\u1b87\u1b88\7\u02a5\2\2\u1b88\u1b8a\5\u0392\u01ca")
        buf.write("\2\u1b89\u1b74\3\2\2\2\u1b89\u1b76\3\2\2\2\u1b89\u1b78")
        buf.write("\3\2\2\2\u1b89\u1b7a\3\2\2\2\u1b89\u1b7c\3\2\2\2\u1b89")
        buf.write("\u1b7e\3\2\2\2\u1b89\u1b81\3\2\2\2\u1b89\u1b83\3\2\2\2")
        buf.write("\u1b89\u1b85\3\2\2\2\u1b89\u1b87\3\2\2\2\u1b8a\u023d\3")
        buf.write("\2\2\2\u1b8b\u1b8c\7\u02ea\2\2\u1b8c\u1b8d\7\u0323\2\2")
        buf.write("\u1b8d\u1b8e\7\u031b\2\2\u1b8e\u1b8f\tP\2\2\u1b8f\u023f")
        buf.write("\3\2\2\2\u1b90\u1b91\7\u0120\2\2\u1b91\u1b92\7\u018b\2")
        buf.write("\2\u1b92\u1b97\7\u031b\2\2\u1b93\u1b94\7\u0120\2\2\u1b94")
        buf.write("\u1b97\7\u021c\2\2\u1b95\u1b97\7\u0266\2\2\u1b96\u1b90")
        buf.write("\3\2\2\2\u1b96\u1b93\3\2\2\2\u1b96\u1b95\3\2\2\2\u1b97")
        buf.write("\u0241\3\2\2\2\u1b98\u1b99\7h\2\2\u1b99\u1b9c\7\u009e")
        buf.write("\2\2\u1b9a\u1b9b\7\u009a\2\2\u1b9b\u1b9d\7x\2\2\u1b9c")
        buf.write("\u1b9a\3\2\2\2\u1b9c\u1b9d\3\2\2\2\u1b9d\u1bae\3\2\2\2")
        buf.write("\u1b9e\u1ba3\5\u0244\u0123\2\u1b9f\u1ba0\7\u0337\2\2\u1ba0")
        buf.write("\u1ba2\5\u0244\u0123\2\u1ba1\u1b9f\3\2\2\2\u1ba2\u1ba5")
        buf.write("\3\2\2\2\u1ba3\u1ba1\3\2\2\2\u1ba3\u1ba4\3\2\2\2\u1ba4")
        buf.write("\u1baf\3\2\2\2\u1ba5\u1ba3\3\2\2\2\u1ba6\u1bab\5\u0246")
        buf.write("\u0124\2\u1ba7\u1ba8\7\u0337\2\2\u1ba8\u1baa\5\u0246\u0124")
        buf.write("\2\u1ba9\u1ba7\3\2\2\2\u1baa\u1bad\3\2\2\2\u1bab\u1ba9")
        buf.write("\3\2\2\2\u1bab\u1bac\3\2\2\2\u1bac\u1baf\3\2\2\2\u1bad")
        buf.write("\u1bab\3\2\2\2\u1bae\u1b9e\3\2\2\2\u1bae\u1ba6\3\2\2\2")
        buf.write("\u1baf\u1bb1\3\2\2\2\u1bb0\u1bb2\7\u0338\2\2\u1bb1\u1bb0")
        buf.write("\3\2\2\2\u1bb1\u1bb2\3\2\2\2\u1bb2\u0243\3\2\2\2\u1bb3")
        buf.write("\u1bb4\5\u03b6\u01dc\2\u1bb4\u1bb5\7\u00e5\2\2\u1bb5\u1bb6")
        buf.write("\5\u0380\u01c1\2\u1bb6\u0245\3\2\2\2\u1bb7\u1bb8\5\u03b6")
        buf.write("\u01dc\2\u1bb8\u1bb9\7\u0330\2\2\u1bb9\u1bbb\3\2\2\2\u1bba")
        buf.write("\u1bb7\3\2\2\2\u1bba\u1bbb\3\2\2\2\u1bbb\u1bbc\3\2\2\2")
        buf.write("\u1bbc\u1bbd\5\u03b6\u01dc\2\u1bbd\u1bbe\7\u0330\2\2\u1bbe")
        buf.write("\u1bbf\5\u03b6\u01dc\2\u1bbf\u0247\3\2\2\2\u1bc0\u1bc1")
        buf.write("\7h\2\2\u1bc1\u1bc4\t8\2\2\u1bc2\u1bc3\7\u009a\2\2\u1bc3")
        buf.write("\u1bc5\7x\2\2\u1bc4\u1bc2\3\2\2\2\u1bc4\u1bc5\3\2\2\2")
        buf.write("\u1bc5\u1bc6\3\2\2\2\u1bc6\u1bcb\5\u0386\u01c4\2\u1bc7")
        buf.write("\u1bc8\7\u0337\2\2\u1bc8\u1bca\5\u0386\u01c4\2\u1bc9\u1bc7")
        buf.write("\3\2\2\2\u1bca\u1bcd\3\2\2\2\u1bcb\u1bc9\3\2\2\2\u1bcb")
        buf.write("\u1bcc\3\2\2\2\u1bcc\u1bcf\3\2\2\2\u1bcd\u1bcb\3\2\2\2")
        buf.write("\u1bce\u1bd0\7\u0338\2\2\u1bcf\u1bce\3\2\2\2\u1bcf\u1bd0")
        buf.write("\3\2\2\2\u1bd0\u0249\3\2\2\2\u1bd1\u1bd4\5\u024c\u0127")
        buf.write("\2\u1bd2\u1bd4\5\u024e\u0128\2\u1bd3\u1bd1\3\2\2\2\u1bd3")
        buf.write("\u1bd2\3\2\2\2\u1bd4\u024b\3\2\2\2\u1bd5\u1bd6\7h\2\2")
        buf.write("\u1bd6\u1bd9\7\u0163\2\2\u1bd7\u1bd8\7\u009a\2\2\u1bd8")
        buf.write("\u1bda\7x\2\2\u1bd9\u1bd7\3\2\2\2\u1bd9\u1bda\3\2\2\2")
        buf.write("\u1bda\u1bdb\3\2\2\2\u1bdb\u1be0\5\u0384\u01c3\2\u1bdc")
        buf.write("\u1bdd\7\u0337\2\2\u1bdd\u1bdf\5\u0384\u01c3\2\u1bde\u1bdc")
        buf.write("\3\2\2\2\u1bdf\u1be2\3\2\2\2\u1be0\u1bde\3\2\2\2\u1be0")
        buf.write("\u1be1\3\2\2\2\u1be1\u1be4\3\2\2\2\u1be2\u1be0\3\2\2\2")
        buf.write("\u1be3\u1be5\7\u0338\2\2\u1be4\u1be3\3\2\2\2\u1be4\u1be5")
        buf.write("\3\2\2\2\u1be5\u024d\3\2\2\2\u1be6\u1be7\7h\2\2\u1be7")
        buf.write("\u1bea\7\u0163\2\2\u1be8\u1be9\7\u009a\2\2\u1be9\u1beb")
        buf.write("\7x\2\2\u1bea\u1be8\3\2\2\2\u1bea\u1beb\3\2\2\2\u1beb")
        buf.write("\u1bec\3\2\2\2\u1bec\u1bf1\5\u0384\u01c3\2\u1bed\u1bee")
        buf.write("\7\u0337\2\2\u1bee\u1bf0\5\u0384\u01c3\2\u1bef\u1bed\3")
        buf.write("\2\2\2\u1bf0\u1bf3\3\2\2\2\u1bf1\u1bef\3\2\2\2\u1bf1\u1bf2")
        buf.write("\3\2\2\2\u1bf2\u1bf4\3\2\2\2\u1bf3\u1bf1\3\2\2\2\u1bf4")
        buf.write("\u1bf8\7\u00e5\2\2\u1bf5\u1bf9\7U\2\2\u1bf6\u1bf7\7\6")
        buf.write("\2\2\u1bf7\u1bf9\7\u0137\2\2\u1bf8\u1bf5\3\2\2\2\u1bf8")
        buf.write("\u1bf6\3\2\2\2\u1bf9\u1bfb\3\2\2\2\u1bfa\u1bfc\7\u0338")
        buf.write("\2\2\u1bfb\u1bfa\3\2\2\2\u1bfb\u1bfc\3\2\2\2\u1bfc\u024f")
        buf.write("\3\2\2\2\u1bfd\u1bfe\7h\2\2\u1bfe\u1c01\7\u008e\2\2\u1bff")
        buf.write("\u1c00\7\u009a\2\2\u1c00\u1c02\7x\2\2\u1c01\u1bff\3\2")
        buf.write("\2\2\u1c01\u1c02\3\2\2\2\u1c02\u1c03\3\2\2\2\u1c03\u1c08")
        buf.write("\5\u0386\u01c4\2\u1c04\u1c05\7\u0337\2\2\u1c05\u1c07\5")
        buf.write("\u0386\u01c4\2\u1c06\u1c04\3\2\2\2\u1c07\u1c0a\3\2\2\2")
        buf.write("\u1c08\u1c06\3\2\2\2\u1c08\u1c09\3\2\2\2\u1c09\u1c0c\3")
        buf.write("\2\2\2\u1c0a\u1c08\3\2\2\2\u1c0b\u1c0d\7\u0338\2\2\u1c0c")
        buf.write("\u1c0b\3\2\2\2\u1c0c\u1c0d\3\2\2\2\u1c0d\u0251\3\2\2\2")
        buf.write("\u1c0e\u1c0f\7h\2\2\u1c0f\u1c19\7\u014a\2\2\u1c10\u1c12")
        buf.write("\7\u0337\2\2\u1c11\u1c10\3\2\2\2\u1c11\u1c12\3\2\2\2\u1c12")
        buf.write("\u1c16\3\2\2\2\u1c13\u1c14\5\u0382\u01c2\2\u1c14\u1c15")
        buf.write("\7\u0330\2\2\u1c15\u1c17\3\2\2\2\u1c16\u1c13\3\2\2\2\u1c16")
        buf.write("\u1c17\3\2\2\2\u1c17\u1c18\3\2\2\2\u1c18\u1c1a\5\u03b6")
        buf.write("\u01dc\2\u1c19\u1c11\3\2\2\2\u1c1a\u1c1b\3\2\2\2\u1c1b")
        buf.write("\u1c19\3\2\2\2\u1c1b\u1c1c\3\2\2\2\u1c1c\u1c1d\3\2\2\2")
        buf.write("\u1c1d\u1c1e\7\u0338\2\2\u1c1e\u0253\3\2\2\2\u1c1f\u1c20")
        buf.write("\7h\2\2\u1c20\u1c23\7\u0156\2\2\u1c21\u1c22\7\u009a\2")
        buf.write("\2\u1c22\u1c24\7x\2\2\u1c23\u1c21\3\2\2\2\u1c23\u1c24")
        buf.write("\3\2\2\2\u1c24\u1c25\3\2\2\2\u1c25\u1c27\5\u0382\u01c2")
        buf.write("\2\u1c26\u1c28\7\u0338\2\2\u1c27\u1c26\3\2\2\2\u1c27\u1c28")
        buf.write("\3\2\2\2\u1c28\u0255\3\2\2\2\u1c29\u1c2a\7h\2\2\u1c2a")
        buf.write("\u1c2d\7\u0175\2\2\u1c2b\u1c2c\7\u009a\2\2\u1c2c\u1c2e")
        buf.write("\7x\2\2\u1c2d\u1c2b\3\2\2\2\u1c2d\u1c2e\3\2\2\2\u1c2e")
        buf.write("\u1c2f\3\2\2\2\u1c2f\u1c34\5\u0384\u01c3\2\u1c30\u1c31")
        buf.write("\7\u0337\2\2\u1c31\u1c33\5\u0384\u01c3\2\u1c32\u1c30\3")
        buf.write("\2\2\2\u1c33\u1c36\3\2\2\2\u1c34\u1c32\3\2\2\2\u1c34\u1c35")
        buf.write("\3\2\2\2\u1c35\u1c38\3\2\2\2\u1c36\u1c34\3\2\2\2\u1c37")
        buf.write("\u1c39\7\u0338\2\2\u1c38\u1c37\3\2\2\2\u1c38\u1c39\3\2")
        buf.write("\2\2\u1c39\u0257\3\2\2\2\u1c3a\u1c3b\7I\2\2\u1c3b\u1c3c")
        buf.write("\7\u02fb\2\2\u1c3c\u1c41\5\u0384\u01c3\2\u1c3d\u1c3e\7")
        buf.write("\u008c\2\2\u1c3e\u1c3f\5\u03ae\u01d8\2\u1c3f\u1c40\5\u03b0")
        buf.write("\u01d9\2\u1c40\u1c42\3\2\2\2\u1c41\u1c3d\3\2\2\2\u1c41")
        buf.write("\u1c42\3\2\2\2\u1c42\u1c49\3\2\2\2\u1c43\u1c44\7\20\2")
        buf.write("\2\u1c44\u1c45\7\u0156\2\2\u1c45\u1c46\7\u0335\2\2\u1c46")
        buf.write("\u1c47\5\u02ac\u0157\2\u1c47\u1c48\7\u0336\2\2\u1c48\u1c4a")
        buf.write("\3\2\2\2\u1c49\u1c43\3\2\2\2\u1c49\u1c4a\3\2\2\2\u1c4a")
        buf.write("\u0259\3\2\2\2\u1c4b\u1c4c\7h\2\2\u1c4c\u1c4f\7\u02fb")
        buf.write("\2\2\u1c4d\u1c4e\7\u009a\2\2\u1c4e\u1c50\7x\2\2\u1c4f")
        buf.write("\u1c4d\3\2\2\2\u1c4f\u1c50\3\2\2\2\u1c50\u1c51\3\2\2\2")
        buf.write("\u1c51\u1c52\5\u0384\u01c3\2\u1c52\u025b\3\2\2\2\u1c53")
        buf.write("\u1c56\5\u025e\u0130\2\u1c54\u1c56\5\u0260\u0131\2\u1c55")
        buf.write("\u1c53\3\2\2\2\u1c55\u1c54\3\2\2\2\u1c56\u025d\3\2\2\2")
        buf.write("\u1c57\u1c58\7\u00e9\2\2\u1c58\u1c59\7\u0335\2\2\u1c59")
        buf.write("\u1c5a\5\u03b6\u01dc\2\u1c5a\u1c5b\7\u0337\2\2\u1c5b\u1c5c")
        buf.write("\7\u031f\2\2\u1c5c\u1c5d\7\u0336\2\2\u1c5d\u025f\3\2\2")
        buf.write("\2\u1c5e\u1c5f\7\u00e8\2\2\u1c5f\u1c60\7\u0335\2\2\u1c60")
        buf.write("\u1c61\7\u031f\2\2\u1c61\u1c62\7\u0337\2\2\u1c62\u1c63")
        buf.write("\7\u031f\2\2\u1c63\u1c64\7\u0336\2\2\u1c64\u1c66\7\u0330")
        buf.write("\2\2\u1c65\u1c67\5\u03b6\u01dc\2\u1c66\u1c65\3\2\2\2\u1c66")
        buf.write("\u1c67\3\2\2\2\u1c67\u1c68\3\2\2\2\u1c68\u1c6a\7\u0330")
        buf.write("\2\2\u1c69\u1c6b\5\u03b6\u01dc\2\u1c6a\u1c69\3\2\2\2\u1c6a")
        buf.write("\u1c6b\3\2\2\2\u1c6b\u1c6c\3\2\2\2\u1c6c\u1c6d\7\u0330")
        buf.write("\2\2\u1c6d\u1c6e\5\u03b6\u01dc\2\u1c6e\u0261\3\2\2\2\u1c6f")
        buf.write("\u1c70\7Y\2\2\u1c70\u1c72\7\u031a\2\2\u1c71\u1c73\7\20")
        buf.write("\2\2\u1c72\u1c71\3\2\2\2\u1c72\u1c73\3\2\2\2\u1c73\u1c74")
        buf.write("\3\2\2\2\u1c74\u1c76\5\u02a6\u0154\2\u1c75\u1c77\7\u0338")
        buf.write("\2\2\u1c76\u1c75\3\2\2\2\u1c76\u1c77\3\2\2\2\u1c77\u1c9b")
        buf.write("\3\2\2\2\u1c78\u1c79\7Y\2\2\u1c79\u1c7e\5\u02a4\u0153")
        buf.write("\2\u1c7a\u1c7b\7\u0337\2\2\u1c7b\u1c7d\5\u02a4\u0153\2")
        buf.write("\u1c7c\u1c7a\3\2\2\2\u1c7d\u1c80\3\2\2\2\u1c7e\u1c7c\3")
        buf.write("\2\2\2\u1c7e\u1c7f\3\2\2\2\u1c7f\u1c82\3\2\2\2\u1c80\u1c7e")
        buf.write("\3\2\2\2\u1c81\u1c83\7\u0338\2\2\u1c82\u1c81\3\2\2\2\u1c82")
        buf.write("\u1c83\3\2\2\2\u1c83\u1c9b\3\2\2\2\u1c84\u1c85\7Y\2\2")
        buf.write("\u1c85\u1c87\7\u031a\2\2\u1c86\u1c88\7\20\2\2\u1c87\u1c86")
        buf.write("\3\2\2\2\u1c87\u1c88\3\2\2\2\u1c88\u1c89\3\2\2\2\u1c89")
        buf.write("\u1c8b\5\u02a8\u0155\2\u1c8a\u1c8c\7\u0338\2\2\u1c8b\u1c8a")
        buf.write("\3\2\2\2\u1c8b\u1c8c\3\2\2\2\u1c8c\u1c9b\3\2\2\2\u1c8d")
        buf.write("\u1c8e\7\u017c\2\2\u1c8e\u1c8f\7\u0310\2\2\u1c8f\u1c90")
        buf.write("\7\u0335\2\2\u1c90\u1c92\7\u031f\2\2\u1c91\u1c93\7\u0337")
        buf.write("\2\2\u1c92\u1c91\3\2\2\2\u1c92\u1c93\3\2\2\2\u1c93\u1c94")
        buf.write("\3\2\2\2\u1c94\u1c95\7\20\2\2\u1c95\u1c96\5\u03b6\u01dc")
        buf.write("\2\u1c96\u1c98\7\u0336\2\2\u1c97\u1c99\7\u0338\2\2\u1c98")
        buf.write("\u1c97\3\2\2\2\u1c98\u1c99\3\2\2\2\u1c99\u1c9b\3\2\2\2")
        buf.write("\u1c9a\u1c6f\3\2\2\2\u1c9a\u1c78\3\2\2\2\u1c9a\u1c84\3")
        buf.write("\2\2\2\u1c9a\u1c8d\3\2\2\2\u1c9b\u0263\3\2\2\2\u1c9c\u1c9e")
        buf.write("\7\63\2\2\u1c9d\u1c9f\7\u020f\2\2\u1c9e\u1c9d\3\2\2\2")
        buf.write("\u1c9e\u1c9f\3\2\2\2\u1c9f\u1ca0\3\2\2\2\u1ca0\u1ca2\5")
        buf.write("\u0390\u01c9\2\u1ca1\u1ca3\7\u0338\2\2\u1ca2\u1ca1\3\2")
        buf.write("\2\2\u1ca2\u1ca3\3\2\2\2\u1ca3\u1cba\3\2\2\2\u1ca4\u1ca6")
        buf.write("\7X\2\2\u1ca5\u1ca7\7\u020f\2\2\u1ca6\u1ca5\3\2\2\2\u1ca6")
        buf.write("\u1ca7\3\2\2\2\u1ca7\u1ca9\3\2\2\2\u1ca8\u1caa\7P\2\2")
        buf.write("\u1ca9\u1ca8\3\2\2\2\u1ca9\u1caa\3\2\2\2\u1caa\u1cab\3")
        buf.write("\2\2\2\u1cab\u1cad\5\u0390\u01c9\2\u1cac\u1cae\7\u0338")
        buf.write("\2\2\u1cad\u1cac\3\2\2\2\u1cad\u1cae\3\2\2\2\u1cae\u1cba")
        buf.write("\3\2\2\2\u1caf\u1cba\5\u02c0\u0161\2\u1cb0\u1cba\5\u02c6")
        buf.write("\u0164\2\u1cb1\u1cb3\7\u00e7\2\2\u1cb2\u1cb4\7\u020f\2")
        buf.write("\2\u1cb3\u1cb2\3\2\2\2\u1cb3\u1cb4\3\2\2\2\u1cb4\u1cb5")
        buf.write("\3\2\2\2\u1cb5\u1cb7\5\u0390\u01c9\2\u1cb6\u1cb8\7\u0338")
        buf.write("\2\2\u1cb7\u1cb6\3\2\2\2\u1cb7\u1cb8\3\2\2\2\u1cb8\u1cba")
        buf.write("\3\2\2\2\u1cb9\u1c9c\3\2\2\2\u1cb9\u1ca4\3\2\2\2\u1cb9")
        buf.write("\u1caf\3\2\2\2\u1cb9\u1cb0\3\2\2\2\u1cb9\u1cb1\3\2\2\2")
        buf.write("\u1cba\u0265\3\2\2\2\u1cbb\u1cbc\7\32\2\2\u1cbc\u1cbd")
        buf.write("\7U\2\2\u1cbd\u1cca\5\u03b6\u01dc\2\u1cbe\u1cc7\7\u010c")
        buf.write("\2\2\u1cbf\u1cc1\7\u0337\2\2\u1cc0\u1cbf\3\2\2\2\u1cc0")
        buf.write("\u1cc1\3\2\2\2\u1cc1\u1cc2\3\2\2\2\u1cc2\u1cc3\tQ\2\2")
        buf.write("\u1cc3\u1cc4\7\u0323\2\2\u1cc4\u1cc6\7\u031f\2\2\u1cc5")
        buf.write("\u1cc0\3\2\2\2\u1cc6\u1cc9\3\2\2\2\u1cc7\u1cc5\3\2\2\2")
        buf.write("\u1cc7\u1cc8\3\2\2\2\u1cc8\u1ccb\3\2\2\2\u1cc9\u1cc7\3")
        buf.write("\2\2\2\u1cca\u1cbe\3\2\2\2\u1cca\u1ccb\3\2\2\2\u1ccb\u1cd4")
        buf.write("\3\2\2\2\u1ccc\u1cce\7\u0337\2\2\u1ccd\u1ccc\3\2\2\2\u1ccd")
        buf.write("\u1cce\3\2\2\2\u1cce\u1ccf\3\2\2\2\u1ccf\u1cd0\tQ\2\2")
        buf.write("\u1cd0\u1cd1\7\u0323\2\2\u1cd1\u1cd3\7\u031f\2\2\u1cd2")
        buf.write("\u1ccd\3\2\2\2\u1cd3\u1cd6\3\2\2\2\u1cd4\u1cd2\3\2\2\2")
        buf.write("\u1cd4\u1cd5\3\2\2\2\u1cd5\u1cee\3\2\2\2\u1cd6\u1cd4\3")
        buf.write("\2\2\2\u1cd7\u1cdc\7\u015d\2\2\u1cd8\u1cda\7\u0337\2\2")
        buf.write("\u1cd9\u1cd8\3\2\2\2\u1cd9\u1cda\3\2\2\2\u1cda\u1cdb\3")
        buf.write("\2\2\2\u1cdb\u1cdd\5\u03b6\u01dc\2\u1cdc\u1cd9\3\2\2\2")
        buf.write("\u1cdd\u1cde\3\2\2\2\u1cde\u1cdc\3\2\2\2\u1cde\u1cdf\3")
        buf.write("\2\2\2\u1cdf\u1cef\3\2\2\2\u1ce0\u1cea\7\u015d\2\2\u1ce1")
        buf.write("\u1ce3\7\u0337\2\2\u1ce2\u1ce1\3\2\2\2\u1ce2\u1ce3\3\2")
        buf.write("\2\2\u1ce3\u1ce4\3\2\2\2\u1ce4\u1ce5\tR\2\2\u1ce5\u1ce8")
        buf.write("\7\u0323\2\2\u1ce6\u1ce9\7\u031f\2\2\u1ce7\u1ce9\5\u03b6")
        buf.write("\u01dc\2\u1ce8\u1ce6\3\2\2\2\u1ce8\u1ce7\3\2\2\2\u1ce9")
        buf.write("\u1ceb\3\2\2\2\u1cea\u1ce2\3\2\2\2\u1ceb\u1cec\3\2\2\2")
        buf.write("\u1cec\u1cea\3\2\2\2\u1cec\u1ced\3\2\2\2\u1ced\u1cef\3")
        buf.write("\2\2\2\u1cee\u1cd7\3\2\2\2\u1cee\u1ce0\3\2\2\2\u1cef\u1d11")
        buf.write("\3\2\2\2\u1cf0\u1cf1\7\u00cd\2\2\u1cf1\u1cf6\7\u015d\2")
        buf.write("\2\u1cf2\u1cf4\7\u0337\2\2\u1cf3\u1cf2\3\2\2\2\u1cf3\u1cf4")
        buf.write("\3\2\2\2\u1cf4\u1cf5\3\2\2\2\u1cf5\u1cf7\5\u03b6\u01dc")
        buf.write("\2\u1cf6\u1cf3\3\2\2\2\u1cf7\u1cf8\3\2\2\2\u1cf8\u1cf6")
        buf.write("\3\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1cfb\3\2\2\2\u1cfa")
        buf.write("\u1cf0\3\2\2\2\u1cfb\u1cfc\3\2\2\2\u1cfc\u1cfa\3\2\2\2")
        buf.write("\u1cfc\u1cfd\3\2\2\2\u1cfd\u1d12\3\2\2\2\u1cfe\u1cff\7")
        buf.write("\u00cd\2\2\u1cff\u1d09\7\u015d\2\2\u1d00\u1d02\7\u0337")
        buf.write("\2\2\u1d01\u1d00\3\2\2\2\u1d01\u1d02\3\2\2\2\u1d02\u1d03")
        buf.write("\3\2\2\2\u1d03\u1d04\tR\2\2\u1d04\u1d07\7\u0323\2\2\u1d05")
        buf.write("\u1d08\7\u031f\2\2\u1d06\u1d08\5\u03b6\u01dc\2\u1d07\u1d05")
        buf.write("\3\2\2\2\u1d07\u1d06\3\2\2\2\u1d08\u1d0a\3\2\2\2\u1d09")
        buf.write("\u1d01\3\2\2\2\u1d0a\u1d0b\3\2\2\2\u1d0b\u1d09\3\2\2\2")
        buf.write("\u1d0b\u1d0c\3\2\2\2\u1d0c\u1d0e\3\2\2\2\u1d0d\u1cfe\3")
        buf.write("\2\2\2\u1d0e\u1d0f\3\2\2\2\u1d0f\u1d0d\3\2\2\2\u1d0f\u1d10")
        buf.write("\3\2\2\2\u1d10\u1d12\3\2\2\2\u1d11\u1cfa\3\2\2\2\u1d11")
        buf.write("\u1d0d\3\2\2\2\u1d11\u1d12\3\2\2\2\u1d12\u1db3\3\2\2\2")
        buf.write("\u1d13\u1db0\7\u017c\2\2\u1d14\u1d16\7\u0337\2\2\u1d15")
        buf.write("\u1d14\3\2\2\2\u1d15\u1d16\3\2\2\2\u1d16\u1d17\3\2\2\2")
        buf.write("\u1d17\u1daf\7a\2\2\u1d18\u1d1a\7\u0337\2\2\u1d19\u1d18")
        buf.write("\3\2\2\2\u1d19\u1d1a\3\2\2\2\u1d1a\u1d1b\3\2\2\2\u1d1b")
        buf.write("\u1daf\7H\2\2\u1d1c\u1d1e\7\u0337\2\2\u1d1d\u1d1c\3\2")
        buf.write("\2\2\u1d1d\u1d1e\3\2\2\2\u1d1e\u1d1f\3\2\2\2\u1d1f\u1daf")
        buf.write("\tS\2\2\u1d20\u1d22\7\u0337\2\2\u1d21\u1d20\3\2\2\2\u1d21")
        buf.write("\u1d22\3\2\2\2\u1d22\u1d23\3\2\2\2\u1d23\u1d24\7\u01dd")
        buf.write("\2\2\u1d24\u1d27\7\u0323\2\2\u1d25\u1d28\7\u031f\2\2\u1d26")
        buf.write("\u1d28\5\u03b6\u01dc\2\u1d27\u1d25\3\2\2\2\u1d27\u1d26")
        buf.write("\3\2\2\2\u1d28\u1daf\3\2\2\2\u1d29\u1d2b\7\u0337\2\2\u1d2a")
        buf.write("\u1d29\3\2\2\2\u1d2a\u1d2b\3\2\2\2\u1d2b\u1d2c\3\2\2\2")
        buf.write("\u1d2c\u1d2d\7\u025e\2\2\u1d2d\u1d2e\7\u0323\2\2\u1d2e")
        buf.write("\u1daf\5\u03b6\u01dc\2\u1d2f\u1d31\7\u0337\2\2\u1d30\u1d2f")
        buf.write("\3\2\2\2\u1d30\u1d31\3\2\2\2\u1d31\u1d32\3\2\2\2\u1d32")
        buf.write("\u1daf\7\u01c7\2\2\u1d33\u1d35\7\u0337\2\2\u1d34\u1d33")
        buf.write("\3\2\2\2\u1d34\u1d35\3\2\2\2\u1d35\u1d36\3\2\2\2\u1d36")
        buf.write("\u1daf\7\u0085\2\2\u1d37\u1d39\7\u0337\2\2\u1d38\u1d37")
        buf.write("\3\2\2\2\u1d38\u1d39\3\2\2\2\u1d39\u1d46\3\2\2\2\u1d3a")
        buf.write("\u1d3b\7y\2\2\u1d3b\u1d3e\7\u0323\2\2\u1d3c\u1d3f\7\u031f")
        buf.write("\2\2\u1d3d\u1d3f\5\u03b6\u01dc\2\u1d3e\u1d3c\3\2\2\2\u1d3e")
        buf.write("\u1d3d\3\2\2\2\u1d3f\u1d47\3\2\2\2\u1d40\u1d41\7\u0119")
        buf.write("\2\2\u1d41\u1d44\7\u0323\2\2\u1d42\u1d45\7\u031b\2\2\u1d43")
        buf.write("\u1d45\5\u03b6\u01dc\2\u1d44\u1d42\3\2\2\2\u1d44\u1d43")
        buf.write("\3\2\2\2\u1d45\u1d47\3\2\2\2\u1d46\u1d3a\3\2\2\2\u1d46")
        buf.write("\u1d40\3\2\2\2\u1d47\u1daf\3\2\2\2\u1d48\u1d4a\7\u0337")
        buf.write("\2\2\u1d49\u1d48\3\2\2\2\u1d49\u1d4a\3\2\2\2\u1d4a\u1d4b")
        buf.write("\3\2\2\2\u1d4b\u1daf\tT\2\2\u1d4c\u1d4e\7\u0337\2\2\u1d4d")
        buf.write("\u1d4c\3\2\2\2\u1d4d\u1d4e\3\2\2\2\u1d4e\u1d4f\3\2\2\2")
        buf.write("\u1d4f\u1daf\tU\2\2\u1d50\u1d52\7\u0337\2\2\u1d51\u1d50")
        buf.write("\3\2\2\2\u1d51\u1d52\3\2\2\2\u1d52\u1d53\3\2\2\2\u1d53")
        buf.write("\u1daf\tV\2\2\u1d54\u1d56\7\u0337\2\2\u1d55\u1d54\3\2")
        buf.write("\2\2\u1d55\u1d56\3\2\2\2\u1d56\u1d57\3\2\2\2\u1d57\u1d58")
        buf.write("\7\u00c5\2\2\u1d58\u1d5b\7\u0323\2\2\u1d59\u1d5c\7\u031f")
        buf.write("\2\2\u1d5a\u1d5c\5\u03b6\u01dc\2\u1d5b\u1d59\3\2\2\2\u1d5b")
        buf.write("\u1d5a\3\2\2\2\u1d5c\u1daf\3\2\2\2\u1d5d\u1d5f\7\u0337")
        buf.write("\2\2\u1d5e\u1d5d\3\2\2\2\u1d5e\u1d5f\3\2\2\2\u1d5f\u1d60")
        buf.write("\3\2\2\2\u1d60\u1d61\7\u00c6\2\2\u1d61\u1d62\7\u0323\2")
        buf.write("\2\u1d62\u1daf\7\u031f\2\2\u1d63\u1d65\7\u0337\2\2\u1d64")
        buf.write("\u1d63\3\2\2\2\u1d64\u1d65\3\2\2\2\u1d65\u1d66\3\2\2\2")
        buf.write("\u1d66\u1d67\7\37\2\2\u1d67\u1d6a\7\u0323\2\2\u1d68\u1d6b")
        buf.write("\7\u031b\2\2\u1d69\u1d6b\5\u03b6\u01dc\2\u1d6a\u1d68\3")
        buf.write("\2\2\2\u1d6a\u1d69\3\2\2\2\u1d6b\u1daf\3\2\2\2\u1d6c\u1d6e")
        buf.write("\7\u0337\2\2\u1d6d\u1d6c\3\2\2\2\u1d6d\u1d6e\3\2\2\2\u1d6e")
        buf.write("\u1d6f\3\2\2\2\u1d6f\u1d70\7$\2\2\u1d70\u1d73\7\u0323")
        buf.write("\2\2\u1d71\u1d74\7\u031b\2\2\u1d72\u1d74\5\u03b6\u01dc")
        buf.write("\2\u1d73\u1d71\3\2\2\2\u1d73\u1d72\3\2\2\2\u1d74\u1daf")
        buf.write("\3\2\2\2\u1d75\u1d77\7\u0337\2\2\u1d76\u1d75\3\2\2\2\u1d76")
        buf.write("\u1d77\3\2\2\2\u1d77\u1d78\3\2\2\2\u1d78\u1d79\7\u00bf")
        buf.write("\2\2\u1d79\u1d7c\7\u0323\2\2\u1d7a\u1d7d\7\u031b\2\2\u1d7b")
        buf.write("\u1d7d\5\u03b6\u01dc\2\u1d7c\u1d7a\3\2\2\2\u1d7c\u1d7b")
        buf.write("\3\2\2\2\u1d7d\u1daf\3\2\2\2\u1d7e\u1d80\7\u0337\2\2\u1d7f")
        buf.write("\u1d7e\3\2\2\2\u1d7f\u1d80\3\2\2\2\u1d80\u1d81\3\2\2\2")
        buf.write("\u1d81\u1daf\tW\2\2\u1d82\u1d84\7\u0337\2\2\u1d83\u1d82")
        buf.write("\3\2\2\2\u1d83\u1d84\3\2\2\2\u1d84\u1d85\3\2\2\2\u1d85")
        buf.write("\u1daf\tX\2\2\u1d86\u1d88\7\u0337\2\2\u1d87\u1d86\3\2")
        buf.write("\2\2\u1d87\u1d88\3\2\2\2\u1d88\u1d89\3\2\2\2\u1d89\u1daf")
        buf.write("\7\u0115\2\2\u1d8a\u1d8c\7\u0337\2\2\u1d8b\u1d8a\3\2\2")
        buf.write("\2\u1d8b\u1d8c\3\2\2\2\u1d8c\u1d8d\3\2\2\2\u1d8d\u1d90")
        buf.write("\7\u014c\2\2\u1d8e\u1d8f\7\u0323\2\2\u1d8f\u1d91\7\u031b")
        buf.write("\2\2\u1d90\u1d8e\3\2\2\2\u1d90\u1d91\3\2\2\2\u1d91\u1daf")
        buf.write("\3\2\2\2\u1d92\u1d94\7\u0337\2\2\u1d93\u1d92\3\2\2\2\u1d93")
        buf.write("\u1d94\3\2\2\2\u1d94\u1d95\3\2\2\2\u1d95\u1daf\tY\2\2")
        buf.write("\u1d96\u1d98\7\u0337\2\2\u1d97\u1d96\3\2\2\2\u1d97\u1d98")
        buf.write("\3\2\2\2\u1d98\u1d99\3\2\2\2\u1d99\u1daf\tZ\2\2\u1d9a")
        buf.write("\u1d9c\7\u0337\2\2\u1d9b\u1d9a\3\2\2\2\u1d9b\u1d9c\3\2")
        buf.write("\2\2\u1d9c\u1d9d\3\2\2\2\u1d9d\u1d9e\7\u01ee\2\2\u1d9e")
        buf.write("\u1d9f\7\u0335\2\2\u1d9f\u1da0\7\u018d\2\2\u1da0\u1da1")
        buf.write("\7\u0323\2\2\u1da1\u1da2\t[\2\2\u1da2\u1da3\7\u0337\2")
        buf.write("\2\u1da3\u1da4\7\u0137\2\2\u1da4\u1da5\7+\2\2\u1da5\u1dac")
        buf.write("\7\u0323\2\2\u1da6\u1dad\5\u03b6\u01dc\2\u1da7\u1da8\7")
        buf.write("\u0137\2\2\u1da8\u1da9\7\22\2\2\u1da9\u1daa\7\u00ac\2")
        buf.write("\2\u1daa\u1dab\7\u0323\2\2\u1dab\u1dad\5\u03b6\u01dc\2")
        buf.write("\u1dac\u1da6\3\2\2\2\u1dac\u1da7\3\2\2\2\u1dad\u1daf\3")
        buf.write("\2\2\2\u1dae\u1d15\3\2\2\2\u1dae\u1d19\3\2\2\2\u1dae\u1d1d")
        buf.write("\3\2\2\2\u1dae\u1d21\3\2\2\2\u1dae\u1d2a\3\2\2\2\u1dae")
        buf.write("\u1d30\3\2\2\2\u1dae\u1d34\3\2\2\2\u1dae\u1d38\3\2\2\2")
        buf.write("\u1dae\u1d49\3\2\2\2\u1dae\u1d4d\3\2\2\2\u1dae\u1d51\3")
        buf.write("\2\2\2\u1dae\u1d55\3\2\2\2\u1dae\u1d5e\3\2\2\2\u1dae\u1d64")
        buf.write("\3\2\2\2\u1dae\u1d6d\3\2\2\2\u1dae\u1d76\3\2\2\2\u1dae")
        buf.write("\u1d7f\3\2\2\2\u1dae\u1d83\3\2\2\2\u1dae\u1d87\3\2\2\2")
        buf.write("\u1dae\u1d8b\3\2\2\2\u1dae\u1d93\3\2\2\2\u1dae\u1d97\3")
        buf.write("\2\2\2\u1dae\u1d9b\3\2\2\2\u1daf\u1db2\3\2\2\2\u1db0\u1dae")
        buf.write("\3\2\2\2\u1db0\u1db1\3\2\2\2\u1db1\u1db4\3\2\2\2\u1db2")
        buf.write("\u1db0\3\2\2\2\u1db3\u1d13\3\2\2\2\u1db3\u1db4\3\2\2\2")
        buf.write("\u1db4\u0267\3\2\2\2\u1db5\u1db6\7\32\2\2\u1db6\u1db7")
        buf.write("\7\u00bb\2\2\u1db7\u1dcf\5\u03b6\u01dc\2\u1db8\u1dbd\7")
        buf.write("\u015d\2\2\u1db9\u1dbb\7\u0337\2\2\u1dba\u1db9\3\2\2\2")
        buf.write("\u1dba\u1dbb\3\2\2\2\u1dbb\u1dbc\3\2\2\2\u1dbc\u1dbe\5")
        buf.write("\u03b6\u01dc\2\u1dbd\u1dba\3\2\2\2\u1dbe\u1dbf\3\2\2\2")
        buf.write("\u1dbf\u1dbd\3\2\2\2\u1dbf\u1dc0\3\2\2\2\u1dc0\u1dd0\3")
        buf.write("\2\2\2\u1dc1\u1dcb\7\u015d\2\2\u1dc2\u1dc4\7\u0337\2\2")
        buf.write("\u1dc3\u1dc2\3\2\2\2\u1dc3\u1dc4\3\2\2\2\u1dc4\u1dc5\3")
        buf.write("\2\2\2\u1dc5\u1dc6\tR\2\2\u1dc6\u1dc9\7\u0323\2\2\u1dc7")
        buf.write("\u1dca\7\u031f\2\2\u1dc8\u1dca\5\u03b6\u01dc\2\u1dc9\u1dc7")
        buf.write("\3\2\2\2\u1dc9\u1dc8\3\2\2\2\u1dca\u1dcc\3\2\2\2\u1dcb")
        buf.write("\u1dc3\3\2\2\2\u1dcc\u1dcd\3\2\2\2\u1dcd\u1dcb\3\2\2\2")
        buf.write("\u1dcd\u1dce\3\2\2\2\u1dce\u1dd0\3\2\2\2\u1dcf\u1db8\3")
        buf.write("\2\2\2\u1dcf\u1dc1\3\2\2\2\u1dd0\u1df2\3\2\2\2\u1dd1\u1dd2")
        buf.write("\7\u00cd\2\2\u1dd2\u1dd7\7\u015d\2\2\u1dd3\u1dd5\7\u0337")
        buf.write("\2\2\u1dd4\u1dd3\3\2\2\2\u1dd4\u1dd5\3\2\2\2\u1dd5\u1dd6")
        buf.write("\3\2\2\2\u1dd6\u1dd8\5\u03b6\u01dc\2\u1dd7\u1dd4\3\2\2")
        buf.write("\2\u1dd8\u1dd9\3\2\2\2\u1dd9\u1dd7\3\2\2\2\u1dd9\u1dda")
        buf.write("\3\2\2\2\u1dda\u1ddc\3\2\2\2\u1ddb\u1dd1\3\2\2\2\u1ddc")
        buf.write("\u1ddd\3\2\2\2\u1ddd\u1ddb\3\2\2\2\u1ddd\u1dde\3\2\2\2")
        buf.write("\u1dde\u1df3\3\2\2\2\u1ddf\u1de0\7\u00cd\2\2\u1de0\u1dea")
        buf.write("\7\u015d\2\2\u1de1\u1de3\7\u0337\2\2\u1de2\u1de1\3\2\2")
        buf.write("\2\u1de2\u1de3\3\2\2\2\u1de3\u1de4\3\2\2\2\u1de4\u1de5")
        buf.write("\tR\2\2\u1de5\u1de8\7\u0323\2\2\u1de6\u1de9\7\u031f\2")
        buf.write("\2\u1de7\u1de9\5\u03b6\u01dc\2\u1de8\u1de6\3\2\2\2\u1de8")
        buf.write("\u1de7\3\2\2\2\u1de9\u1deb\3\2\2\2\u1dea\u1de2\3\2\2\2")
        buf.write("\u1deb\u1dec\3\2\2\2\u1dec\u1dea\3\2\2\2\u1dec\u1ded\3")
        buf.write("\2\2\2\u1ded\u1def\3\2\2\2\u1dee\u1ddf\3\2\2\2\u1def\u1df0")
        buf.write("\3\2\2\2\u1df0\u1dee\3\2\2\2\u1df0\u1df1\3\2\2\2\u1df1")
        buf.write("\u1df3\3\2\2\2\u1df2\u1ddb\3\2\2\2\u1df2\u1dee\3\2\2\2")
        buf.write("\u1df2\u1df3\3\2\2\2\u1df3\u1ea1\3\2\2\2\u1df4\u1e9e\7")
        buf.write("\u017c\2\2\u1df5\u1df7\7\u0337\2\2\u1df6\u1df5\3\2\2\2")
        buf.write("\u1df6\u1df7\3\2\2\2\u1df7\u1df8\3\2\2\2\u1df8\u1e9d\7")
        buf.write("a\2\2\u1df9\u1dfb\7\u0337\2\2\u1dfa\u1df9\3\2\2\2\u1dfa")
        buf.write("\u1dfb\3\2\2\2\u1dfb\u1dfc\3\2\2\2\u1dfc\u1e9d\7H\2\2")
        buf.write("\u1dfd\u1dff\7\u0337\2\2\u1dfe\u1dfd\3\2\2\2\u1dfe\u1dff")
        buf.write("\3\2\2\2\u1dff\u1e00\3\2\2\2\u1e00\u1e9d\tS\2\2\u1e01")
        buf.write("\u1e03\7\u0337\2\2\u1e02\u1e01\3\2\2\2\u1e02\u1e03\3\2")
        buf.write("\2\2\u1e03\u1e04\3\2\2\2\u1e04\u1e05\7\u01dd\2\2\u1e05")
        buf.write("\u1e08\7\u0323\2\2\u1e06\u1e09\7\u031f\2\2\u1e07\u1e09")
        buf.write("\5\u03b6\u01dc\2\u1e08\u1e06\3\2\2\2\u1e08\u1e07\3\2\2")
        buf.write("\2\u1e09\u1e9d\3\2\2\2\u1e0a\u1e0c\7\u0337\2\2\u1e0b\u1e0a")
        buf.write("\3\2\2\2\u1e0b\u1e0c\3\2\2\2\u1e0c\u1e0d\3\2\2\2\u1e0d")
        buf.write("\u1e0e\7\u025e\2\2\u1e0e\u1e0f\7\u0323\2\2\u1e0f\u1e9d")
        buf.write("\5\u03b6\u01dc\2\u1e10\u1e12\7\u0337\2\2\u1e11\u1e10\3")
        buf.write("\2\2\2\u1e11\u1e12\3\2\2\2\u1e12\u1e13\3\2\2\2\u1e13\u1e9d")
        buf.write("\7\u01c7\2\2\u1e14\u1e16\7\u0337\2\2\u1e15\u1e14\3\2\2")
        buf.write("\2\u1e15\u1e16\3\2\2\2\u1e16\u1e17\3\2\2\2\u1e17\u1e9d")
        buf.write("\7\u0085\2\2\u1e18\u1e1a\7\u0337\2\2\u1e19\u1e18\3\2\2")
        buf.write("\2\u1e19\u1e1a\3\2\2\2\u1e1a\u1e27\3\2\2\2\u1e1b\u1e1c")
        buf.write("\7y\2\2\u1e1c\u1e1f\7\u0323\2\2\u1e1d\u1e20\7\u031f\2")
        buf.write("\2\u1e1e\u1e20\5\u03b6\u01dc\2\u1e1f\u1e1d\3\2\2\2\u1e1f")
        buf.write("\u1e1e\3\2\2\2\u1e20\u1e28\3\2\2\2\u1e21\u1e22\7\u0119")
        buf.write("\2\2\u1e22\u1e25\7\u0323\2\2\u1e23\u1e26\7\u031b\2\2\u1e24")
        buf.write("\u1e26\5\u03b6\u01dc\2\u1e25\u1e23\3\2\2\2\u1e25\u1e24")
        buf.write("\3\2\2\2\u1e26\u1e28\3\2\2\2\u1e27\u1e1b\3\2\2\2\u1e27")
        buf.write("\u1e21\3\2\2\2\u1e28\u1e9d\3\2\2\2\u1e29\u1e2b\7\u0337")
        buf.write("\2\2\u1e2a\u1e29\3\2\2\2\u1e2a\u1e2b\3\2\2\2\u1e2b\u1e2c")
        buf.write("\3\2\2\2\u1e2c\u1e9d\tT\2\2\u1e2d\u1e2f\7\u0337\2\2\u1e2e")
        buf.write("\u1e2d\3\2\2\2\u1e2e\u1e2f\3\2\2\2\u1e2f\u1e30\3\2\2\2")
        buf.write("\u1e30\u1e9d\tU\2\2\u1e31\u1e33\7\u0337\2\2\u1e32\u1e31")
        buf.write("\3\2\2\2\u1e32\u1e33\3\2\2\2\u1e33\u1e34\3\2\2\2\u1e34")
        buf.write("\u1e9d\tV\2\2\u1e35\u1e37\7\u0337\2\2\u1e36\u1e35\3\2")
        buf.write("\2\2\u1e36\u1e37\3\2\2\2\u1e37\u1e38\3\2\2\2\u1e38\u1e39")
        buf.write("\7\u00c5\2\2\u1e39\u1e3c\7\u0323\2\2\u1e3a\u1e3d\7\u031f")
        buf.write("\2\2\u1e3b\u1e3d\5\u03b6\u01dc\2\u1e3c\u1e3a\3\2\2\2\u1e3c")
        buf.write("\u1e3b\3\2\2\2\u1e3d\u1e9d\3\2\2\2\u1e3e\u1e40\7\u0337")
        buf.write("\2\2\u1e3f\u1e3e\3\2\2\2\u1e3f\u1e40\3\2\2\2\u1e40\u1e41")
        buf.write("\3\2\2\2\u1e41\u1e42\7\u00c6\2\2\u1e42\u1e43\7\u0323\2")
        buf.write("\2\u1e43\u1e9d\7\u031f\2\2\u1e44\u1e46\7\u0337\2\2\u1e45")
        buf.write("\u1e44\3\2\2\2\u1e45\u1e46\3\2\2\2\u1e46\u1e47\3\2\2\2")
        buf.write("\u1e47\u1e48\7\37\2\2\u1e48\u1e4b\7\u0323\2\2\u1e49\u1e4c")
        buf.write("\7\u031b\2\2\u1e4a\u1e4c\5\u03b6\u01dc\2\u1e4b\u1e49\3")
        buf.write("\2\2\2\u1e4b\u1e4a\3\2\2\2\u1e4c\u1e9d\3\2\2\2\u1e4d\u1e4f")
        buf.write("\7\u0337\2\2\u1e4e\u1e4d\3\2\2\2\u1e4e\u1e4f\3\2\2\2\u1e4f")
        buf.write("\u1e50\3\2\2\2\u1e50\u1e51\7$\2\2\u1e51\u1e54\7\u0323")
        buf.write("\2\2\u1e52\u1e55\7\u031b\2\2\u1e53\u1e55\5\u03b6\u01dc")
        buf.write("\2\u1e54\u1e52\3\2\2\2\u1e54\u1e53\3\2\2\2\u1e55\u1e9d")
        buf.write("\3\2\2\2\u1e56\u1e58\7\u0337\2\2\u1e57\u1e56\3\2\2\2\u1e57")
        buf.write("\u1e58\3\2\2\2\u1e58\u1e59\3\2\2\2\u1e59\u1e5a\7\u00bf")
        buf.write("\2\2\u1e5a\u1e5d\7\u0323\2\2\u1e5b\u1e5e\7\u031b\2\2\u1e5c")
        buf.write("\u1e5e\5\u03b6\u01dc\2\u1e5d\u1e5b\3\2\2\2\u1e5d\u1e5c")
        buf.write("\3\2\2\2\u1e5e\u1e9d\3\2\2\2\u1e5f\u1e61\7\u0337\2\2\u1e60")
        buf.write("\u1e5f\3\2\2\2\u1e60\u1e61\3\2\2\2\u1e61\u1e62\3\2\2\2")
        buf.write("\u1e62\u1e9d\tW\2\2\u1e63\u1e65\7\u0337\2\2\u1e64\u1e63")
        buf.write("\3\2\2\2\u1e64\u1e65\3\2\2\2\u1e65\u1e66\3\2\2\2\u1e66")
        buf.write("\u1e9d\tX\2\2\u1e67\u1e69\7\u0337\2\2\u1e68\u1e67\3\2")
        buf.write("\2\2\u1e68\u1e69\3\2\2\2\u1e69\u1e6a\3\2\2\2\u1e6a\u1e9d")
        buf.write("\7\u0115\2\2\u1e6b\u1e6d\7\u0337\2\2\u1e6c\u1e6b\3\2\2")
        buf.write("\2\u1e6c\u1e6d\3\2\2\2\u1e6d\u1e6e\3\2\2\2\u1e6e\u1e71")
        buf.write("\7\u014c\2\2\u1e6f\u1e70\7\u0323\2\2\u1e70\u1e72\7\u031b")
        buf.write("\2\2\u1e71\u1e6f\3\2\2\2\u1e71\u1e72\3\2\2\2\u1e72\u1e9d")
        buf.write("\3\2\2\2\u1e73\u1e75\7\u0337\2\2\u1e74\u1e73\3\2\2\2\u1e74")
        buf.write("\u1e75\3\2\2\2\u1e75\u1e76\3\2\2\2\u1e76\u1e9d\tY\2\2")
        buf.write("\u1e77\u1e79\7\u0337\2\2\u1e78\u1e77\3\2\2\2\u1e78\u1e79")
        buf.write("\3\2\2\2\u1e79\u1e7a\3\2\2\2\u1e7a\u1e9d\tZ\2\2\u1e7b")
        buf.write("\u1e7d\7\u0337\2\2\u1e7c\u1e7b\3\2\2\2\u1e7c\u1e7d\3\2")
        buf.write("\2\2\u1e7d\u1e82\3\2\2\2\u1e7e\u1e83\7\u026c\2\2\u1e7f")
        buf.write("\u1e80\7\u02da\2\2\u1e80\u1e81\7\u0323\2\2\u1e81\u1e83")
        buf.write("\7\u031f\2\2\u1e82\u1e7e\3\2\2\2\u1e82\u1e7f\3\2\2\2\u1e83")
        buf.write("\u1e9d\3\2\2\2\u1e84\u1e86\7\u0337\2\2\u1e85\u1e84\3\2")
        buf.write("\2\2\u1e85\u1e86\3\2\2\2\u1e86\u1e87\3\2\2\2\u1e87\u1e9d")
        buf.write("\7\u0265\2\2\u1e88\u1e8a\7\u0337\2\2\u1e89\u1e88\3\2\2")
        buf.write("\2\u1e89\u1e8a\3\2\2\2\u1e8a\u1e8b\3\2\2\2\u1e8b\u1e8c")
        buf.write("\7\u01ee\2\2\u1e8c\u1e8d\7\u0335\2\2\u1e8d\u1e8e\7\u018d")
        buf.write("\2\2\u1e8e\u1e8f\7\u0323\2\2\u1e8f\u1e90\t[\2\2\u1e90")
        buf.write("\u1e91\7\u0337\2\2\u1e91\u1e92\7\u0137\2\2\u1e92\u1e93")
        buf.write("\7+\2\2\u1e93\u1e9a\7\u0323\2\2\u1e94\u1e9b\5\u03b6\u01dc")
        buf.write("\2\u1e95\u1e96\7\u0137\2\2\u1e96\u1e97\7\22\2\2\u1e97")
        buf.write("\u1e98\7\u00ac\2\2\u1e98\u1e99\7\u0323\2\2\u1e99\u1e9b")
        buf.write("\5\u03b6\u01dc\2\u1e9a\u1e94\3\2\2\2\u1e9a\u1e95\3\2\2")
        buf.write("\2\u1e9b\u1e9d\3\2\2\2\u1e9c\u1df6\3\2\2\2\u1e9c\u1dfa")
        buf.write("\3\2\2\2\u1e9c\u1dfe\3\2\2\2\u1e9c\u1e02\3\2\2\2\u1e9c")
        buf.write("\u1e0b\3\2\2\2\u1e9c\u1e11\3\2\2\2\u1e9c\u1e15\3\2\2\2")
        buf.write("\u1e9c\u1e19\3\2\2\2\u1e9c\u1e2a\3\2\2\2\u1e9c\u1e2e\3")
        buf.write("\2\2\2\u1e9c\u1e32\3\2\2\2\u1e9c\u1e36\3\2\2\2\u1e9c\u1e3f")
        buf.write("\3\2\2\2\u1e9c\u1e45\3\2\2\2\u1e9c\u1e4e\3\2\2\2\u1e9c")
        buf.write("\u1e57\3\2\2\2\u1e9c\u1e60\3\2\2\2\u1e9c\u1e64\3\2\2\2")
        buf.write("\u1e9c\u1e68\3\2\2\2\u1e9c\u1e6c\3\2\2\2\u1e9c\u1e74\3")
        buf.write("\2\2\2\u1e9c\u1e78\3\2\2\2\u1e9c\u1e7c\3\2\2\2\u1e9c\u1e85")
        buf.write("\3\2\2\2\u1e9c\u1e89\3\2\2\2\u1e9d\u1ea0\3\2\2\2\u1e9e")
        buf.write("\u1e9c\3\2\2\2\u1e9e\u1e9f\3\2\2\2\u1e9f\u1ea2\3\2\2\2")
        buf.write("\u1ea0\u1e9e\3\2\2\2\u1ea1\u1df4\3\2\2\2\u1ea1\u1ea2\3")
        buf.write("\2\2\2\u1ea2\u0269\3\2\2\2\u1ea3\u1ea4\7\32\2\2\u1ea4")
        buf.write("\u1ea5\7+\2\2\u1ea5\u1ea6\5\u03b6\u01dc\2\u1ea6\u1ea7")
        buf.write("\7\u015d\2\2\u1ea7\u1ea8\7\u0082\2\2\u1ea8\u1ea9\7\u0323")
        buf.write("\2\2\u1ea9\u1ec9\7\u031f\2\2\u1eaa\u1eab\7\u017c\2\2\u1eab")
        buf.write("\u1eac\7\u028c\2\2\u1eac\u1ead\7\u00ac\2\2\u1ead\u1ec4")
        buf.write("\7\u0335\2\2\u1eae\u1eb0\7\u0337\2\2\u1eaf\u1eae\3\2\2")
        buf.write("\2\u1eaf\u1eb0\3\2\2\2\u1eb0\u1eb1\3\2\2\2\u1eb1\u1eb2")
        buf.write("\7\u0082\2\2\u1eb2\u1eb3\7\u0323\2\2\u1eb3\u1ec5\7\u031f")
        buf.write("\2\2\u1eb4\u1eb6\7\u0337\2\2\u1eb5\u1eb4\3\2\2\2\u1eb5")
        buf.write("\u1eb6\3\2\2\2\u1eb6\u1eb7\3\2\2\2\u1eb7\u1eb8\7\u01ee")
        buf.write("\2\2\u1eb8\u1eb9\7&\2\2\u1eb9\u1eba\7\u00f4\2\2\u1eba")
        buf.write("\u1ebb\7\u0323\2\2\u1ebb\u1ec5\7\u031f\2\2\u1ebc\u1ebe")
        buf.write("\7\u0337\2\2\u1ebd\u1ebc\3\2\2\2\u1ebd\u1ebe\3\2\2\2\u1ebe")
        buf.write("\u1ebf\3\2\2\2\u1ebf\u1ec0\7\u01d3\2\2\u1ec0\u1ec1\7&")
        buf.write("\2\2\u1ec1\u1ec2\7\u00f4\2\2\u1ec2\u1ec3\7\u0323\2\2\u1ec3")
        buf.write("\u1ec5\7\u031f\2\2\u1ec4\u1eaf\3\2\2\2\u1ec4\u1eb5\3\2")
        buf.write("\2\2\u1ec4\u1ebd\3\2\2\2\u1ec5\u1ec6\3\2\2\2\u1ec6\u1ec4")
        buf.write("\3\2\2\2\u1ec6\u1ec7\3\2\2\2\u1ec7\u1ec8\3\2\2\2\u1ec8")
        buf.write("\u1eca\7\u0336\2\2\u1ec9\u1eaa\3\2\2\2\u1ec9\u1eca\3\2")
        buf.write("\2\2\u1eca\u026b\3\2\2\2\u1ecb\u1ecc\7\32\2\2\u1ecc\u1ecd")
        buf.write("\7\u00bd\2\2\u1ecd\u1ece\7\u00ac\2\2\u1ece\u1ecf\7\u015d")
        buf.write("\2\2\u1ecf\u1ed0\7\u0082\2\2\u1ed0\u1ed1\7\u0323\2\2\u1ed1")
        buf.write("\u1ed2\7\u031f\2\2\u1ed2\u1ed3\7\u01ee\2\2\u1ed3\u1ed4")
        buf.write("\7&\2\2\u1ed4\u1ed5\7\u00f4\2\2\u1ed5\u1ed6\7\u0323\2")
        buf.write("\2\u1ed6\u1ed7\7\u031f\2\2\u1ed7\u026d\3\2\2\2\u1ed8\u1ed9")
        buf.write("\7\32\2\2\u1ed9\u1eda\7\u0138\2\2\u1eda\u1edb\7\u00bd")
        buf.write("\2\2\u1edb\u1edc\7\u00ac\2\2\u1edc\u1edd\7\u015d\2\2\u1edd")
        buf.write("\u1ede\7\u0082\2\2\u1ede\u1edf\7\u0323\2\2\u1edf\u1ee0")
        buf.write("\7\u031f\2\2\u1ee0\u1ee1\7\u01ee\2\2\u1ee1\u1ee2\7&\2")
        buf.write("\2\u1ee2\u1ee3\7\u00f4\2\2\u1ee3\u1ee4\7\u0323\2\2\u1ee4")
        buf.write("\u1ee5\7\u031f\2\2\u1ee5\u026f\3\2\2\2\u1ee6\u1ee7\7w")
        buf.write("\2\2\u1ee7\u1ee8\5\u0272\u013a\2\u1ee8\u0271\3\2\2\2\u1ee9")
        buf.write("\u1eea\7\u031a\2\2\u1eea\u1eec\7\u0323\2\2\u1eeb\u1ee9")
        buf.write("\3\2\2\2\u1eeb\u1eec\3\2\2\2\u1eec\u1eef\3\2\2\2\u1eed")
        buf.write("\u1ef0\5\u0386\u01c4\2\u1eee\u1ef0\5\u02cc\u0167\2\u1eef")
        buf.write("\u1eed\3\2\2\2\u1eef\u1eee\3\2\2\2\u1ef0\u1ef9\3\2\2\2")
        buf.write("\u1ef1\u1ef6\5\u0274\u013b\2\u1ef2\u1ef3\7\u0337\2\2\u1ef3")
        buf.write("\u1ef5\5\u0274\u013b\2\u1ef4\u1ef2\3\2\2\2\u1ef5\u1ef8")
        buf.write("\3\2\2\2\u1ef6\u1ef4\3\2\2\2\u1ef6\u1ef7\3\2\2\2\u1ef7")
        buf.write("\u1efa\3\2\2\2\u1ef8\u1ef6\3\2\2\2\u1ef9\u1ef1\3\2\2\2")
        buf.write("\u1ef9\u1efa\3\2\2\2\u1efa\u1efc\3\2\2\2\u1efb\u1efd\7")
        buf.write("\u0338\2\2\u1efc\u1efb\3\2\2\2\u1efc\u1efd\3\2\2\2\u1efd")
        buf.write("\u1f14\3\2\2\2\u1efe\u1eff\7\u0335\2\2\u1eff\u1f04\5\u0276")
        buf.write("\u013c\2\u1f00\u1f01\7\u033d\2\2\u1f01\u1f03\5\u0276\u013c")
        buf.write("\2\u1f02\u1f00\3\2\2\2\u1f03\u1f06\3\2\2\2\u1f04\u1f02")
        buf.write("\3\2\2\2\u1f04\u1f05\3\2\2\2\u1f05\u1f07\3\2\2\2\u1f06")
        buf.write("\u1f04\3\2\2\2\u1f07\u1f0e\7\u0336\2\2\u1f08\u1f0a\7\20")
        buf.write("\2\2\u1f09\u1f08\3\2\2\2\u1f09\u1f0a\3\2\2\2\u1f0a\u1f0b")
        buf.write("\3\2\2\2\u1f0b\u1f0c\t\\\2\2\u1f0c\u1f0d\7\u0323\2\2\u1f0d")
        buf.write("\u1f0f\7\u031f\2\2\u1f0e\u1f09\3\2\2\2\u1f0e\u1f0f\3\2")
        buf.write("\2\2\u1f0f\u1f11\3\2\2\2\u1f10\u1f12\7\u0338\2\2\u1f11")
        buf.write("\u1f10\3\2\2\2\u1f11\u1f12\3\2\2\2\u1f12\u1f14\3\2\2\2")
        buf.write("\u1f13\u1eeb\3\2\2\2\u1f13\u1efe\3\2\2\2\u1f14\u0273\3")
        buf.write("\2\2\2\u1f15\u1f16\7\u031a\2\2\u1f16\u1f18\7\u0323\2\2")
        buf.write("\u1f17\u1f15\3\2\2\2\u1f17\u1f18\3\2\2\2\u1f18\u1f22\3")
        buf.write("\2\2\2\u1f19\u1f1c\5\u02ca\u0166\2\u1f1a\u1f1c\5\u03b6")
        buf.write("\u01dc\2\u1f1b\u1f19\3\2\2\2\u1f1b\u1f1a\3\2\2\2\u1f1c")
        buf.write("\u1f1e\3\2\2\2\u1f1d\u1f1f\t]\2\2\u1f1e\u1f1d\3\2\2\2")
        buf.write("\u1f1e\u1f1f\3\2\2\2\u1f1f\u1f23\3\2\2\2\u1f20\u1f23\7")
        buf.write("Z\2\2\u1f21\u1f23\7\u00df\2\2\u1f22\u1f1b\3\2\2\2\u1f22")
        buf.write("\u1f20\3\2\2\2\u1f22\u1f21\3\2\2\2\u1f23\u0275\3\2\2\2")
        buf.write("\u1f24\u1f25\t\3\2\2\u1f25\u0277\3\2\2\2\u1f26\u1f28\5")
        buf.write("\u02a2\u0152\2\u1f27\u1f29\7\u0338\2\2\u1f28\u1f27\3\2")
        buf.write("\2\2\u1f28\u1f29\3\2\2\2\u1f29\u1f62\3\2\2\2\u1f2a\u1f36")
        buf.write("\7\u0092\2\2\u1f2b\u1f2d\7\6\2\2\u1f2c\u1f2e\7\u028e\2")
        buf.write("\2\u1f2d\u1f2c\3\2\2\2\u1f2d\u1f2e\3\2\2\2\u1f2e\u1f37")
        buf.write("\3\2\2\2\u1f2f\u1f34\5\u0292\u014a\2\u1f30\u1f31\7\u0335")
        buf.write("\2\2\u1f31\u1f32\5\u038e\u01c8\2\u1f32\u1f33\7\u0336\2")
        buf.write("\2\u1f33\u1f35\3\2\2\2\u1f34\u1f30\3\2\2\2\u1f34\u1f35")
        buf.write("\3\2\2\2\u1f35\u1f37\3\2\2\2\u1f36\u1f2b\3\2\2\2\u1f36")
        buf.write("\u1f2f\3\2\2\2\u1f37\u1f3a\3\2\2\2\u1f38\u1f39\7\u00e5")
        buf.write("\2\2\u1f39\u1f3b\5\u0382\u01c2\2\u1f3a\u1f38\3\2\2\2\u1f3a")
        buf.write("\u1f3b\3\2\2\2\u1f3b\u1f3c\3\2\2\2\u1f3c\u1f3d\7\u015d")
        buf.write("\2\2\u1f3d\u1f42\5\u03b6\u01dc\2\u1f3e\u1f3f\7\u0337\2")
        buf.write("\2\u1f3f\u1f41\5\u03b6\u01dc\2\u1f40\u1f3e\3\2\2\2\u1f41")
        buf.write("\u1f44\3\2\2\2\u1f42\u1f40\3\2\2\2\u1f42\u1f43\3\2\2\2")
        buf.write("\u1f43\u1f48\3\2\2\2\u1f44\u1f42\3\2\2\2\u1f45\u1f46\7")
        buf.write("\u017c\2\2\u1f46\u1f47\7\u0092\2\2\u1f47\u1f49\7\u00ec")
        buf.write("\2\2\u1f48\u1f45\3\2\2\2\u1f48\u1f49\3\2\2\2\u1f49\u1f4c")
        buf.write("\3\2\2\2\u1f4a\u1f4b\7\20\2\2\u1f4b\u1f4d\5\u03b6\u01dc")
        buf.write("\2\u1f4c\u1f4a\3\2\2\2\u1f4c\u1f4d\3\2\2\2\u1f4d\u1f4f")
        buf.write("\3\2\2\2\u1f4e\u1f50\7\u0338\2\2\u1f4f\u1f4e\3\2\2\2\u1f4f")
        buf.write("\u1f50\3\2\2\2\u1f50\u1f62\3\2\2\2\u1f51\u1f58\7\u011c")
        buf.write("\2\2\u1f52\u1f53\7\u0335\2\2\u1f53\u1f54\7\u017c\2\2\u1f54")
        buf.write("\u1f55\7\u01c0\2\2\u1f55\u1f56\7\u0323\2\2\u1f56\u1f57")
        buf.write("\7\u031a\2\2\u1f57\u1f59\7\u0336\2\2\u1f58\u1f52\3\2\2")
        buf.write("\2\u1f58\u1f59\3\2\2\2\u1f59\u1f5b\3\2\2\2\u1f5a\u1f5c")
        buf.write("\7\u0338\2\2\u1f5b\u1f5a\3\2\2\2\u1f5b\u1f5c\3\2\2\2\u1f5c")
        buf.write("\u1f62\3\2\2\2\u1f5d\u1f62\5\u0284\u0143\2\u1f5e\u1f62")
        buf.write("\5\u0286\u0144\2\u1f5f\u1f62\5\u0288\u0145\2\u1f60\u1f62")
        buf.write("\5\u027a\u013e\2\u1f61\u1f26\3\2\2\2\u1f61\u1f2a\3\2\2")
        buf.write("\2\u1f61\u1f51\3\2\2\2\u1f61\u1f5d\3\2\2\2\u1f61\u1f5e")
        buf.write("\3\2\2\2\u1f61\u1f5f\3\2\2\2\u1f61\u1f60\3\2\2\2\u1f62")
        buf.write("\u0279\3\2\2\2\u1f63\u1f64\7I\2\2\u1f64\u1f65\7+\2\2\u1f65")
        buf.write("\u1f68\5\u03b6\u01dc\2\u1f66\u1f67\7\24\2\2\u1f67\u1f69")
        buf.write("\5\u03b6\u01dc\2\u1f68\u1f66\3\2\2\2\u1f68\u1f69\3\2\2")
        buf.write("\2\u1f69\u1f6d\3\2\2\2\u1f6a\u1f6b\7\u008c\2\2\u1f6b\u1f6e")
        buf.write("\5\u027c\u013f\2\u1f6c\u1f6e\5\u0280\u0141\2\u1f6d\u1f6a")
        buf.write("\3\2\2\2\u1f6d\u1f6c\3\2\2\2\u1f6e\u1f75\3\2\2\2\u1f6f")
        buf.write("\u1f70\7\u0185\2\2\u1f70\u1f71\7\u0086\2\2\u1f71\u1f72")
        buf.write("\7\34\2\2\u1f72\u1f73\7\u01e0\2\2\u1f73\u1f74\7\u0323")
        buf.write("\2\2\u1f74\u1f76\t\t\2\2\u1f75\u1f6f\3\2\2\2\u1f75\u1f76")
        buf.write("\3\2\2\2\u1f76\u027b\3\2\2\2\u1f77\u1f78\7\u0198\2\2\u1f78")
        buf.write("\u1f89\5\u03b6\u01dc\2\u1f79\u1f7b\7\u01f2\2\2\u1f7a\u1f79")
        buf.write("\3\2\2\2\u1f7a\u1f7b\3\2\2\2\u1f7b\u1f7c\3\2\2\2\u1f7c")
        buf.write("\u1f7d\7\u0082\2\2\u1f7d\u1f7e\7\u0323\2\2\u1f7e\u1f86")
        buf.write("\7\u031f\2\2\u1f7f\u1f80\7\u017c\2\2\u1f80\u1f81\7\u028c")
        buf.write("\2\2\u1f81\u1f82\7\u00ac\2\2\u1f82\u1f83\7\u0335\2\2\u1f83")
        buf.write("\u1f84\5\u027e\u0140\2\u1f84\u1f85\7\u0336\2\2\u1f85\u1f87")
        buf.write("\3\2\2\2\u1f86\u1f7f\3\2\2\2\u1f86\u1f87\3\2\2\2\u1f87")
        buf.write("\u1f89\3\2\2\2\u1f88\u1f77\3\2\2\2\u1f88\u1f7a\3\2\2\2")
        buf.write("\u1f89\u027d\3\2\2\2\u1f8a\u1f8b\t^\2\2\u1f8b\u1f8c\7")
        buf.write("\u0323\2\2\u1f8c\u1f93\7\u031f\2\2\u1f8d\u1f8e\7\u0337")
        buf.write("\2\2\u1f8e\u1f8f\t_\2\2\u1f8f\u1f90\7&\2\2\u1f90\u1f91")
        buf.write("\7\u00f4\2\2\u1f91\u1f92\7\u0323\2\2\u1f92\u1f94\7\u031f")
        buf.write("\2\2\u1f93\u1f8d\3\2\2\2\u1f93\u1f94\3\2\2\2\u1f94\u027f")
        buf.write("\3\2\2\2\u1f95\u1f96\7\u01ee\2\2\u1f96\u1f97\7&\2\2\u1f97")
        buf.write("\u1f98\7\u00f4\2\2\u1f98\u1f99\7\u0323\2\2\u1f99\u1f9b")
        buf.write("\7\u031f\2\2\u1f9a\u1f95\3\2\2\2\u1f9a\u1f9b\3\2\2\2\u1f9b")
        buf.write("\u1f9c\3\2\2\2\u1f9c\u1f9d\7\u017c\2\2\u1f9d\u1f9e\7\u02e3")
        buf.write("\2\2\u1f9e\u1f9f\7\u0323\2\2\u1f9f\u1fa4\7\u031f\2\2\u1fa0")
        buf.write("\u1fa1\7\u0337\2\2\u1fa1\u1fa3\5\u0282\u0142\2\u1fa2\u1fa0")
        buf.write("\3\2\2\2\u1fa3\u1fa6\3\2\2\2\u1fa4\u1fa2\3\2\2\2\u1fa4")
        buf.write("\u1fa5\3\2\2\2\u1fa5\u0281\3\2\2\2\u1fa6\u1fa4\3\2\2\2")
        buf.write("\u1fa7\u1fa8\t`\2\2\u1fa8\u1fa9\7\u0323\2\2\u1fa9\u1faa")
        buf.write("\7\u031f\2\2\u1faa\u0283\3\2\2\2\u1fab\u1fac\7\u00e7\2")
        buf.write("\2\u1fac\u1fad\7\u02e6\2\2\u1fad\u1fae\7\u00ac\2\2\u1fae")
        buf.write("\u1faf\5\u03b6\u01dc\2\u1faf\u1fb0\7\u01d3\2\2\u1fb0\u1fb1")
        buf.write("\7&\2\2\u1fb1\u1fb2\5\u0290\u0149\2\u1fb2\u1fbc\3\2\2")
        buf.write("\2\u1fb3\u1fb4\7\u00e7\2\2\u1fb4\u1fb5\7\u00bd\2\2\u1fb5")
        buf.write("\u1fb6\7\u00ac\2\2\u1fb6\u1fb7\7\u01d3\2\2\u1fb7\u1fb8")
        buf.write("\7&\2\2\u1fb8\u1fb9\7\u00f4\2\2\u1fb9\u1fba\7\u0323\2")
        buf.write("\2\u1fba\u1fbc\7\u031f\2\2\u1fbb\u1fab\3\2\2\2\u1fbb\u1fb3")
        buf.write("\3\2\2\2\u1fbc\u0285\3\2\2\2\u1fbd\u1fbe\7\63\2\2\u1fbe")
        buf.write("\u1fbf\7\u02e6\2\2\u1fbf\u1fc0\7\u00ac\2\2\u1fc0\u1fc9")
        buf.write("\5\u03b6\u01dc\2\u1fc1\u1fc2\7\63\2\2\u1fc2\u1fc3\7\6")
        buf.write("\2\2\u1fc3\u1fc4\7\u02e6\2\2\u1fc4\u1fc9\7\u022d\2\2\u1fc5")
        buf.write("\u1fc6\7\63\2\2\u1fc6\u1fc7\7\u00bd\2\2\u1fc7\u1fc9\7")
        buf.write("\u00ac\2\2\u1fc8\u1fbd\3\2\2\2\u1fc8\u1fc1\3\2\2\2\u1fc8")
        buf.write("\u1fc5\3\2\2\2\u1fc9\u0287\3\2\2\2\u1fca\u1fcb\7I\2\2")
        buf.write("\u1fcb\u1fcc\7\u00bd\2\2\u1fcc\u1fcd\7\u00ac\2\2\u1fcd")
        buf.write("\u1fce\7\u01ee\2\2\u1fce\u1fcf\7&\2\2\u1fcf\u1fd0\7\u00f4")
        buf.write("\2\2\u1fd0\u1fd1\7\u0323\2\2\u1fd1\u1fee\7\u031f\2\2\u1fd2")
        buf.write("\u1fd3\7I\2\2\u1fd3\u1fd4\7\u02e6\2\2\u1fd4\u1fd5\7\u00ac")
        buf.write("\2\2\u1fd5\u1fd8\5\u03b6\u01dc\2\u1fd6\u1fd7\7\24\2\2")
        buf.write("\u1fd7\u1fd9\5\u03b6\u01dc\2\u1fd8\u1fd6\3\2\2\2\u1fd8")
        buf.write("\u1fd9\3\2\2\2\u1fd9\u1fdd\3\2\2\2\u1fda\u1fdb\7\u008c")
        buf.write("\2\2\u1fdb\u1fdc\7\u0291\2\2\u1fdc\u1fde\5\u03b6\u01dc")
        buf.write("\2\u1fdd\u1fda\3\2\2\2\u1fdd\u1fde\3\2\2\2\u1fde\u1fdf")
        buf.write("\3\2\2\2\u1fdf\u1fe9\7\u017c\2\2\u1fe0\u1fe5\5\u028a\u0146")
        buf.write("\2\u1fe1\u1fe2\7\u01ee\2\2\u1fe2\u1fe3\7&\2\2\u1fe3\u1fe5")
        buf.write("\5\u028e\u0148\2\u1fe4\u1fe0\3\2\2\2\u1fe4\u1fe1\3\2\2")
        buf.write("\2\u1fe5\u1fe7\3\2\2\2\u1fe6\u1fe8\7\u0337\2\2\u1fe7\u1fe6")
        buf.write("\3\2\2\2\u1fe7\u1fe8\3\2\2\2\u1fe8\u1fea\3\2\2\2\u1fe9")
        buf.write("\u1fe4\3\2\2\2\u1fea\u1feb\3\2\2\2\u1feb\u1fe9\3\2\2\2")
        buf.write("\u1feb\u1fec\3\2\2\2\u1fec\u1fee\3\2\2\2\u1fed\u1fca\3")
        buf.write("\2\2\2\u1fed\u1fd2\3\2\2\2\u1fee\u0289\3\2\2\2\u1fef\u1ff0")
        buf.write("\7\u022c\2\2\u1ff0\u1ff1\7\u0323\2\2\u1ff1\u1fff\7\u031f")
        buf.write("\2\2\u1ff2\u1ff3\7\u018d\2\2\u1ff3\u1ff4\7\u0323\2\2\u1ff4")
        buf.write("\u1fff\5\u028c\u0147\2\u1ff5\u1ff6\7\u021a\2\2\u1ff6\u1ff7")
        buf.write("\7\u0323\2\2\u1ff7\u1fff\7\u031f\2\2\u1ff8\u1ff9\7\u0292")
        buf.write("\2\2\u1ff9\u1ffa\7\u0323\2\2\u1ffa\u1fff\7\u031f\2\2\u1ffb")
        buf.write("\u1ffc\7\u01c6\2\2\u1ffc\u1ffd\7\u0323\2\2\u1ffd\u1fff")
        buf.write("\t\f\2\2\u1ffe\u1fef\3\2\2\2\u1ffe\u1ff2\3\2\2\2\u1ffe")
        buf.write("\u1ff5\3\2\2\2\u1ffe\u1ff8\3\2\2\2\u1ffe\u1ffb\3\2\2\2")
        buf.write("\u1fff\u028b\3\2\2\2\u2000\u2001\t\63\2\2\u2001\u028d")
        buf.write("\3\2\2\2\u2002\u2003\7+\2\2\u2003\u200e\5\u03b6\u01dc")
        buf.write("\2\u2004\u2005\7\22\2\2\u2005\u2006\7\u00ac\2\2\u2006")
        buf.write("\u200e\5\u03b6\u01dc\2\u2007\u2008\7\u02e6\2\2\u2008\u2009")
        buf.write("\7\u00ac\2\2\u2009\u200e\5\u03b6\u01dc\2\u200a\u200b\7")
        buf.write("\u00f4\2\2\u200b\u200c\7\u0323\2\2\u200c\u200e\7\u031f")
        buf.write("\2\2\u200d\u2002\3\2\2\2\u200d\u2004\3\2\2\2\u200d\u2007")
        buf.write("\3\2\2\2\u200d\u200a\3\2\2\2\u200e\u028f\3\2\2\2\u200f")
        buf.write("\u2010\7+\2\2\u2010\u2015\5\u03b6\u01dc\2\u2011\u2012")
        buf.write("\7\u017c\2\2\u2012\u2013\7\u00f4\2\2\u2013\u2014\7\u0323")
        buf.write("\2\2\u2014\u2016\7\u031f\2\2\u2015\u2011\3\2\2\2\u2015")
        buf.write("\u2016\3\2\2\2\u2016\u2027\3\2\2\2\u2017\u2018\7\22\2")
        buf.write("\2\u2018\u2019\7\u00ac\2\2\u2019\u201e\5\u03b6\u01dc\2")
        buf.write("\u201a\u201b\7\u017c\2\2\u201b\u201c\7\u00f4\2\2\u201c")
        buf.write("\u201d\7\u0323\2\2\u201d\u201f\7\u031f\2\2\u201e\u201a")
        buf.write("\3\2\2\2\u201e\u201f\3\2\2\2\u201f\u2027\3\2\2\2\u2020")
        buf.write("\u2021\7\u02e6\2\2\u2021\u2022\7\u00ac\2\2\u2022\u2027")
        buf.write("\5\u03b6\u01dc\2\u2023\u2024\7\u00f4\2\2\u2024\u2025\7")
        buf.write("\u0323\2\2\u2025\u2027\7\u031f\2\2\u2026\u200f\3\2\2\2")
        buf.write("\u2026\u2017\3\2\2\2\u2026\u2020\3\2\2\2\u2026\u2023\3")
        buf.write("\2\2\2\u2027\u0291\3\2\2\2\u2028\u2043\7w\2\2\u2029\u202a")
        buf.write("\7\u0175\2\2\u202a\u2043\5\u03b6\u01dc\2\u202b\u202c\7")
        buf.write("\u02e9\2\2\u202c\u2043\5\u03b6\u01dc\2\u202d\u202f\7\u01bf")
        buf.write("\2\2\u202e\u2030\5\u03b6\u01dc\2\u202f\u202e\3\2\2\2\u202f")
        buf.write("\u2030\3\2\2\2\u2030\u2043\3\2\2\2\u2031\u2032\7I\2\2")
        buf.write("\u2032\u2043\ta\2\2\u2033\u2043\7\u02d2\2\2\u2034\u2043")
        buf.write("\7\u021d\2\2\u2035\u2043\7\u0132\2\2\u2036\u2043\7\u010e")
        buf.write("\2\2\u2037\u2043\7\u00a2\2\2\u2038\u2040\7\n\2\2\u2039")
        buf.write("\u203b\7\r\2\2\u203a\u2039\3\2\2\2\u203a\u203b\3\2\2\2")
        buf.write("\u203b\u203e\3\2\2\2\u203c\u203f\5\u03b6\u01dc\2\u203d")
        buf.write("\u203f\7U\2\2\u203e\u203c\3\2\2\2\u203e\u203d\3\2\2\2")
        buf.write("\u203f\u2041\3\2\2\2\u2040\u203a\3\2\2\2\u2040\u2041\3")
        buf.write("\2\2\2\u2041\u2043\3\2\2\2\u2042\u2028\3\2\2\2\u2042\u2029")
        buf.write("\3\2\2\2\u2042\u202b\3\2\2\2\u2042\u202d\3\2\2\2\u2042")
        buf.write("\u2031\3\2\2\2\u2042\u2033\3\2\2\2\u2042\u2034\3\2\2\2")
        buf.write("\u2042\u2035\3\2\2\2\u2042\u2036\3\2\2\2\u2042\u2037\3")
        buf.write("\2\2\2\u2042\u2038\3\2\2\2\u2043\u0293\3\2\2\2\u2044\u2045")
        buf.write("\7\u013d\2\2\u2045\u2048\7\u031a\2\2\u2046\u2047\7\u0330")
        buf.write("\2\2\u2047\u2049\5\u03b6\u01dc\2\u2048\u2046\3\2\2\2\u2048")
        buf.write("\u2049\3\2\2\2\u2049\u204a\3\2\2\2\u204a\u204b\7\u0323")
        buf.write("\2\2\u204b\u204d\5\u02cc\u0167\2\u204c\u204e\7\u0338\2")
        buf.write("\2\u204d\u204c\3\2\2\2\u204d\u204e\3\2\2\2\u204e\u206c")
        buf.write("\3\2\2\2\u204f\u2050\7\u013d\2\2\u2050\u2051\7\u031a\2")
        buf.write("\2\u2051\u2052\5\u03bc\u01df\2\u2052\u2054\5\u02cc\u0167")
        buf.write("\2\u2053\u2055\7\u0338\2\2\u2054\u2053\3\2\2\2\u2054\u2055")
        buf.write("\3\2\2\2\u2055\u206c\3\2\2\2\u2056\u2057\7\u013d\2\2\u2057")
        buf.write("\u2058\7\u031a\2\2\u2058\u2059\7\u0323\2\2\u2059\u205a")
        buf.write("\7P\2\2\u205a\u2065\5\u02c2\u0162\2\u205b\u2063\7\u0086")
        buf.write("\2\2\u205c\u205d\7\u010a\2\2\u205d\u2064\7\u0277\2\2\u205e")
        buf.write("\u2061\7\u016c\2\2\u205f\u2060\7\u00e1\2\2\u2060\u2062")
        buf.write("\5\u038e\u01c8\2\u2061\u205f\3\2\2\2\u2061\u2062\3\2\2")
        buf.write("\2\u2062\u2064\3\2\2\2\u2063\u205c\3\2\2\2\u2063\u205e")
        buf.write("\3\2\2\2\u2064\u2066\3\2\2\2\u2065\u205b\3\2\2\2\u2065")
        buf.write("\u2066\3\2\2\2\u2066\u2068\3\2\2\2\u2067\u2069\7\u0338")
        buf.write("\2\2\u2068\u2067\3\2\2\2\u2068\u2069\3\2\2\2\u2069\u206c")
        buf.write("\3\2\2\2\u206a\u206c\5\u02c8\u0165\2\u206b\u2044\3\2\2")
        buf.write("\2\u206b\u204f\3\2\2\2\u206b\u2056\3\2\2\2\u206b\u206a")
        buf.write("\3\2\2\2\u206c\u0295\3\2\2\2\u206d\u206e\7\34\2\2\u206e")
        buf.write("\u206f\7d\2\2\u206f\u2072\tb\2\2\u2070\u2073\5\u03b6\u01dc")
        buf.write("\2\u2071\u2073\7\u031a\2\2\u2072\u2070\3\2\2\2\u2072\u2071")
        buf.write("\3\2\2\2\u2072\u2073\3\2\2\2\u2073\u2075\3\2\2\2\u2074")
        buf.write("\u2076\7\u0338\2\2\u2075\u2074\3\2\2\2\u2075\u2076\3\2")
        buf.write("\2\2\u2076\u20bf\3\2\2\2\u2077\u2078\7\34\2\2\u2078\u2082")
        buf.write("\tb\2\2\u2079\u207c\5\u03b6\u01dc\2\u207a\u207c\7\u031a")
        buf.write("\2\2\u207b\u2079\3\2\2\2\u207b\u207a\3\2\2\2\u207c\u2080")
        buf.write("\3\2\2\2\u207d\u207e\7\u017c\2\2\u207e\u207f\7\u0240\2")
        buf.write("\2\u207f\u2081\7\u031f\2\2\u2080\u207d\3\2\2\2\u2080\u2081")
        buf.write("\3\2\2\2\u2081\u2083\3\2\2\2\u2082\u207b\3\2\2\2\u2082")
        buf.write("\u2083\3\2\2\2\u2083\u2085\3\2\2\2\u2084\u2086\7\u0338")
        buf.write("\2\2\u2085\u2084\3\2\2\2\u2085\u2086\3\2\2\2\u2086\u20bf")
        buf.write("\3\2\2\2\u2087\u2088\7:\2\2\u2088\u2095\tb\2\2\u2089\u208c")
        buf.write("\5\u03b6\u01dc\2\u208a\u208c\7\u031a\2\2\u208b\u2089\3")
        buf.write("\2\2\2\u208b\u208a\3\2\2\2\u208c\u2093\3\2\2\2\u208d\u208e")
        buf.write("\7\u017c\2\2\u208e\u208f\7\u0335\2\2\u208f\u2090\7\u01d8")
        buf.write("\2\2\u2090\u2091\7\u0323\2\2\u2091\u2092\t\t\2\2\u2092")
        buf.write("\u2094\7\u0336\2\2\u2093\u208d\3\2\2\2\u2093\u2094\3\2")
        buf.write("\2\2\u2094\u2096\3\2\2\2\u2095\u208b\3\2\2\2\u2095\u2096")
        buf.write("\3\2\2\2\u2096\u2098\3\2\2\2\u2097\u2099\7\u0338\2\2\u2098")
        buf.write("\u2097\3\2\2\2\u2098\u2099\3\2\2\2\u2099\u20bf\3\2\2\2")
        buf.write("\u209a\u209c\7:\2\2\u209b\u209d\7\u030c\2\2\u209c\u209b")
        buf.write("\3\2\2\2\u209c\u209d\3\2\2\2\u209d\u209f\3\2\2\2\u209e")
        buf.write("\u20a0\7\u0338\2\2\u209f\u209e\3\2\2\2\u209f\u20a0\3\2")
        buf.write("\2\2\u20a0\u20bf\3\2\2\2\u20a1\u20a2\7:\2\2\u20a2\u20bf")
        buf.write("\5\u03b6\u01dc\2\u20a3\u20a4\7\u0120\2\2\u20a4\u20bf\5")
        buf.write("\u03b6\u01dc\2\u20a5\u20a6\7\u0120\2\2\u20a6\u20a9\tb")
        buf.write("\2\2\u20a7\u20aa\5\u03b6\u01dc\2\u20a8\u20aa\7\u031a\2")
        buf.write("\2\u20a9\u20a7\3\2\2\2\u20a9\u20a8\3\2\2\2\u20a9\u20aa")
        buf.write("\3\2\2\2\u20aa\u20ac\3\2\2\2\u20ab\u20ad\7\u0338\2\2\u20ac")
        buf.write("\u20ab\3\2\2\2\u20ac\u20ad\3\2\2\2\u20ad\u20bf\3\2\2\2")
        buf.write("\u20ae\u20b0\7\u0120\2\2\u20af\u20b1\7\u030c\2\2\u20b0")
        buf.write("\u20af\3\2\2\2\u20b0\u20b1\3\2\2\2\u20b1\u20b3\3\2\2\2")
        buf.write("\u20b2\u20b4\7\u0338\2\2\u20b3\u20b2\3\2\2\2\u20b3\u20b4")
        buf.write("\3\2\2\2\u20b4\u20bf\3\2\2\2\u20b5\u20b6\7\u012c\2\2\u20b6")
        buf.write("\u20b9\tb\2\2\u20b7\u20ba\5\u03b6\u01dc\2\u20b8\u20ba")
        buf.write("\7\u031a\2\2\u20b9\u20b7\3\2\2\2\u20b9\u20b8\3\2\2\2\u20b9")
        buf.write("\u20ba\3\2\2\2\u20ba\u20bc\3\2\2\2\u20bb\u20bd\7\u0338")
        buf.write("\2\2\u20bc\u20bb\3\2\2\2\u20bc\u20bd\3\2\2\2\u20bd\u20bf")
        buf.write("\3\2\2\2\u20be\u206d\3\2\2\2\u20be\u2077\3\2\2\2\u20be")
        buf.write("\u2087\3\2\2\2\u20be\u209a\3\2\2\2\u20be\u20a1\3\2\2\2")
        buf.write("\u20be\u20a3\3\2\2\2\u20be\u20a5\3\2\2\2\u20be\u20ae\3")
        buf.write("\2\2\2\u20be\u20b5\3\2\2\2\u20bf\u0297\3\2\2\2\u20c0\u20c2")
        buf.write("\7\u0210\2\2\u20c1\u20c3\7\u031b\2\2\u20c2\u20c1\3\2\2")
        buf.write("\2\u20c2\u20c3\3\2\2\2\u20c3\u0299\3\2\2\2\u20c4\u20c5")
        buf.write("\7\u016f\2\2\u20c5\u20c7\5\u03b6\u01dc\2\u20c6\u20c8\7")
        buf.write("\u0338\2\2\u20c7\u20c6\3\2\2\2\u20c7\u20c8\3\2\2\2\u20c8")
        buf.write("\u029b\3\2\2\2\u20c9\u20cb\7\u013e\2\2\u20ca\u20cc\7\u031f")
        buf.write("\2\2\u20cb\u20ca\3\2\2\2\u20cb\u20cc\3\2\2\2\u20cc\u029d")
        buf.write("\3\2\2\2\u20cd\u20ce\7W\2\2\u20ce\u20d3\5\u03b8\u01dd")
        buf.write("\2\u20cf\u20d0\7\u0335\2\2\u20d0\u20d1\5\u035a\u01ae\2")
        buf.write("\u20d1\u20d2\7\u0336\2\2\u20d2\u20d4\3\2\2\2\u20d3\u20cf")
        buf.write("\3\2\2\2\u20d3\u20d4\3\2\2\2\u20d4\u20d7\3\2\2\2\u20d5")
        buf.write("\u20d6\7\u017c\2\2\u20d6\u20d8\5\u02a0\u0151\2\u20d7\u20d5")
        buf.write("\3\2\2\2\u20d7\u20d8\3\2\2\2\u20d8\u20da\3\2\2\2\u20d9")
        buf.write("\u20db\7\u0338\2\2\u20da\u20d9\3\2\2\2\u20da\u20db\3\2")
        buf.write("\2\2\u20db\u029f\3\2\2\2\u20dc\u20df\5\u03b8\u01dd\2\u20dd")
        buf.write("\u20de\7\u0337\2\2\u20de\u20e0\5\u03b8\u01dd\2\u20df\u20dd")
        buf.write("\3\2\2\2\u20df\u20e0\3\2\2\2\u20e0\u02a1\3\2\2\2\u20e1")
        buf.write("\u20e2\7w\2\2\u20e2\u20e3\7\20\2\2\u20e3\u20e4\tc\2\2")
        buf.write("\u20e4\u02a3\3\2\2\2\u20e5\u20e7\7\u031a\2\2\u20e6\u20e8")
        buf.write("\7\20\2\2\u20e7\u20e6\3\2\2\2\u20e7\u20e8\3\2\2\2\u20e8")
        buf.write("\u20e9\3\2\2\2\u20e9\u20ec\5\u03ae\u01d8\2\u20ea\u20eb")
        buf.write("\7\u0323\2\2\u20eb\u20ed\5\u02cc\u0167\2\u20ec\u20ea\3")
        buf.write("\2\2\2\u20ec\u20ed\3\2\2\2\u20ed\u02a5\3\2\2\2\u20ee\u20ef")
        buf.write("\7\u0156\2\2\u20ef\u20f0\7\u0335\2\2\u20f0\u20f1\5\u02ac")
        buf.write("\u0157\2\u20f1\u20f2\7\u0336\2\2\u20f2\u02a7\3\2\2\2\u20f3")
        buf.write("\u20f4\7\u030e\2\2\u20f4\u20f6\7\u0335\2\2\u20f5\u20f7")
        buf.write("\td\2\2\u20f6\u20f5\3\2\2\2\u20f6\u20f7\3\2\2\2\u20f7")
        buf.write("\u20f8\3\2\2\2\u20f8\u20f9\5\u02aa\u0156\2\u20f9\u20fa")
        buf.write("\7\u0336\2\2\u20fa\u02a9\3\2\2\2\u20fb\u20fc\7\u031c\2")
        buf.write("\2\u20fc\u20fd\7\u0330\2\2\u20fd\u20fe\7\u031c\2\2\u20fe")
        buf.write("\u02ab\3\2\2\2\u20ff\u2106\5\u02ae\u0158\2\u2100\u2102")
        buf.write("\7\u0337\2\2\u2101\u2100\3\2\2\2\u2101\u2102\3\2\2\2\u2102")
        buf.write("\u2103\3\2\2\2\u2103\u2105\5\u02ae\u0158\2\u2104\u2101")
        buf.write("\3\2\2\2\u2105\u2108\3\2\2\2\u2106\u2104\3\2\2\2\u2106")
        buf.write("\u2107\3\2\2\2\u2107\u02ad\3\2\2\2\u2108\u2106\3\2\2\2")
        buf.write("\u2109\u210d\5\u02b0\u0159\2\u210a\u210d\5\u02b2\u015a")
        buf.write("\2\u210b\u210d\5\u02b6\u015c\2\u210c\u2109\3\2\2\2\u210c")
        buf.write("\u210a\3\2\2\2\u210c\u210b\3\2\2\2\u210d\u02af\3\2\2\2")
        buf.write("\u210e\u2112\5\u03b6\u01dc\2\u210f\u2113\5\u03ae\u01d8")
        buf.write("\2\u2110\u2111\7\20\2\2\u2111\u2113\5\u02cc\u0167\2\u2112")
        buf.write("\u210f\3\2\2\2\u2112\u2110\3\2\2\2\u2113\u2116\3\2\2\2")
        buf.write("\u2114\u2115\7\67\2\2\u2115\u2117\5\u03b6\u01dc\2\u2116")
        buf.write("\u2114\3\2\2\2\u2116\u2117\3\2\2\2\u2117\u2119\3\2\2\2")
        buf.write("\u2118\u211a\5\u0396\u01cc\2\u2119\u2118\3\2\2\2\u2119")
        buf.write("\u211a\3\2\2\2\u211a\u2130\3\2\2\2\u211b\u211c\7=\2\2")
        buf.write("\u211c\u211e\5\u03b6\u01dc\2\u211d\u211b\3\2\2\2\u211d")
        buf.write("\u211e\3\2\2\2\u211e\u211f\3\2\2\2\u211f\u2121\5\u0398")
        buf.write("\u01cd\2\u2120\u2122\5\u0398\u01cd\2\u2121\u2120\3\2\2")
        buf.write("\2\u2121\u2122\3\2\2\2\u2122\u2131\3\2\2\2\u2123\u2129")
        buf.write("\7\u0097\2\2\u2124\u2125\7\u0335\2\2\u2125\u2126\7\u031b")
        buf.write("\2\2\u2126\u2127\7\u0337\2\2\u2127\u2128\7\u031b\2\2\u2128")
        buf.write("\u212a\7\u0336\2\2\u2129\u2124\3\2\2\2\u2129\u212a\3\2")
        buf.write("\2\2\u212a\u212e\3\2\2\2\u212b\u212c\7\u00dc\2\2\u212c")
        buf.write("\u212d\7\u0086\2\2\u212d\u212f\7\u0112\2\2\u212e\u212b")
        buf.write("\3\2\2\2\u212e\u212f\3\2\2\2\u212f\u2131\3\2\2\2\u2130")
        buf.write("\u211d\3\2\2\2\u2130\u2123\3\2\2\2\u2130\u2131\3\2\2\2")
        buf.write("\u2131\u2133\3\2\2\2\u2132\u2134\7\u0123\2\2\u2133\u2132")
        buf.write("\3\2\2\2\u2133\u2134\3\2\2\2\u2134\u2138\3\2\2\2\u2135")
        buf.write("\u2137\5\u02b4\u015b\2\u2136\u2135\3\2\2\2\u2137\u213a")
        buf.write("\3\2\2\2\u2138\u2136\3\2\2\2\u2138\u2139\3\2\2\2\u2139")
        buf.write("\u02b1\3\2\2\2\u213a\u2138\3\2\2\2\u213b\u213c\5\u03b6")
        buf.write("\u01dc\2\u213c\u213d\te\2\2\u213d\u2141\5\u02cc\u0167")
        buf.write("\2\u213e\u2142\7\u0241\2\2\u213f\u2140\7\u00dc\2\2\u2140")
        buf.write("\u2142\7\u0241\2\2\u2141\u213e\3\2\2\2\u2141\u213f\3\2")
        buf.write("\2\2\u2141\u2142\3\2\2\2\u2142\u02b3\3\2\2\2\u2143\u2144")
        buf.write("\7=\2\2\u2144\u2146\5\u03b6\u01dc\2\u2145\u2143\3\2\2")
        buf.write("\2\u2145\u2146\3\2\2\2\u2146\u216c\3\2\2\2\u2147\u2148")
        buf.write("\7\u0100\2\2\u2148\u214b\7\u00ac\2\2\u2149\u214b\7\u0168")
        buf.write("\2\2\u214a\u2147\3\2\2\2\u214a\u2149\3\2\2\2\u214b\u214d")
        buf.write("\3\2\2\2\u214c\u214e\5\u0394\u01cb\2\u214d\u214c\3\2\2")
        buf.write("\2\u214d\u214e\3\2\2\2\u214e\u2150\3\2\2\2\u214f\u2151")
        buf.write("\5\u02bc\u015f\2\u2150\u214f\3\2\2\2\u2150\u2151\3\2\2")
        buf.write("\2\u2151\u216d\3\2\2\2\u2152\u2156\7.\2\2\u2153\u2154")
        buf.write("\7\u00dc\2\2\u2154\u2155\7\u0086\2\2\u2155\u2157\7\u0112")
        buf.write("\2\2\u2156\u2153\3\2\2\2\u2156\u2157\3\2\2\2\u2157\u2158")
        buf.write("\3\2\2\2\u2158\u2159\7\u0335\2\2\u2159\u215a\5\u02e2\u0172")
        buf.write("\2\u215a\u215b\7\u0336\2\2\u215b\u216d\3\2\2\2\u215c\u215d")
        buf.write("\7\u0089\2\2\u215d\u215f\7\u00ac\2\2\u215e\u215c\3\2\2")
        buf.write("\2\u215e\u215f\3\2\2\2\u215f\u2160\3\2\2\2\u2160\u2161")
        buf.write("\7\u010e\2\2\u2161\u2162\5\u0382\u01c2\2\u2162\u2163\7")
        buf.write("\u0335\2\2\u2163\u2164\5\u038e\u01c8\2\u2164\u2166\7\u0336")
        buf.write("\2\2\u2165\u2167\5\u02b8\u015d\2\u2166\u2165\3\2\2\2\u2166")
        buf.write("\u2167\3\2\2\2\u2167\u2169\3\2\2\2\u2168\u216a\5\u02ba")
        buf.write("\u015e\2\u2169\u2168\3\2\2\2\u2169\u216a\3\2\2\2\u216a")
        buf.write("\u216d\3\2\2\2\u216b\u216d\5\u0396\u01cc\2\u216c\u214a")
        buf.write("\3\2\2\2\u216c\u2152\3\2\2\2\u216c\u215e\3\2\2\2\u216c")
        buf.write("\u216b\3\2\2\2\u216d\u02b5\3\2\2\2\u216e\u216f\7=\2\2")
        buf.write("\u216f\u2171\5\u03b6\u01dc\2\u2170\u216e\3\2\2\2\u2170")
        buf.write("\u2171\3\2\2\2\u2171\u21b2\3\2\2\2\u2172\u2173\7\u0100")
        buf.write("\2\2\u2173\u2176\7\u00ac\2\2\u2174\u2176\7\u0168\2\2\u2175")
        buf.write("\u2172\3\2\2\2\u2175\u2174\3\2\2\2\u2176\u2178\3\2\2\2")
        buf.write("\u2177\u2179\5\u0394\u01cb\2\u2178\u2177\3\2\2\2\u2178")
        buf.write("\u2179\3\2\2\2\u2179\u217a\3\2\2\2\u217a\u217b\7\u0335")
        buf.write("\2\2\u217b\u217c\5\u038c\u01c7\2\u217c\u217e\7\u0336\2")
        buf.write("\2\u217d\u217f\5\u02bc\u015f\2\u217e\u217d\3\2\2\2\u217e")
        buf.write("\u217f\3\2\2\2\u217f\u2182\3\2\2\2\u2180\u2181\7\u00e5")
        buf.write("\2\2\u2181\u2183\5\u03b6\u01dc\2\u2182\u2180\3\2\2\2\u2182")
        buf.write("\u2183\3\2\2\2\u2183\u21b3\3\2\2\2\u2184\u2188\7.\2\2")
        buf.write("\u2185\u2186\7\u00dc\2\2\u2186\u2187\7\u0086\2\2\u2187")
        buf.write("\u2189\7\u0112\2\2\u2188\u2185\3\2\2\2\u2188\u2189\3\2")
        buf.write("\2\2\u2189\u218a\3\2\2\2\u218a\u218b\7\u0335\2\2\u218b")
        buf.write("\u218c\5\u02e2\u0172\2\u218c\u218d\7\u0336\2\2\u218d\u21b3")
        buf.write("\3\2\2\2\u218e\u2190\7Z\2\2\u218f\u2191\7\u0335\2\2\u2190")
        buf.write("\u218f\3\2\2\2\u2190\u2191\3\2\2\2\u2191\u2196\3\2\2\2")
        buf.write("\u2192\u2197\7\u031f\2\2\u2193\u2197\7\u033d\2\2\u2194")
        buf.write("\u2197\5\u0334\u019b\2\u2195\u2197\7\u031b\2\2\u2196\u2192")
        buf.write("\3\2\2\2\u2196\u2193\3\2\2\2\u2196\u2194\3\2\2\2\u2196")
        buf.write("\u2195\3\2\2\2\u2197\u2198\3\2\2\2\u2198\u2196\3\2\2\2")
        buf.write("\u2198\u2199\3\2\2\2\u2199\u219b\3\2\2\2\u219a\u219c\7")
        buf.write("\u0336\2\2\u219b\u219a\3\2\2\2\u219b\u219c\3\2\2\2\u219c")
        buf.write("\u219d\3\2\2\2\u219d\u219e\7\u0086\2\2\u219e\u21b3\5\u03b6")
        buf.write("\u01dc\2\u219f\u21a0\7\u0089\2\2\u21a0\u21a1\7\u00ac\2")
        buf.write("\2\u21a1\u21a2\7\u0335\2\2\u21a2\u21a3\5\u038e\u01c8\2")
        buf.write("\u21a3\u21a4\7\u0336\2\2\u21a4\u21a5\7\u010e\2\2\u21a5")
        buf.write("\u21aa\5\u0382\u01c2\2\u21a6\u21a7\7\u0335\2\2\u21a7\u21a8")
        buf.write("\5\u038e\u01c8\2\u21a8\u21a9\7\u0336\2\2\u21a9\u21ab\3")
        buf.write("\2\2\2\u21aa\u21a6\3\2\2\2\u21aa\u21ab\3\2\2\2\u21ab\u21ad")
        buf.write("\3\2\2\2\u21ac\u21ae\5\u02b8\u015d\2\u21ad\u21ac\3\2\2")
        buf.write("\2\u21ad\u21ae\3\2\2\2\u21ae\u21b0\3\2\2\2\u21af\u21b1")
        buf.write("\5\u02ba\u015e\2\u21b0\u21af\3\2\2\2\u21b0\u21b1\3\2\2")
        buf.write("\2\u21b1\u21b3\3\2\2\2\u21b2\u2175\3\2\2\2\u21b2\u2184")
        buf.write("\3\2\2\2\u21b2\u218e\3\2\2\2\u21b2\u219f\3\2\2\2\u21b3")
        buf.write("\u02b7\3\2\2\2\u21b4\u21b5\7\u00e5\2\2\u21b5\u21bd\7]")
        buf.write("\2\2\u21b6\u21b7\7\u0264\2\2\u21b7\u21be\7\u0183\2\2\u21b8")
        buf.write("\u21be\7)\2\2\u21b9\u21ba\7\u013d\2\2\u21ba\u21be\7\u00df")
        buf.write("\2\2\u21bb\u21bc\7\u013d\2\2\u21bc\u21be\7Z\2\2\u21bd")
        buf.write("\u21b6\3\2\2\2\u21bd\u21b8\3\2\2\2\u21bd\u21b9\3\2\2\2")
        buf.write("\u21bd\u21bb\3\2\2\2\u21be\u02b9\3\2\2\2\u21bf\u21c0\7")
        buf.write("\u00e5\2\2\u21c0\u21c8\7\u016c\2\2\u21c1\u21c2\7\u0264")
        buf.write("\2\2\u21c2\u21c9\7\u0183\2\2\u21c3\u21c9\7)\2\2\u21c4")
        buf.write("\u21c5\7\u013d\2\2\u21c5\u21c9\7\u00df\2\2\u21c6\u21c7")
        buf.write("\7\u013d\2\2\u21c7\u21c9\7Z\2\2\u21c8\u21c1\3\2\2\2\u21c8")
        buf.write("\u21c3\3\2\2\2\u21c8\u21c4\3\2\2\2\u21c8\u21c6\3\2\2\2")
        buf.write("\u21c9\u02bb\3\2\2\2\u21ca\u21cb\7\u017c\2\2\u21cb\u21cc")
        buf.write("\7\u0335\2\2\u21cc\u21d1\5\u02be\u0160\2\u21cd\u21ce\7")
        buf.write("\u0337\2\2\u21ce\u21d0\5\u02be\u0160\2\u21cf\u21cd\3\2")
        buf.write("\2\2\u21d0\u21d3\3\2\2\2\u21d1\u21cf\3\2\2\2\u21d1\u21d2")
        buf.write("\3\2\2\2\u21d2\u21d4\3\2\2\2\u21d3\u21d1\3\2\2\2\u21d4")
        buf.write("\u21d5\7\u0336\2\2\u21d5\u02bd\3\2\2\2\u21d6\u21d7\5\u03b8")
        buf.write("\u01dd\2\u21d7\u21db\7\u0323\2\2\u21d8\u21dc\5\u03b8\u01dd")
        buf.write("\2\u21d9\u21dc\5\u0392\u01ca\2\u21da\u21dc\7\u031b\2\2")
        buf.write("\u21db\u21d8\3\2\2\2\u21db\u21d9\3\2\2\2\u21db\u21da\3")
        buf.write("\2\2\2\u21dc\u02bf\3\2\2\2\u21dd\u21de\7Y\2\2\u21de\u21fe")
        buf.write("\5\u0390\u01c9\2\u21df\u21e9\7P\2\2\u21e0\u21e7\5\u02c2")
        buf.write("\u0162\2\u21e1\u21e2\7\u0086\2\2\u21e2\u21e5\7\u016c\2")
        buf.write("\2\u21e3\u21e4\7\u00e1\2\2\u21e4\u21e6\5\u038e\u01c8\2")
        buf.write("\u21e5\u21e3\3\2\2\2\u21e5\u21e6\3\2\2\2\u21e6\u21e8\3")
        buf.write("\2\2\2\u21e7\u21e1\3\2\2\2\u21e7\u21e8\3\2\2\2\u21e8\u21ea")
        buf.write("\3\2\2\2\u21e9\u21e0\3\2\2\2\u21e9\u21ea\3\2\2\2\u21ea")
        buf.write("\u21ff\3\2\2\2\u21eb\u21ed\tf\2\2\u21ec\u21eb\3\2\2\2")
        buf.write("\u21ec\u21ed\3\2\2\2\u21ed\u21ef\3\2\2\2\u21ee\u21f0\7")
        buf.write("\u02c0\2\2\u21ef\u21ee\3\2\2\2\u21ef\u21f0\3\2\2\2\u21f0")
        buf.write("\u21f1\3\2\2\2\u21f1\u21f2\7P\2\2\u21f2\u21f3\7\u0086")
        buf.write("\2\2\u21f3\u21fc\5\u01be\u00e0\2\u21f4\u21fa\7\u0086\2")
        buf.write("\2\u21f5\u21f6\7\u010a\2\2\u21f6\u21fb\7\u0277\2\2\u21f7")
        buf.write("\u21fb\7\u016c\2\2\u21f8\u21f9\7\u00e1\2\2\u21f9\u21fb")
        buf.write("\5\u038e\u01c8\2\u21fa\u21f5\3\2\2\2\u21fa\u21f7\3\2\2")
        buf.write("\2\u21fa\u21f8\3\2\2\2\u21fb\u21fd\3\2\2\2\u21fc\u21f4")
        buf.write("\3\2\2\2\u21fc\u21fd\3\2\2\2\u21fd\u21ff\3\2\2\2\u21fe")
        buf.write("\u21df\3\2\2\2\u21fe\u21ec\3\2\2\2\u21ff\u2201\3\2\2\2")
        buf.write("\u2200\u2202\7\u0338\2\2\u2201\u2200\3\2\2\2\u2201\u2202")
        buf.write("\3\2\2\2\u2202\u02c1\3\2\2\2\u2203\u2205\5\u02c4\u0163")
        buf.write("\2\u2204\u2203\3\2\2\2\u2205\u2208\3\2\2\2\u2206\u2204")
        buf.write("\3\2\2\2\u2206\u2207\3\2\2\2\u2207\u2209\3\2\2\2\u2208")
        buf.write("\u2206\3\2\2\2\u2209\u220a\7\u0086\2\2\u220a\u220b\5\u01be")
        buf.write("\u00e0\2\u220b\u02c3\3\2\2\2\u220c\u2212\tA\2\2\u220d")
        buf.write("\u2212\tg\2\2\u220e\u2212\th\2\2\u220f\u2212\ti\2\2\u2210")
        buf.write("\u2212\7\u02fc\2\2\u2211\u220c\3\2\2\2\u2211\u220d\3\2")
        buf.write("\2\2\u2211\u220e\3\2\2\2\u2211\u220f\3\2\2\2\u2211\u2210")
        buf.write("\3\2\2\2\u2212\u02c5\3\2\2\2\u2213\u221d\7\u0081\2\2\u2214")
        buf.write("\u221b\7\u0263\2\2\u2215\u221b\7\u0289\2\2\u2216\u221b")
        buf.write("\7\u0202\2\2\u2217\u221b\7\u0230\2\2\u2218\u2219\tj\2")
        buf.write("\2\u2219\u221b\5\u02cc\u0167\2\u221a\u2214\3\2\2\2\u221a")
        buf.write("\u2215\3\2\2\2\u221a\u2216\3\2\2\2\u221a\u2217\3\2\2\2")
        buf.write("\u221a\u2218\3\2\2\2\u221a\u221b\3\2\2\2\u221b\u221c\3")
        buf.write("\2\2\2\u221c\u221e\7\u008c\2\2\u221d\u221a\3\2\2\2\u221d")
        buf.write("\u221e\3\2\2\2\u221e\u2220\3\2\2\2\u221f\u2221\7\u020f")
        buf.write("\2\2\u2220\u221f\3\2\2\2\u2220\u2221\3\2\2\2\u2221\u2222")
        buf.write("\3\2\2\2\u2222\u222c\5\u0390\u01c9\2\u2223\u2224\7\u00a5")
        buf.write("\2\2\u2224\u2229\7\u031a\2\2\u2225\u2226\7\u0337\2\2\u2226")
        buf.write("\u2228\7\u031a\2\2\u2227\u2225\3\2\2\2\u2228\u222b\3\2")
        buf.write("\2\2\u2229\u2227\3\2\2\2\u2229\u222a\3\2\2\2\u222a\u222d")
        buf.write("\3\2\2\2\u222b\u2229\3\2\2\2\u222c\u2223\3\2\2\2\u222c")
        buf.write("\u222d\3\2\2\2\u222d\u222f\3\2\2\2\u222e\u2230\7\u0338")
        buf.write("\2\2\u222f\u222e\3\2\2\2\u222f\u2230\3\2\2\2\u2230\u02c7")
        buf.write("\3\2\2\2\u2231\u2232\7\u013d\2\2\u2232\u2236\5\u03b6\u01dc")
        buf.write("\2\u2233\u2237\5\u03b6\u01dc\2\u2234\u2237\5\u02ca\u0166")
        buf.write("\2\u2235\u2237\5\u0392\u01ca\2\u2236\u2233\3\2\2\2\u2236")
        buf.write("\u2234\3\2\2\2\u2236\u2235\3\2\2\2\u2237\u2239\3\2\2\2")
        buf.write("\u2238\u223a\7\u0338\2\2\u2239\u2238\3\2\2\2\u2239\u223a")
        buf.write("\3\2\2\2\u223a\u2263\3\2\2\2\u223b\u223c\7\u013d\2\2\u223c")
        buf.write("\u223d\7\u0161\2\2\u223d\u223e\7\u0227\2\2\u223e\u2248")
        buf.write("\7\u0233\2\2\u223f\u2240\7\u010a\2\2\u2240\u2249\7\u02fe")
        buf.write("\2\2\u2241\u2242\7\u010a\2\2\u2242\u2249\7\u01ba\2\2\u2243")
        buf.write("\u2244\7\u02ab\2\2\u2244\u2249\7\u010a\2\2\u2245\u2249")
        buf.write("\7\u02d8\2\2\u2246\u2249\7\u02ce\2\2\u2247\u2249\7\u031b")
        buf.write("\2\2\u2248\u223f\3\2\2\2\u2248\u2241\3\2\2\2\u2248\u2243")
        buf.write("\3\2\2\2\u2248\u2245\3\2\2\2\u2248\u2246\3\2\2\2\u2248")
        buf.write("\u2247\3\2\2\2\u2249\u224b\3\2\2\2\u224a\u224c\7\u0338")
        buf.write("\2\2\u224b\u224a\3\2\2\2\u224b\u224c\3\2\2\2\u224c\u2263")
        buf.write("\3\2\2\2\u224d\u224e\7\u013d\2\2\u224e\u224f\7\u0099\2")
        buf.write("\2\u224f\u2250\5\u0382\u01c2\2\u2250\u2252\5\u0392\u01ca")
        buf.write("\2\u2251\u2253\7\u0338\2\2\u2252\u2251\3\2\2\2\u2252\u2253")
        buf.write("\3\2\2\2\u2253\u2263\3\2\2\2\u2254\u2255\7\u013d\2\2\u2255")
        buf.write("\u2256\7\u0192\2\2\u2256\u2263\5\u0392\u01ca\2\u2257\u2258")
        buf.write("\7\u013d\2\2\u2258\u2259\7\u0296\2\2\u2259\u2263\5\u0392")
        buf.write("\u01ca\2\u225a\u225b\7\u013d\2\2\u225b\u225c\7\u0193\2")
        buf.write("\2\u225c\u2263\5\u0392\u01ca\2\u225d\u225e\7\u013d\2\2")
        buf.write("\u225e\u225f\7\u0194\2\2\u225f\u2263\5\u0392\u01ca\2\u2260")
        buf.write("\u2261\7\u013d\2\2\u2261\u2263\5\u033e\u01a0\2\u2262\u2231")
        buf.write("\3\2\2\2\u2262\u223b\3\2\2\2\u2262\u224d\3\2\2\2\u2262")
        buf.write("\u2254\3\2\2\2\u2262\u2257\3\2\2\2\u2262\u225a\3\2\2\2")
        buf.write("\u2262\u225d\3\2\2\2\u2262\u2260\3\2\2\2\u2263\u02c9\3")
        buf.write("\2\2\2\u2264\u2267\5\u03b2\u01da\2\u2265\u2267\7\u031a")
        buf.write("\2\2\u2266\u2264\3\2\2\2\u2266\u2265\3\2\2\2\u2267\u02cb")
        buf.write("\3\2\2\2\u2268\u2269\b\u0167\1\2\u2269\u2271\5\u02ce\u0168")
        buf.write("\2\u226a\u2271\5\u0334\u019b\2\u226b\u2271\5\u02d0\u0169")
        buf.write("\2\u226c\u2271\5\u038a\u01c6\2\u226d\u2271\5\u02d4\u016b")
        buf.write("\2\u226e\u2271\5\u02d2\u016a\2\u226f\u2271\5\u0364\u01b3")
        buf.write("\2\u2270\u2268\3\2\2\2\u2270\u226a\3\2\2\2\u2270\u226b")
        buf.write("\3\2\2\2\u2270\u226c\3\2\2\2\u2270\u226d\3\2\2\2\u2270")
        buf.write("\u226e\3\2\2\2\u2270\u226f\3\2\2\2\u2271\u2285\3\2\2\2")
        buf.write("\u2272\u2273\f\7\2\2\u2273\u2274\tk\2\2\u2274\u2284\5")
        buf.write("\u02cc\u0167\b\u2275\u2276\f\6\2\2\u2276\u2277\tl\2\2")
        buf.write("\u2277\u2284\5\u02cc\u0167\7\u2278\u2279\f\5\2\2\u2279")
        buf.write("\u227a\5\u03ba\u01de\2\u227a\u227b\5\u02cc\u0167\6\u227b")
        buf.write("\u2284\3\2\2\2\u227c\u227d\f\4\2\2\u227d\u227e\5\u03bc")
        buf.write("\u01df\2\u227e\u227f\5\u02cc\u0167\5\u227f\u2284\3\2\2")
        buf.write("\2\u2280\u2281\f\f\2\2\u2281\u2282\7\67\2\2\u2282\u2284")
        buf.write("\5\u03b6\u01dc\2\u2283\u2272\3\2\2\2\u2283\u2275\3\2\2")
        buf.write("\2\u2283\u2278\3\2\2\2\u2283\u227c\3\2\2\2\u2283\u2280")
        buf.write("\3\2\2\2\u2284\u2287\3\2\2\2\u2285\u2283\3\2\2\2\u2285")
        buf.write("\u2286\3\2\2\2\u2286\u02cd\3\2\2\2\u2287\u2285\3\2\2\2")
        buf.write("\u2288\u228d\7Z\2\2\u2289\u228d\7\u00df\2\2\u228a\u228d")
        buf.write("\7\u031a\2\2\u228b\u228d\5\u03b2\u01da\2\u228c\u2288\3")
        buf.write("\2\2\2\u228c\u2289\3\2\2\2\u228c\u228a\3\2\2\2\u228c\u228b")
        buf.write("\3\2\2\2\u228d\u02cf\3\2\2\2\u228e\u228f\7*\2\2\u228f")
        buf.write("\u2291\5\u02cc\u0167\2\u2290\u2292\5\u0342\u01a2\2\u2291")
        buf.write("\u2290\3\2\2\2\u2292\u2293\3\2\2\2\u2293\u2291\3\2\2\2")
        buf.write("\u2293\u2294\3\2\2\2\u2294\u2297\3\2\2\2\u2295\u2296\7")
        buf.write("k\2\2\u2296\u2298\5\u02cc\u0167\2\u2297\u2295\3\2\2\2")
        buf.write("\u2297\u2298\3\2\2\2\u2298\u2299\3\2\2\2\u2299\u229a\7")
        buf.write("m\2\2\u229a\u22a8\3\2\2\2\u229b\u229d\7*\2\2\u229c\u229e")
        buf.write("\5\u0344\u01a3\2\u229d\u229c\3\2\2\2\u229e\u229f\3\2\2")
        buf.write("\2\u229f\u229d\3\2\2\2\u229f\u22a0\3\2\2\2\u22a0\u22a3")
        buf.write("\3\2\2\2\u22a1\u22a2\7k\2\2\u22a2\u22a4\5\u02cc\u0167")
        buf.write("\2\u22a3\u22a1\3\2\2\2\u22a3\u22a4\3\2\2\2\u22a4\u22a5")
        buf.write("\3\2\2\2\u22a5\u22a6\7m\2\2\u22a6\u22a8\3\2\2\2\u22a7")
        buf.write("\u228e\3\2\2\2\u22a7\u229b\3\2\2\2\u22a8\u02d1\3\2\2\2")
        buf.write("\u22a9\u22aa\7\u033f\2\2\u22aa\u22ae\5\u02cc\u0167\2\u22ab")
        buf.write("\u22ac\tm\2\2\u22ac\u22ae\5\u02cc\u0167\2\u22ad\u22a9")
        buf.write("\3\2\2\2\u22ad\u22ab\3\2\2\2\u22ae\u02d3\3\2\2\2\u22af")
        buf.write("\u22b0\7\u0335\2\2\u22b0\u22b1\5\u02cc\u0167\2\u22b1\u22b2")
        buf.write("\7\u0336\2\2\u22b2\u22b8\3\2\2\2\u22b3\u22b4\7\u0335\2")
        buf.write("\2\u22b4\u22b5\5\u02d8\u016d\2\u22b5\u22b6\7\u0336\2\2")
        buf.write("\u22b6\u22b8\3\2\2\2\u22b7\u22af\3\2\2\2\u22b7\u22b3\3")
        buf.write("\2\2\2\u22b8\u02d5\3\2\2\2\u22b9\u22c2\7\u00df\2\2\u22ba")
        buf.write("\u22c2\5\u03b2\u01da\2\u22bb\u22c2\5\u0334\u019b\2\u22bc")
        buf.write("\u22c2\7\u031a\2\2\u22bd\u22be\7\u0335\2\2\u22be\u22bf")
        buf.write("\5\u02d6\u016c\2\u22bf\u22c0\7\u0336\2\2\u22c0\u22c2\3")
        buf.write("\2\2\2\u22c1\u22b9\3\2\2\2\u22c1\u22ba\3\2\2\2\u22c1\u22bb")
        buf.write("\3\2\2\2\u22c1\u22bc\3\2\2\2\u22c1\u22bd\3\2\2\2\u22c2")
        buf.write("\u02d7\3\2\2\2\u22c3\u22c4\5\u01be\u00e0\2\u22c4\u02d9")
        buf.write("\3\2\2\2\u22c5\u22c8\7\u017c\2\2\u22c6\u22c7\7\u0310\2")
        buf.write("\2\u22c7\u22c9\7\u0337\2\2\u22c8\u22c6\3\2\2\2\u22c8\u22c9")
        buf.write("\3\2\2\2\u22c9\u22ca\3\2\2\2\u22ca\u22cf\5\u02dc\u016f")
        buf.write("\2\u22cb\u22cc\7\u0337\2\2\u22cc\u22ce\5\u02dc\u016f\2")
        buf.write("\u22cd\u22cb\3\2\2\2\u22ce\u22d1\3\2\2\2\u22cf\u22cd\3")
        buf.write("\2\2\2\u22cf\u22d0\3\2\2\2\u22d0\u22e0\3\2\2\2\u22d1\u22cf")
        buf.write("\3\2\2\2\u22d2\u22d3\7\u017c\2\2\u22d3\u22d8\7 \2\2\u22d4")
        buf.write("\u22d5\7\u0335\2\2\u22d5\u22d6\5\u032a\u0196\2\u22d6\u22d7")
        buf.write("\7\u0336\2\2\u22d7\u22d9\3\2\2\2\u22d8\u22d4\3\2\2\2\u22d8")
        buf.write("\u22d9\3\2\2\2\u22d9\u22da\3\2\2\2\u22da\u22db\7\20\2")
        buf.write("\2\u22db\u22dc\7\u0335\2\2\u22dc\u22dd\5\u01be\u00e0\2")
        buf.write("\u22dd\u22de\7\u0336\2\2\u22de\u22e0\3\2\2\2\u22df\u22c5")
        buf.write("\3\2\2\2\u22df\u22d2\3\2\2\2\u22e0\u02db\3\2\2\2\u22e1")
        buf.write("\u22e6\5\u03b6\u01dc\2\u22e2\u22e3\7\u0335\2\2\u22e3\u22e4")
        buf.write("\5\u038e\u01c8\2\u22e4\u22e5\7\u0336\2\2\u22e5\u22e7\3")
        buf.write("\2\2\2\u22e6\u22e2\3\2\2\2\u22e6\u22e7\3\2\2\2\u22e7\u22e8")
        buf.write("\3\2\2\2\u22e8\u22e9\7\20\2\2\u22e9\u22ea\7\u0335\2\2")
        buf.write("\u22ea\u22eb\5\u01be\u00e0\2\u22eb\u22ec\7\u0336\2\2\u22ec")
        buf.write("\u02dd\3\2\2\2\u22ed\u22f0\5\u038a\u01c6\2\u22ee\u22f0")
        buf.write("\7\u031a\2\2\u22ef\u22ed\3\2\2\2\u22ef\u22ee\3\2\2\2\u22f0")
        buf.write("\u22f3\3\2\2\2\u22f1\u22f4\7\u0323\2\2\u22f2\u22f4\5\u03bc")
        buf.write("\u01df\2\u22f3\u22f1\3\2\2\2\u22f3\u22f2\3\2\2\2\u22f4")
        buf.write("\u22f5\3\2\2\2\u22f5\u22fe\5\u02cc\u0167\2\u22f6\u22f7")
        buf.write("\5\u03b6\u01dc\2\u22f7\u22f8\7\u0330\2\2\u22f8\u22f9\5")
        buf.write("\u03b6\u01dc\2\u22f9\u22fa\7\u0335\2\2\u22fa\u22fb\5\u035a")
        buf.write("\u01ae\2\u22fb\u22fc\7\u0336\2\2\u22fc\u22fe\3\2\2\2\u22fd")
        buf.write("\u22ef\3\2\2\2\u22fd\u22f6\3\2\2\2\u22fe\u02df\3\2\2\2")
        buf.write("\u22ff\u2304\5\u02e2\u0172\2\u2300\u2301\7\u0337\2\2\u2301")
        buf.write("\u2303\5\u02e2\u0172\2\u2302\u2300\3\2\2\2\u2303\u2306")
        buf.write("\3\2\2\2\u2304\u2302\3\2\2\2\u2304\u2305\3\2\2\2\u2305")
        buf.write("\u02e1\3\2\2\2\u2306\u2304\3\2\2\2\u2307\u230c\5\u02e4")
        buf.write("\u0173\2\u2308\u2309\7\u00ed\2\2\u2309\u230b\5\u02e4\u0173")
        buf.write("\2\u230a\u2308\3\2\2\2\u230b\u230e\3\2\2\2\u230c\u230a")
        buf.write("\3\2\2\2\u230c\u230d\3\2\2\2\u230d\u02e3\3\2\2\2\u230e")
        buf.write("\u230c\3\2\2\2\u230f\u2314\5\u02e6\u0174\2\u2310\u2311")
        buf.write("\7\13\2\2\u2311\u2313\5\u02e6\u0174\2\u2312\u2310\3\2")
        buf.write("\2\2\u2313\u2316\3\2\2\2\u2314\u2312\3\2\2\2\u2314\u2315")
        buf.write("\3\2\2\2\u2315\u02e5\3\2\2\2\u2316\u2314\3\2\2\2\u2317")
        buf.write("\u2319\7\u00dc\2\2\u2318\u2317\3\2\2\2\u2318\u2319\3\2")
        buf.write("\2\2\u2319\u231a\3\2\2\2\u231a\u231b\5\u02e8\u0175\2\u231b")
        buf.write("\u02e7\3\2\2\2\u231c\u231d\7x\2\2\u231d\u231e\7\u0335")
        buf.write("\2\2\u231e\u231f\5\u02d8\u016d\2\u231f\u2320\7\u0336\2")
        buf.write("\2\u2320\u2354\3\2\2\2\u2321\u2322\5\u02cc\u0167\2\u2322")
        buf.write("\u2323\5\u03ba\u01de\2\u2323\u2324\5\u02cc\u0167\2\u2324")
        buf.write("\u2354\3\2\2\2\u2325\u2326\5\u02cc\u0167\2\u2326\u2327")
        buf.write("\5\u03ba\u01de\2\u2327\u2328\tn\2\2\u2328\u2329\7\u0335")
        buf.write("\2\2\u2329\u232a\5\u02d8\u016d\2\u232a\u232b\7\u0336\2")
        buf.write("\2\u232b\u2354\3\2\2\2\u232c\u232e\5\u02cc\u0167\2\u232d")
        buf.write("\u232f\7\u00dc\2\2\u232e\u232d\3\2\2\2\u232e\u232f\3\2")
        buf.write("\2\2\u232f\u2330\3\2\2\2\u2330\u2331\7\35\2\2\u2331\u2332")
        buf.write("\5\u02cc\u0167\2\u2332\u2333\7\13\2\2\u2333\u2334\5\u02cc")
        buf.write("\u0167\2\u2334\u2354\3\2\2\2\u2335\u2337\5\u02cc\u0167")
        buf.write("\2\u2336\u2338\7\u00dc\2\2\u2337\u2336\3\2\2\2\u2337\u2338")
        buf.write("\3\2\2\2\u2338\u2339\3\2\2\2\u2339\u233a\7\u009b\2\2\u233a")
        buf.write("\u233d\7\u0335\2\2\u233b\u233e\5\u02d8\u016d\2\u233c\u233e")
        buf.write("\5\u035a\u01ae\2\u233d\u233b\3\2\2\2\u233d\u233c\3\2\2")
        buf.write("\2\u233e\u233f\3\2\2\2\u233f\u2340\7\u0336\2\2\u2340\u2354")
        buf.write("\3\2\2\2\u2341\u2343\5\u02cc\u0167\2\u2342\u2344\7\u00dc")
        buf.write("\2\2\u2343\u2342\3\2\2\2\u2343\u2344\3\2\2\2\u2344\u2345")
        buf.write("\3\2\2\2\u2345\u2346\7\u00b4\2\2\u2346\u2349\5\u02cc\u0167")
        buf.write("\2\u2347\u2348\7p\2\2\u2348\u234a\5\u02cc\u0167\2\u2349")
        buf.write("\u2347\3\2\2\2\u2349\u234a\3\2\2\2\u234a\u2354\3\2\2\2")
        buf.write("\u234b\u234c\5\u02cc\u0167\2\u234c\u234d\7\u00a8\2\2\u234d")
        buf.write("\u234e\5\u0396\u01cc\2\u234e\u2354\3\2\2\2\u234f\u2350")
        buf.write("\7\u0335\2\2\u2350\u2351\5\u02e2\u0172\2\u2351\u2352\7")
        buf.write("\u0336\2\2\u2352\u2354\3\2\2\2\u2353\u231c\3\2\2\2\u2353")
        buf.write("\u2321\3\2\2\2\u2353\u2325\3\2\2\2\u2353\u232c\3\2\2\2")
        buf.write("\u2353\u2335\3\2\2\2\u2353\u2341\3\2\2\2\u2353\u234b\3")
        buf.write("\2\2\2\u2353\u234f\3\2\2\2\u2354\u02e9\3\2\2\2\u2355\u235b")
        buf.write("\5\u02ee\u0178\2\u2356\u2357\7\u0335\2\2\u2357\u2358\5")
        buf.write("\u02ea\u0176\2\u2358\u2359\7\u0336\2\2\u2359\u235b\3\2")
        buf.write("\2\2\u235a\u2355\3\2\2\2\u235a\u2356\3\2\2\2\u235b\u235f")
        buf.write("\3\2\2\2\u235c\u235e\5\u02ec\u0177\2\u235d\u235c\3\2\2")
        buf.write("\2\u235e\u2361\3\2\2\2\u235f\u235d\3\2\2\2\u235f\u2360")
        buf.write("\3\2\2\2\u2360\u02eb\3\2\2\2\u2361\u235f\3\2\2\2\u2362")
        buf.write("\u2364\7\u0167\2\2\u2363\u2365\7\6\2\2\u2364\u2363\3\2")
        buf.write("\2\2\u2364\u2365\3\2\2\2\u2365\u2369\3\2\2\2\u2366\u2369")
        buf.write("\7u\2\2\u2367\u2369\7\u00a4\2\2\u2368\u2362\3\2\2\2\u2368")
        buf.write("\u2366\3\2\2\2\u2368\u2367\3\2\2\2\u2369\u236f\3\2\2\2")
        buf.write("\u236a\u2370\5\u02ee\u0178\2\u236b\u236c\7\u0335\2\2\u236c")
        buf.write("\u236d\5\u02ea\u0176\2\u236d\u236e\7\u0336\2\2\u236e\u2370")
        buf.write("\3\2\2\2\u236f\u236a\3\2\2\2\u236f\u236b\3\2\2\2\u2370")
        buf.write("\u02ed\3\2\2\2\u2371\u2373\7\u0132\2\2\u2372\u2374\to")
        buf.write("\2\2\u2373\u2372\3\2\2\2\u2373\u2374\3\2\2\2\u2374\u2376")
        buf.write("\3\2\2\2\u2375\u2377\5\u02f0\u0179\2\u2376\u2375\3\2\2")
        buf.write("\2\u2376\u2377\3\2\2\2\u2377\u2378\3\2\2\2\u2378\u237b")
        buf.write("\5\u0306\u0184\2\u2379\u237a\7\u00a5\2\2\u237a\u237c\5")
        buf.write("\u0382\u01c2\2\u237b\u2379\3\2\2\2\u237b\u237c\3\2\2\2")
        buf.write("\u237c\u237f\3\2\2\2\u237d\u237e\7\u008c\2\2\u237e\u2380")
        buf.write("\5\u0314\u018b\2\u237f\u237d\3\2\2\2\u237f\u2380\3\2\2")
        buf.write("\2\u2380\u2383\3\2\2\2\u2381\u2382\7\u0179\2\2\u2382\u2384")
        buf.write("\5\u02e2\u0172\2\u2383\u2381\3\2\2\2\u2383\u2384\3\2\2")
        buf.write("\2\u2384\u2392\3\2\2\2\u2385\u2386\7\u0093\2\2\u2386\u2388")
        buf.write("\7&\2\2\u2387\u2389\7\6\2\2\u2388\u2387\3\2\2\2\u2388")
        buf.write("\u2389\3\2\2\2\u2389\u238a\3\2\2\2\u238a\u238f\5\u02fe")
        buf.write("\u0180\2\u238b\u238c\7\u0337\2\2\u238c\u238e\5\u02fe\u0180")
        buf.write("\2\u238d\u238b\3\2\2\2\u238e\u2391\3\2\2\2\u238f\u238d")
        buf.write("\3\2\2\2\u238f\u2390\3\2\2\2\u2390\u2393\3\2\2\2\u2391")
        buf.write("\u238f\3\2\2\2\u2392\u2385\3\2\2\2\u2392\u2393\3\2\2\2")
        buf.write("\u2393\u2396\3\2\2\2\u2394\u2395\7\u0094\2\2\u2395\u2397")
        buf.write("\5\u02e2\u0172\2\u2396\u2394\3\2\2\2\u2396\u2397\3\2\2")
        buf.write("\2\u2397\u02ef\3\2\2\2\u2398\u239b\7\u015e\2\2\u2399\u239c")
        buf.write("\5\u02f2\u017a\2\u239a\u239c\5\u02f4\u017b\2\u239b\u2399")
        buf.write("\3\2\2\2\u239b\u239a\3\2\2\2\u239c\u239f\3\2\2\2\u239d")
        buf.write("\u239e\7\u017c\2\2\u239e\u23a0\7\u02ee\2\2\u239f\u239d")
        buf.write("\3\2\2\2\u239f\u23a0\3\2\2\2\u23a0\u02f1\3\2\2\2\u23a1")
        buf.write("\u23a2\tp\2\2\u23a2\u23a9\7\u00f5\2\2\u23a3\u23a4\7\u0335")
        buf.write("\2\2\u23a4\u23a5\5\u02cc\u0167\2\u23a5\u23a6\7\u0336\2")
        buf.write("\2\u23a6\u23a7\7\u00f5\2\2\u23a7\u23a9\3\2\2\2\u23a8\u23a1")
        buf.write("\3\2\2\2\u23a8\u23a3\3\2\2\2\u23a9\u02f3\3\2\2\2\u23aa")
        buf.write("\u23b0\7\u031b\2\2\u23ab\u23ac\7\u0335\2\2\u23ac\u23ad")
        buf.write("\5\u02cc\u0167\2\u23ad\u23ae\7\u0336\2\2\u23ae\u23b0\3")
        buf.write("\2\2\2\u23af\u23aa\3\2\2\2\u23af\u23ab\3\2\2\2\u23b0\u02f5")
        buf.write("\3\2\2\2\u23b1\u23b2\7\u00ee\2\2\u23b2\u23b3\7&\2\2\u23b3")
        buf.write("\u23b8\5\u02fc\u017f\2\u23b4\u23b5\7\u0337\2\2\u23b5\u23b7")
        buf.write("\5\u02fc\u017f\2\u23b6\u23b4\3\2\2\2\u23b7\u23ba\3\2\2")
        buf.write("\2\u23b8\u23b6\3\2\2\2\u23b8\u23b9\3\2\2\2\u23b9\u23c6")
        buf.write("\3\2\2\2\u23ba\u23b8\3\2\2\2\u23bb\u23bc\7\u0274\2\2\u23bc")
        buf.write("\u23bd\5\u02cc\u0167\2\u23bd\u23c4\tq\2\2\u23be\u23bf")
        buf.write("\7\u0081\2\2\u23bf\u23c0\tr\2\2\u23c0\u23c1\5\u02cc\u0167")
        buf.write("\2\u23c1\u23c2\tq\2\2\u23c2\u23c3\7\u0277\2\2\u23c3\u23c5")
        buf.write("\3\2\2\2\u23c4\u23be\3\2\2\2\u23c4\u23c5\3\2\2\2\u23c5")
        buf.write("\u23c7\3\2\2\2\u23c6\u23bb\3\2\2\2\u23c6\u23c7\3\2\2\2")
        buf.write("\u23c7\u02f7\3\2\2\2\u23c8\u23c9\7\u0086\2\2\u23c9\u2421")
        buf.write("\7\"\2\2\u23ca\u23cb\7\u0086\2\2\u23cb\u23d3\7\u030e\2")
        buf.write("\2\u23cc\u23d0\7\u0109\2\2\u23cd\u23ce\7\u0335\2\2\u23ce")
        buf.write("\u23cf\7\u031f\2\2\u23cf\u23d1\7\u0336\2\2\u23d0\u23cd")
        buf.write("\3\2\2\2\u23d0\u23d1\3\2\2\2\u23d1\u23d4\3\2\2\2\u23d2")
        buf.write("\u23d4\7\u019b\2\2\u23d3\u23cc\3\2\2\2\u23d3\u23d2\3\2")
        buf.write("\2\2\u23d4\u23d8\3\2\2\2\u23d5\u23d7\5\u02fa\u017e\2\u23d6")
        buf.write("\u23d5\3\2\2\2\u23d7\u23da\3\2\2\2\u23d8\u23d6\3\2\2\2")
        buf.write("\u23d8\u23d9\3\2\2\2\u23d9\u23e5\3\2\2\2\u23da\u23d8\3")
        buf.write("\2\2\2\u23db\u23e3\7\u0337\2\2\u23dc\u23e4\7\u030f\2\2")
        buf.write("\u23dd\u23e1\7\u0311\2\2\u23de\u23df\7\u0335\2\2\u23df")
        buf.write("\u23e0\7\u031f\2\2\u23e0\u23e2\7\u0336\2\2\u23e1\u23de")
        buf.write("\3\2\2\2\u23e1\u23e2\3\2\2\2\u23e2\u23e4\3\2\2\2\u23e3")
        buf.write("\u23dc\3\2\2\2\u23e3\u23dd\3\2\2\2\u23e4\u23e6\3\2\2\2")
        buf.write("\u23e5\u23db\3\2\2\2\u23e5\u23e6\3\2\2\2\u23e6\u23ea\3")
        buf.write("\2\2\2\u23e7\u23e8\7\u0337\2\2\u23e8\u23e9\7\u01e8\2\2")
        buf.write("\u23e9\u23eb\ts\2\2\u23ea\u23e7\3\2\2\2\u23ea\u23eb\3")
        buf.write("\2\2\2\u23eb\u2421\3\2\2\2\u23ec\u23ed\7\u0086\2\2\u23ed")
        buf.write("\u23ee\7\u030e\2\2\u23ee\u23f2\7\u01f6\2\2\u23ef\u23f1")
        buf.write("\5\u02fa\u017e\2\u23f0\u23ef\3\2\2\2\u23f1\u23f4\3\2\2")
        buf.write("\2\u23f2\u23f0\3\2\2\2\u23f2\u23f3\3\2\2\2\u23f3\u23f7")
        buf.write("\3\2\2\2\u23f4\u23f2\3\2\2\2\u23f5\u23f6\7\u0337\2\2\u23f6")
        buf.write("\u23f8\7\u030f\2\2\u23f7\u23f5\3\2\2\2\u23f7\u23f8\3\2")
        buf.write("\2\2\u23f8\u2421\3\2\2\2\u23f9\u23fa\7\u0086\2\2\u23fa")
        buf.write("\u23fb\7\u030e\2\2\u23fb\u23ff\7\u0283\2\2\u23fc\u23fd")
        buf.write("\7\u0335\2\2\u23fd\u23fe\7\u031f\2\2\u23fe\u2400\7\u0336")
        buf.write("\2\2\u23ff\u23fc\3\2\2\2\u23ff\u2400\3\2\2\2\u2400\u2404")
        buf.write("\3\2\2\2\u2401\u2403\5\u02fa\u017e\2\u2402\u2401\3\2\2")
        buf.write("\2\u2403\u2406\3\2\2\2\u2404\u2402\3\2\2\2\u2404\u2405")
        buf.write("\3\2\2\2\u2405\u240a\3\2\2\2\u2406\u2404\3\2\2\2\u2407")
        buf.write("\u2408\7\u0337\2\2\u2408\u2409\7\u01e8\2\2\u2409\u240b")
        buf.write("\ts\2\2\u240a\u2407\3\2\2\2\u240a\u240b\3\2\2\2\u240b")
        buf.write("\u2421\3\2\2\2\u240c\u240d\7\u0086\2\2\u240d\u240e\7\u0228")
        buf.write("\2\2\u240e\u2416\tt\2\2\u240f\u2410\7\u0337\2\2\u2410")
        buf.write("\u2414\7\u02b7\2\2\u2411\u2412\7\u0335\2\2\u2412\u2413")
        buf.write("\7\u031f\2\2\u2413\u2415\7\u0336\2\2\u2414\u2411\3\2\2")
        buf.write("\2\u2414\u2415\3\2\2\2\u2415\u2417\3\2\2\2\u2416\u240f")
        buf.write("\3\2\2\2\u2416\u2417\3\2\2\2\u2417\u241a\3\2\2\2\u2418")
        buf.write("\u2419\7\u0337\2\2\u2419\u241b\7\u021f\2\2\u241a\u2418")
        buf.write("\3\2\2\2\u241a\u241b\3\2\2\2\u241b\u241e\3\2\2\2\u241c")
        buf.write("\u241d\7\u0337\2\2\u241d\u241f\7\u030b\2\2\u241e\u241c")
        buf.write("\3\2\2\2\u241e\u241f\3\2\2\2\u241f\u2421\3\2\2\2\u2420")
        buf.write("\u23c8\3\2\2\2\u2420\u23ca\3\2\2\2\u2420\u23ec\3\2\2\2")
        buf.write("\u2420\u23f9\3\2\2\2\u2420\u240c\3\2\2\2\u2421\u02f9\3")
        buf.write("\2\2\2\u2422\u2423\7\u0337\2\2\u2423\u2424\tu\2\2\u2424")
        buf.write("\u02fb\3\2\2\2\u2425\u2427\5\u02cc\u0167\2\u2426\u2428")
        buf.write("\tv\2\2\u2427\u2426\3\2\2\2\u2427\u2428\3\2\2\2\u2428")
        buf.write("\u02fd\3\2\2\2\u2429\u242a\5\u02cc\u0167\2\u242a\u02ff")
        buf.write("\3\2\2\2\u242b\u242c\7\u00ec\2\2\u242c\u242d\7\u0335\2")
        buf.write("\2\u242d\u2432\5\u0302\u0182\2\u242e\u242f\7\u0337\2\2")
        buf.write("\u242f\u2431\5\u0302\u0182\2\u2430\u242e\3\2\2\2\u2431")
        buf.write("\u2434\3\2\2\2\u2432\u2430\3\2\2\2\u2432\u2433\3\2\2\2")
        buf.write("\u2433\u2435\3\2\2\2\u2434\u2432\3\2\2\2\u2435\u2436\7")
        buf.write("\u0336\2\2\u2436\u0301\3\2\2\2\u2437\u2438\7\u01fb\2\2")
        buf.write("\u2438\u2465\7\u031b\2\2\u2439\u243a\tw\2\2\u243a\u2465")
        buf.write("\7\u0093\2\2\u243b\u243c\tx\2\2\u243c\u2465\7\u0167\2")
        buf.write("\2\u243d\u243e\ty\2\2\u243e\u2465\7\u00aa\2\2\u243f\u2440")
        buf.write("\7\u01f4\2\2\u2440\u2465\7\u0308\2\2\u2441\u2442\7\u0205")
        buf.write("\2\2\u2442\u2465\7\u00ee\2\2\u2443\u2465\7\u021b\2\2\u2444")
        buf.write("\u2445\7\u022a\2\2\u2445\u2465\7\u00fb\2\2\u2446\u2447")
        buf.write("\7\u022b\2\2\u2447\u2465\7\u00fb\2\2\u2448\u2449\7\u024b")
        buf.write("\2\2\u2449\u2465\7\u031b\2\2\u244a\u244b\7\u024c\2\2\u244b")
        buf.write("\u2465\7\u031b\2\2\u244c\u244d\7\u027a\2\2\u244d\u244e")
        buf.write("\7\u0086\2\2\u244e\u244f\7\u0335\2\2\u244f\u2454\5\u0304")
        buf.write("\u0183\2\u2450\u2451\7\u0337\2\2\u2451\u2453\5\u0304\u0183")
        buf.write("\2\u2452\u2450\3\2\2\2\u2453\u2456\3\2\2\2\u2454\u2452")
        buf.write("\3\2\2\2\u2454\u2455\3\2\2\2\u2455\u2457\3\2\2\2\u2456")
        buf.write("\u2454\3\2\2\2\u2457\u2458\7\u0336\2\2\u2458\u2465\3\2")
        buf.write("\2\2\u2459\u245a\7\u027a\2\2\u245a\u245b\7\u0086\2\2\u245b")
        buf.write("\u2465\7\u02ff\2\2\u245c\u245d\7\u027f\2\2\u245d\u2465")
        buf.write("\tM\2\2\u245e\u2465\7\u02a3\2\2\u245f\u2460\7\u02b6\2")
        buf.write("\2\u2460\u2465\7\u00fb\2\2\u2461\u2462\7\u016f\2\2\u2462")
        buf.write("\u2463\7\u00fb\2\2\u2463\u2465\7\u031f\2\2\u2464\u2437")
        buf.write("\3\2\2\2\u2464\u2439\3\2\2\2\u2464\u243b\3\2\2\2\u2464")
        buf.write("\u243d\3\2\2\2\u2464\u243f\3\2\2\2\u2464\u2441\3\2\2\2")
        buf.write("\u2464\u2443\3\2\2\2\u2464\u2444\3\2\2\2\u2464\u2446\3")
        buf.write("\2\2\2\u2464\u2448\3\2\2\2\u2464\u244a\3\2\2\2\u2464\u244c")
        buf.write("\3\2\2\2\u2464\u2459\3\2\2\2\u2464\u245c\3\2\2\2\u2464")
        buf.write("\u245e\3\2\2\2\u2464\u245f\3\2\2\2\u2464\u2461\3\2\2\2")
        buf.write("\u2465\u0303\3\2\2\2\u2466\u246d\7\u031a\2\2\u2467\u246e")
        buf.write("\7\u02ff\2\2\u2468\u246b\7\u0323\2\2\u2469\u246c\5\u03b2")
        buf.write("\u01da\2\u246a\u246c\7\u00df\2\2\u246b\u2469\3\2\2\2\u246b")
        buf.write("\u246a\3\2\2\2\u246c\u246e\3\2\2\2\u246d\u2467\3\2\2\2")
        buf.write("\u246d\u2468\3\2\2\2\u246e\u0305\3\2\2\2\u246f\u2474\5")
        buf.write("\u0312\u018a\2\u2470\u2471\7\u0337\2\2\u2471\u2473\5\u0312")
        buf.write("\u018a\2\u2472\u2470\3\2\2\2\u2473\u2476\3\2\2\2\u2474")
        buf.write("\u2472\3\2\2\2\u2474\u2475\3\2\2\2\u2475\u0307\3\2\2\2")
        buf.write("\u2476\u2474\3\2\2\2\u2477\u2478\7\u0335\2\2\u2478\u247d")
        buf.write("\5\u0276\u013c\2\u2479\u247a\7\u0337\2\2\u247a\u247c\5")
        buf.write("\u0276\u013c\2\u247b\u2479\3\2\2\2\u247c\u247f\3\2\2\2")
        buf.write("\u247d\u247b\3\2\2\2\u247d\u247e\3\2\2\2\u247e\u2480\3")
        buf.write("\2\2\2\u247f\u247d\3\2\2\2\u2480\u2481\7\u0336\2\2\u2481")
        buf.write("\u0309\3\2\2\2\u2482\u2488\7\u033a\2\2\u2483\u2484\5\u0382")
        buf.write("\u01c2\2\u2484\u2485\7\u0330\2\2\u2485\u2486\5\u030a\u0186")
        buf.write("\2\u2486\u2488\3\2\2\2\u2487\u2482\3\2\2\2\u2487\u2483")
        buf.write("\3\2\2\2\u2488\u030b\3\2\2\2\u2489\u248a\5\u0382\u01c2")
        buf.write("\2\u248a\u248b\7\u0330\2\2\u248b\u248d\3\2\2\2\u248c\u2489")
        buf.write("\3\2\2\2\u248c\u248d\3\2\2\2\u248d\u2493\3\2\2\2\u248e")
        buf.write("\u2494\5\u03b6\u01dc\2\u248f\u2490\7\u0334\2\2\u2490\u2494")
        buf.write("\7\u0097\2\2\u2491\u2492\7\u0334\2\2\u2492\u2494\7\u02bb")
        buf.write("\2\2\u2493\u248e\3\2\2\2\u2493\u248f\3\2\2\2\u2493\u2491")
        buf.write("\3\2\2\2\u2494\u2496\3\2\2\2\u2495\u2497\5\u0346\u01a4")
        buf.write("\2\u2496\u2495\3\2\2\2\u2496\u2497\3\2\2\2\u2497\u030d")
        buf.write("\3\2\2\2\u2498\u2499\5\u03b6\u01dc\2\u2499\u249a\7\u0330")
        buf.write("\2\2\u249a\u249b\5\u03b6\u01dc\2\u249b\u249d\5\u0308\u0185")
        buf.write("\2\u249c\u249e\5\u0346\u01a4\2\u249d\u249c\3\2\2\2\u249d")
        buf.write("\u249e\3\2\2\2\u249e\u24aa\3\2\2\2\u249f\u24a0\5\u03b6")
        buf.write("\u01dc\2\u24a0\u24a1\7\u0339\2\2\u24a1\u24a2\7\u0339\2")
        buf.write("\2\u24a2\u24a4\5\u03b6\u01dc\2\u24a3\u24a5\5\u0308\u0185")
        buf.write("\2\u24a4\u24a3\3\2\2\2\u24a4\u24a5\3\2\2\2\u24a5\u24a7")
        buf.write("\3\2\2\2\u24a6\u24a8\5\u0346\u01a4\2\u24a7\u24a6\3\2\2")
        buf.write("\2\u24a7\u24a8\3\2\2\2\u24a8\u24aa\3\2\2\2\u24a9\u2498")
        buf.write("\3\2\2\2\u24a9\u249f\3\2\2\2\u24aa\u030f\3\2\2\2\u24ab")
        buf.write("\u24ac\5\u0356\u01ac\2\u24ac\u24ad\7\u0323\2\2\u24ad\u24ae")
        buf.write("\5\u02cc\u0167\2\u24ae\u24b4\3\2\2\2\u24af\u24b1\5\u02cc")
        buf.write("\u0167\2\u24b0\u24b2\5\u0346\u01a4\2\u24b1\u24b0\3\2\2")
        buf.write("\2\u24b1\u24b2\3\2\2\2\u24b2\u24b4\3\2\2\2\u24b3\u24ab")
        buf.write("\3\2\2\2\u24b3\u24af\3\2\2\2\u24b4\u0311\3\2\2\2\u24b5")
        buf.write("\u24ba\5\u030a\u0186\2\u24b6\u24ba\5\u030c\u0187\2\u24b7")
        buf.write("\u24ba\5\u030e\u0188\2\u24b8\u24ba\5\u0310\u0189\2\u24b9")
        buf.write("\u24b5\3\2\2\2\u24b9\u24b6\3\2\2\2\u24b9\u24b7\3\2\2\2")
        buf.write("\u24b9\u24b8\3\2\2\2\u24ba\u0313\3\2\2\2\u24bb\u24c0\5")
        buf.write("\u0316\u018c\2\u24bc\u24bd\7\u0337\2\2\u24bd\u24bf\5\u0316")
        buf.write("\u018c\2\u24be\u24bc\3\2\2\2\u24bf\u24c2\3\2\2\2\u24c0")
        buf.write("\u24be\3\2\2\2\u24c0\u24c1\3\2\2\2\u24c1\u0315\3\2\2\2")
        buf.write("\u24c2\u24c0\3\2\2\2\u24c3\u24c9\5\u0318\u018d\2\u24c4")
        buf.write("\u24c5\7\u0335\2\2\u24c5\u24c6\5\u0318\u018d\2\u24c6\u24c7")
        buf.write("\7\u0336\2\2\u24c7\u24c9\3\2\2\2\u24c8\u24c3\3\2\2\2\u24c8")
        buf.write("\u24c4\3\2\2\2\u24c9\u0317\3\2\2\2\u24ca\u24ce\5\u031a")
        buf.write("\u018e\2\u24cb\u24cd\5\u0324\u0193\2\u24cc\u24cb\3\2\2")
        buf.write("\2\u24cd\u24d0\3\2\2\2\u24ce\u24cc\3\2\2\2\u24ce\u24cf")
        buf.write("\3\2\2\2\u24cf\u0319\3\2\2\2\u24d0\u24ce\3\2\2\2\u24d1")
        buf.write("\u24d3\5\u032c\u0197\2\u24d2\u24d4\5\u0348\u01a5\2\u24d3")
        buf.write("\u24d2\3\2\2\2\u24d3\u24d4\3\2\2\2\u24d4\u2500\3\2\2\2")
        buf.write("\u24d5\u24d7\5\u0380\u01c1\2\u24d6\u24d8\5\u0348\u01a5")
        buf.write("\2\u24d7\u24d6\3\2\2\2\u24d7\u24d8\3\2\2\2\u24d8\u2500")
        buf.write("\3\2\2\2\u24d9\u24db\5\u032e\u0198\2\u24da\u24dc\5\u0348")
        buf.write("\u01a5\2\u24db\u24da\3\2\2\2\u24db\u24dc\3\2\2\2\u24dc")
        buf.write("\u2500\3\2\2\2\u24dd\u24e2\5\u0332\u019a\2\u24de\u24e0")
        buf.write("\5\u0348\u01a5\2\u24df\u24e1\5\u0354\u01ab\2\u24e0\u24df")
        buf.write("\3\2\2\2\u24e0\u24e1\3\2\2\2\u24e1\u24e3\3\2\2\2\u24e2")
        buf.write("\u24de\3\2\2\2\u24e2\u24e3\3\2\2\2\u24e3\u2500\3\2\2\2")
        buf.write("\u24e4\u24e5\5\u0322\u0192\2\u24e5\u24e6\5\u0348\u01a5")
        buf.write("\2\u24e6\u2500\3\2\2\2\u24e7\u24e9\5\u0334\u019b\2\u24e8")
        buf.write("\u24ea\5\u0348\u01a5\2\u24e9\u24e8\3\2\2\2\u24e9\u24ea")
        buf.write("\3\2\2\2\u24ea\u2500\3\2\2\2\u24eb\u24ed\7\u031a\2\2\u24ec")
        buf.write("\u24ee\5\u0348\u01a5\2\u24ed\u24ec\3\2\2\2\u24ed\u24ee")
        buf.write("\3\2\2\2\u24ee\u2500\3\2\2\2\u24ef\u24f0\7\u031a\2\2\u24f0")
        buf.write("\u24f1\7\u0330\2\2\u24f1\u24f6\5\u0334\u019b\2\u24f2\u24f4")
        buf.write("\5\u0348\u01a5\2\u24f3\u24f5\5\u0354\u01ab\2\u24f4\u24f3")
        buf.write("\3\2\2\2\u24f4\u24f5\3\2\2\2\u24f5\u24f7\3\2\2\2\u24f6")
        buf.write("\u24f2\3\2\2\2\u24f6\u24f7\3\2\2\2\u24f7\u2500\3\2\2\2")
        buf.write("\u24f8\u2500\5\u031c\u018f\2\u24f9\u24fa\7\u0339\2\2\u24fa")
        buf.write("\u24fb\7\u0339\2\2\u24fb\u24fd\5\u0334\u019b\2\u24fc\u24fe")
        buf.write("\5\u0348\u01a5\2\u24fd\u24fc\3\2\2\2\u24fd\u24fe\3\2\2")
        buf.write("\2\u24fe\u2500\3\2\2\2\u24ff\u24d1\3\2\2\2\u24ff\u24d5")
        buf.write("\3\2\2\2\u24ff\u24d9\3\2\2\2\u24ff\u24dd\3\2\2\2\u24ff")
        buf.write("\u24e4\3\2\2\2\u24ff\u24e7\3\2\2\2\u24ff\u24eb\3\2\2\2")
        buf.write("\u24ff\u24ef\3\2\2\2\u24ff\u24f8\3\2\2\2\u24ff\u24f9\3")
        buf.write("\2\2\2\u2500\u031b\3\2\2\2\u2501\u2502\7\u00eb\2\2\u2502")
        buf.write("\u2503\7\u0335\2\2\u2503\u2504\5\u02cc\u0167\2\u2504\u2505")
        buf.write("\7\u0337\2\2\u2505\u2508\5\u02cc\u0167\2\u2506\u2507\7")
        buf.write("\u0337\2\2\u2507\u2509\5\u02cc\u0167\2\u2508\u2506\3\2")
        buf.write("\2\2\u2508\u2509\3\2\2\2\u2509\u250a\3\2\2\2\u250a\u2510")
        buf.write("\7\u0336\2\2\u250b\u250c\7\u017c\2\2\u250c\u250d\7\u0335")
        buf.write("\2\2\u250d\u250e\5\u031e\u0190\2\u250e\u250f\7\u0336\2")
        buf.write("\2\u250f\u2511\3\2\2\2\u2510\u250b\3\2\2\2\u2510\u2511")
        buf.write("\3\2\2\2\u2511\u031d\3\2\2\2\u2512\u2517\5\u0320\u0191")
        buf.write("\2\u2513\u2514\7\u0337\2\2\u2514\u2516\5\u0320\u0191\2")
        buf.write("\u2515\u2513\3\2\2\2\u2516\u2519\3\2\2\2\u2517\u2515\3")
        buf.write("\2\2\2\u2517\u2518\3\2\2\2\u2518\u031f\3\2\2\2\u2519\u2517")
        buf.write("\3\2\2\2\u251a\u251b\7\u031c\2\2\u251b\u251d\5\u03ae\u01d8")
        buf.write("\2\u251c\u251e\7\u031f\2\2\u251d\u251c\3\2\2\2\u251d\u251e")
        buf.write("\3\2\2\2\u251e\u0321\3\2\2\2\u251f\u2520\7,\2\2\u2520")
        buf.write("\u2521\7\u0335\2\2\u2521\u2522\7-\2\2\u2522\u2523\5\u0382")
        buf.write("\u01c2\2\u2523\u2524\7\u0337\2\2\u2524\u2525\tz\2\2\u2525")
        buf.write("\u2526\7\u0336\2\2\u2526\u0323\3\2\2\2\u2527\u2529\7\u00a1")
        buf.write("\2\2\u2528\u2527\3\2\2\2\u2528\u2529\3\2\2\2\u2529\u252f")
        buf.write("\3\2\2\2\u252a\u252c\t{\2\2\u252b\u252d\7\u00ef\2\2\u252c")
        buf.write("\u252b\3\2\2\2\u252c\u252d\3\2\2\2\u252d\u252f\3\2\2\2")
        buf.write("\u252e\u2528\3\2\2\2\u252e\u252a\3\2\2\2\u252f\u2531\3")
        buf.write("\2\2\2\u2530\u2532\t|\2\2\u2531\u2530\3\2\2\2\u2531\u2532")
        buf.write("\3\2\2\2\u2532\u2533\3\2\2\2\u2533\u2534\7\u00aa\2\2\u2534")
        buf.write("\u2535\5\u0316\u018c\2\u2535\u2536\7\u00e5\2\2\u2536\u2537")
        buf.write("\5\u02e2\u0172\2\u2537\u254a\3\2\2\2\u2538\u2539\7J\2")
        buf.write("\2\u2539\u253a\7\u00aa\2\2\u253a\u254a\5\u0316\u018c\2")
        buf.write("\u253b\u253c\7J\2\2\u253c\u253d\7\u0196\2\2\u253d\u254a")
        buf.write("\5\u0316\u018c\2\u253e\u253f\7\u00ef\2\2\u253f\u2540\7")
        buf.write("\u0196\2\2\u2540\u254a\5\u0316\u018c\2\u2541\u2542\7\u00fa")
        buf.write("\2\2\u2542\u2543\5\u0326\u0194\2\u2543\u2544\5\u0348\u01a5")
        buf.write("\2\u2544\u254a\3\2\2\2\u2545\u2546\7\u016a\2\2\u2546\u2547")
        buf.write("\5\u0328\u0195\2\u2547\u2548\5\u0348\u01a5\2\u2548\u254a")
        buf.write("\3\2\2\2\u2549\u252e\3\2\2\2\u2549\u2538\3\2\2\2\u2549")
        buf.write("\u253b\3\2\2\2\u2549\u253e\3\2\2\2\u2549\u2541\3\2\2\2")
        buf.write("\u2549\u2545\3\2\2\2\u254a\u0325\3\2\2\2\u254b\u254c\7")
        buf.write("\u0335\2\2\u254c\u254d\5\u035e\u01b0\2\u254d\u254e\7\u0086")
        buf.write("\2\2\u254e\u254f\5\u038a\u01c6\2\u254f\u2550\7\u009b\2")
        buf.write("\2\u2550\u2551\5\u0354\u01ab\2\u2551\u2552\7\u0336\2\2")
        buf.write("\u2552\u0327\3\2\2\2\u2553\u2554\7\u0335\2\2\u2554\u2555")
        buf.write("\5\u02cc\u0167\2\u2555\u2556\7\u0086\2\2\u2556\u2557\5")
        buf.write("\u038a\u01c6\2\u2557\u2558\7\u009b\2\2\u2558\u2559\7\u0335")
        buf.write("\2\2\u2559\u255a\5\u032a\u0196\2\u255a\u255b\7\u0336\2")
        buf.write("\2\u255b\u255c\7\u0336\2\2\u255c\u0329\3\2\2\2\u255d\u2562")
        buf.write("\5\u038a\u01c6\2\u255e\u255f\7\u0337\2\2\u255f\u2561\5")
        buf.write("\u038a\u01c6\2\u2560\u255e\3\2\2\2\u2561\u2564\3\2\2\2")
        buf.write("\u2562\u2560\3\2\2\2\u2562\u2563\3\2\2\2\u2563\u032b\3")
        buf.write("\2\2\2\u2564\u2562\3\2\2\2\u2565\u2567\5\u0382\u01c2\2")
        buf.write("\u2566\u2568\5\u034c\u01a7\2\u2567\u2566\3\2\2\2\u2567")
        buf.write("\u2568\3\2\2\2\u2568\u032d\3\2\2\2\u2569\u256a\7\u00ea")
        buf.write("\2\2\u256a\u256b\7\u0335\2\2\u256b\u256c\7\u031f\2\2\u256c")
        buf.write("\u256d\7\u0337\2\2\u256d\u256e\7\u031f\2\2\u256e\u256f")
        buf.write("\7\u0337\2\2\u256f\u2570\7\u031f\2\2\u2570\u2584\7\u0336")
        buf.write("\2\2\u2571\u2572\7\u00ea\2\2\u2572\u2573\7\u0335\2\2\u2573")
        buf.write("\u2574\7%\2\2\u2574\u2575\7\u031f\2\2\u2575\u257f\7\u0337")
        buf.write("\2\2\u2576\u257b\5\u0330\u0199\2\u2577\u2578\7\u0337\2")
        buf.write("\2\u2578\u257a\5\u0330\u0199\2\u2579\u2577\3\2\2\2\u257a")
        buf.write("\u257d\3\2\2\2\u257b\u2579\3\2\2\2\u257b\u257c\3\2\2\2")
        buf.write("\u257c\u2580\3\2\2\2\u257d\u257b\3\2\2\2\u257e\u2580\5")
        buf.write("\u03b6\u01dc\2\u257f\u2576\3\2\2\2\u257f\u257e\3\2\2\2")
        buf.write("\u2580\u2581\3\2\2\2\u2581\u2582\7\u0336\2\2\u2582\u2584")
        buf.write("\3\2\2\2\u2583\u2569\3\2\2\2\u2583\u2571\3\2\2\2\u2584")
        buf.write("\u032f\3\2\2\2\u2585\u2586\5\u03b6\u01dc\2\u2586\u2587")
        buf.write("\7\u0323\2\2\u2587\u2588\t\30\2\2\u2588\u0331\3\2\2\2")
        buf.write("\u2589\u2594\5\u02d8\u016d\2\u258a\u258b\7\u0335\2\2\u258b")
        buf.write("\u258c\5\u02d8\u016d\2\u258c\u258d\7\u0336\2\2\u258d\u2594")
        buf.write("\3\2\2\2\u258e\u2594\5\u0358\u01ad\2\u258f\u2590\7\u0335")
        buf.write("\2\2\u2590\u2591\5\u0358\u01ad\2\u2591\u2592\7\u0336\2")
        buf.write("\2\u2592\u2594\3\2\2\2\u2593\u2589\3\2\2\2\u2593\u258a")
        buf.write("\3\2\2\2\u2593\u258e\3\2\2\2\u2593\u258f\3\2\2\2\u2594")
        buf.write("\u0333\3\2\2\2\u2595\u2611\5\u035c\u01af\2\u2596\u2611")
        buf.write("\5\u035e\u01b0\2\u2597\u2611\5\u0360\u01b1\2\u2598\u2599")
        buf.write("\5\u039a\u01ce\2\u2599\u259b\7\u0335\2\2\u259a\u259c\5")
        buf.write("\u035a\u01ae\2\u259b\u259a\3\2\2\2\u259b\u259c\3\2\2\2")
        buf.write("\u259c\u259d\3\2\2\2\u259d\u259e\7\u0336\2\2\u259e\u2611")
        buf.write("\3\2\2\2\u259f\u25a0\7\u01a8\2\2\u25a0\u25a1\7\u0335\2")
        buf.write("\2\u25a1\u25a2\7\u033a\2\2\u25a2\u2611\7\u0336\2\2\u25a3")
        buf.write("\u25a4\7\u01b0\2\2\u25a4\u25a5\7\u0335\2\2\u25a5\u25a6")
        buf.write("\5\u02cc\u0167\2\u25a6\u25a7\7\20\2\2\u25a7\u25a8\5\u03ae")
        buf.write("\u01d8\2\u25a8\u25a9\7\u0336\2\2\u25a9\u2611\3\2\2\2\u25aa")
        buf.write("\u25ab\7G\2\2\u25ab\u25ac\7\u0335\2\2\u25ac\u25ad\5\u03ae")
        buf.write("\u01d8\2\u25ad\u25ae\7\u0337\2\2\u25ae\u25b1\5\u02cc\u0167")
        buf.write("\2\u25af\u25b0\7\u0337\2\2\u25b0\u25b2\5\u02cc\u0167\2")
        buf.write("\u25b1\u25af\3\2\2\2\u25b1\u25b2\3\2\2\2\u25b2\u25b3\3")
        buf.write("\2\2\2\u25b3\u25b4\7\u0336\2\2\u25b4\u2611\3\2\2\2\u25b5")
        buf.write("\u25b6\7\u01b5\2\2\u25b6\u25b7\7\u0335\2\2\u25b7\u25b8")
        buf.write("\7\u033a\2\2\u25b8\u2611\7\u0336\2\2\u25b9\u25ba\7\66")
        buf.write("\2\2\u25ba\u25bb\7\u0335\2\2\u25bb\u25bc\5\u035a\u01ae")
        buf.write("\2\u25bc\u25bd\7\u0336\2\2\u25bd\u2611\3\2\2\2\u25be\u2611")
        buf.write("\7N\2\2\u25bf\u2611\7O\2\2\u25c0\u25c1\7\u01cc\2\2\u25c1")
        buf.write("\u25c2\7\u0335\2\2\u25c2\u25c3\7\u031c\2\2\u25c3\u25c4")
        buf.write("\7\u0337\2\2\u25c4\u25c5\5\u02cc\u0167\2\u25c5\u25c6\7")
        buf.write("\u0337\2\2\u25c6\u25c7\5\u02cc\u0167\2\u25c7\u25c8\7\u0336")
        buf.write("\2\2\u25c8\u2611\3\2\2\2\u25c9\u25ca\7\u01cd\2\2\u25ca")
        buf.write("\u25cb\7\u0335\2\2\u25cb\u25cc\7\u031c\2\2\u25cc\u25cd")
        buf.write("\7\u0337\2\2\u25cd\u25ce\5\u02cc\u0167\2\u25ce\u25cf\7")
        buf.write("\u0337\2\2\u25cf\u25d0\5\u02cc\u0167\2\u25d0\u25d1\7\u0336")
        buf.write("\2\2\u25d1\u2611\3\2\2\2\u25d2\u25d3\7\u01ce\2\2\u25d3")
        buf.write("\u25d4\7\u0335\2\2\u25d4\u25d5\7\u031c\2\2\u25d5\u25d6")
        buf.write("\7\u0337\2\2\u25d6\u25d7\5\u02cc\u0167\2\u25d7\u25d8\7")
        buf.write("\u0336\2\2\u25d8\u2611\3\2\2\2\u25d9\u25da\7\u01cf\2\2")
        buf.write("\u25da\u25db\7\u0335\2\2\u25db\u25dc\7\u031c\2\2\u25dc")
        buf.write("\u25dd\7\u0337\2\2\u25dd\u25de\5\u02cc\u0167\2\u25de\u25df")
        buf.write("\7\u0336\2\2\u25df\u2611\3\2\2\2\u25e0\u25e1\7\u020d\2")
        buf.write("\2\u25e1\u25e2\7\u0335\2\2\u25e2\u2611\7\u0336\2\2\u25e3")
        buf.write("\u25e4\7\u020e\2\2\u25e4\u25e5\7\u0335\2\2\u25e5\u2611")
        buf.write("\7\u0336\2\2\u25e6\u25e7\7\u0097\2\2\u25e7\u25e8\7\u0335")
        buf.write("\2\2\u25e8\u25eb\5\u03ae\u01d8\2\u25e9\u25ea\7\u0337\2")
        buf.write("\2\u25ea\u25ec\7\u031b\2\2\u25eb\u25e9\3\2\2\2\u25eb\u25ec")
        buf.write("\3\2\2\2\u25ec\u25ef\3\2\2\2\u25ed\u25ee\7\u0337\2\2\u25ee")
        buf.write("\u25f0\7\u031b\2\2\u25ef\u25ed\3\2\2\2\u25ef\u25f0\3\2")
        buf.write("\2\2\u25f0\u25f1\3\2\2\2\u25f1\u25f2\7\u0336\2\2\u25f2")
        buf.write("\u2611\3\2\2\2\u25f3\u2611\7\u0253\2\2\u25f4\u25f5\7\u00e0")
        buf.write("\2\2\u25f5\u25f6\7\u0335\2\2\u25f6\u25f7\5\u02cc\u0167")
        buf.write("\2\u25f7\u25f8\7\u0337\2\2\u25f8\u25f9\5\u02cc\u0167\2")
        buf.write("\u25f9\u25fa\7\u0336\2\2\u25fa\u2611\3\2\2\2\u25fb\u25fc")
        buf.write("\7\u02e2\2\2\u25fc\u25fd\7\u0335\2\2\u25fd\u25fe\5\u02cc")
        buf.write("\u0167\2\u25fe\u25ff\7\u0337\2\2\u25ff\u2600\7\u031b\2")
        buf.write("\2\u2600\u2601\7\u0337\2\2\u2601\u2602\7\u031b\2\2\u2602")
        buf.write("\u2603\7\u0337\2\2\u2603\u2604\5\u02cc\u0167\2\u2604\u2605")
        buf.write("\7\u0336\2\2\u2605\u2611\3\2\2\2\u2606\u2611\7\u013c\2")
        buf.write("\2\u2607\u2611\7\u0155\2\2\u2608\u2609\7\u00a9\2\2\u2609")
        buf.write("\u260a\7\u0335\2\2\u260a\u260b\5\u02cc\u0167\2\u260b\u260c")
        buf.write("\7\u0337\2\2\u260c\u260d\5\u02cc\u0167\2\u260d\u260e\7")
        buf.write("\u0336\2\2\u260e\u2611\3\2\2\2\u260f\u2611\5\u0336\u019c")
        buf.write("\2\u2610\u2595\3\2\2\2\u2610\u2596\3\2\2\2\u2610\u2597")
        buf.write("\3\2\2\2\u2610\u2598\3\2\2\2\u2610\u259f\3\2\2\2\u2610")
        buf.write("\u25a3\3\2\2\2\u2610\u25aa\3\2\2\2\u2610\u25b5\3\2\2\2")
        buf.write("\u2610\u25b9\3\2\2\2\u2610\u25be\3\2\2\2\u2610\u25bf\3")
        buf.write("\2\2\2\u2610\u25c0\3\2\2\2\u2610\u25c9\3\2\2\2\u2610\u25d2")
        buf.write("\3\2\2\2\u2610\u25d9\3\2\2\2\u2610\u25e0\3\2\2\2\u2610")
        buf.write("\u25e3\3\2\2\2\u2610\u25e6\3\2\2\2\u2610\u25f3\3\2\2\2")
        buf.write("\u2610\u25f4\3\2\2\2\u2610\u25fb\3\2\2\2\u2610\u2606\3")
        buf.write("\2\2\2\u2610\u2607\3\2\2\2\u2610\u2608\3\2\2\2\u2610\u260f")
        buf.write("\3\2\2\2\u2611\u0335\3\2\2\2\u2612\u2618\5\u0338\u019d")
        buf.write("\2\u2613\u2618\5\u033a\u019e\2\u2614\u2618\5\u033c\u019f")
        buf.write("\2\u2615\u2618\5\u033e\u01a0\2\u2616\u2618\5\u0340\u01a1")
        buf.write("\2\u2617\u2612\3\2\2\2\u2617\u2613\3\2\2\2\u2617\u2614")
        buf.write("\3\2\2\2\u2617\u2615\3\2\2\2\u2617\u2616\3\2\2\2\u2618")
        buf.write("\u0337\3\2\2\2\u2619\u261e\7\u031a\2\2\u261a\u261e\7\u031c")
        buf.write("\2\2\u261b\u261e\7s\2\2\u261c\u261e\5\u033a\u019e\2\u261d")
        buf.write("\u2619\3\2\2\2\u261d\u261a\3\2\2\2\u261d\u261b\3\2\2\2")
        buf.write("\u261d\u261c\3\2\2\2\u261e\u261f\3\2\2\2\u261f\u2620\7")
        buf.write("\u0330\2\2\u2620\u2621\7\u0304\2\2\u2621\u2622\7\u0335")
        buf.write("\2\2\u2622\u2623\7\u031f\2\2\u2623\u2624\7\u0337\2\2\u2624")
        buf.write("\u2625\7\u031f\2\2\u2625\u2645\7\u0336\2\2\u2626\u262b")
        buf.write("\7\u031a\2\2\u2627\u262b\7\u031c\2\2\u2628\u262b\7s\2")
        buf.write("\2\u2629\u262b\5\u033a\u019e\2\u262a\u2626\3\2\2\2\u262a")
        buf.write("\u2627\3\2\2\2\u262a\u2628\3\2\2\2\u262a\u2629\3\2\2\2")
        buf.write("\u262b\u262c\3\2\2\2\u262c\u262d\7\u0330\2\2\u262d\u262e")
        buf.write("\7\u02b9\2\2\u262e\u262f\7\u0330\2\2\u262f\u2630\7\u0304")
        buf.write("\2\2\u2630\u2631\7\u0335\2\2\u2631\u2632\7\u031f\2\2\u2632")
        buf.write("\u2633\7\u0337\2\2\u2633\u2634\7\u031f\2\2\u2634\u2645")
        buf.write("\7\u0336\2\2\u2635\u263a\7\u031a\2\2\u2636\u263a\7\u031c")
        buf.write("\2\2\u2637\u263a\7s\2\2\u2638\u263a\5\u033a\u019e\2\u2639")
        buf.write("\u2635\3\2\2\2\u2639\u2636\3\2\2\2\u2639\u2637\3\2\2\2")
        buf.write("\u2639\u2638\3\2\2\2\u263a\u263b\3\2\2\2\u263b\u263c\7")
        buf.write("\u0330\2\2\u263c\u263d\7\u00f2\2\2\u263d\u263e\7\u0330")
        buf.write("\2\2\u263e\u263f\7\u0304\2\2\u263f\u2640\7\u0335\2\2\u2640")
        buf.write("\u2641\7\u031f\2\2\u2641\u2642\7\u0337\2\2\u2642\u2643")
        buf.write("\7\u031f\2\2\u2643\u2645\7\u0336\2\2\u2644\u261d\3\2\2")
        buf.write("\2\u2644\u262a\3\2\2\2\u2644\u2639\3\2\2\2\u2645\u0339")
        buf.write("\3\2\2\2\u2646\u264a\7\u031a\2\2\u2647\u264a\7\u031c\2")
        buf.write("\2\u2648\u264a\5\u0380\u01c1\2\u2649\u2646\3\2\2\2\u2649")
        buf.write("\u2647\3\2\2\2\u2649\u2648\3\2\2\2\u264a\u264b\3\2\2\2")
        buf.write("\u264b\u264c\7\u0330\2\2\u264c\u264d\7\u0293\2\2\u264d")
        buf.write("\u264e\7\u0335\2\2\u264e\u264f\7\u031f\2\2\u264f\u265d")
        buf.write("\7\u0336\2\2\u2650\u2654\7\u031a\2\2\u2651\u2654\7\u031c")
        buf.write("\2\2\u2652\u2654\5\u0380\u01c1\2\u2653\u2650\3\2\2\2\u2653")
        buf.write("\u2651\3\2\2\2\u2653\u2652\3\2\2\2\u2654\u2655\3\2\2\2")
        buf.write("\u2655\u2656\7\u0330\2\2\u2656\u2657\7\u02b9\2\2\u2657")
        buf.write("\u2658\7\u0330\2\2\u2658\u2659\7\u0293\2\2\u2659\u265a")
        buf.write("\7\u0335\2\2\u265a\u265b\7\u031f\2\2\u265b\u265d\7\u0336")
        buf.write("\2\2\u265c\u2649\3\2\2\2\u265c\u2653\3\2\2\2\u265d\u033b")
        buf.write("\3\2\2\2\u265e\u265f\t}\2\2\u265f\u2660\7\u0330\2\2\u2660")
        buf.write("\u2661\7\u01f3\2\2\u2661\u2662\7\u0335\2\2\u2662\u2663")
        buf.write("\7\u031f\2\2\u2663\u2664\7\u0336\2\2\u2664\u033d\3\2\2")
        buf.write("\2\u2665\u2666\t}\2\2\u2666\u2667\7\u0330\2\2\u2667\u2668")
        buf.write("\7\u025b\2\2\u2668\u2669\7\u0335\2\2\u2669\u266a\7\u031f")
        buf.write("\2\2\u266a\u266b\7\u0336\2\2\u266b\u033f\3\2\2\2\u266c")
        buf.write("\u266d\t}\2\2\u266d\u266e\7\u0330\2\2\u266e\u266f\7\u0268")
        buf.write("\2\2\u266f\u2670\7\u0335\2\2\u2670\u2671\7\u031f\2\2\u2671")
        buf.write("\u2672\7\u0336\2\2\u2672\u0341\3\2\2\2\u2673\u2674\7\u0178")
        buf.write("\2\2\u2674\u2675\5\u02cc\u0167\2\u2675\u2676\7\u015c\2")
        buf.write("\2\u2676\u2677\5\u02cc\u0167\2\u2677\u0343\3\2\2\2\u2678")
        buf.write("\u2679\7\u0178\2\2\u2679\u267a\5\u02e2\u0172\2\u267a\u267b")
        buf.write("\7\u015c\2\2\u267b\u267c\5\u02cc\u0167\2\u267c\u0345\3")
        buf.write("\2\2\2\u267d\u267f\7\20\2\2\u267e\u267d\3\2\2\2\u267e")
        buf.write("\u267f\3\2\2\2\u267f\u2680\3\2\2\2\u2680\u2681\5\u0356")
        buf.write("\u01ac\2\u2681\u0347\3\2\2\2\u2682\u2684\7\20\2\2\u2683")
        buf.write("\u2682\3\2\2\2\u2683\u2684\3\2\2\2\u2684\u2685\3\2\2\2")
        buf.write("\u2685\u2686\5\u034a\u01a6\2\u2686\u0349\3\2\2\2\u2687")
        buf.write("\u2689\5\u03b6\u01dc\2\u2688\u268a\5\u034c\u01a7\2\u2689")
        buf.write("\u2688\3\2\2\2\u2689\u268a\3\2\2\2\u268a\u034b\3\2\2\2")
        buf.write("\u268b\u268d\7\u017c\2\2\u268c\u268b\3\2\2\2\u268c\u268d")
        buf.write("\3\2\2\2\u268d\u268e\3\2\2\2\u268e\u268f\7\u0335\2\2\u268f")
        buf.write("\u2696\5\u0350\u01a9\2\u2690\u2692\7\u0337\2\2\u2691\u2690")
        buf.write("\3\2\2\2\u2691\u2692\3\2\2\2\u2692\u2693\3\2\2\2\u2693")
        buf.write("\u2695\5\u0350\u01a9\2\u2694\u2691\3\2\2\2\u2695\u2698")
        buf.write("\3\2\2\2\u2696\u2694\3\2\2\2\u2696\u2697\3\2\2\2\u2697")
        buf.write("\u2699\3\2\2\2\u2698\u2696\3\2\2\2\u2699\u269a\7\u0336")
        buf.write("\2\2\u269a\u034d\3\2\2\2\u269b\u269c\7\u017c\2\2\u269c")
        buf.write("\u269d\7\u0335\2\2\u269d\u26a4\5\u0350\u01a9\2\u269e\u26a0")
        buf.write("\7\u0337\2\2\u269f\u269e\3\2\2\2\u269f\u26a0\3\2\2\2\u26a0")
        buf.write("\u26a1\3\2\2\2\u26a1\u26a3\5\u0350\u01a9\2\u26a2\u269f")
        buf.write("\3\2\2\2\u26a3\u26a6\3\2\2\2\u26a4\u26a2\3\2\2\2\u26a4")
        buf.write("\u26a5\3\2\2\2\u26a5\u26a7\3\2\2\2\u26a6\u26a4\3\2\2\2")
        buf.write("\u26a7\u26a8\7\u0336\2\2\u26a8\u034f\3\2\2\2\u26a9\u26ab")
        buf.write("\7\u0269\2\2\u26aa\u26a9\3\2\2\2\u26aa\u26ab\3\2\2\2\u26ab")
        buf.write("\u26dc\3\2\2\2\u26ac\u26c0\7\u009e\2\2\u26ad\u26ae\7\u0335")
        buf.write("\2\2\u26ae\u26b3\5\u0352\u01aa\2\u26af\u26b0\7\u0337\2")
        buf.write("\2\u26b0\u26b2\5\u0352\u01aa\2\u26b1\u26af\3\2\2\2\u26b2")
        buf.write("\u26b5\3\2\2\2\u26b3\u26b1\3\2\2\2\u26b3\u26b4\3\2\2\2")
        buf.write("\u26b4\u26b6\3\2\2\2\u26b5\u26b3\3\2\2\2\u26b6\u26b7\7")
        buf.write("\u0336\2\2\u26b7\u26c1\3\2\2\2\u26b8\u26bd\5\u0352\u01aa")
        buf.write("\2\u26b9\u26ba\7\u0337\2\2\u26ba\u26bc\5\u0352\u01aa\2")
        buf.write("\u26bb\u26b9\3\2\2\2\u26bc\u26bf\3\2\2\2\u26bd\u26bb\3")
        buf.write("\2\2\2\u26bd\u26be\3\2\2\2\u26be\u26c1\3\2\2\2\u26bf\u26bd")
        buf.write("\3\2\2\2\u26c0\u26ad\3\2\2\2\u26c0\u26b8\3\2\2\2\u26c1")
        buf.write("\u26dd\3\2\2\2\u26c2\u26c3\7\u009e\2\2\u26c3\u26c4\7\u0323")
        buf.write("\2\2\u26c4\u26dd\5\u0352\u01aa\2\u26c5\u26d4\7\u0087\2")
        buf.write("\2\u26c6\u26c7\7\u0335\2\2\u26c7\u26c8\5\u0352\u01aa\2")
        buf.write("\u26c8\u26c9\7\u0335\2\2\u26c9\u26ce\7\u031c\2\2\u26ca")
        buf.write("\u26cb\7\u0337\2\2\u26cb\u26cd\7\u031c\2\2\u26cc\u26ca")
        buf.write("\3\2\2\2\u26cd\u26d0\3\2\2\2\u26ce\u26cc\3\2\2\2\u26ce")
        buf.write("\u26cf\3\2\2\2\u26cf\u26d1\3\2\2\2\u26d0\u26ce\3\2\2\2")
        buf.write("\u26d1\u26d2\7\u0336\2\2\u26d2\u26d3\7\u0336\2\2\u26d3")
        buf.write("\u26d5\3\2\2\2\u26d4\u26c6\3\2\2\2\u26d4\u26d5\3\2\2\2")
        buf.write("\u26d5\u26dd\3\2\2\2\u26d6\u26dd\7\u02ce\2\2\u26d7\u26dd")
        buf.write("\7\u02d8\2\2\u26d8\u26d9\7\u02d9\2\2\u26d9\u26da\7\u0323")
        buf.write("\2\2\u26da\u26dd\7\u031b\2\2\u26db\u26dd\7\u031c\2\2\u26dc")
        buf.write("\u26ac\3\2\2\2\u26dc\u26c2\3\2\2\2\u26dc\u26c5\3\2\2\2")
        buf.write("\u26dc\u26d6\3\2\2\2\u26dc\u26d7\3\2\2\2\u26dc\u26d8\3")
        buf.write("\2\2\2\u26dc\u26db\3\2\2\2\u26dd\u0351\3\2\2\2\u26de\u26e1")
        buf.write("\5\u03b6\u01dc\2\u26df\u26e1\7\u031b\2\2\u26e0\u26de\3")
        buf.write("\2\2\2\u26e0\u26df\3\2\2\2\u26e1\u0353\3\2\2\2\u26e2\u26e3")
        buf.write("\7\u0335\2\2\u26e3\u26e8\5\u0356\u01ac\2\u26e4\u26e5\7")
        buf.write("\u0337\2\2\u26e5\u26e7\5\u0356\u01ac\2\u26e6\u26e4\3\2")
        buf.write("\2\2\u26e7\u26ea\3\2\2\2\u26e8\u26e6\3\2\2\2\u26e8\u26e9")
        buf.write("\3\2\2\2\u26e9\u26eb\3\2\2\2\u26ea\u26e8\3\2\2\2\u26eb")
        buf.write("\u26ec\7\u0336\2\2\u26ec\u0355\3\2\2\2\u26ed\u26f0\5\u03b6")
        buf.write("\u01dc\2\u26ee\u26f0\7\u031f\2\2\u26ef\u26ed\3\2\2\2\u26ef")
        buf.write("\u26ee\3\2\2\2\u26f0\u0357\3\2\2\2\u26f1\u26f2\7\u0172")
        buf.write("\2\2\u26f2\u26f3\7\u0335\2\2\u26f3\u26f4\5\u035a\u01ae")
        buf.write("\2\u26f4\u26fc\7\u0336\2\2\u26f5\u26f6\7\u0337\2\2\u26f6")
        buf.write("\u26f7\7\u0335\2\2\u26f7\u26f8\5\u035a\u01ae\2\u26f8\u26f9")
        buf.write("\7\u0336\2\2\u26f9\u26fb\3\2\2\2\u26fa\u26f5\3\2\2\2\u26fb")
        buf.write("\u26fe\3\2\2\2\u26fc\u26fa\3\2\2\2\u26fc\u26fd\3\2\2\2")
        buf.write("\u26fd\u0359\3\2\2\2\u26fe\u26fc\3\2\2\2\u26ff\u2704\5")
        buf.write("\u02cc\u0167\2\u2700\u2701\7\u0337\2\2\u2701\u2703\5\u02cc")
        buf.write("\u0167\2\u2702\u2700\3\2\2\2\u2703\u2706\3\2\2\2\u2704")
        buf.write("\u2702\3\2\2\2\u2704\u2705\3\2\2\2\u2705\u035b\3\2\2\2")
        buf.write("\u2706\u2704\3\2\2\2\u2707\u2708\t~\2\2\u2708\u2709\7")
        buf.write("\u0335\2\2\u2709\u270a\7\u0336\2\2\u270a\u2712\5\u0364")
        buf.write("\u01b3\2\u270b\u270c\7\u026e\2\2\u270c\u270d\7\u0335\2")
        buf.write("\2\u270d\u270e\5\u02cc\u0167\2\u270e\u270f\7\u0336\2\2")
        buf.write("\u270f\u2710\5\u0364\u01b3\2\u2710\u2712\3\2\2\2\u2711")
        buf.write("\u2707\3\2\2\2\u2711\u270b\3\2\2\2\u2712\u035d\3\2\2\2")
        buf.write("\u2713\u2714\t\177\2\2\u2714\u2715\7\u0335\2\2\u2715\u2716")
        buf.write("\5\u0362\u01b2\2\u2716\u2718\7\u0336\2\2\u2717\u2719\5")
        buf.write("\u0364\u01b3\2\u2718\u2717\3\2\2\2\u2718\u2719\3\2\2\2")
        buf.write("\u2719\u2734\3\2\2\2\u271a\u271b\t\u0080\2\2\u271b\u271e")
        buf.write("\7\u0335\2\2\u271c\u271f\7\u033a\2\2\u271d\u271f\5\u0362")
        buf.write("\u01b2\2\u271e\u271c\3\2\2\2\u271e\u271d\3\2\2\2\u271f")
        buf.write("\u2720\3\2\2\2\u2720\u2722\7\u0336\2\2\u2721\u2723\5\u0364")
        buf.write("\u01b3\2\u2722\u2721\3\2\2\2\u2722\u2723\3\2\2\2\u2723")
        buf.write("\u2734\3\2\2\2\u2724\u2725\7\u01b6\2\2\u2725\u2726\7\u0335")
        buf.write("\2\2\u2726\u2727\5\u0362\u01b2\2\u2727\u2728\7\u0336\2")
        buf.write("\2\u2728\u2734\3\2\2\2\u2729\u272a\7\u0212\2\2\u272a\u272b")
        buf.write("\7\u0335\2\2\u272b\u272c\5\u02cc\u0167\2\u272c\u272d\7")
        buf.write("\u0336\2\2\u272d\u2734\3\2\2\2\u272e\u272f\7\u0213\2\2")
        buf.write("\u272f\u2730\7\u0335\2\2\u2730\u2731\5\u035a\u01ae\2\u2731")
        buf.write("\u2732\7\u0336\2\2\u2732\u2734\3\2\2\2\u2733\u2713\3\2")
        buf.write("\2\2\u2733\u271a\3\2\2\2\u2733\u2724\3\2\2\2\u2733\u2729")
        buf.write("\3\2\2\2\u2733\u272e\3\2\2\2\u2734\u035f\3\2\2\2\u2735")
        buf.write("\u2736\t\u0081\2\2\u2736\u2737\7\u0335\2\2\u2737\u2738")
        buf.write("\5\u02cc\u0167\2\u2738\u2739\7\u0336\2\2\u2739\u273a\5")
        buf.write("\u0364\u01b3\2\u273a\u274a\3\2\2\2\u273b\u273c\t\u0082")
        buf.write("\2\2\u273c\u273d\7\u0335\2\2\u273d\u2744\5\u02cc\u0167")
        buf.write("\2\u273e\u273f\7\u0337\2\2\u273f\u2742\5\u02cc\u0167\2")
        buf.write("\u2740\u2741\7\u0337\2\2\u2741\u2743\5\u02cc\u0167\2\u2742")
        buf.write("\u2740\3\2\2\2\u2742\u2743\3\2\2\2\u2743\u2745\3\2\2\2")
        buf.write("\u2744\u273e\3\2\2\2\u2744\u2745\3\2\2\2\u2745\u2746\3")
        buf.write("\2\2\2\u2746\u2747\7\u0336\2\2\u2747\u2748\5\u0364\u01b3")
        buf.write("\2\u2748\u274a\3\2\2\2\u2749\u2735\3\2\2\2\u2749\u273b")
        buf.write("\3\2\2\2\u274a\u0361\3\2\2\2\u274b\u274d\to\2\2\u274c")
        buf.write("\u274b\3\2\2\2\u274c\u274d\3\2\2\2\u274d\u274e\3\2\2\2")
        buf.write("\u274e\u274f\5\u02cc\u0167\2\u274f\u0363\3\2\2\2\u2750")
        buf.write("\u2751\7\u00f0\2\2\u2751\u2755\7\u0335\2\2\u2752\u2753")
        buf.write("\7\u0280\2\2\u2753\u2754\7&\2\2\u2754\u2756\5\u035a\u01ae")
        buf.write("\2\u2755\u2752\3\2\2\2\u2755\u2756\3\2\2\2\u2756\u2758")
        buf.write("\3\2\2\2\u2757\u2759\5\u02f6\u017c\2\u2758\u2757\3\2\2")
        buf.write("\2\u2758\u2759\3\2\2\2\u2759\u275b\3\2\2\2\u275a\u275c")
        buf.write("\5\u0366\u01b4\2\u275b\u275a\3\2\2\2\u275b\u275c\3\2\2")
        buf.write("\2\u275c\u275d\3\2\2\2\u275d\u275e\7\u0336\2\2\u275e\u0365")
        buf.write("\3\2\2\2\u275f\u2760\t\u0083\2\2\u2760\u2761\5\u0368\u01b5")
        buf.write("\2\u2761\u0367\3\2\2\2\u2762\u2769\5\u036c\u01b7\2\u2763")
        buf.write("\u2764\7\35\2\2\u2764\u2765\5\u036a\u01b6\2\u2765\u2766")
        buf.write("\7\13\2\2\u2766\u2767\5\u036a\u01b6\2\u2767\u2769\3\2")
        buf.write("\2\2\u2768\u2762\3\2\2\2\u2768\u2763\3\2\2\2\u2769\u0369")
        buf.write("\3\2\2\2\u276a\u276d\5\u036c\u01b7\2\u276b\u276d\5\u036e")
        buf.write("\u01b8\2\u276c\u276a\3\2\2\2\u276c\u276b\3\2\2\2\u276d")
        buf.write("\u036b\3\2\2\2\u276e\u276f\7\u02fd\2\2\u276f\u2775\7\u0287")
        buf.write("\2\2\u2770\u2771\7\u031b\2\2\u2771\u2775\7\u0287\2\2\u2772")
        buf.write("\u2773\7K\2\2\u2773\u2775\7\u02b9\2\2\u2774\u276e\3\2")
        buf.write("\2\2\u2774\u2770\3\2\2\2\u2774\u2772\3\2\2\2\u2775\u036d")
        buf.write("\3\2\2\2\u2776\u2777\7\u02fd\2\2\u2777\u277b\7\u0204\2")
        buf.write("\2\u2778\u2779\7\u031b\2\2\u2779\u277b\7\u0204\2\2\u277a")
        buf.write("\u2776\3\2\2\2\u277a\u2778\3\2\2\2\u277b\u036f\3\2\2\2")
        buf.write("\u277c\u277d\7\u0200\2\2\u277d\u2782\5\u0372\u01ba\2\u277e")
        buf.write("\u277f\7\u0337\2\2\u277f\u2781\5\u0372\u01ba\2\u2780\u277e")
        buf.write("\3\2\2\2\u2781\u2784\3\2\2\2\u2782\u2780\3\2\2\2\u2782")
        buf.write("\u2783\3\2\2\2\u2783\u279f\3\2\2\2\u2784\u2782\3\2\2\2")
        buf.write("\u2785\u2786\7\u01d6\2\2\u2786\u2789\7\u0323\2\2\u2787")
        buf.write("\u278a\5\u03b6\u01dc\2\u2788\u278a\7\u031f\2\2\u2789\u2787")
        buf.write("\3\2\2\2\u2789\u2788\3\2\2\2\u278a\u279f\3\2\2\2\u278b")
        buf.write("\u278c\7\u01d5\2\2\u278c\u278f\7\u0323\2\2\u278d\u2790")
        buf.write("\5\u03b6\u01dc\2\u278e\u2790\7\u031f\2\2\u278f\u278d\3")
        buf.write("\2\2\2\u278f\u278e\3\2\2\2\u2790\u279f\3\2\2\2\u2791\u2792")
        buf.write("\7\u025f\2\2\u2792\u2793\7\u0323\2\2\u2793\u279f\t\t\2")
        buf.write("\2\u2794\u2795\7\u02f4\2\2\u2795\u2796\7\u0323\2\2\u2796")
        buf.write("\u279f\t\t\2\2\u2797\u2798\7\u02fa\2\2\u2798\u2799\7\u0323")
        buf.write("\2\2\u2799\u279f\7\u031b\2\2\u279a\u279b\7\u01d1\2\2\u279b")
        buf.write("\u279f\t\t\2\2\u279c\u279d\7\u02f7\2\2\u279d\u279f\t\t")
        buf.write("\2\2\u279e\u277c\3\2\2\2\u279e\u2785\3\2\2\2\u279e\u278b")
        buf.write("\3\2\2\2\u279e\u2791\3\2\2\2\u279e\u2794\3\2\2\2\u279e")
        buf.write("\u2797\3\2\2\2\u279e\u279a\3\2\2\2\u279e\u279c\3\2\2\2")
        buf.write("\u279f\u0371\3\2\2\2\u27a0\u27a7\7\u0335\2\2\u27a1\u27a2")
        buf.write("\7\u026a\2\2\u27a2\u27a3\7\u0323\2\2\u27a3\u27a8\t\u0084")
        buf.write("\2\2\u27a4\u27a5\7\u01e1\2\2\u27a5\u27a6\7\u0323\2\2\u27a6")
        buf.write("\u27a8\7\u031f\2\2\u27a7\u27a1\3\2\2\2\u27a7\u27a4\3\2")
        buf.write("\2\2\u27a8\u27a9\3\2\2\2\u27a9\u27aa\7\u0336\2\2\u27aa")
        buf.write("\u0373\3\2\2\2\u27ab\u27ae\5\u0376\u01bc\2\u27ac\u27ae")
        buf.write("\5\u0378\u01bd\2\u27ad\u27ab\3\2\2\2\u27ad\u27ac\3\2\2")
        buf.write("\2\u27ae\u0375\3\2\2\2\u27af\u27b0\7\u01fd\2\2\u27b0\u27b3")
        buf.write("\5\u03b6\u01dc\2\u27b1\u27b2\7?\2\2\u27b2\u27b4\7\u0200")
        buf.write("\2\2\u27b3\u27b1\3\2\2\2\u27b3\u27b4\3\2\2\2\u27b4\u27b6")
        buf.write("\3\2\2\2\u27b5\u27b7\7Z\2\2\u27b6\u27b5\3\2\2\2\u27b6")
        buf.write("\u27b7\3\2\2\2\u27b7\u27ba\3\2\2\2\u27b8\u27b9\7?\2\2")
        buf.write("\u27b9\u27bb\7\u0250\2\2\u27ba\u27b8\3\2\2\2\u27ba\u27bb")
        buf.write("\3\2\2\2\u27bb\u27bc\3\2\2\2\u27bc\u27c1\5\u0378\u01bd")
        buf.write("\2\u27bd\u27be\7\u0337\2\2\u27be\u27c0\5\u0378\u01bd\2")
        buf.write("\u27bf\u27bd\3\2\2\2\u27c0\u27c3\3\2\2\2\u27c1\u27bf\3")
        buf.write("\2\2\2\u27c1\u27c2\3\2\2\2\u27c2\u0377\3\2\2\2\u27c3\u27c1")
        buf.write("\3\2\2\2\u27c4\u27c5\7\u0335\2\2\u27c5\u27c6\7\u025e\2")
        buf.write("\2\u27c6\u27c9\7\u0323\2\2\u27c7\u27ca\5\u03b6\u01dc\2")
        buf.write("\u27c8\u27ca\7\u031f\2\2\u27c9\u27c7\3\2\2\2\u27c9\u27c8")
        buf.write("\3\2\2\2\u27ca\u27cc\3\2\2\2\u27cb\u27cd\7\u0337\2\2\u27cc")
        buf.write("\u27cb\3\2\2\2\u27cc\u27cd\3\2\2\2\u27cd\u27ce\3\2\2\2")
        buf.write("\u27ce\u27cf\7\u0083\2\2\u27cf\u27d0\7\u0323\2\2\u27d0")
        buf.write("\u27d2\7\u031f\2\2\u27d1\u27d3\7\u0337\2\2\u27d2\u27d1")
        buf.write("\3\2\2\2\u27d2\u27d3\3\2\2\2\u27d3\u27da\3\2\2\2\u27d4")
        buf.write("\u27d5\7\u02d6\2\2\u27d5\u27d6\7\u0323\2\2\u27d6\u27d8")
        buf.write("\5\u03be\u01e0\2\u27d7\u27d9\7\u0337\2\2\u27d8\u27d7\3")
        buf.write("\2\2\2\u27d8\u27d9\3\2\2\2\u27d9\u27db\3\2\2\2\u27da\u27d4")
        buf.write("\3\2\2\2\u27da\u27db\3\2\2\2\u27db\u27e5\3\2\2\2\u27dc")
        buf.write("\u27dd\7\u024d\2\2\u27dd\u27e0\7\u0323\2\2\u27de\u27e1")
        buf.write("\5\u03be\u01e0\2\u27df\u27e1\7\u0300\2\2\u27e0\u27de\3")
        buf.write("\2\2\2\u27e0\u27df\3\2\2\2\u27e1\u27e3\3\2\2\2\u27e2\u27e4")
        buf.write("\7\u0337\2\2\u27e3\u27e2\3\2\2\2\u27e3\u27e4\3\2\2\2\u27e4")
        buf.write("\u27e6\3\2\2\2\u27e5\u27dc\3\2\2\2\u27e5\u27e6\3\2\2\2")
        buf.write("\u27e6\u27ed\3\2\2\2\u27e7\u27e8\7\u01fe\2\2\u27e8\u27e9")
        buf.write("\7\u0323\2\2\u27e9\u27eb\5\u03be\u01e0\2\u27ea\u27ec\7")
        buf.write("\u0337\2\2\u27eb\u27ea\3\2\2\2\u27eb\u27ec\3\2\2\2\u27ec")
        buf.write("\u27ee\3\2\2\2\u27ed\u27e7\3\2\2\2\u27ed\u27ee\3\2\2\2")
        buf.write("\u27ee\u27ef\3\2\2\2\u27ef\u27f0\7\u0336\2\2\u27f0\u0379")
        buf.write("\3\2\2\2\u27f1\u27f2\5\u03b6\u01dc\2\u27f2\u27f3\7\u0330")
        buf.write("\2\2\u27f3\u27f4\5\u03b6\u01dc\2\u27f4\u27f5\7\u0330\2")
        buf.write("\2\u27f5\u27f6\5\u03b6\u01dc\2\u27f6\u27f7\7\u0330\2\2")
        buf.write("\u27f7\u2803\3\2\2\2\u27f8\u27f9\5\u03b6\u01dc\2\u27f9")
        buf.write("\u27fb\7\u0330\2\2\u27fa\u27fc\5\u03b6\u01dc\2\u27fb\u27fa")
        buf.write("\3\2\2\2\u27fb\u27fc\3\2\2\2\u27fc\u27fd\3\2\2\2\u27fd")
        buf.write("\u27fe\7\u0330\2\2\u27fe\u2803\3\2\2\2\u27ff\u2800\5\u03b6")
        buf.write("\u01dc\2\u2800\u2801\7\u0330\2\2\u2801\u2803\3\2\2\2\u2802")
        buf.write("\u27f1\3\2\2\2\u2802\u27f8\3\2\2\2\u2802\u27ff\3\2\2\2")
        buf.write("\u2802\u2803\3\2\2\2\u2803\u2804\3\2\2\2\u2804\u2805\5")
        buf.write("\u03b6\u01dc\2\u2805\u037b\3\2\2\2\u2806\u280c\5\u03b6")
        buf.write("\u01dc\2\u2807\u2808\5\u03b6\u01dc\2\u2808\u2809\7\u0330")
        buf.write("\2\2\u2809\u280a\5\u03b6\u01dc\2\u280a\u280c\3\2\2\2\u280b")
        buf.write("\u2806\3\2\2\2\u280b\u2807\3\2\2\2\u280c\u037d\3\2\2\2")
        buf.write("\u280d\u2813\5\u03b6\u01dc\2\u280e\u280f\5\u03b6\u01dc")
        buf.write("\2\u280f\u2810\7\u0330\2\2\u2810\u2811\5\u03b6\u01dc\2")
        buf.write("\u2811\u2813\3\2\2\2\u2812\u280d\3\2\2\2\u2812\u280e\3")
        buf.write("\2\2\2\u2813\u037f\3\2\2\2\u2814\u2815\5\u03b6\u01dc\2")
        buf.write("\u2815\u2816\7\u0330\2\2\u2816\u2817\5\u03b6\u01dc\2\u2817")
        buf.write("\u2818\7\u0330\2\2\u2818\u2819\5\u03b6\u01dc\2\u2819\u281a")
        buf.write("\7\u0330\2\2\u281a\u2826\3\2\2\2\u281b\u281c\5\u03b6\u01dc")
        buf.write("\2\u281c\u281e\7\u0330\2\2\u281d\u281f\5\u03b6\u01dc\2")
        buf.write("\u281e\u281d\3\2\2\2\u281e\u281f\3\2\2\2\u281f\u2820\3")
        buf.write("\2\2\2\u2820\u2821\7\u0330\2\2\u2821\u2826\3\2\2\2\u2822")
        buf.write("\u2823\5\u03b6\u01dc\2\u2823\u2824\7\u0330\2\2\u2824\u2826")
        buf.write("\3\2\2\2\u2825\u2814\3\2\2\2\u2825\u281b\3\2\2\2\u2825")
        buf.write("\u2822\3\2\2\2\u2825\u2826\3\2\2\2\u2826\u2827\3\2\2\2")
        buf.write("\u2827\u2828\5\u03b6\u01dc\2\u2828\u0381\3\2\2\2\u2829")
        buf.write("\u282a\5\u03b6\u01dc\2\u282a\u282c\7\u0330\2\2\u282b\u282d")
        buf.write("\5\u03b6\u01dc\2\u282c\u282b\3\2\2\2\u282c\u282d\3\2\2")
        buf.write("\2\u282d\u282e\3\2\2\2\u282e\u282f\7\u0330\2\2\u282f\u2834")
        buf.write("\3\2\2\2\u2830\u2831\5\u03b6\u01dc\2\u2831\u2832\7\u0330")
        buf.write("\2\2\u2832\u2834\3\2\2\2\u2833\u2829\3\2\2\2\u2833\u2830")
        buf.write("\3\2\2\2\u2833\u2834\3\2\2\2\u2834\u2835\3\2\2\2\u2835")
        buf.write("\u2844\5\u03b6\u01dc\2\u2836\u2837\5\u03b6\u01dc\2\u2837")
        buf.write("\u2839\7\u0330\2\2\u2838\u283a\5\u03b6\u01dc\2\u2839\u2838")
        buf.write("\3\2\2\2\u2839\u283a\3\2\2\2\u283a\u283b\3\2\2\2\u283b")
        buf.write("\u283c\7\u0330\2\2\u283c\u2841\3\2\2\2\u283d\u283e\5\u03b6")
        buf.write("\u01dc\2\u283e\u283f\7\u0330\2\2\u283f\u2841\3\2\2\2\u2840")
        buf.write("\u2836\3\2\2\2\u2840\u283d\3\2\2\2\u2840\u2841\3\2\2\2")
        buf.write("\u2841\u2842\3\2\2\2\u2842\u2844\7 \2\2\u2843\u2833\3")
        buf.write("\2\2\2\u2843\u2840\3\2\2\2\u2844\u0383\3\2\2\2\u2845\u2846")
        buf.write("\5\u03b6\u01dc\2\u2846\u2847\7\u0330\2\2\u2847\u2849\3")
        buf.write("\2\2\2\u2848\u2845\3\2\2\2\u2848\u2849\3\2\2\2\u2849\u284a")
        buf.write("\3\2\2\2\u284a\u284b\5\u03b6\u01dc\2\u284b\u0385\3\2\2")
        buf.write("\2\u284c\u284d\5\u03b6\u01dc\2\u284d\u284f\7\u0330\2\2")
        buf.write("\u284e\u2850\5\u03b6\u01dc\2\u284f\u284e\3\2\2\2\u284f")
        buf.write("\u2850\3\2\2\2\u2850\u2851\3\2\2\2\u2851\u2852\7\u0330")
        buf.write("\2\2\u2852\u2857\3\2\2\2\u2853\u2854\5\u03b6\u01dc\2\u2854")
        buf.write("\u2855\7\u0330\2\2\u2855\u2857\3\2\2\2\u2856\u284c\3\2")
        buf.write("\2\2\u2856\u2853\3\2\2\2\u2856\u2857\3\2\2\2\u2857\u2858")
        buf.write("\3\2\2\2\u2858\u2864\5\u03b6\u01dc\2\u2859\u285a\5\u03b6")
        buf.write("\u01dc\2\u285a\u285b\7\u0330\2\2\u285b\u285c\5\u03b6\u01dc")
        buf.write("\2\u285c\u285e\7\u0330\2\2\u285d\u285f\5\u03b6\u01dc\2")
        buf.write("\u285e\u285d\3\2\2\2\u285e\u285f\3\2\2\2\u285f\u2860\3")
        buf.write("\2\2\2\u2860\u2861\7\u0330\2\2\u2861\u2862\5\u03b6\u01dc")
        buf.write("\2\u2862\u2864\3\2\2\2\u2863\u2856\3\2\2\2\u2863\u2859")
        buf.write("\3\2\2\2\u2864\u0387\3\2\2\2\u2865\u2868\5\u0380\u01c1")
        buf.write("\2\u2866\u2868\7\u031a\2\2\u2867\u2865\3\2\2\2\u2867\u2866")
        buf.write("\3\2\2\2\u2868\u0389\3\2\2\2\u2869\u286a\5\u0382\u01c2")
        buf.write("\2\u286a\u286b\7\u0330\2\2\u286b\u286d\3\2\2\2\u286c\u2869")
        buf.write("\3\2\2\2\u286c\u286d\3\2\2\2\u286d\u286e\3\2\2\2\u286e")
        buf.write("\u289a\5\u03b6\u01dc\2\u286f\u2870\5\u0382\u01c2\2\u2870")
        buf.write("\u2871\7\u0330\2\2\u2871\u2873\3\2\2\2\u2872\u286f\3\2")
        buf.write("\2\2\u2872\u2873\3\2\2\2\u2873\u2874\3\2\2\2\u2874\u289a")
        buf.write("\7\u01bb\2\2\u2875\u2876\5\u0382\u01c2\2\u2876\u2877\7")
        buf.write("\u0330\2\2\u2877\u2879\3\2\2\2\u2878\u2875\3\2\2\2\u2878")
        buf.write("\u2879\3\2\2\2\u2879\u287a\3\2\2\2\u287a\u289a\7\u02de")
        buf.write("\2\2\u287b\u287c\5\u0382\u01c2\2\u287c\u287d\7\u0330\2")
        buf.write("\2\u287d\u287f\3\2\2\2\u287e\u287b\3\2\2\2\u287e\u287f")
        buf.write("\3\2\2\2\u287f\u2880\3\2\2\2\u2880\u289a\7\u0296\2\2\u2881")
        buf.write("\u2882\5\u0382\u01c2\2\u2882\u2883\7\u0330\2\2\u2883\u2885")
        buf.write("\3\2\2\2\u2884\u2881\3\2\2\2\u2884\u2885\3\2\2\2\u2885")
        buf.write("\u2886\3\2\2\2\u2886\u289a\7\u0197\2\2\u2887\u2888\5\u0382")
        buf.write("\u01c2\2\u2888\u2889\7\u0330\2\2\u2889\u288b\3\2\2\2\u288a")
        buf.write("\u2887\3\2\2\2\u288a\u288b\3\2\2\2\u288b\u288c\3\2\2\2")
        buf.write("\u288c\u289a\7\u0194\2\2\u288d\u288e\5\u0382\u01c2\2\u288e")
        buf.write("\u288f\7\u0330\2\2\u288f\u2891\3\2\2\2\u2890\u288d\3\2")
        buf.write("\2\2\u2890\u2891\3\2\2\2\u2891\u2892\3\2\2\2\u2892\u289a")
        buf.write("\7\u0193\2\2\u2893\u2894\5\u0382\u01c2\2\u2894\u2895\7")
        buf.write("\u0330\2\2\u2895\u2897\3\2\2\2\u2896\u2893\3\2\2\2\u2896")
        buf.write("\u2897\3\2\2\2\u2897\u2898\3\2\2\2\u2898\u289a\7\u0192")
        buf.write("\2\2\u2899\u286c\3\2\2\2\u2899\u2872\3\2\2\2\u2899\u2878")
        buf.write("\3\2\2\2\u2899\u287e\3\2\2\2\u2899\u2884\3\2\2\2\u2899")
        buf.write("\u288a\3\2\2\2\u2899\u2890\3\2\2\2\u2899\u2896\3\2\2\2")
        buf.write("\u289a\u038b\3\2\2\2\u289b\u289d\5\u03b6\u01dc\2\u289c")
        buf.write("\u289e\tv\2\2\u289d\u289c\3\2\2\2\u289d\u289e\3\2\2\2")
        buf.write("\u289e\u28a6\3\2\2\2\u289f\u28a0\7\u0337\2\2\u28a0\u28a2")
        buf.write("\5\u03b6\u01dc\2\u28a1\u28a3\tv\2\2\u28a2\u28a1\3\2\2")
        buf.write("\2\u28a2\u28a3\3\2\2\2\u28a3\u28a5\3\2\2\2\u28a4\u289f")
        buf.write("\3\2\2\2\u28a5\u28a8\3\2\2\2\u28a6\u28a4\3\2\2\2\u28a6")
        buf.write("\u28a7\3\2\2\2\u28a7\u038d\3\2\2\2\u28a8\u28a6\3\2\2\2")
        buf.write("\u28a9\u28ae\5\u03b6\u01dc\2\u28aa\u28ab\7\u0337\2\2\u28ab")
        buf.write("\u28ad\5\u03b6\u01dc\2\u28ac\u28aa\3\2\2\2\u28ad\u28b0")
        buf.write("\3\2\2\2\u28ae\u28ac\3\2\2\2\u28ae\u28af\3\2\2\2\u28af")
        buf.write("\u038f\3\2\2\2\u28b0\u28ae\3\2\2\2\u28b1\u28b4\5\u03b6")
        buf.write("\u01dc\2\u28b2\u28b4\7\u031a\2\2\u28b3\u28b1\3\2\2\2\u28b3")
        buf.write("\u28b2\3\2\2\2\u28b4\u0391\3\2\2\2\u28b5\u28b6\t\t\2\2")
        buf.write("\u28b6\u0393\3\2\2\2\u28b7\u28b8\t\u0085\2\2\u28b8\u0395")
        buf.write("\3\2\2\2\u28b9\u28bb\7\u00dc\2\2\u28ba\u28b9\3\2\2\2\u28ba")
        buf.write("\u28bb\3\2\2\2\u28bb\u28bc\3\2\2\2\u28bc\u28bd\7\u00df")
        buf.write("\2\2\u28bd\u0397\3\2\2\2\u28be\u28c6\5\u0396\u01cc\2\u28bf")
        buf.write("\u28c0\7Z\2\2\u28c0\u28c3\5\u02d6\u016c\2\u28c1\u28c2")
        buf.write("\7\u017c\2\2\u28c2\u28c4\7\u0172\2\2\u28c3\u28c1\3\2\2")
        buf.write("\2\u28c3\u28c4\3\2\2\2\u28c4\u28c6\3\2\2\2\u28c5\u28be")
        buf.write("\3\2\2\2\u28c5\u28bf\3\2\2\2\u28c6\u0399\3\2\2\2\u28c7")
        buf.write("\u28cd\5\u0386\u01c4\2\u28c8\u28cd\7\u011f\2\2\u28c9\u28cd")
        buf.write("\7\u00b1\2\2\u28ca\u28cd\7\u01a8\2\2\u28cb\u28cd\7\u01b5")
        buf.write("\2\2\u28cc\u28c7\3\2\2\2\u28cc\u28c8\3\2\2\2\u28cc\u28c9")
        buf.write("\3\2\2\2\u28cc\u28ca\3\2\2\2\u28cc\u28cb\3\2\2\2\u28cd")
        buf.write("\u039b\3\2\2\2\u28ce\u28cf\7\34\2\2\u28cf\u28d0\7F\2\2")
        buf.write("\u28d0\u28d1\7\u02f1\2\2\u28d1\u28d2\7\u0335\2\2\u28d2")
        buf.write("\u28d3\7\u031a\2\2\u28d3\u28d4\7\u0336\2\2\u28d4\u28d5")
        buf.write("\7\u02f0\2\2\u28d5\u28d6\7\u0323\2\2\u28d6\u28d8\5\u01c0")
        buf.write("\u00e1\2\u28d7\u28d9\7\u0338\2\2\u28d8\u28d7\3\2\2\2\u28d8")
        buf.write("\u28d9\3\2\2\2\u28d9\u039d\3\2\2\2\u28da\u28db\7\34\2")
        buf.write("\2\u28db\u28dd\7\u01e0\2\2\u28dc\u28de\7F\2\2\u28dd\u28dc")
        buf.write("\3\2\2\2\u28dd\u28de\3\2\2\2\u28de\u28df\3\2\2\2\u28df")
        buf.write("\u28e0\7\u031a\2\2\u28e0\u28e1\7\u008c\2\2\u28e1\u28e2")
        buf.write("\7\u0138\2\2\u28e2\u28e3\5\u03a2\u01d2\2\u28e3\u28e4\7")
        buf.write("\u015d\2\2\u28e4\u28e5\7\u0138\2\2\u28e5\u28e8\5\u03a2")
        buf.write("\u01d2\2\u28e6\u28e7\7\u0337\2\2\u28e7\u28e9\7\u031f\2")
        buf.write("\2\u28e8\u28e6\3\2\2\2\u28e8\u28e9\3\2\2\2\u28e9\u28ea")
        buf.write("\3\2\2\2\u28ea\u28eb\7\u00e5\2\2\u28eb\u28ec\7D\2\2\u28ec")
        buf.write("\u2903\5\u03a0\u01d1\2\u28ed\u28f4\7\u017c\2\2\u28ee\u28ef")
        buf.write("\t\u0086\2\2\u28ef\u28f0\7\u0323\2\2\u28f0\u28f2\7\u031a")
        buf.write("\2\2\u28f1\u28f3\7\u0337\2\2\u28f2\u28f1\3\2\2\2\u28f2")
        buf.write("\u28f3\3\2\2\2\u28f3\u28f5\3\2\2\2\u28f4\u28ee\3\2\2\2")
        buf.write("\u28f4\u28f5\3\2\2\2\u28f5\u28fc\3\2\2\2\u28f6\u28f7\7")
        buf.write("\u00b3\2\2\u28f7\u28f8\7\u0323\2\2\u28f8\u28fa\t\2\2\2")
        buf.write("\u28f9\u28fb\7\u0337\2\2\u28fa\u28f9\3\2\2\2\u28fa\u28fb")
        buf.write("\3\2\2\2\u28fb\u28fd\3\2\2\2\u28fc\u28f6\3\2\2\2\u28fc")
        buf.write("\u28fd\3\2\2\2\u28fd\u2901\3\2\2\2\u28fe\u28ff\7\u01ee")
        buf.write("\2\2\u28ff\u2900\7\u0323\2\2\u2900\u2902\t\t\2\2\u2901")
        buf.write("\u28fe\3\2\2\2\u2901\u2902\3\2\2\2\u2902\u2904\3\2\2\2")
        buf.write("\u2903\u28ed\3\2\2\2\u2903\u2904\3\2\2\2\u2904\u2906\3")
        buf.write("\2\2\2\u2905\u2907\7\u0338\2\2\u2906\u2905\3\2\2\2\u2906")
        buf.write("\u2907\3\2\2\2\u2907\u039f\3\2\2\2\u2908\u290b\5\u03b6")
        buf.write("\u01dc\2\u2909\u290b\5\u02cc\u0167\2\u290a\u2908\3\2\2")
        buf.write("\2\u290a\u2909\3\2\2\2\u290b\u03a1\3\2\2\2\u290c\u290f")
        buf.write("\5\u03b6\u01dc\2\u290d\u290f\5\u02cc\u0167\2\u290e\u290c")
        buf.write("\3\2\2\2\u290e\u290d\3\2\2\2\u290f\u03a3\3\2\2\2\u2910")
        buf.write("\u2911\7m\2\2\u2911\u2912\7F\2\2\u2912\u2914\7\u031a\2")
        buf.write("\2\u2913\u2915\7\u0338\2\2\u2914\u2913\3\2\2\2\u2914\u2915")
        buf.write("\3\2\2\2\u2915\u2922\3\2\2\2\u2916\u291d\7\u017c\2\2\u2917")
        buf.write("\u2918\7q\2\2\u2918\u2919\7\u0323\2\2\u2919\u291a\t\3")
        buf.write("\2\2\u291a\u291b\7\u01dd\2\2\u291b\u291c\7\u0323\2\2\u291c")
        buf.write("\u291e\t\3\2\2\u291d\u2917\3\2\2\2\u291d\u291e\3\2\2\2")
        buf.write("\u291e\u2920\3\2\2\2\u291f\u2921\7\u01b7\2\2\u2920\u291f")
        buf.write("\3\2\2\2\u2920\u2921\3\2\2\2\u2921\u2923\3\2\2\2\u2922")
        buf.write("\u2916\3\2\2\2\u2922\u2923\3\2\2\2\u2923\u03a5\3\2\2\2")
        buf.write("\u2924\u2926\7\u0177\2\2\u2925\u2924\3\2\2\2\u2925\u2926")
        buf.write("\3\2\2\2\u2926\u2927\3\2\2\2\u2927\u2928\7\u0335\2\2\u2928")
        buf.write("\u2929\5\u03a8\u01d5\2\u2929\u292f\7\u0336\2\2\u292a\u292c")
        buf.write("\7\u0337\2\2\u292b\u292a\3\2\2\2\u292b\u292c\3\2\2\2\u292c")
        buf.write("\u292d\3\2\2\2\u292d\u292e\7\u02f0\2\2\u292e\u2930\5\u01c0")
        buf.write("\u00e1\2\u292f\u292b\3\2\2\2\u292f\u2930\3\2\2\2\u2930")
        buf.write("\u2932\3\2\2\2\u2931\u2933\7\u0338\2\2\u2932\u2931\3\2")
        buf.write("\2\2\u2932\u2933\3\2\2\2\u2933\u03a7\3\2\2\2\u2934\u2935")
        buf.write("\7\u008f\2\2\u2935\u2936\7F\2\2\u2936\u2937\7\u0093\2")
        buf.write("\2\u2937\u2938\t\3\2\2\u2938\u2939\7\u008c\2\2\u2939\u293b")
        buf.write("\5\u03aa\u01d6\2\u293a\u293c\7\u0338\2\2\u293b\u293a\3")
        buf.write("\2\2\2\u293b\u293c\3\2\2\2\u293c\u03a9\3\2\2\2\u293d\u293e")
        buf.write("\5\u03b6\u01dc\2\u293e\u293f\7\u0330\2\2\u293f\u2940\5")
        buf.write("\u03b6\u01dc\2\u2940\u2941\7\u0330\2\2\u2941\u2942\5\u03b6")
        buf.write("\u01dc\2\u2942\u2945\3\2\2\2\u2943\u2945\5\u03b6\u01dc")
        buf.write("\2\u2944\u293d\3\2\2\2\u2944\u2943\3\2\2\2\u2945\u03ab")
        buf.write("\3\2\2\2\u2946\u2947\7\u02cc\2\2\u2947\u2948\7\u00e5\2")
        buf.write("\2\u2948\u2949\7F\2\2\u2949\u294a\t\3\2\2\u294a\u294b")
        buf.write("\7\u0251\2\2\u294b\u294c\7\u02fb\2\2\u294c\u2950\5\u02cc")
        buf.write("\u0167\2\u294d\u294e\7\u0335\2\2\u294e\u294f\t\3\2\2\u294f")
        buf.write("\u2951\7\u0336\2\2\u2950\u294d\3\2\2\2\u2950\u2951\3\2")
        buf.write("\2\2\u2951\u2953\3\2\2\2\u2952\u2954\7\u0338\2\2\u2953")
        buf.write("\u2952\3\2\2\2\u2953\u2954\3\2\2\2\u2954\u03ad\3\2\2\2")
        buf.write("\u2955\u2957\5\u03b6\u01dc\2\u2956\u2958\7\u0097\2\2\u2957")
        buf.write("\u2956\3\2\2\2\u2957\u2958\3\2\2\2\u2958\u2960\3\2\2\2")
        buf.write("\u2959\u295a\7\u0335\2\2\u295a\u295d\t\u0087\2\2\u295b")
        buf.write("\u295c\7\u0337\2\2\u295c\u295e\7\u031b\2\2\u295d\u295b")
        buf.write("\3\2\2\2\u295d\u295e\3\2\2\2\u295e\u295f\3\2\2\2\u295f")
        buf.write("\u2961\7\u0336\2\2\u2960\u2959\3\2\2\2\u2960\u2961\3\2")
        buf.write("\2\2\u2961\u296b\3\2\2\2\u2962\u2964\7e\2\2\u2963\u2965")
        buf.write("\7\u00fe\2\2\u2964\u2963\3\2\2\2\u2964\u2965\3\2\2\2\u2965")
        buf.write("\u296b\3\2\2\2\u2966\u296b\7\u0225\2\2\u2967\u296b\7\u02f2")
        buf.write("\2\2\u2968\u296b\7\u02d7\2\2\u2969\u296b\7\u01a6\2\2\u296a")
        buf.write("\u2955\3\2\2\2\u296a\u2962\3\2\2\2\u296a\u2966\3\2\2\2")
        buf.write("\u296a\u2967\3\2\2\2\u296a\u2968\3\2\2\2\u296a\u2969\3")
        buf.write("\2\2\2\u296b\u03af\3\2\2\2\u296c\u2970\7\u00df\2\2\u296d")
        buf.write("\u2970\7Z\2\2\u296e\u2970\5\u03b2\u01da\2\u296f\u296c")
        buf.write("\3\2\2\2\u296f\u296d\3\2\2\2\u296f\u296e\3\2\2\2\u2970")
        buf.write("\u03b1\3\2\2\2\u2971\u2981\7\u031f\2\2\u2972\u2981\7\u0320")
        buf.write("\2\2\u2973\u2975\5\u03b4\u01db\2\u2974\u2973\3\2\2\2\u2974")
        buf.write("\u2975\3\2\2\2\u2975\u2976\3\2\2\2\u2976\u2981\7\u031b")
        buf.write("\2\2\u2977\u2979\5\u03b4\u01db\2\u2978\u2977\3\2\2\2\u2978")
        buf.write("\u2979\3\2\2\2\u2979\u297a\3\2\2\2\u297a\u2981\tp\2\2")
        buf.write("\u297b\u297d\5\u03b4\u01db\2\u297c\u297b\3\2\2\2\u297c")
        buf.write("\u297d\3\2\2\2\u297d\u297e\3\2\2\2\u297e\u297f\7\u0334")
        buf.write("\2\2\u297f\u2981\t\u0088\2\2\u2980\u2971\3\2\2\2\u2980")
        buf.write("\u2972\3\2\2\2\u2980\u2974\3\2\2\2\u2980\u2978\3\2\2\2")
        buf.write("\u2980\u297c\3\2\2\2\u2981\u03b3\3\2\2\2\u2982\u2983\t")
        buf.write("m\2\2\u2983\u03b5\3\2\2\2\u2984\u2988\5\u03b8\u01dd\2")
        buf.write("\u2985\u2988\7\u0317\2\2\u2986\u2988\7\u0319\2\2\u2987")
        buf.write("\u2984\3\2\2\2\u2987\u2985\3\2\2\2\u2987\u2986\3\2\2\2")
        buf.write("\u2988\u03b7\3\2\2\2\u2989\u298a\t\u0089\2\2\u298a\u03b9")
        buf.write("\3\2\2\2\u298b\u299b\7\u0323\2\2\u298c\u299b\7\u0324\2")
        buf.write("\2\u298d\u299b\7\u0325\2\2\u298e\u298f\7\u0325\2\2\u298f")
        buf.write("\u299b\7\u0323\2\2\u2990\u2991\7\u0324\2\2\u2991\u299b")
        buf.write("\7\u0323\2\2\u2992\u2993\7\u0325\2\2\u2993\u299b\7\u0324")
        buf.write("\2\2\u2994\u2995\7\u0326\2\2\u2995\u299b\7\u0323\2\2\u2996")
        buf.write("\u2997\7\u0326\2\2\u2997\u299b\7\u0324\2\2\u2998\u2999")
        buf.write("\7\u0326\2\2\u2999\u299b\7\u0325\2\2\u299a\u298b\3\2\2")
        buf.write("\2\u299a\u298c\3\2\2\2\u299a\u298d\3\2\2\2\u299a\u298e")
        buf.write("\3\2\2\2\u299a\u2990\3\2\2\2\u299a\u2992\3\2\2\2\u299a")
        buf.write("\u2994\3\2\2\2\u299a\u2996\3\2\2\2\u299a\u2998\3\2\2\2")
        buf.write("\u299b\u03bb\3\2\2\2\u299c\u299d\t\u008a\2\2\u299d\u03bd")
        buf.write("\3\2\2\2\u299e\u29a0\7\u031b\2\2\u299f\u29a1\t\u008b\2")
        buf.write("\2\u29a0\u299f\3\2\2\2\u29a0\u29a1\3\2\2\2\u29a1\u03bf")
        buf.write("\3\2\2\2\u05e7\u03c3\u03cc\u03d0\u03d6\u03d9\u03dd\u03e1")
        buf.write("\u03ea\u03f1\u0492\u0499\u04a7\u04ab\u04ae\u04b2\u04b6")
        buf.write("\u04ba\u04bf\u04c4\u04c6\u04ca\u04cd\u04d4\u04d7\u04e0")
        buf.write("\u04e3\u04ee\u04f1\u04f6\u04fb\u04fe\u0503\u0507\u050a")
        buf.write("\u050e\u0511\u0514\u051b\u051f\u0521\u0526\u052c\u0530")
        buf.write("\u053d\u0543\u0546\u054f\u0552\u0563\u056b\u0570\u0573")
        buf.write("\u0578\u057b\u0580\u0588\u058d\u0590\u0595\u059b\u05a0")
        buf.write("\u05b1\u05b4\u05b7\u05ba\u05bf\u05c8\u05d7\u05e8\u05f3")
        buf.write("\u05f9\u0608\u0617\u0620\u0624\u0629\u062f\u0635\u0638")
        buf.write("\u063d\u0642\u064a\u0654\u0667\u066f\u067c\u067e\u068a")
        buf.write("\u068c\u0693\u069c\u06a2\u06ab\u06ba\u06c4\u06ce\u06f6")
        buf.write("\u070d\u0731\u0743\u0746\u074b\u074e\u0753\u0756\u075b")
        buf.write("\u075e\u0763\u0766\u076e\u0771\u0779\u0786\u0791\u0796")
        buf.write("\u079a\u07a0\u07b7\u07c3\u07ce\u07d3\u07d7\u07dd\u07df")
        buf.write("\u07ec\u0803\u080a\u0813\u0818\u081b\u0820\u0823\u0828")
        buf.write("\u082d\u0849\u0850\u0855\u085c\u085e\u0869\u086f\u087e")
        buf.write("\u088c\u088f\u0891\u0896\u089a\u089d\u089f\u08a5\u08a8")
        buf.write("\u08aa\u08b0\u08b2\u08c8\u08d0\u08d8\u08da\u08dc\u08e5")
        buf.write("\u08fa\u0907\u0916\u091a\u093d\u0940\u0945\u0957\u095a")
        buf.write("\u095f\u0979\u0987\u098c\u0994\u0999\u09a0\u09b5\u09da")
        buf.write("\u09df\u09f2\u09fe\u0a01\u0a06\u0a09\u0a0f\u0a1e\u0a23")
        buf.write("\u0a2b\u0a2e\u0a33\u0a38\u0a3b\u0a53\u0a5a\u0a5f\u0a64")
        buf.write("\u0a69\u0a6b\u0a72\u0a7f\u0a85\u0a8a\u0a92\u0aa2\u0aa9")
        buf.write("\u0aae\u0ab3\u0ab6\u0abc\u0ac2\u0ac7\u0acc\u0ad1\u0ad4")
        buf.write("\u0ada\u0ae0\u0aeb\u0aee\u0af8\u0afe\u0b02\u0b06\u0b23")
        buf.write("\u0b30\u0b36\u0b40\u0b43\u0b57\u0b5b\u0b5f\u0b64\u0b73")
        buf.write("\u0b7a\u0b83\u0b8b\u0b8e\u0b93\u0b98\u0ba0\u0ba6\u0baa")
        buf.write("\u0bb0\u0bb5\u0bb9\u0bc0\u0bc8\u0bd0\u0bd9\u0bde\u0be2")
        buf.write("\u0be5\u0be9\u0bef\u0bf4\u0bfc\u0c04\u0c0a\u0c10\u0c13")
        buf.write("\u0c18\u0c1b\u0c22\u0c24\u0c27\u0c2d\u0c30\u0c35\u0c38")
        buf.write("\u0c3d\u0c40\u0c45\u0c48\u0c4d\u0c50\u0c53\u0c56\u0c5d")
        buf.write("\u0c61\u0c68\u0c6f\u0c75\u0c82\u0c86\u0c8b\u0c95\u0c9e")
        buf.write("\u0ca2\u0cae\u0cb4\u0cb9\u0cbb\u0ccf\u0cd3\u0cdb\u0ce4")
        buf.write("\u0cea\u0cf0\u0cf8\u0cfa\u0d04\u0d08\u0d0b\u0d0f\u0d14")
        buf.write("\u0d1a\u0d1d\u0d21\u0d29\u0d2b\u0d2e\u0d36\u0d3e\u0d45")
        buf.write("\u0d4c\u0d4e\u0d50\u0d55\u0d5b\u0d5e\u0d60\u0d62\u0d65")
        buf.write("\u0d6a\u0d6d\u0d72\u0d81\u0d88\u0d8f\u0d91\u0d93\u0d98")
        buf.write("\u0d9e\u0da1\u0da3\u0da5\u0da8\u0dad\u0db0\u0db5\u0dc2")
        buf.write("\u0dc7\u0dd0\u0dd5\u0ddb\u0ddf\u0de3\u0df4\u0df6\u0e00")
        buf.write("\u0e05\u0e07\u0e0b\u0e11\u0e19\u0e1e\u0e21\u0e29\u0e2c")
        buf.write("\u0e31\u0e36\u0e3b\u0e40\u0e45\u0e4a\u0e4e\u0e53\u0e5e")
        buf.write("\u0e63\u0e66\u0e69\u0e6e\u0e71\u0e76\u0e79\u0e7e\u0e81")
        buf.write("\u0e86\u0e89\u0e8e\u0e91\u0e96\u0e9c\u0ea1\u0ea4\u0ea9")
        buf.write("\u0eb0\u0eb2\u0eb8\u0ec1\u0ec6\u0ec8\u0ed4\u0eda\u0ee6")
        buf.write("\u0ee9\u0eee\u0ef0\u0efa\u0eff\u0f01\u0f05\u0f0b\u0f1d")
        buf.write("\u0f1f\u0f2e\u0f40\u0f48\u0f52\u0f62\u0f77\u0f82\u0f88")
        buf.write("\u0f91\u0f9a\u0fa0\u0fa9\u0fae\u0fb1\u0fb6\u0fb9\u0fbe")
        buf.write("\u0fc1\u0fc9\u0fcf\u0fd3\u0fda\u0fe0\u0fe4\u0fe7\u0fe9")
        buf.write("\u0fec\u0ff1\u0ff4\u0ff9\u0ffc\u1001\u1004\u1009\u100c")
        buf.write("\u101b\u1026\u1032\u1039\u1040\u1044\u1049\u104c\u1051")
        buf.write("\u1054\u1059\u105c\u1065\u106c\u107b\u107f\u1084\u108f")
        buf.write("\u1099\u10a5\u10ab\u10ad\u10b5\u10be\u10c3\u10ce\u10d1")
        buf.write("\u10d5\u10dd\u10e1\u10e5\u10ed\u10f2\u10fa\u10ff\u1103")
        buf.write("\u1105\u110a\u1113\u1116\u111b\u1122\u1128\u112a\u112f")
        buf.write("\u1135\u113b\u1140\u1146\u114d\u1152\u1157\u115c\u115f")
        buf.write("\u1163\u1167\u116b\u116f\u1174\u1178\u117c\u1186\u118c")
        buf.write("\u1193\u1196\u119c\u11a2\u11a7\u11a9\u11af\u11b1\u11b6")
        buf.write("\u11bc\u11c2\u11c7\u11c9\u11cd\u11d1\u11d4\u11e2\u11e7")
        buf.write("\u11eb\u11f8\u11fb\u11fd\u1205\u120f\u1215\u121c\u121f")
        buf.write("\u1225\u122b\u1230\u1232\u1238\u123a\u123f\u1245\u124b")
        buf.write("\u1251\u1256\u1258\u125c\u1260\u1263\u1271\u1276\u127a")
        buf.write("\u1287\u128a\u128c\u1294\u129f\u12a8\u12b1\u12bc\u12c5")
        buf.write("\u12ce\u12da\u12de\u12e3\u12e5\u12e7\u12ec\u12f0\u12f5")
        buf.write("\u12f7\u12f9\u1307\u130c\u1322\u1338\u133d\u134a\u1352")
        buf.write("\u1366\u1369\u136f\u1377\u137e\u1383\u1387\u138b\u138e")
        buf.write("\u1395\u13a7\u13a9\u13bd\u13c5\u13ca\u13dc\u13eb\u13ed")
        buf.write("\u13f4\u13fb\u1400\u1405\u140b\u1410\u1412\u1419\u141f")
        buf.write("\u1425\u1428\u142e\u1438\u143b\u1442\u1445\u144a\u144c")
        buf.write("\u1454\u1458\u145e\u1463\u1465\u1468\u146f\u1475\u147c")
        buf.write("\u147f\u1485\u148a\u148c\u148f\u1497\u149d\u14a4\u14a7")
        buf.write("\u14ad\u14b2\u14b4\u14bc\u14c4\u14ca\u14cf\u14d1\u14db")
        buf.write("\u14e0\u14ea\u14f0\u14fc\u14fe\u1505\u150b\u1511\u1517")
        buf.write("\u151c\u151e\u1525\u152d\u1533\u1541\u1543\u1546\u154b")
        buf.write("\u154d\u1559\u155f\u156d\u156f\u1572\u1577\u157a\u157f")
        buf.write("\u1581\u158a\u1591\u1597\u159a\u159f\u15a6\u15a8\u15ae")
        buf.write("\u15b0\u15b8\u15ba\u15c0\u15c2\u15c8\u15ca\u15d1\u15d4")
        buf.write("\u15d6\u15d9\u15dd\u15df\u15e8\u15ee\u15f2\u15fa\u1601")
        buf.write("\u1607\u1609\u1614\u1619\u161f\u1623\u162d\u1635\u1641")
        buf.write("\u1644\u164c\u164e\u1651\u1655\u1658\u1662\u1668\u1670")
        buf.write("\u1674\u1678\u1681\u1687\u168b\u168e\u1699\u169d\u16a4")
        buf.write("\u16a9\u16ac\u16b4\u16b8\u16bb\u16bf\u16c2\u16c6\u16cd")
        buf.write("\u16d1\u16d3\u16d5\u16d8\u16db\u16de\u16e4\u16e7\u16ef")
        buf.write("\u16f1\u16f4\u16f8\u16fb\u1701\u1704\u1708\u170b\u170e")
        buf.write("\u1715\u1718\u171f\u1725\u1729\u1733\u1736\u1739\u173d")
        buf.write("\u1740\u1743\u1746\u174a\u174d\u1755\u1757\u175b\u175e")
        buf.write("\u1766\u176a\u176e\u1775\u1779\u177b\u177d\u1780\u1783")
        buf.write("\u1786\u178e\u1794\u179a\u179c\u17a0\u17a3\u17a8\u17ad")
        buf.write("\u17b0\u17b8\u17bc\u17c3\u17c6\u17cf\u17d2\u17d6\u17de")
        buf.write("\u17e1\u17e5\u17e8\u17f6\u17fa\u17fd\u1801\u1804\u1809")
        buf.write("\u180c\u1812\u1815\u181c\u1820\u1822\u182a\u182d\u1831")
        buf.write("\u1838\u183d\u1840\u184c\u184f\u1855\u185c\u1861\u1866")
        buf.write("\u186d\u1874\u1877\u187f\u1887\u188a\u1892\u189d\u18a0")
        buf.write("\u18aa\u18b1\u18b6\u18b9\u18c3\u18c6\u18c9\u18d1\u18dc")
        buf.write("\u18df\u18e2\u18e8\u18ed\u18f1\u18fb\u18fe\u1901\u1907")
        buf.write("\u190d\u1915\u1918\u191c\u1920\u1923\u1928\u1936\u1946")
        buf.write("\u194a\u1950\u1952\u1955\u1959\u195e\u1963\u196b\u1970")
        buf.write("\u1975\u197b\u1980\u1983\u198c\u1996\u1999\u19a2\u19aa")
        buf.write("\u19ad\u19b4\u19b7\u19e5\u19e9\u19ec\u19f2\u19fe\u1a00")
        buf.write("\u1a03\u1a1c\u1a27\u1a2f\u1a3a\u1a3f\u1a42\u1a4a\u1a54")
        buf.write("\u1a5b\u1a62\u1a64\u1a70\u1a7b\u1a7f\u1a84\u1a87\u1a89")
        buf.write("\u1a8c\u1a98\u1a9a\u1a9c\u1a9f\u1aa4\u1aa7\u1aac\u1ab6")
        buf.write("\u1aba\u1abf\u1ac2\u1ac4\u1ac7\u1ad3\u1ad5\u1ad7\u1ada")
        buf.write("\u1ae0\u1aea\u1afe\u1b04\u1b1d\u1b1f\u1b39\u1b3f\u1b4a")
        buf.write("\u1b52\u1b55\u1b63\u1b6b\u1b72\u1b89\u1b96\u1b9c\u1ba3")
        buf.write("\u1bab\u1bae\u1bb1\u1bba\u1bc4\u1bcb\u1bcf\u1bd3\u1bd9")
        buf.write("\u1be0\u1be4\u1bea\u1bf1\u1bf8\u1bfb\u1c01\u1c08\u1c0c")
        buf.write("\u1c11\u1c16\u1c1b\u1c23\u1c27\u1c2d\u1c34\u1c38\u1c41")
        buf.write("\u1c49\u1c4f\u1c55\u1c66\u1c6a\u1c72\u1c76\u1c7e\u1c82")
        buf.write("\u1c87\u1c8b\u1c92\u1c98\u1c9a\u1c9e\u1ca2\u1ca6\u1ca9")
        buf.write("\u1cad\u1cb3\u1cb7\u1cb9\u1cc0\u1cc7\u1cca\u1ccd\u1cd4")
        buf.write("\u1cd9\u1cde\u1ce2\u1ce8\u1cec\u1cee\u1cf3\u1cf8\u1cfc")
        buf.write("\u1d01\u1d07\u1d0b\u1d0f\u1d11\u1d15\u1d19\u1d1d\u1d21")
        buf.write("\u1d27\u1d2a\u1d30\u1d34\u1d38\u1d3e\u1d44\u1d46\u1d49")
        buf.write("\u1d4d\u1d51\u1d55\u1d5b\u1d5e\u1d64\u1d6a\u1d6d\u1d73")
        buf.write("\u1d76\u1d7c\u1d7f\u1d83\u1d87\u1d8b\u1d90\u1d93\u1d97")
        buf.write("\u1d9b\u1dac\u1dae\u1db0\u1db3\u1dba\u1dbf\u1dc3\u1dc9")
        buf.write("\u1dcd\u1dcf\u1dd4\u1dd9\u1ddd\u1de2\u1de8\u1dec\u1df0")
        buf.write("\u1df2\u1df6\u1dfa\u1dfe\u1e02\u1e08\u1e0b\u1e11\u1e15")
        buf.write("\u1e19\u1e1f\u1e25\u1e27\u1e2a\u1e2e\u1e32\u1e36\u1e3c")
        buf.write("\u1e3f\u1e45\u1e4b\u1e4e\u1e54\u1e57\u1e5d\u1e60\u1e64")
        buf.write("\u1e68\u1e6c\u1e71\u1e74\u1e78\u1e7c\u1e82\u1e85\u1e89")
        buf.write("\u1e9a\u1e9c\u1e9e\u1ea1\u1eaf\u1eb5\u1ebd\u1ec4\u1ec6")
        buf.write("\u1ec9\u1eeb\u1eef\u1ef6\u1ef9\u1efc\u1f04\u1f09\u1f0e")
        buf.write("\u1f11\u1f13\u1f17\u1f1b\u1f1e\u1f22\u1f28\u1f2d\u1f34")
        buf.write("\u1f36\u1f3a\u1f42\u1f48\u1f4c\u1f4f\u1f58\u1f5b\u1f61")
        buf.write("\u1f68\u1f6d\u1f75\u1f7a\u1f86\u1f88\u1f93\u1f9a\u1fa4")
        buf.write("\u1fbb\u1fc8\u1fd8\u1fdd\u1fe4\u1fe7\u1feb\u1fed\u1ffe")
        buf.write("\u200d\u2015\u201e\u2026\u202f\u203a\u203e\u2040\u2042")
        buf.write("\u2048\u204d\u2054\u2061\u2063\u2065\u2068\u206b\u2072")
        buf.write("\u2075\u207b\u2080\u2082\u2085\u208b\u2093\u2095\u2098")
        buf.write("\u209c\u209f\u20a9\u20ac\u20b0\u20b3\u20b9\u20bc\u20be")
        buf.write("\u20c2\u20c7\u20cb\u20d3\u20d7\u20da\u20df\u20e7\u20ec")
        buf.write("\u20f6\u2101\u2106\u210c\u2112\u2116\u2119\u211d\u2121")
        buf.write("\u2129\u212e\u2130\u2133\u2138\u2141\u2145\u214a\u214d")
        buf.write("\u2150\u2156\u215e\u2166\u2169\u216c\u2170\u2175\u2178")
        buf.write("\u217e\u2182\u2188\u2190\u2196\u2198\u219b\u21aa\u21ad")
        buf.write("\u21b0\u21b2\u21bd\u21c8\u21d1\u21db\u21e5\u21e7\u21e9")
        buf.write("\u21ec\u21ef\u21fa\u21fc\u21fe\u2201\u2206\u2211\u221a")
        buf.write("\u221d\u2220\u2229\u222c\u222f\u2236\u2239\u2248\u224b")
        buf.write("\u2252\u2262\u2266\u2270\u2283\u2285\u228c\u2293\u2297")
        buf.write("\u229f\u22a3\u22a7\u22ad\u22b7\u22c1\u22c8\u22cf\u22d8")
        buf.write("\u22df\u22e6\u22ef\u22f3\u22fd\u2304\u230c\u2314\u2318")
        buf.write("\u232e\u2337\u233d\u2343\u2349\u2353\u235a\u235f\u2364")
        buf.write("\u2368\u236f\u2373\u2376\u237b\u237f\u2383\u2388\u238f")
        buf.write("\u2392\u2396\u239b\u239f\u23a8\u23af\u23b8\u23c4\u23c6")
        buf.write("\u23d0\u23d3\u23d8\u23e1\u23e3\u23e5\u23ea\u23f2\u23f7")
        buf.write("\u23ff\u2404\u240a\u2414\u2416\u241a\u241e\u2420\u2427")
        buf.write("\u2432\u2454\u2464\u246b\u246d\u2474\u247d\u2487\u248c")
        buf.write("\u2493\u2496\u249d\u24a4\u24a7\u24a9\u24b1\u24b3\u24b9")
        buf.write("\u24c0\u24c8\u24ce\u24d3\u24d7\u24db\u24e0\u24e2\u24e9")
        buf.write("\u24ed\u24f4\u24f6\u24fd\u24ff\u2508\u2510\u2517\u251d")
        buf.write("\u2528\u252c\u252e\u2531\u2549\u2562\u2567\u257b\u257f")
        buf.write("\u2583\u2593\u259b\u25b1\u25eb\u25ef\u2610\u2617\u261d")
        buf.write("\u262a\u2639\u2644\u2649\u2653\u265c\u267e\u2683\u2689")
        buf.write("\u268c\u2691\u2696\u269f\u26a4\u26aa\u26b3\u26bd\u26c0")
        buf.write("\u26ce\u26d4\u26dc\u26e0\u26e8\u26ef\u26fc\u2704\u2711")
        buf.write("\u2718\u271e\u2722\u2733\u2742\u2744\u2749\u274c\u2755")
        buf.write("\u2758\u275b\u2768\u276c\u2774\u277a\u2782\u2789\u278f")
        buf.write("\u279e\u27a7\u27ad\u27b3\u27b6\u27ba\u27c1\u27c9\u27cc")
        buf.write("\u27d2\u27d8\u27da\u27e0\u27e3\u27e5\u27eb\u27ed\u27fb")
        buf.write("\u2802\u280b\u2812\u281e\u2825\u282c\u2833\u2839\u2840")
        buf.write("\u2843\u2848\u284f\u2856\u285e\u2863\u2867\u286c\u2872")
        buf.write("\u2878\u287e\u2884\u288a\u2890\u2896\u2899\u289d\u28a2")
        buf.write("\u28a6\u28ae\u28b3\u28ba\u28c3\u28c5\u28cc\u28d8\u28dd")
        buf.write("\u28e8\u28f2\u28f4\u28fa\u28fc\u2901\u2903\u2906\u290a")
        buf.write("\u290e\u2914\u291d\u2920\u2922\u2925\u292b\u292f\u2932")
        buf.write("\u293b\u2944\u2950\u2953\u2957\u295d\u2960\u2964\u296a")
        buf.write("\u296f\u2974\u2978\u297c\u2980\u2987\u299a\u29a0")
        return buf.getvalue()


class TSqlParser ( Parser ):

    grammarFileName = "TSqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABSENT'", "'ADD'", "'AES'", "'ALL'", 
                     "'ALLOW_CONNECTIONS'", "'ALLOW_MULTIPLE_EVENT_LOSS'", 
                     "'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", "'AND'", "'ANONYMOUS'", 
                     "'ANY'", "'APPEND'", "'APPLICATION'", "'AS'", "'ASC'", 
                     "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", "'AUTHORIZATION'", 
                     "'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", 
                     "'AUTOMATIC'", "'AVAILABILITY_MODE'", "'\\'", "'BACKUP'", 
                     "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", 
                     "'BLOCKING_HIERARCHY'", "'BREAK'", "'BROWSE'", "'BUFFER'", 
                     "'BUFFERCOUNT'", "'BULK'", "'BY'", "'CACHE'", "'CALLED'", 
                     "'CASCADE'", "'CASE'", "'CERTIFICATE'", "'CHANGETABLE'", 
                     "'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", 
                     "'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", "'CLOSE'", 
                     "'CLUSTER'", "'CLUSTERED'", "'COALESCE'", "'COLLATE'", 
                     "'COLUMN'", "'COMPRESSION'", "'COMMIT'", "'COMPUTE'", 
                     "'CONFIGURATION'", "'CONSTRAINT'", "'CONTAINMENT'", 
                     "'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", "'CONTINUE'", 
                     "'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", 
                     "'CONVERSATION'", "<INVALID>", "'COPY_ONLY'", "'CREATE'", 
                     "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
                     "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", 
                     "'CYCLE'", "'DATA'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", 
                     "'DATABASE'", "'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", 
                     "'DECLARE'", "'DEFAULT'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", 
                     "'DELETE'", "'DENY'", "'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", 
                     "'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DOUBLE'", 
                     "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", "'DUMP'", 
                     "'ELSE'", "'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", 
                     "'ESCAPE'", "'ERROR'", "'EVENT'", "<INVALID>", "'EVENT_RETENTION_MODE'", 
                     "'EXCEPT'", "'EXECUTABLE_FILE'", "<INVALID>", "'EXISTS'", 
                     "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'", 
                     "'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", 
                     "'FAN_IN'", "'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", 
                     "'FILE_SNAPSHOT'", "'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
                     "'FOREIGN'", "'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", 
                     "'FULL'", "'FUNCTION'", "'GET'", "'GOTO'", "'GOVERNOR'", 
                     "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", "'HEALTHCHECKTIMEOUT'", 
                     "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
                     "'IF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", 
                     "'INFINITE'", "'INIT'", "'INNER'", "'INSERT'", "'INSTEAD'", 
                     "'INTERSECT'", "'INTO'", "<INVALID>", "<INVALID>", 
                     "'IS'", "'ISNULL'", "'JOIN'", "'KERBEROS'", "'KEY'", 
                     "'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", "'KILL'", 
                     "'LANGUAGE'", "'LEFT'", "'LIBRARY'", "'LIFETIME'", 
                     "'LIKE'", "'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
                     "'LOAD'", "'LOCAL_SERVICE_NAME'", "'LOG'", "'MATCHED'", 
                     "'MASTER'", "'MAX_MEMORY'", "'MAXTRANSFER'", "'MAXVALUE'", 
                     "'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", "'MAX_SIZE'", 
                     "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
                     "'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", 
                     "'MERGE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", 
                     "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", 
                     "'NEGOTIATE'", "'NOCHECK'", "'NOFORMAT'", "'NOINIT'", 
                     "'NONCLUSTERED'", "'NONE'", "'NOREWIND'", "'NOSKIP'", 
                     "'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
                     "'NO_EVENT_LOSS'", "'NOT'", "'NOTIFICATION'", "'NTLM'", 
                     "'NULL'", "'NULLIF'", "'OF'", "'OFF'", "'OFFSETS'", 
                     "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", "'OPEN'", 
                     "'OPENDATASOURCE'", "'OPENQUERY'", "'OPENROWSET'", 
                     "'OPENXML'", "'OPTION'", "'OR'", "'ORDER'", "'OUTER'", 
                     "'OVER'", "'PAGE'", "'PARAM_NODE'", "'PARTIAL'", "'PASSWORD'", 
                     "'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", "'PER_DB'", 
                     "'PER_NODE'", "'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", 
                     "'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRINT'", 
                     "'PROC'", "'PROCEDURE'", "'PROCESS'", "'PUBLIC'", "'PYTHON'", 
                     "'R'", "'RAISERROR'", "'RAW'", "'READ'", "'READTEXT'", 
                     "'READ_WRITE_FILEGROUPS'", "'RECONFIGURE'", "'REFERENCES'", 
                     "'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
                     "'REPLICATION'", "'REQUIRED'", "'RESET'", "'RESTART'", 
                     "'RESTORE'", "'RESTRICT'", "'RESUME'", "'RETAINDAYS'", 
                     "'RETURN'", "'RETURNS'", "'REVERT'", "'REVOKE'", "'REWIND'", 
                     "'RIGHT'", "'ROLLBACK'", "'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", 
                     "'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", 
                     "'RSA_4096'", "'SAFETY'", "'RULE'", "'SAFE'", "'SAVE'", 
                     "'SCHEDULER'", "'SCHEMA'", "'SCHEME'", "'SECURITY'", 
                     "'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", 
                     "'SEMANTICSIMILARITYDETAILSTABLE'", "'SEMANTICSIMILARITYTABLE'", 
                     "'SEQUENCE'", "'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", 
                     "'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", "'SET'", 
                     "'SETUSER'", "'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", 
                     "'SOME'", "'SOURCE'", "'SPECIFICATION'", "'SPLIT'", 
                     "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
                     "'STATISTICS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", 
                     "'STARTUP_STATE'", "'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", 
                     "'SUPPORTED'", "'SYSTEM'", "'SYSTEM_USER'", "'TABLE'", 
                     "'TABLESAMPLE'", "'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", 
                     "'THEN'", "'TO'", "'TOP'", "'TRACK_CAUSALITY'", "'TRAN'", 
                     "'TRANSACTION'", "'TRANSFER'", "'TRIGGER'", "'TRUNCATE'", 
                     "'TSEQUAL'", "'UNCHECKED'", "'UNION'", "'UNIQUE'", 
                     "'UNLOCK'", "'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", 
                     "'URL'", "'USE'", "'USED'", "'USER'", "'VALUES'", "'VARYING'", 
                     "'VERBOSELOGGING'", "'VIEW'", "'VISIBILITY'", "'WAITFOR'", 
                     "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOWS'", "'WITH'", 
                     "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", 
                     "'ABSOLUTE'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVATION'", 
                     "'ACTIVE'", "'ADDRESS'", "'AES_128'", "'AES_192'", 
                     "'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'", 
                     "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
                     "'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", 
                     "'ANSI_NULLS'", "'ANSI_PADDING'", "'ANSI_WARNINGS'", 
                     "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", "'ASSEMBLY'", 
                     "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", 
                     "'AUTO_CLOSE'", "'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", 
                     "'AUTO_UPDATE_STATISTICS'", "'AUTO_UPDATE_STATISTICS_ASYNC'", 
                     "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", "'BEGIN_DIALOG'", 
                     "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
                     "'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", 
                     "'BULK_LOGGED'", "'CALLER'", "'CAP_CPU_PERCENT'", "<INVALID>", 
                     "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", "'CHANGE_TRACKING'", 
                     "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
                     "'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", 
                     "'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", 
                     "'CONTROL'", "'COOKIE'", "'COUNT'", "'COUNT_BIG'", 
                     "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
                     "'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", 
                     "'CURSOR_DEFAULT'", "'DATE_CORRELATION_OPTIMIZATION'", 
                     "'DATEADD'", "'DATEDIFF'", "'DATENAME'", "'DATEPART'", 
                     "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", "'DECRYPTION'", 
                     "<INVALID>", "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
                     "'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", 
                     "'DEPENDENTS'", "'DES'", "'DESCRIPTION'", "'DESX'", 
                     "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", "'DISABLE'", 
                     "'DISABLE_BROKER'", "'DISABLED'", "<INVALID>", "'DOCUMENT'", 
                     "'DYNAMIC'", "'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", 
                     "'ENABLE'", "'ENABLE_BROKER'", "'ENCRYPTED_VALUE'", 
                     "'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", 
                     "'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", "'EXPAND'", 
                     "'EXPIRY_DATE'", "'EXPLICIT'", "'FAIL_OPERATION'", 
                     "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
                     "'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", 
                     "'FILEPATH'", "'FILESTREAM'", "'FILTER'", "'FIRST'", 
                     "'FIRST_VALUE'", "'FOLLOWING'", "'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", 
                     "'FORCED'", "'FORMAT'", "'FORWARD_ONLY'", "'FULLSCAN'", 
                     "'FULLTEXT'", "'GB'", "'GETDATE'", "'GETUTCDATE'", 
                     "'GLOBAL'", "'GO'", "'GROUP_MAX_REQUESTS'", "'GROUPING'", 
                     "'GROUPING_ID'", "'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", 
                     "'HIGH'", "'HONOR_BROKER_PRIORITY'", "'HOURS'", "'IDENTITY_VALUE'", 
                     "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", "'IMMEDIATE'", 
                     "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
                     "'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", 
                     "'INSERTED'", "'INT'", "'IP'", "'ISOLATION'", "'JSON'", 
                     "'KB'", "'KEEP'", "'KEEPFIXED'", "'KEY_SOURCE'", "'KEYS'", 
                     "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", "'LEAD'", 
                     "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", 
                     "'LOB_COMPACTION'", "'LOCAL'", "'LOCATION'", "'LOCK'", 
                     "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", "'LOW'", 
                     "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
                     "'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", 
                     "'MAX_MEMORY_PERCENT'", "'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", 
                     "'MAX_ROLLOVER_FILES'", "'MAXDOP'", "'MAXRECURSION'", 
                     "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
                     "'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
                     "'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", 
                     "'MIRROR_ADDRESS'", "'MIXED_PAGE_ALLOCATION'", "'MODE'", 
                     "'MODIFY'", "'MOVE'", "'MULTI_USER'", "'NAME'", "'NESTED_TRIGGERS'", 
                     "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
                     "'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", 
                     "'NODES'", "'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", 
                     "'NORECOMPUTE'", "'NORECOVERY'", "'NOWAIT'", "'NTILE'", 
                     "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", "'OBJECT'", 
                     "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", 
                     "'ONLY'", "'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", 
                     "'OUT'", "'OUTPUT'", "'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", 
                     "'PARTITION'", "'PARTITIONS'", "'PARTNER'", "'PATH'", 
                     "'POISON_MESSAGE_HANDLING'", "'POOL'", "'PORT'", "'PRECEDING'", 
                     "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
                     "'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", 
                     "'PROPERTY'", "'PROVIDER'", "'PROVIDER_KEY_NAME'", 
                     "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", "'QUOTED_IDENTIFIER'", 
                     "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
                     "'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
                     "'READ_WRITE'", "'READONLY'", "'REBUILD'", "'RECEIVE'", 
                     "'RECOMPILE'", "'RECOVERY'", "'RECURSIVE_TRIGGERS'", 
                     "'RELATIVE'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
                     "'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", 
                     "'REQUEST_MAX_CPU_TIME_SEC'", "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", 
                     "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", "'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", 
                     "'RESERVE_DISK_SPACE'", "'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", 
                     "'RESTRICTED_USER'", "'RETENTION'", "'ROBUST'", "'ROOT'", 
                     "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", "'ROWS'", 
                     "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", 
                     "'SCROLL_LOCKS'", "'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", 
                     "'SECONDARY_ROLE'", "'SECONDS'", "'SECRET'", "'SECURITY_LOG'", 
                     "'SEEDING_MODE'", "'SELF'", "'SEMI_SENSITIVE'", "'SEND'", 
                     "'SENT'", "'SERIALIZABLE'", "'SESSION_TIMEOUT'", "'SETERROR'", 
                     "'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", "'SIMPLE'", 
                     "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", 
                     "'SPATIAL_WINDOW_MAX_CELLS'", "'STANDBY'", "'START_DATE'", 
                     "'STATIC'", "'STATS_STREAM'", "'STATUS'", "'STDEV'", 
                     "'STDEVP'", "'STOPLIST'", "'STUFF'", "'SUBJECT'", "'SUM'", 
                     "'SUSPEND'", "'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", 
                     "'SYNONYM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", "'TB'", 
                     "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", 
                     "'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", "'TRANSFORM_NOISE_WORDS'", 
                     "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", 
                     "'TRY'", "'TSQL'", "'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", 
                     "'TYPE_WARNING'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNKNOWN'", 
                     "'UNLIMITED'", "'USING'", "'VALID_XML'", "'VALIDATION'", 
                     "'VALUE'", "'VAR'", "'VARP'", "'VIEW_METADATA'", "'VIEWS'", 
                     "'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", 
                     "'WORK'", "'WORKLOAD'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", 
                     "'XMLSCHEMA'", "'XSINIL'", "'$ACTION'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'''", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'='", "'>'", "'<'", "'!'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'||'", 
                     "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", 
                     "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", 
                     "'|'", "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", 
                      "ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_SINGLE_EVENT_LOSS", 
                      "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", "APPLICATION", 
                      "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", 
                      "AUTHORIZATION", "AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", 
                      "AUTOMATIC", "AVAILABILITY_MODE", "BACKSLASH", "BACKUP", 
                      "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE", 
                      "BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", 
                      "BUFFERCOUNT", "BULK", "BY", "CACHE", "CALLED", "CASCADE", 
                      "CASE", "CERTIFICATE", "CHANGETABLE", "CHANGES", "CHECK", 
                      "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
                      "CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", 
                      "COALESCE", "COLLATE", "COLUMN", "COMPRESSION", "COMMIT", 
                      "COMPUTE", "CONFIGURATION", "CONSTRAINT", "CONTAINMENT", 
                      "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", 
                      "CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", 
                      "CONVERSATION", "CONVERT", "COPY_ONLY", "CREATE", 
                      "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", 
                      "DATA", "DATA_COMPRESSION", "DATA_SOURCE", "DATABASE", 
                      "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", 
                      "DEFAULT", "DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", 
                      "DENY", "DESC", "DIAGNOSTICS", "DIFFERENTIAL", "DISK", 
                      "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
                      "DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", 
                      "ELSE", "ENABLED", "END", "ENDPOINT", "ERRLVL", "ESCAPE", 
                      "ERROR", "EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", 
                      "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
                      "EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", 
                      "FAILOVER", "FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", 
                      "FILE", "FILENAME", "FILLFACTOR", "FILE_SNAPSHOT", 
                      "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
                      "FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", 
                      "FUNCTION", "GET", "GOTO", "GOVERNOR", "GRANT", "GROUP", 
                      "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", "IDENTITY", 
                      "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IN", "INCLUDE", 
                      "INCREMENT", "INDEX", "INFINITE", "INIT", "INNER", 
                      "INSERT", "INSTEAD", "INTERSECT", "INTO", "IPV4_ADDR", 
                      "IPV6_ADDR", "IS", "ISNULL", "JOIN", "KERBEROS", "KEY", 
                      "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", 
                      "LEFT", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", 
                      "LISTENER_IP", "LISTENER_PORT", "LOAD", "LOCAL_SERVICE_NAME", 
                      "LOG", "MATCHED", "MASTER", "MAX_MEMORY", "MAXTRANSFER", 
                      "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", 
                      "MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", 
                      "MEDIANAME", "MEMBER", "MEMORY_PARTITION_MODE", "MERGE", 
                      "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", "MINVALUE", 
                      "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", 
                      "NOCHECK", "NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", 
                      "NOREWIND", "NOSKIP", "NOUNLOAD", "NO_CHECKSUM", "NO_COMPRESSION", 
                      "NO_EVENT_LOSS", "NOT", "NOTIFICATION", "NTLM", "NULL", 
                      "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", 
                      "ON", "ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", 
                      "OPENROWSET", "OPENXML", "OPTION", "OR", "ORDER", 
                      "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
                      "PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", 
                      "PER_DB", "PER_NODE", "PIVOT", "PLAN", "PLATFORM", 
                      "POLICY", "PRECISION", "PREDICATE", "PRIMARY", "PRINT", 
                      "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", 
                      "R", "RAISERROR", "RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", 
                      "RECONFIGURE", "REFERENCES", "REGENERATE", "RELATED_CONVERSATION", 
                      "RELATED_CONVERSATION_GROUP", "REPLICATION", "REQUIRED", 
                      "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", 
                      "RETAINDAYS", "RETURN", "RETURNS", "REVERT", "REVOKE", 
                      "REWIND", "RIGHT", "ROLLBACK", "ROLE", "ROWCOUNT", 
                      "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
                      "RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", 
                      "SCHEMA", "SCHEME", "SECURITY", "SECURITYAUDIT", "SELECT", 
                      "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
                      "SEMANTICSIMILARITYTABLE", "SEQUENCE", "SERVER", "SERVICE", 
                      "SERVICE_BROKER", "SERVICE_NAME", "SESSION", "SESSION_USER", 
                      "SET", "SETUSER", "SHUTDOWN", "SID", "SKIP_KEYWORD", 
                      "SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", "SPLIT", 
                      "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", 
                      "STATISTICS", "STATE", "STATS", "START", "STARTED", 
                      "STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", 
                      "SUPPORTED", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
                      "TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", "TO", 
                      "TOP", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSFER", 
                      "TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", "UNION", 
                      "UNIQUE", "UNLOCK", "UNPIVOT", "UNSAFE", "UPDATE", 
                      "UPDATETEXT", "URL", "USE", "USED", "USER", "VALUES", 
                      "VARYING", "VERBOSELOGGING", "VIEW", "VISIBILITY", 
                      "WAITFOR", "WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", 
                      "WITHIN", "WITHOUT", "WITNESS", "WRITETEXT", "ABSOLUTE", 
                      "ACCENT_SENSITIVITY", "ACTION", "ACTIVATION", "ACTIVE", 
                      "ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", 
                      "AFTER", "AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
                      "ALLOW_SNAPSHOT_ISOLATION", "ALLOWED", "ANSI_NULL_DEFAULT", 
                      "ANSI_NULLS", "ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", 
                      "APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", 
                      "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
                      "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
                      "AVAILABILITY", "AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", 
                      "BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", "BINDING", 
                      "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", 
                      "CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", 
                      "CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", 
                      "CHECKSUM_AGG", "CLEANUP", "COLLECTION", "COLUMN_MASTER_KEY", 
                      "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
                      "CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", 
                      "COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", 
                      "CREDENTIAL", "CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", 
                      "CURSOR_DEFAULT", "DATE_CORRELATION_OPTIMIZATION", 
                      "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DAYS", 
                      "DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", 
                      "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DELAY", 
                      "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DEPENDENTS", 
                      "DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", 
                      "DISABLE", "DISABLE_BROKER", "DISABLED", "DISK_DRIVE", 
                      "DOCUMENT", "DYNAMIC", "ELEMENTS", "EMERGENCY", "EMPTY", 
                      "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", 
                      "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", 
                      "EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", 
                      "FAIL_OPERATION", "FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", 
                      "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
                      "FILEPATH", "FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", 
                      "FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
                      "FORCED", "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", 
                      "GB", "GETDATE", "GETUTCDATE", "GLOBAL", "GO", "GROUP_MAX_REQUESTS", 
                      "GROUPING", "GROUPING_ID", "HADR", "HASH", "HEALTH_CHECK_TIMEOUT", 
                      "HIGH", "HONOR_BROKER_PRIORITY", "HOURS", "IDENTITY_VALUE", 
                      "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
                      "IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", 
                      "INCREMENTAL", "INITIATOR", "INPUT", "INSENSITIVE", 
                      "INSERTED", "INT", "IP", "ISOLATION", "JSON", "KB", 
                      "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", 
                      "LAG", "LAST", "LAST_VALUE", "LEAD", "LEVEL", "LIST", 
                      "LISTENER", "LISTENER_URL", "LOB_COMPACTION", "LOCAL", 
                      "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", 
                      "LOW", "MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", 
                      "MAX_DOP", "MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", 
                      "MAX_PROCESSES", "MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", 
                      "MAXDOP", "MAXRECURSION", "MAXSIZE", "MB", "MEDIUM", 
                      "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
                      "MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", 
                      "MINUTES", "MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", 
                      "MODE", "MODIFY", "MOVE", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", "NEXT", 
                      "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", 
                      "NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", 
                      "NORECOVERY", "NOWAIT", "NTILE", "NUMANODE", "NUMBER", 
                      "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
                      "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", 
                      "OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", 
                      "PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", "PARTITIONS", 
                      "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", "POOL", 
                      "PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", 
                      "PRIORITY_LEVEL", "PRIVATE", "PRIVATE_KEY", "PRIVILEGES", 
                      "PROCEDURE_NAME", "PROPERTY", "PROVIDER", "PROVIDER_KEY_NAME", 
                      "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
                      "RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", 
                      "READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", 
                      "READONLY", "REBUILD", "RECEIVE", "RECOMPILE", "RECOVERY", 
                      "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
                      "REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
                      "REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
                      "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", 
                      "RESOURCE", "RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", 
                      "RETENTION", "ROBUST", "ROOT", "ROUTE", "ROW", "ROW_NUMBER", 
                      "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", "SCOPED", 
                      "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
                      "SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY_LOG", 
                      "SEEDING_MODE", "SELF", "SEMI_SENSITIVE", "SEND", 
                      "SENT", "SERIALIZABLE", "SESSION_TIMEOUT", "SETERROR", 
                      "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", 
                      "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "STANDBY", "START_DATE", "STATIC", "STATS_STREAM", 
                      "STATUS", "STDEV", "STDEVP", "STOPLIST", "STUFF", 
                      "SUBJECT", "SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", 
                      "SYNONYM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
                      "THROW", "TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", 
                      "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", "TRIPLE_DES", 
                      "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
                      "TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", 
                      "UNKNOWN", "UNLIMITED", "USING", "VALID_XML", "VALIDATION", 
                      "VALUE", "VAR", "VARP", "VIEW_METADATA", "VIEWS", 
                      "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", 
                      "WORK", "WORKLOAD", "XML", "XMLDATA", "XMLNAMESPACES", 
                      "XMLSCHEMA", "XSINIL", "DOLLAR_ACTION", "SPACE", "COMMENT", 
                      "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", 
                      "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", 
                      "QUOTED_URL", "QUOTED_HOST_AND_PORT", "STRING", "BINARY", 
                      "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
                      "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
                      "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", 
                      "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", 
                      "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", 
                      "BIT_OR", "BIT_AND", "BIT_XOR", "IPV4_OCTECT" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_backup_statement = 6
    RULE_cfl_statement = 7
    RULE_block_statement = 8
    RULE_break_statement = 9
    RULE_continue_statement = 10
    RULE_goto_statement = 11
    RULE_return_statement = 12
    RULE_if_statement = 13
    RULE_throw_statement = 14
    RULE_throw_error_number = 15
    RULE_throw_message = 16
    RULE_throw_state = 17
    RULE_try_catch_statement = 18
    RULE_waitfor_statement = 19
    RULE_while_statement = 20
    RULE_print_statement = 21
    RULE_raiseerror_statement = 22
    RULE_empty_statement = 23
    RULE_another_statement = 24
    RULE_alter_application_role = 25
    RULE_create_application_role = 26
    RULE_drop_aggregate = 27
    RULE_drop_application_role = 28
    RULE_alter_assembly = 29
    RULE_alter_assembly_start = 30
    RULE_alter_assembly_clause = 31
    RULE_alter_assembly_from_clause = 32
    RULE_alter_assembly_from_clause_start = 33
    RULE_alter_assembly_drop_clause = 34
    RULE_alter_assembly_drop_multiple_files = 35
    RULE_alter_assembly_drop = 36
    RULE_alter_assembly_add_clause = 37
    RULE_alter_asssembly_add_clause_start = 38
    RULE_alter_assembly_client_file_clause = 39
    RULE_alter_assembly_file_name = 40
    RULE_alter_assembly_file_bits = 41
    RULE_alter_assembly_as = 42
    RULE_alter_assembly_with_clause = 43
    RULE_alter_assembly_with = 44
    RULE_client_assembly_specifier = 45
    RULE_assembly_option = 46
    RULE_network_file_share = 47
    RULE_network_computer = 48
    RULE_network_file_start = 49
    RULE_file_path = 50
    RULE_file_directory_path_separator = 51
    RULE_local_file = 52
    RULE_local_drive = 53
    RULE_multiple_local_files = 54
    RULE_multiple_local_file_start = 55
    RULE_create_assembly = 56
    RULE_drop_assembly = 57
    RULE_alter_asymmetric_key = 58
    RULE_alter_asymmetric_key_start = 59
    RULE_asymmetric_key_option = 60
    RULE_asymmetric_key_option_start = 61
    RULE_asymmetric_key_password_change_option = 62
    RULE_create_asymmetric_key = 63
    RULE_drop_asymmetric_key = 64
    RULE_alter_authorization = 65
    RULE_authorization_grantee = 66
    RULE_entity_to = 67
    RULE_colon_colon = 68
    RULE_alter_authorization_start = 69
    RULE_alter_authorization_for_sql_database = 70
    RULE_alter_authorization_for_azure_dw = 71
    RULE_alter_authorization_for_parallel_dw = 72
    RULE_class_type = 73
    RULE_class_type_for_sql_database = 74
    RULE_class_type_for_azure_dw = 75
    RULE_class_type_for_parallel_dw = 76
    RULE_drop_availability_group = 77
    RULE_alter_availability_group = 78
    RULE_alter_availability_group_start = 79
    RULE_alter_availability_group_options = 80
    RULE_create_or_alter_broker_priority = 81
    RULE_drop_broker_priority = 82
    RULE_alter_certificate = 83
    RULE_alter_column_encryption_key = 84
    RULE_create_column_encryption_key = 85
    RULE_drop_certificate = 86
    RULE_drop_column_encryption_key = 87
    RULE_drop_column_master_key = 88
    RULE_drop_contract = 89
    RULE_drop_credential = 90
    RULE_drop_cryptograhic_provider = 91
    RULE_drop_database = 92
    RULE_drop_database_audit_specification = 93
    RULE_drop_database_scoped_credential = 94
    RULE_drop_default = 95
    RULE_drop_endpoint = 96
    RULE_drop_external_data_source = 97
    RULE_drop_external_file_format = 98
    RULE_drop_external_library = 99
    RULE_drop_external_resource_pool = 100
    RULE_drop_external_table = 101
    RULE_drop_event_notifications = 102
    RULE_drop_event_session = 103
    RULE_drop_fulltext_catalog = 104
    RULE_drop_fulltext_index = 105
    RULE_drop_fulltext_stoplist = 106
    RULE_drop_login = 107
    RULE_drop_master_key = 108
    RULE_drop_message_type = 109
    RULE_drop_partition_function = 110
    RULE_drop_partition_scheme = 111
    RULE_drop_queue = 112
    RULE_drop_remote_service_binding = 113
    RULE_drop_resource_pool = 114
    RULE_drop_db_role = 115
    RULE_drop_route = 116
    RULE_drop_rule = 117
    RULE_drop_schema = 118
    RULE_drop_search_property_list = 119
    RULE_drop_security_policy = 120
    RULE_drop_sequence = 121
    RULE_drop_server_audit = 122
    RULE_drop_server_audit_specification = 123
    RULE_drop_server_role = 124
    RULE_drop_service = 125
    RULE_drop_signature = 126
    RULE_drop_statistics_name_azure_dw_and_pdw = 127
    RULE_drop_symmetric_key = 128
    RULE_drop_synonym = 129
    RULE_drop_user = 130
    RULE_drop_workload_group = 131
    RULE_drop_xml_schema_collection = 132
    RULE_disable_trigger = 133
    RULE_enable_trigger = 134
    RULE_lock_table = 135
    RULE_truncate_table = 136
    RULE_create_column_master_key = 137
    RULE_alter_credential = 138
    RULE_create_credential = 139
    RULE_alter_cryptographic_provider = 140
    RULE_create_cryptographic_provider = 141
    RULE_create_event_notification = 142
    RULE_create_or_alter_event_session = 143
    RULE_event_session_predicate_expression = 144
    RULE_event_session_predicate_factor = 145
    RULE_event_session_predicate_leaf = 146
    RULE_alter_external_data_source = 147
    RULE_alter_external_library = 148
    RULE_create_external_library = 149
    RULE_alter_external_resource_pool = 150
    RULE_create_external_resource_pool = 151
    RULE_alter_fulltext_catalog = 152
    RULE_create_fulltext_catalog = 153
    RULE_alter_fulltext_stoplist = 154
    RULE_create_fulltext_stoplist = 155
    RULE_alter_login_sql_server = 156
    RULE_create_login_sql_server = 157
    RULE_alter_login_azure_sql = 158
    RULE_create_login_azure_sql = 159
    RULE_alter_login_azure_sql_dw_and_pdw = 160
    RULE_create_login_pdw = 161
    RULE_alter_master_key_sql_server = 162
    RULE_create_master_key_sql_server = 163
    RULE_alter_master_key_azure_sql = 164
    RULE_create_master_key_azure_sql = 165
    RULE_alter_message_type = 166
    RULE_alter_partition_function = 167
    RULE_alter_partition_scheme = 168
    RULE_alter_remote_service_binding = 169
    RULE_create_remote_service_binding = 170
    RULE_create_resource_pool = 171
    RULE_alter_resource_governor = 172
    RULE_alter_db_role = 173
    RULE_create_db_role = 174
    RULE_create_route = 175
    RULE_create_rule = 176
    RULE_alter_schema_sql = 177
    RULE_create_schema = 178
    RULE_create_schema_azure_sql_dw_and_pdw = 179
    RULE_alter_schema_azure_sql_dw_and_pdw = 180
    RULE_create_search_property_list = 181
    RULE_create_security_policy = 182
    RULE_alter_sequence = 183
    RULE_create_sequence = 184
    RULE_alter_server_audit = 185
    RULE_create_server_audit = 186
    RULE_alter_server_audit_specification = 187
    RULE_create_server_audit_specification = 188
    RULE_alter_server_configuration = 189
    RULE_alter_server_role = 190
    RULE_create_server_role = 191
    RULE_alter_server_role_pdw = 192
    RULE_alter_service = 193
    RULE_create_service = 194
    RULE_alter_service_master_key = 195
    RULE_alter_symmetric_key = 196
    RULE_create_symmetric_key = 197
    RULE_create_synonym = 198
    RULE_alter_user = 199
    RULE_create_user = 200
    RULE_create_user_azure_sql_dw = 201
    RULE_alter_user_azure_sql = 202
    RULE_alter_workload_group = 203
    RULE_create_workload_group = 204
    RULE_create_xml_schema_collection = 205
    RULE_create_queue = 206
    RULE_queue_settings = 207
    RULE_alter_queue = 208
    RULE_queue_action = 209
    RULE_queue_rebuild_options = 210
    RULE_create_contract = 211
    RULE_conversation_statement = 212
    RULE_message_statement = 213
    RULE_merge_statement = 214
    RULE_merge_matched = 215
    RULE_merge_not_matched = 216
    RULE_delete_statement = 217
    RULE_delete_statement_from = 218
    RULE_insert_statement = 219
    RULE_insert_statement_value = 220
    RULE_receive_statement = 221
    RULE_select_statement = 222
    RULE_time = 223
    RULE_update_statement = 224
    RULE_output_clause = 225
    RULE_output_dml_list_elem = 226
    RULE_output_column_name = 227
    RULE_create_database = 228
    RULE_create_index = 229
    RULE_create_or_alter_procedure = 230
    RULE_create_or_alter_trigger = 231
    RULE_create_or_alter_dml_trigger = 232
    RULE_dml_trigger_option = 233
    RULE_dml_trigger_operation = 234
    RULE_create_or_alter_ddl_trigger = 235
    RULE_ddl_trigger_operation = 236
    RULE_create_or_alter_function = 237
    RULE_func_body_returns_select = 238
    RULE_func_body_returns_table = 239
    RULE_func_body_returns_scalar = 240
    RULE_procedure_param = 241
    RULE_procedure_option = 242
    RULE_function_option = 243
    RULE_create_statistics = 244
    RULE_update_statistics = 245
    RULE_create_table = 246
    RULE_table_options = 247
    RULE_create_view = 248
    RULE_view_attribute = 249
    RULE_alter_table = 250
    RULE_alter_database = 251
    RULE_database_optionspec = 252
    RULE_auto_option = 253
    RULE_change_tracking_option = 254
    RULE_change_tracking_option_list = 255
    RULE_containment_option = 256
    RULE_cursor_option = 257
    RULE_alter_endpoint = 258
    RULE_database_mirroring_option = 259
    RULE_mirroring_set_option = 260
    RULE_mirroring_partner = 261
    RULE_mirroring_witness = 262
    RULE_witness_partner_equal = 263
    RULE_partner_option = 264
    RULE_witness_option = 265
    RULE_witness_server = 266
    RULE_partner_server = 267
    RULE_mirroring_host_port_seperator = 268
    RULE_partner_server_tcp_prefix = 269
    RULE_port_number = 270
    RULE_host = 271
    RULE_date_correlation_optimization_option = 272
    RULE_db_encryption_option = 273
    RULE_db_state_option = 274
    RULE_db_update_option = 275
    RULE_db_user_access_option = 276
    RULE_delayed_durability_option = 277
    RULE_external_access_option = 278
    RULE_hadr_options = 279
    RULE_mixed_page_allocation_option = 280
    RULE_parameterization_option = 281
    RULE_recovery_option = 282
    RULE_service_broker_option = 283
    RULE_snapshot_option = 284
    RULE_sql_option = 285
    RULE_target_recovery_time_option = 286
    RULE_termination = 287
    RULE_drop_index = 288
    RULE_drop_relational_or_xml_or_spatial_index = 289
    RULE_drop_backward_compatible_index = 290
    RULE_drop_procedure = 291
    RULE_drop_trigger = 292
    RULE_drop_dml_trigger = 293
    RULE_drop_ddl_trigger = 294
    RULE_drop_function = 295
    RULE_drop_statistics = 296
    RULE_drop_table = 297
    RULE_drop_view = 298
    RULE_create_type = 299
    RULE_drop_type = 300
    RULE_rowset_function_limited = 301
    RULE_openquery = 302
    RULE_opendatasource = 303
    RULE_declare_statement = 304
    RULE_cursor_statement = 305
    RULE_backup_database = 306
    RULE_backup_log = 307
    RULE_backup_certificate = 308
    RULE_backup_master_key = 309
    RULE_backup_service_master_key = 310
    RULE_execute_statement = 311
    RULE_execute_body = 312
    RULE_execute_statement_arg = 313
    RULE_execute_var_string = 314
    RULE_security_statement = 315
    RULE_create_certificate = 316
    RULE_existing_keys = 317
    RULE_private_key_options = 318
    RULE_generate_new_keys = 319
    RULE_date_options = 320
    RULE_open_key = 321
    RULE_close_key = 322
    RULE_create_key = 323
    RULE_key_options = 324
    RULE_algorithm = 325
    RULE_encryption_mechanism = 326
    RULE_decryption_mechanism = 327
    RULE_grant_permission = 328
    RULE_set_statement = 329
    RULE_transaction_statement = 330
    RULE_go_statement = 331
    RULE_use_statement = 332
    RULE_setuser_statement = 333
    RULE_dbcc_clause = 334
    RULE_dbcc_options = 335
    RULE_execute_clause = 336
    RULE_declare_local = 337
    RULE_table_type_definition = 338
    RULE_xml_type_definition = 339
    RULE_xml_schema_collection = 340
    RULE_column_def_table_constraints = 341
    RULE_column_def_table_constraint = 342
    RULE_column_definition = 343
    RULE_materialized_column_definition = 344
    RULE_column_constraint = 345
    RULE_table_constraint = 346
    RULE_on_delete = 347
    RULE_on_update = 348
    RULE_index_options = 349
    RULE_index_option = 350
    RULE_declare_cursor = 351
    RULE_declare_set_cursor_common = 352
    RULE_declare_set_cursor_common_partial = 353
    RULE_fetch_cursor = 354
    RULE_set_special = 355
    RULE_constant_LOCAL_ID = 356
    RULE_expression = 357
    RULE_primitive_expression = 358
    RULE_case_expression = 359
    RULE_unary_operator_expression = 360
    RULE_bracket_expression = 361
    RULE_constant_expression = 362
    RULE_subquery = 363
    RULE_with_expression = 364
    RULE_common_table_expression = 365
    RULE_update_elem = 366
    RULE_search_condition_list = 367
    RULE_search_condition = 368
    RULE_search_condition_and = 369
    RULE_search_condition_not = 370
    RULE_predicate = 371
    RULE_query_expression = 372
    RULE_sql_union = 373
    RULE_query_specification = 374
    RULE_top_clause = 375
    RULE_top_percent = 376
    RULE_top_count = 377
    RULE_order_by_clause = 378
    RULE_for_clause = 379
    RULE_xml_common_directives = 380
    RULE_order_by_expression = 381
    RULE_group_by_item = 382
    RULE_option_clause = 383
    RULE_option = 384
    RULE_optimize_for_arg = 385
    RULE_select_list = 386
    RULE_udt_method_arguments = 387
    RULE_asterisk = 388
    RULE_column_elem = 389
    RULE_udt_elem = 390
    RULE_expression_elem = 391
    RULE_select_list_elem = 392
    RULE_table_sources = 393
    RULE_table_source = 394
    RULE_table_source_item_joined = 395
    RULE_table_source_item = 396
    RULE_open_xml = 397
    RULE_schema_declaration = 398
    RULE_column_declaration = 399
    RULE_change_table = 400
    RULE_join_part = 401
    RULE_pivot_clause = 402
    RULE_unpivot_clause = 403
    RULE_full_column_name_list = 404
    RULE_table_name_with_hint = 405
    RULE_rowset_function = 406
    RULE_bulk_option = 407
    RULE_derived_table = 408
    RULE_function_call = 409
    RULE_xml_data_type_methods = 410
    RULE_value_method = 411
    RULE_query_method = 412
    RULE_exist_method = 413
    RULE_modify_method = 414
    RULE_nodes_method = 415
    RULE_switch_section = 416
    RULE_switch_search_condition_section = 417
    RULE_as_column_alias = 418
    RULE_as_table_alias = 419
    RULE_table_alias = 420
    RULE_with_table_hints = 421
    RULE_insert_with_table_hints = 422
    RULE_table_hint = 423
    RULE_index_value = 424
    RULE_column_alias_list = 425
    RULE_column_alias = 426
    RULE_table_value_constructor = 427
    RULE_expression_list = 428
    RULE_ranking_windowed_function = 429
    RULE_aggregate_windowed_function = 430
    RULE_analytic_windowed_function = 431
    RULE_all_distinct_expression = 432
    RULE_over_clause = 433
    RULE_row_or_range_clause = 434
    RULE_window_frame_extent = 435
    RULE_window_frame_bound = 436
    RULE_window_frame_preceding = 437
    RULE_window_frame_following = 438
    RULE_create_database_option = 439
    RULE_database_filestream_option = 440
    RULE_database_file_spec = 441
    RULE_file_group = 442
    RULE_file_spec = 443
    RULE_entity_name = 444
    RULE_entity_name_for_azure_dw = 445
    RULE_entity_name_for_parallel_dw = 446
    RULE_full_table_name = 447
    RULE_table_name = 448
    RULE_simple_name = 449
    RULE_func_proc_name = 450
    RULE_ddl_object = 451
    RULE_full_column_name = 452
    RULE_column_name_list_with_order = 453
    RULE_column_name_list = 454
    RULE_cursor_name = 455
    RULE_on_off = 456
    RULE_clustered = 457
    RULE_null_notnull = 458
    RULE_null_or_default = 459
    RULE_scalar_function_name = 460
    RULE_begin_conversation_timer = 461
    RULE_begin_conversation_dialog = 462
    RULE_contract_name = 463
    RULE_service_name = 464
    RULE_end_conversation = 465
    RULE_waitfor_conversation = 466
    RULE_get_conversation = 467
    RULE_queue_id = 468
    RULE_send_conversation = 469
    RULE_data_type = 470
    RULE_default_value = 471
    RULE_constant = 472
    RULE_sign = 473
    RULE_id = 474
    RULE_simple_id = 475
    RULE_comparison_operator = 476
    RULE_assignment_operator = 477
    RULE_file_size = 478

    ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
                   "break_statement", "continue_statement", "goto_statement", 
                   "return_statement", "if_statement", "throw_statement", 
                   "throw_error_number", "throw_message", "throw_state", 
                   "try_catch_statement", "waitfor_statement", "while_statement", 
                   "print_statement", "raiseerror_statement", "empty_statement", 
                   "another_statement", "alter_application_role", "create_application_role", 
                   "drop_aggregate", "drop_application_role", "alter_assembly", 
                   "alter_assembly_start", "alter_assembly_clause", "alter_assembly_from_clause", 
                   "alter_assembly_from_clause_start", "alter_assembly_drop_clause", 
                   "alter_assembly_drop_multiple_files", "alter_assembly_drop", 
                   "alter_assembly_add_clause", "alter_asssembly_add_clause_start", 
                   "alter_assembly_client_file_clause", "alter_assembly_file_name", 
                   "alter_assembly_file_bits", "alter_assembly_as", "alter_assembly_with_clause", 
                   "alter_assembly_with", "client_assembly_specifier", "assembly_option", 
                   "network_file_share", "network_computer", "network_file_start", 
                   "file_path", "file_directory_path_separator", "local_file", 
                   "local_drive", "multiple_local_files", "multiple_local_file_start", 
                   "create_assembly", "drop_assembly", "alter_asymmetric_key", 
                   "alter_asymmetric_key_start", "asymmetric_key_option", 
                   "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
                   "create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
                   "authorization_grantee", "entity_to", "colon_colon", 
                   "alter_authorization_start", "alter_authorization_for_sql_database", 
                   "alter_authorization_for_azure_dw", "alter_authorization_for_parallel_dw", 
                   "class_type", "class_type_for_sql_database", "class_type_for_azure_dw", 
                   "class_type_for_parallel_dw", "drop_availability_group", 
                   "alter_availability_group", "alter_availability_group_start", 
                   "alter_availability_group_options", "create_or_alter_broker_priority", 
                   "drop_broker_priority", "alter_certificate", "alter_column_encryption_key", 
                   "create_column_encryption_key", "drop_certificate", "drop_column_encryption_key", 
                   "drop_column_master_key", "drop_contract", "drop_credential", 
                   "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
                   "drop_database_scoped_credential", "drop_default", "drop_endpoint", 
                   "drop_external_data_source", "drop_external_file_format", 
                   "drop_external_library", "drop_external_resource_pool", 
                   "drop_external_table", "drop_event_notifications", "drop_event_session", 
                   "drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
                   "drop_login", "drop_master_key", "drop_message_type", 
                   "drop_partition_function", "drop_partition_scheme", "drop_queue", 
                   "drop_remote_service_binding", "drop_resource_pool", 
                   "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
                   "drop_search_property_list", "drop_security_policy", 
                   "drop_sequence", "drop_server_audit", "drop_server_audit_specification", 
                   "drop_server_role", "drop_service", "drop_signature", 
                   "drop_statistics_name_azure_dw_and_pdw", "drop_symmetric_key", 
                   "drop_synonym", "drop_user", "drop_workload_group", "drop_xml_schema_collection", 
                   "disable_trigger", "enable_trigger", "lock_table", "truncate_table", 
                   "create_column_master_key", "alter_credential", "create_credential", 
                   "alter_cryptographic_provider", "create_cryptographic_provider", 
                   "create_event_notification", "create_or_alter_event_session", 
                   "event_session_predicate_expression", "event_session_predicate_factor", 
                   "event_session_predicate_leaf", "alter_external_data_source", 
                   "alter_external_library", "create_external_library", 
                   "alter_external_resource_pool", "create_external_resource_pool", 
                   "alter_fulltext_catalog", "create_fulltext_catalog", 
                   "alter_fulltext_stoplist", "create_fulltext_stoplist", 
                   "alter_login_sql_server", "create_login_sql_server", 
                   "alter_login_azure_sql", "create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw", 
                   "create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server", 
                   "alter_master_key_azure_sql", "create_master_key_azure_sql", 
                   "alter_message_type", "alter_partition_function", "alter_partition_scheme", 
                   "alter_remote_service_binding", "create_remote_service_binding", 
                   "create_resource_pool", "alter_resource_governor", "alter_db_role", 
                   "create_db_role", "create_route", "create_rule", "alter_schema_sql", 
                   "create_schema", "create_schema_azure_sql_dw_and_pdw", 
                   "alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", 
                   "create_security_policy", "alter_sequence", "create_sequence", 
                   "alter_server_audit", "create_server_audit", "alter_server_audit_specification", 
                   "create_server_audit_specification", "alter_server_configuration", 
                   "alter_server_role", "create_server_role", "alter_server_role_pdw", 
                   "alter_service", "create_service", "alter_service_master_key", 
                   "alter_symmetric_key", "create_symmetric_key", "create_synonym", 
                   "alter_user", "create_user", "create_user_azure_sql_dw", 
                   "alter_user_azure_sql", "alter_workload_group", "create_workload_group", 
                   "create_xml_schema_collection", "create_queue", "queue_settings", 
                   "alter_queue", "queue_action", "queue_rebuild_options", 
                   "create_contract", "conversation_statement", "message_statement", 
                   "merge_statement", "merge_matched", "merge_not_matched", 
                   "delete_statement", "delete_statement_from", "insert_statement", 
                   "insert_statement_value", "receive_statement", "select_statement", 
                   "time", "update_statement", "output_clause", "output_dml_list_elem", 
                   "output_column_name", "create_database", "create_index", 
                   "create_or_alter_procedure", "create_or_alter_trigger", 
                   "create_or_alter_dml_trigger", "dml_trigger_option", 
                   "dml_trigger_operation", "create_or_alter_ddl_trigger", 
                   "ddl_trigger_operation", "create_or_alter_function", 
                   "func_body_returns_select", "func_body_returns_table", 
                   "func_body_returns_scalar", "procedure_param", "procedure_option", 
                   "function_option", "create_statistics", "update_statistics", 
                   "create_table", "table_options", "create_view", "view_attribute", 
                   "alter_table", "alter_database", "database_optionspec", 
                   "auto_option", "change_tracking_option", "change_tracking_option_list", 
                   "containment_option", "cursor_option", "alter_endpoint", 
                   "database_mirroring_option", "mirroring_set_option", 
                   "mirroring_partner", "mirroring_witness", "witness_partner_equal", 
                   "partner_option", "witness_option", "witness_server", 
                   "partner_server", "mirroring_host_port_seperator", "partner_server_tcp_prefix", 
                   "port_number", "host", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "hadr_options", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
                   "drop_backward_compatible_index", "drop_procedure", "drop_trigger", 
                   "drop_dml_trigger", "drop_ddl_trigger", "drop_function", 
                   "drop_statistics", "drop_table", "drop_view", "create_type", 
                   "drop_type", "rowset_function_limited", "openquery", 
                   "opendatasource", "declare_statement", "cursor_statement", 
                   "backup_database", "backup_log", "backup_certificate", 
                   "backup_master_key", "backup_service_master_key", "execute_statement", 
                   "execute_body", "execute_statement_arg", "execute_var_string", 
                   "security_statement", "create_certificate", "existing_keys", 
                   "private_key_options", "generate_new_keys", "date_options", 
                   "open_key", "close_key", "create_key", "key_options", 
                   "algorithm", "encryption_mechanism", "decryption_mechanism", 
                   "grant_permission", "set_statement", "transaction_statement", 
                   "go_statement", "use_statement", "setuser_statement", 
                   "dbcc_clause", "dbcc_options", "execute_clause", "declare_local", 
                   "table_type_definition", "xml_type_definition", "xml_schema_collection", 
                   "column_def_table_constraints", "column_def_table_constraint", 
                   "column_definition", "materialized_column_definition", 
                   "column_constraint", "table_constraint", "on_delete", 
                   "on_update", "index_options", "index_option", "declare_cursor", 
                   "declare_set_cursor_common", "declare_set_cursor_common_partial", 
                   "fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", 
                   "primitive_expression", "case_expression", "unary_operator_expression", 
                   "bracket_expression", "constant_expression", "subquery", 
                   "with_expression", "common_table_expression", "update_elem", 
                   "search_condition_list", "search_condition", "search_condition_and", 
                   "search_condition_not", "predicate", "query_expression", 
                   "sql_union", "query_specification", "top_clause", "top_percent", 
                   "top_count", "order_by_clause", "for_clause", "xml_common_directives", 
                   "order_by_expression", "group_by_item", "option_clause", 
                   "option", "optimize_for_arg", "select_list", "udt_method_arguments", 
                   "asterisk", "column_elem", "udt_elem", "expression_elem", 
                   "select_list_elem", "table_sources", "table_source", 
                   "table_source_item_joined", "table_source_item", "open_xml", 
                   "schema_declaration", "column_declaration", "change_table", 
                   "join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
                   "table_name_with_hint", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "xml_data_type_methods", 
                   "value_method", "query_method", "exist_method", "modify_method", 
                   "nodes_method", "switch_section", "switch_search_condition_section", 
                   "as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
                   "insert_with_table_hints", "table_hint", "index_value", 
                   "column_alias_list", "column_alias", "table_value_constructor", 
                   "expression_list", "ranking_windowed_function", "aggregate_windowed_function", 
                   "analytic_windowed_function", "all_distinct_expression", 
                   "over_clause", "row_or_range_clause", "window_frame_extent", 
                   "window_frame_bound", "window_frame_preceding", "window_frame_following", 
                   "create_database_option", "database_filestream_option", 
                   "database_file_spec", "file_group", "file_spec", "entity_name", 
                   "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
                   "full_table_name", "table_name", "simple_name", "func_proc_name", 
                   "ddl_object", "full_column_name", "column_name_list_with_order", 
                   "column_name_list", "cursor_name", "on_off", "clustered", 
                   "null_notnull", "null_or_default", "scalar_function_name", 
                   "begin_conversation_timer", "begin_conversation_dialog", 
                   "contract_name", "service_name", "end_conversation", 
                   "waitfor_conversation", "get_conversation", "queue_id", 
                   "send_conversation", "data_type", "default_value", "constant", 
                   "sign", "id", "simple_id", "comparison_operator", "assignment_operator", 
                   "file_size" ]

    EOF = Token.EOF
    ABSENT=1
    ADD=2
    AES=3
    ALL=4
    ALLOW_CONNECTIONS=5
    ALLOW_MULTIPLE_EVENT_LOSS=6
    ALLOW_SINGLE_EVENT_LOSS=7
    ALTER=8
    AND=9
    ANONYMOUS=10
    ANY=11
    APPEND=12
    APPLICATION=13
    AS=14
    ASC=15
    ASYMMETRIC=16
    ASYNCHRONOUS_COMMIT=17
    AUTHORIZATION=18
    AUTHENTICATION=19
    AUTOMATED_BACKUP_PREFERENCE=20
    AUTOMATIC=21
    AVAILABILITY_MODE=22
    BACKSLASH=23
    BACKUP=24
    BEFORE=25
    BEGIN=26
    BETWEEN=27
    BLOCK=28
    BLOCKSIZE=29
    BLOCKING_HIERARCHY=30
    BREAK=31
    BROWSE=32
    BUFFER=33
    BUFFERCOUNT=34
    BULK=35
    BY=36
    CACHE=37
    CALLED=38
    CASCADE=39
    CASE=40
    CERTIFICATE=41
    CHANGETABLE=42
    CHANGES=43
    CHECK=44
    CHECKPOINT=45
    CHECK_POLICY=46
    CHECK_EXPIRATION=47
    CLASSIFIER_FUNCTION=48
    CLOSE=49
    CLUSTER=50
    CLUSTERED=51
    COALESCE=52
    COLLATE=53
    COLUMN=54
    COMPRESSION=55
    COMMIT=56
    COMPUTE=57
    CONFIGURATION=58
    CONSTRAINT=59
    CONTAINMENT=60
    CONTAINS=61
    CONTAINSTABLE=62
    CONTEXT=63
    CONTINUE=64
    CONTINUE_AFTER_ERROR=65
    CONTRACT=66
    CONTRACT_NAME=67
    CONVERSATION=68
    CONVERT=69
    COPY_ONLY=70
    CREATE=71
    CROSS=72
    CURRENT=73
    CURRENT_DATE=74
    CURRENT_TIME=75
    CURRENT_TIMESTAMP=76
    CURRENT_USER=77
    CURSOR=78
    CYCLE=79
    DATA=80
    DATA_COMPRESSION=81
    DATA_SOURCE=82
    DATABASE=83
    DATABASE_MIRRORING=84
    DBCC=85
    DEALLOCATE=86
    DECLARE=87
    DEFAULT=88
    DEFAULT_DATABASE=89
    DEFAULT_SCHEMA=90
    DELETE=91
    DENY=92
    DESC=93
    DIAGNOSTICS=94
    DIFFERENTIAL=95
    DISK=96
    DISTINCT=97
    DISTRIBUTED=98
    DOUBLE=99
    DOUBLE_BACK_SLASH=100
    DOUBLE_FORWARD_SLASH=101
    DROP=102
    DTC_SUPPORT=103
    DUMP=104
    ELSE=105
    ENABLED=106
    END=107
    ENDPOINT=108
    ERRLVL=109
    ESCAPE=110
    ERROR=111
    EVENT=112
    EVENTDATA=113
    EVENT_RETENTION_MODE=114
    EXCEPT=115
    EXECUTABLE_FILE=116
    EXECUTE=117
    EXISTS=118
    EXPIREDATE=119
    EXIT=120
    EXTENSION=121
    EXTERNAL=122
    EXTERNAL_ACCESS=123
    FAILOVER=124
    FAILURECONDITIONLEVEL=125
    FAN_IN=126
    FETCH=127
    FILE=128
    FILENAME=129
    FILLFACTOR=130
    FILE_SNAPSHOT=131
    FOR=132
    FORCESEEK=133
    FORCE_SERVICE_ALLOW_DATA_LOSS=134
    FOREIGN=135
    FREETEXT=136
    FREETEXTTABLE=137
    FROM=138
    FULL=139
    FUNCTION=140
    GET=141
    GOTO=142
    GOVERNOR=143
    GRANT=144
    GROUP=145
    HAVING=146
    HASHED=147
    HEALTHCHECKTIMEOUT=148
    IDENTITY=149
    IDENTITYCOL=150
    IDENTITY_INSERT=151
    IF=152
    IN=153
    INCLUDE=154
    INCREMENT=155
    INDEX=156
    INFINITE=157
    INIT=158
    INNER=159
    INSERT=160
    INSTEAD=161
    INTERSECT=162
    INTO=163
    IPV4_ADDR=164
    IPV6_ADDR=165
    IS=166
    ISNULL=167
    JOIN=168
    KERBEROS=169
    KEY=170
    KEY_PATH=171
    KEY_STORE_PROVIDER_NAME=172
    KILL=173
    LANGUAGE=174
    LEFT=175
    LIBRARY=176
    LIFETIME=177
    LIKE=178
    LINENO=179
    LINUX=180
    LISTENER_IP=181
    LISTENER_PORT=182
    LOAD=183
    LOCAL_SERVICE_NAME=184
    LOG=185
    MATCHED=186
    MASTER=187
    MAX_MEMORY=188
    MAXTRANSFER=189
    MAXVALUE=190
    MAX_DISPATCH_LATENCY=191
    MAX_EVENT_SIZE=192
    MAX_SIZE=193
    MAX_OUTSTANDING_IO_PER_VOLUME=194
    MEDIADESCRIPTION=195
    MEDIANAME=196
    MEMBER=197
    MEMORY_PARTITION_MODE=198
    MERGE=199
    MESSAGE_FORWARDING=200
    MESSAGE_FORWARD_SIZE=201
    MINVALUE=202
    MIRROR=203
    MUST_CHANGE=204
    NATIONAL=205
    NEGOTIATE=206
    NOCHECK=207
    NOFORMAT=208
    NOINIT=209
    NONCLUSTERED=210
    NONE=211
    NOREWIND=212
    NOSKIP=213
    NOUNLOAD=214
    NO_CHECKSUM=215
    NO_COMPRESSION=216
    NO_EVENT_LOSS=217
    NOT=218
    NOTIFICATION=219
    NTLM=220
    NULL=221
    NULLIF=222
    OF=223
    OFF=224
    OFFSETS=225
    OLD_PASSWORD=226
    ON=227
    ON_FAILURE=228
    OPEN=229
    OPENDATASOURCE=230
    OPENQUERY=231
    OPENROWSET=232
    OPENXML=233
    OPTION=234
    OR=235
    ORDER=236
    OUTER=237
    OVER=238
    PAGE=239
    PARAM_NODE=240
    PARTIAL=241
    PASSWORD=242
    PERCENT=243
    PERMISSION_SET=244
    PER_CPU=245
    PER_DB=246
    PER_NODE=247
    PIVOT=248
    PLAN=249
    PLATFORM=250
    POLICY=251
    PRECISION=252
    PREDICATE=253
    PRIMARY=254
    PRINT=255
    PROC=256
    PROCEDURE=257
    PROCESS=258
    PUBLIC=259
    PYTHON=260
    R=261
    RAISERROR=262
    RAW=263
    READ=264
    READTEXT=265
    READ_WRITE_FILEGROUPS=266
    RECONFIGURE=267
    REFERENCES=268
    REGENERATE=269
    RELATED_CONVERSATION=270
    RELATED_CONVERSATION_GROUP=271
    REPLICATION=272
    REQUIRED=273
    RESET=274
    RESTART=275
    RESTORE=276
    RESTRICT=277
    RESUME=278
    RETAINDAYS=279
    RETURN=280
    RETURNS=281
    REVERT=282
    REVOKE=283
    REWIND=284
    RIGHT=285
    ROLLBACK=286
    ROLE=287
    ROWCOUNT=288
    ROWGUIDCOL=289
    RSA_512=290
    RSA_1024=291
    RSA_2048=292
    RSA_3072=293
    RSA_4096=294
    SAFETY=295
    RULE=296
    SAFE=297
    SAVE=298
    SCHEDULER=299
    SCHEMA=300
    SCHEME=301
    SECURITY=302
    SECURITYAUDIT=303
    SELECT=304
    SEMANTICKEYPHRASETABLE=305
    SEMANTICSIMILARITYDETAILSTABLE=306
    SEMANTICSIMILARITYTABLE=307
    SEQUENCE=308
    SERVER=309
    SERVICE=310
    SERVICE_BROKER=311
    SERVICE_NAME=312
    SESSION=313
    SESSION_USER=314
    SET=315
    SETUSER=316
    SHUTDOWN=317
    SID=318
    SKIP_KEYWORD=319
    SOFTNUMA=320
    SOME=321
    SOURCE=322
    SPECIFICATION=323
    SPLIT=324
    SQLDUMPERFLAGS=325
    SQLDUMPERPATH=326
    SQLDUMPERTIMEOUT=327
    STATISTICS=328
    STATE=329
    STATS=330
    START=331
    STARTED=332
    STARTUP_STATE=333
    STOP=334
    STOPPED=335
    STOP_ON_ERROR=336
    SUPPORTED=337
    SYSTEM=338
    SYSTEM_USER=339
    TABLE=340
    TABLESAMPLE=341
    TAPE=342
    TARGET=343
    TCP=344
    TEXTSIZE=345
    THEN=346
    TO=347
    TOP=348
    TRACK_CAUSALITY=349
    TRAN=350
    TRANSACTION=351
    TRANSFER=352
    TRIGGER=353
    TRUNCATE=354
    TSEQUAL=355
    UNCHECKED=356
    UNION=357
    UNIQUE=358
    UNLOCK=359
    UNPIVOT=360
    UNSAFE=361
    UPDATE=362
    UPDATETEXT=363
    URL=364
    USE=365
    USED=366
    USER=367
    VALUES=368
    VARYING=369
    VERBOSELOGGING=370
    VIEW=371
    VISIBILITY=372
    WAITFOR=373
    WHEN=374
    WHERE=375
    WHILE=376
    WINDOWS=377
    WITH=378
    WITHIN=379
    WITHOUT=380
    WITNESS=381
    WRITETEXT=382
    ABSOLUTE=383
    ACCENT_SENSITIVITY=384
    ACTION=385
    ACTIVATION=386
    ACTIVE=387
    ADDRESS=388
    AES_128=389
    AES_192=390
    AES_256=391
    AFFINITY=392
    AFTER=393
    AGGREGATE=394
    ALGORITHM=395
    ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=396
    ALLOW_SNAPSHOT_ISOLATION=397
    ALLOWED=398
    ANSI_NULL_DEFAULT=399
    ANSI_NULLS=400
    ANSI_PADDING=401
    ANSI_WARNINGS=402
    APPLICATION_LOG=403
    APPLY=404
    ARITHABORT=405
    ASSEMBLY=406
    AUDIT=407
    AUDIT_GUID=408
    AUTO=409
    AUTO_CLEANUP=410
    AUTO_CLOSE=411
    AUTO_CREATE_STATISTICS=412
    AUTO_SHRINK=413
    AUTO_UPDATE_STATISTICS=414
    AUTO_UPDATE_STATISTICS_ASYNC=415
    AVAILABILITY=416
    AVG=417
    BACKUP_PRIORITY=418
    BEGIN_DIALOG=419
    BIGINT=420
    BINARY_BASE64=421
    BINARY_CHECKSUM=422
    BINDING=423
    BLOB_STORAGE=424
    BROKER=425
    BROKER_INSTANCE=426
    BULK_LOGGED=427
    CALLER=428
    CAP_CPU_PERCENT=429
    CAST=430
    CATALOG=431
    CATCH=432
    CHANGE_RETENTION=433
    CHANGE_TRACKING=434
    CHECKSUM=435
    CHECKSUM_AGG=436
    CLEANUP=437
    COLLECTION=438
    COLUMN_MASTER_KEY=439
    COMMITTED=440
    COMPATIBILITY_LEVEL=441
    CONCAT=442
    CONCAT_NULL_YIELDS_NULL=443
    CONTENT=444
    CONTROL=445
    COOKIE=446
    COUNT=447
    COUNT_BIG=448
    COUNTER=449
    CPU=450
    CREATE_NEW=451
    CREATION_DISPOSITION=452
    CREDENTIAL=453
    CRYPTOGRAPHIC=454
    CURSOR_CLOSE_ON_COMMIT=455
    CURSOR_DEFAULT=456
    DATE_CORRELATION_OPTIMIZATION=457
    DATEADD=458
    DATEDIFF=459
    DATENAME=460
    DATEPART=461
    DAYS=462
    DB_CHAINING=463
    DB_FAILOVER=464
    DECRYPTION=465
    DEFAULT_DOUBLE_QUOTE=466
    DEFAULT_FULLTEXT_LANGUAGE=467
    DEFAULT_LANGUAGE=468
    DELAY=469
    DELAYED_DURABILITY=470
    DELETED=471
    DENSE_RANK=472
    DEPENDENTS=473
    DES=474
    DESCRIPTION=475
    DESX=476
    DHCP=477
    DIALOG=478
    DIRECTORY_NAME=479
    DISABLE=480
    DISABLE_BROKER=481
    DISABLED=482
    DISK_DRIVE=483
    DOCUMENT=484
    DYNAMIC=485
    ELEMENTS=486
    EMERGENCY=487
    EMPTY=488
    ENABLE=489
    ENABLE_BROKER=490
    ENCRYPTED_VALUE=491
    ENCRYPTION=492
    ENDPOINT_URL=493
    ERROR_BROKER_CONVERSATIONS=494
    EXCLUSIVE=495
    EXECUTABLE=496
    EXIST=497
    EXPAND=498
    EXPIRY_DATE=499
    EXPLICIT=500
    FAIL_OPERATION=501
    FAILOVER_MODE=502
    FAILURE=503
    FAILURE_CONDITION_LEVEL=504
    FAST=505
    FAST_FORWARD=506
    FILEGROUP=507
    FILEGROWTH=508
    FILEPATH=509
    FILESTREAM=510
    FILTER=511
    FIRST=512
    FIRST_VALUE=513
    FOLLOWING=514
    FORCE=515
    FORCE_FAILOVER_ALLOW_DATA_LOSS=516
    FORCED=517
    FORMAT=518
    FORWARD_ONLY=519
    FULLSCAN=520
    FULLTEXT=521
    GB=522
    GETDATE=523
    GETUTCDATE=524
    GLOBAL=525
    GO=526
    GROUP_MAX_REQUESTS=527
    GROUPING=528
    GROUPING_ID=529
    HADR=530
    HASH=531
    HEALTH_CHECK_TIMEOUT=532
    HIGH=533
    HONOR_BROKER_PRIORITY=534
    HOURS=535
    IDENTITY_VALUE=536
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=537
    IMMEDIATE=538
    IMPERSONATE=539
    IMPORTANCE=540
    INCLUDE_NULL_VALUES=541
    INCREMENTAL=542
    INITIATOR=543
    INPUT=544
    INSENSITIVE=545
    INSERTED=546
    INT=547
    IP=548
    ISOLATION=549
    JSON=550
    KB=551
    KEEP=552
    KEEPFIXED=553
    KEY_SOURCE=554
    KEYS=555
    KEYSET=556
    LAG=557
    LAST=558
    LAST_VALUE=559
    LEAD=560
    LEVEL=561
    LIST=562
    LISTENER=563
    LISTENER_URL=564
    LOB_COMPACTION=565
    LOCAL=566
    LOCATION=567
    LOCK=568
    LOCK_ESCALATION=569
    LOGIN=570
    LOOP=571
    LOW=572
    MANUAL=573
    MARK=574
    MATERIALIZED=575
    MAX=576
    MAX_CPU_PERCENT=577
    MAX_DOP=578
    MAX_FILES=579
    MAX_IOPS_PER_VOLUME=580
    MAX_MEMORY_PERCENT=581
    MAX_PROCESSES=582
    MAX_QUEUE_READERS=583
    MAX_ROLLOVER_FILES=584
    MAXDOP=585
    MAXRECURSION=586
    MAXSIZE=587
    MB=588
    MEDIUM=589
    MEMORY_OPTIMIZED_DATA=590
    MESSAGE=591
    MIN=592
    MIN_ACTIVE_ROWVERSION=593
    MIN_CPU_PERCENT=594
    MIN_IOPS_PER_VOLUME=595
    MIN_MEMORY_PERCENT=596
    MINUTES=597
    MIRROR_ADDRESS=598
    MIXED_PAGE_ALLOCATION=599
    MODE=600
    MODIFY=601
    MOVE=602
    MULTI_USER=603
    NAME=604
    NESTED_TRIGGERS=605
    NEW_ACCOUNT=606
    NEW_BROKER=607
    NEW_PASSWORD=608
    NEXT=609
    NO=610
    NO_TRUNCATE=611
    NO_WAIT=612
    NOCOUNT=613
    NODES=614
    NOEXPAND=615
    NON_TRANSACTED_ACCESS=616
    NORECOMPUTE=617
    NORECOVERY=618
    NOWAIT=619
    NTILE=620
    NUMANODE=621
    NUMBER=622
    NUMERIC_ROUNDABORT=623
    OBJECT=624
    OFFLINE=625
    OFFSET=626
    OLD_ACCOUNT=627
    ONLINE=628
    ONLY=629
    OPEN_EXISTING=630
    OPTIMISTIC=631
    OPTIMIZE=632
    OUT=633
    OUTPUT=634
    OWNER=635
    PAGE_VERIFY=636
    PARAMETERIZATION=637
    PARTITION=638
    PARTITIONS=639
    PARTNER=640
    PATH=641
    POISON_MESSAGE_HANDLING=642
    POOL=643
    PORT=644
    PRECEDING=645
    PRIMARY_ROLE=646
    PRIOR=647
    PRIORITY=648
    PRIORITY_LEVEL=649
    PRIVATE=650
    PRIVATE_KEY=651
    PRIVILEGES=652
    PROCEDURE_NAME=653
    PROPERTY=654
    PROVIDER=655
    PROVIDER_KEY_NAME=656
    QUERY=657
    QUEUE=658
    QUEUE_DELAY=659
    QUOTED_IDENTIFIER=660
    RANGE=661
    RANK=662
    RC2=663
    RC4=664
    RC4_128=665
    READ_COMMITTED_SNAPSHOT=666
    READ_ONLY=667
    READ_ONLY_ROUTING_LIST=668
    READ_WRITE=669
    READONLY=670
    REBUILD=671
    RECEIVE=672
    RECOMPILE=673
    RECOVERY=674
    RECURSIVE_TRIGGERS=675
    RELATIVE=676
    REMOTE=677
    REMOTE_SERVICE_NAME=678
    REMOVE=679
    REORGANIZE=680
    REPEATABLE=681
    REPLICA=682
    REQUEST_MAX_CPU_TIME_SEC=683
    REQUEST_MAX_MEMORY_GRANT_PERCENT=684
    REQUEST_MEMORY_GRANT_TIMEOUT_SEC=685
    REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=686
    RESERVE_DISK_SPACE=687
    RESOURCE=688
    RESOURCE_MANAGER_LOCATION=689
    RESTRICTED_USER=690
    RETENTION=691
    ROBUST=692
    ROOT=693
    ROUTE=694
    ROW=695
    ROW_NUMBER=696
    ROWGUID=697
    ROWS=698
    SAMPLE=699
    SCHEMABINDING=700
    SCOPED=701
    SCROLL=702
    SCROLL_LOCKS=703
    SEARCH=704
    SECONDARY=705
    SECONDARY_ONLY=706
    SECONDARY_ROLE=707
    SECONDS=708
    SECRET=709
    SECURITY_LOG=710
    SEEDING_MODE=711
    SELF=712
    SEMI_SENSITIVE=713
    SEND=714
    SENT=715
    SERIALIZABLE=716
    SESSION_TIMEOUT=717
    SETERROR=718
    SHARE=719
    SHOWPLAN=720
    SIGNATURE=721
    SIMPLE=722
    SINGLE_USER=723
    SIZE=724
    SMALLINT=725
    SNAPSHOT=726
    SPATIAL_WINDOW_MAX_CELLS=727
    STANDBY=728
    START_DATE=729
    STATIC=730
    STATS_STREAM=731
    STATUS=732
    STDEV=733
    STDEVP=734
    STOPLIST=735
    STUFF=736
    SUBJECT=737
    SUM=738
    SUSPEND=739
    SYMMETRIC=740
    SYNCHRONOUS_COMMIT=741
    SYNONYM=742
    TAKE=743
    TARGET_RECOVERY_TIME=744
    TB=745
    TEXTIMAGE_ON=746
    THROW=747
    TIES=748
    TIME=749
    TIMEOUT=750
    TIMER=751
    TINYINT=752
    TORN_PAGE_DETECTION=753
    TRANSFORM_NOISE_WORDS=754
    TRIPLE_DES=755
    TRIPLE_DES_3KEY=756
    TRUSTWORTHY=757
    TRY=758
    TSQL=759
    TWO_DIGIT_YEAR_CUTOFF=760
    TYPE=761
    TYPE_WARNING=762
    UNBOUNDED=763
    UNCOMMITTED=764
    UNKNOWN=765
    UNLIMITED=766
    USING=767
    VALID_XML=768
    VALIDATION=769
    VALUE=770
    VAR=771
    VARP=772
    VIEW_METADATA=773
    VIEWS=774
    WAIT=775
    WELL_FORMED_XML=776
    WITHOUT_ARRAY_WRAPPER=777
    WORK=778
    WORKLOAD=779
    XML=780
    XMLDATA=781
    XMLNAMESPACES=782
    XMLSCHEMA=783
    XSINIL=784
    DOLLAR_ACTION=785
    SPACE=786
    COMMENT=787
    LINE_COMMENT=788
    DOUBLE_QUOTE_ID=789
    SINGLE_QUOTE=790
    SQUARE_BRACKET_ID=791
    LOCAL_ID=792
    DECIMAL=793
    ID=794
    QUOTED_URL=795
    QUOTED_HOST_AND_PORT=796
    STRING=797
    BINARY=798
    FLOAT=799
    REAL=800
    EQUAL=801
    GREATER=802
    LESS=803
    EXCLAMATION=804
    PLUS_ASSIGN=805
    MINUS_ASSIGN=806
    MULT_ASSIGN=807
    DIV_ASSIGN=808
    MOD_ASSIGN=809
    AND_ASSIGN=810
    XOR_ASSIGN=811
    OR_ASSIGN=812
    DOUBLE_BAR=813
    DOT=814
    UNDERLINE=815
    AT=816
    SHARP=817
    DOLLAR=818
    LR_BRACKET=819
    RR_BRACKET=820
    COMMA=821
    SEMI=822
    COLON=823
    STAR=824
    DIVIDE=825
    MODULE=826
    PLUS=827
    MINUS=828
    BIT_NOT=829
    BIT_OR=830
    BIT_AND=831
    BIT_XOR=832
    IPV4_OCTECT=833

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Tsql_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(TSqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(TSqlParser.BatchContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_tsql_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsql_file" ):
                listener.enterTsql_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsql_file" ):
                listener.exitTsql_file(self)




    def tsql_file(self):

        localctx = TSqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TSqlParser.ALTER) | (1 << TSqlParser.BACKUP) | (1 << TSqlParser.BEGIN) | (1 << TSqlParser.BLOCKING_HIERARCHY) | (1 << TSqlParser.BREAK) | (1 << TSqlParser.CALLED) | (1 << TSqlParser.CASE) | (1 << TSqlParser.CLOSE) | (1 << TSqlParser.COALESCE) | (1 << TSqlParser.COMMIT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (TSqlParser.CONTINUE - 64)) | (1 << (TSqlParser.CONVERT - 64)) | (1 << (TSqlParser.CREATE - 64)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (TSqlParser.CURRENT_USER - 64)) | (1 << (TSqlParser.DATA_COMPRESSION - 64)) | (1 << (TSqlParser.DBCC - 64)) | (1 << (TSqlParser.DEALLOCATE - 64)) | (1 << (TSqlParser.DECLARE - 64)) | (1 << (TSqlParser.DEFAULT - 64)) | (1 << (TSqlParser.DELETE - 64)) | (1 << (TSqlParser.DROP - 64)) | (1 << (TSqlParser.END - 64)) | (1 << (TSqlParser.EVENTDATA - 64)) | (1 << (TSqlParser.EXECUTE - 64)) | (1 << (TSqlParser.FETCH - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (TSqlParser.FILENAME - 129)) | (1 << (TSqlParser.FILLFACTOR - 129)) | (1 << (TSqlParser.FORCESEEK - 129)) | (1 << (TSqlParser.GET - 129)) | (1 << (TSqlParser.GOTO - 129)) | (1 << (TSqlParser.GRANT - 129)) | (1 << (TSqlParser.IDENTITY - 129)) | (1 << (TSqlParser.IF - 129)) | (1 << (TSqlParser.INIT - 129)) | (1 << (TSqlParser.INSERT - 129)) | (1 << (TSqlParser.ISNULL - 129)) | (1 << (TSqlParser.KEY - 129)) | (1 << (TSqlParser.LEFT - 129)) | (1 << (TSqlParser.MASTER - 129)) | (1 << (TSqlParser.MAX_MEMORY - 129)))) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & ((1 << (TSqlParser.MERGE - 199)) | (1 << (TSqlParser.NULL - 199)) | (1 << (TSqlParser.NULLIF - 199)) | (1 << (TSqlParser.OFFSETS - 199)) | (1 << (TSqlParser.OPEN - 199)) | (1 << (TSqlParser.OVER - 199)) | (1 << (TSqlParser.PAGE - 199)) | (1 << (TSqlParser.PRINT - 199)) | (1 << (TSqlParser.PUBLIC - 199)) | (1 << (TSqlParser.R - 199)) | (1 << (TSqlParser.RAISERROR - 199)))) != 0) or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (TSqlParser.RAW - 263)) | (1 << (TSqlParser.RETURN - 263)) | (1 << (TSqlParser.RETURNS - 263)) | (1 << (TSqlParser.REVERT - 263)) | (1 << (TSqlParser.RIGHT - 263)) | (1 << (TSqlParser.ROLLBACK - 263)) | (1 << (TSqlParser.ROWCOUNT - 263)) | (1 << (TSqlParser.SAFETY - 263)) | (1 << (TSqlParser.SAVE - 263)) | (1 << (TSqlParser.SELECT - 263)) | (1 << (TSqlParser.SERVER - 263)) | (1 << (TSqlParser.SESSION_USER - 263)) | (1 << (TSqlParser.SET - 263)) | (1 << (TSqlParser.SETUSER - 263)) | (1 << (TSqlParser.SID - 263)) | (1 << (TSqlParser.SOURCE - 263)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (TSqlParser.STATE - 329)) | (1 << (TSqlParser.START - 329)) | (1 << (TSqlParser.SYSTEM_USER - 329)) | (1 << (TSqlParser.TARGET - 329)) | (1 << (TSqlParser.TRUNCATE - 329)) | (1 << (TSqlParser.UPDATE - 329)) | (1 << (TSqlParser.USE - 329)) | (1 << (TSqlParser.WAITFOR - 329)) | (1 << (TSqlParser.WHILE - 329)) | (1 << (TSqlParser.WITH - 329)) | (1 << (TSqlParser.ABSOLUTE - 329)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 329)) | (1 << (TSqlParser.ACTION - 329)) | (1 << (TSqlParser.ACTIVATION - 329)) | (1 << (TSqlParser.ACTIVE - 329)) | (1 << (TSqlParser.ADDRESS - 329)) | (1 << (TSqlParser.AES_128 - 329)) | (1 << (TSqlParser.AES_192 - 329)) | (1 << (TSqlParser.AES_256 - 329)) | (1 << (TSqlParser.AFFINITY - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (TSqlParser.AFTER - 393)) | (1 << (TSqlParser.AGGREGATE - 393)) | (1 << (TSqlParser.ALGORITHM - 393)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 393)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 393)) | (1 << (TSqlParser.ALLOWED - 393)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 393)) | (1 << (TSqlParser.ANSI_NULLS - 393)) | (1 << (TSqlParser.ANSI_PADDING - 393)) | (1 << (TSqlParser.ANSI_WARNINGS - 393)) | (1 << (TSqlParser.APPLICATION_LOG - 393)) | (1 << (TSqlParser.APPLY - 393)) | (1 << (TSqlParser.ARITHABORT - 393)) | (1 << (TSqlParser.ASSEMBLY - 393)) | (1 << (TSqlParser.AUDIT - 393)) | (1 << (TSqlParser.AUDIT_GUID - 393)) | (1 << (TSqlParser.AUTO - 393)) | (1 << (TSqlParser.AUTO_CLEANUP - 393)) | (1 << (TSqlParser.AUTO_CLOSE - 393)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 393)) | (1 << (TSqlParser.AUTO_SHRINK - 393)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 393)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 393)) | (1 << (TSqlParser.AVAILABILITY - 393)) | (1 << (TSqlParser.AVG - 393)) | (1 << (TSqlParser.BACKUP_PRIORITY - 393)) | (1 << (TSqlParser.BEGIN_DIALOG - 393)) | (1 << (TSqlParser.BIGINT - 393)) | (1 << (TSqlParser.BINARY_BASE64 - 393)) | (1 << (TSqlParser.BINARY_CHECKSUM - 393)) | (1 << (TSqlParser.BINDING - 393)) | (1 << (TSqlParser.BLOB_STORAGE - 393)) | (1 << (TSqlParser.BROKER - 393)) | (1 << (TSqlParser.BROKER_INSTANCE - 393)) | (1 << (TSqlParser.BULK_LOGGED - 393)) | (1 << (TSqlParser.CALLER - 393)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 393)) | (1 << (TSqlParser.CAST - 393)) | (1 << (TSqlParser.CATALOG - 393)) | (1 << (TSqlParser.CATCH - 393)) | (1 << (TSqlParser.CHANGE_RETENTION - 393)) | (1 << (TSqlParser.CHANGE_TRACKING - 393)) | (1 << (TSqlParser.CHECKSUM - 393)) | (1 << (TSqlParser.CHECKSUM_AGG - 393)) | (1 << (TSqlParser.CLEANUP - 393)) | (1 << (TSqlParser.COLLECTION - 393)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 393)) | (1 << (TSqlParser.COMMITTED - 393)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 393)) | (1 << (TSqlParser.CONCAT - 393)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 393)) | (1 << (TSqlParser.CONTENT - 393)) | (1 << (TSqlParser.CONTROL - 393)) | (1 << (TSqlParser.COOKIE - 393)) | (1 << (TSqlParser.COUNT - 393)) | (1 << (TSqlParser.COUNT_BIG - 393)) | (1 << (TSqlParser.COUNTER - 393)) | (1 << (TSqlParser.CPU - 393)) | (1 << (TSqlParser.CREATE_NEW - 393)) | (1 << (TSqlParser.CREATION_DISPOSITION - 393)) | (1 << (TSqlParser.CREDENTIAL - 393)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 393)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 393)) | (1 << (TSqlParser.CURSOR_DEFAULT - 393)))) != 0) or ((((_la - 457)) & ~0x3f) == 0 and ((1 << (_la - 457)) & ((1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 457)) | (1 << (TSqlParser.DATEADD - 457)) | (1 << (TSqlParser.DATEDIFF - 457)) | (1 << (TSqlParser.DATENAME - 457)) | (1 << (TSqlParser.DATEPART - 457)) | (1 << (TSqlParser.DAYS - 457)) | (1 << (TSqlParser.DB_CHAINING - 457)) | (1 << (TSqlParser.DB_FAILOVER - 457)) | (1 << (TSqlParser.DECRYPTION - 457)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 457)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 457)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 457)) | (1 << (TSqlParser.DELAY - 457)) | (1 << (TSqlParser.DELAYED_DURABILITY - 457)) | (1 << (TSqlParser.DELETED - 457)) | (1 << (TSqlParser.DENSE_RANK - 457)) | (1 << (TSqlParser.DEPENDENTS - 457)) | (1 << (TSqlParser.DES - 457)) | (1 << (TSqlParser.DESCRIPTION - 457)) | (1 << (TSqlParser.DESX - 457)) | (1 << (TSqlParser.DHCP - 457)) | (1 << (TSqlParser.DIALOG - 457)) | (1 << (TSqlParser.DIRECTORY_NAME - 457)) | (1 << (TSqlParser.DISABLE - 457)) | (1 << (TSqlParser.DISABLE_BROKER - 457)) | (1 << (TSqlParser.DISABLED - 457)) | (1 << (TSqlParser.DISK_DRIVE - 457)) | (1 << (TSqlParser.DOCUMENT - 457)) | (1 << (TSqlParser.DYNAMIC - 457)) | (1 << (TSqlParser.EMERGENCY - 457)) | (1 << (TSqlParser.EMPTY - 457)) | (1 << (TSqlParser.ENABLE - 457)) | (1 << (TSqlParser.ENABLE_BROKER - 457)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 457)) | (1 << (TSqlParser.ENCRYPTION - 457)) | (1 << (TSqlParser.ENDPOINT_URL - 457)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 457)) | (1 << (TSqlParser.EXCLUSIVE - 457)) | (1 << (TSqlParser.EXECUTABLE - 457)) | (1 << (TSqlParser.EXIST - 457)) | (1 << (TSqlParser.EXPAND - 457)) | (1 << (TSqlParser.EXPIRY_DATE - 457)) | (1 << (TSqlParser.EXPLICIT - 457)) | (1 << (TSqlParser.FAIL_OPERATION - 457)) | (1 << (TSqlParser.FAILOVER_MODE - 457)) | (1 << (TSqlParser.FAILURE - 457)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 457)) | (1 << (TSqlParser.FAST - 457)) | (1 << (TSqlParser.FAST_FORWARD - 457)) | (1 << (TSqlParser.FILEGROUP - 457)) | (1 << (TSqlParser.FILEGROWTH - 457)) | (1 << (TSqlParser.FILEPATH - 457)) | (1 << (TSqlParser.FILESTREAM - 457)) | (1 << (TSqlParser.FILTER - 457)) | (1 << (TSqlParser.FIRST - 457)) | (1 << (TSqlParser.FIRST_VALUE - 457)) | (1 << (TSqlParser.FOLLOWING - 457)) | (1 << (TSqlParser.FORCE - 457)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 457)) | (1 << (TSqlParser.FORCED - 457)) | (1 << (TSqlParser.FORMAT - 457)) | (1 << (TSqlParser.FORWARD_ONLY - 457)) | (1 << (TSqlParser.FULLSCAN - 457)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (TSqlParser.FULLTEXT - 521)) | (1 << (TSqlParser.GB - 521)) | (1 << (TSqlParser.GETDATE - 521)) | (1 << (TSqlParser.GETUTCDATE - 521)) | (1 << (TSqlParser.GLOBAL - 521)) | (1 << (TSqlParser.GO - 521)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 521)) | (1 << (TSqlParser.GROUPING - 521)) | (1 << (TSqlParser.GROUPING_ID - 521)) | (1 << (TSqlParser.HADR - 521)) | (1 << (TSqlParser.HASH - 521)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 521)) | (1 << (TSqlParser.HIGH - 521)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 521)) | (1 << (TSqlParser.HOURS - 521)) | (1 << (TSqlParser.IDENTITY_VALUE - 521)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 521)) | (1 << (TSqlParser.IMMEDIATE - 521)) | (1 << (TSqlParser.IMPERSONATE - 521)) | (1 << (TSqlParser.IMPORTANCE - 521)) | (1 << (TSqlParser.INCREMENTAL - 521)) | (1 << (TSqlParser.INITIATOR - 521)) | (1 << (TSqlParser.INPUT - 521)) | (1 << (TSqlParser.INSENSITIVE - 521)) | (1 << (TSqlParser.INSERTED - 521)) | (1 << (TSqlParser.INT - 521)) | (1 << (TSqlParser.IP - 521)) | (1 << (TSqlParser.ISOLATION - 521)) | (1 << (TSqlParser.KB - 521)) | (1 << (TSqlParser.KEEP - 521)) | (1 << (TSqlParser.KEEPFIXED - 521)) | (1 << (TSqlParser.KEY_SOURCE - 521)) | (1 << (TSqlParser.KEYS - 521)) | (1 << (TSqlParser.KEYSET - 521)) | (1 << (TSqlParser.LAG - 521)) | (1 << (TSqlParser.LAST - 521)) | (1 << (TSqlParser.LAST_VALUE - 521)) | (1 << (TSqlParser.LEAD - 521)) | (1 << (TSqlParser.LEVEL - 521)) | (1 << (TSqlParser.LIST - 521)) | (1 << (TSqlParser.LISTENER - 521)) | (1 << (TSqlParser.LISTENER_URL - 521)) | (1 << (TSqlParser.LOB_COMPACTION - 521)) | (1 << (TSqlParser.LOCAL - 521)) | (1 << (TSqlParser.LOCATION - 521)) | (1 << (TSqlParser.LOCK - 521)) | (1 << (TSqlParser.LOCK_ESCALATION - 521)) | (1 << (TSqlParser.LOGIN - 521)) | (1 << (TSqlParser.LOOP - 521)) | (1 << (TSqlParser.LOW - 521)) | (1 << (TSqlParser.MANUAL - 521)) | (1 << (TSqlParser.MARK - 521)) | (1 << (TSqlParser.MATERIALIZED - 521)) | (1 << (TSqlParser.MAX - 521)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 521)) | (1 << (TSqlParser.MAX_DOP - 521)) | (1 << (TSqlParser.MAX_FILES - 521)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 521)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 521)) | (1 << (TSqlParser.MAX_PROCESSES - 521)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 521)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 521)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (TSqlParser.MAXDOP - 585)) | (1 << (TSqlParser.MAXRECURSION - 585)) | (1 << (TSqlParser.MAXSIZE - 585)) | (1 << (TSqlParser.MB - 585)) | (1 << (TSqlParser.MEDIUM - 585)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 585)) | (1 << (TSqlParser.MESSAGE - 585)) | (1 << (TSqlParser.MIN - 585)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 585)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 585)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 585)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 585)) | (1 << (TSqlParser.MINUTES - 585)) | (1 << (TSqlParser.MIRROR_ADDRESS - 585)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 585)) | (1 << (TSqlParser.MODE - 585)) | (1 << (TSqlParser.MODIFY - 585)) | (1 << (TSqlParser.MOVE - 585)) | (1 << (TSqlParser.MULTI_USER - 585)) | (1 << (TSqlParser.NAME - 585)) | (1 << (TSqlParser.NESTED_TRIGGERS - 585)) | (1 << (TSqlParser.NEW_ACCOUNT - 585)) | (1 << (TSqlParser.NEW_BROKER - 585)) | (1 << (TSqlParser.NEW_PASSWORD - 585)) | (1 << (TSqlParser.NEXT - 585)) | (1 << (TSqlParser.NO - 585)) | (1 << (TSqlParser.NO_TRUNCATE - 585)) | (1 << (TSqlParser.NO_WAIT - 585)) | (1 << (TSqlParser.NOCOUNT - 585)) | (1 << (TSqlParser.NODES - 585)) | (1 << (TSqlParser.NOEXPAND - 585)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 585)) | (1 << (TSqlParser.NORECOMPUTE - 585)) | (1 << (TSqlParser.NORECOVERY - 585)) | (1 << (TSqlParser.NOWAIT - 585)) | (1 << (TSqlParser.NTILE - 585)) | (1 << (TSqlParser.NUMANODE - 585)) | (1 << (TSqlParser.NUMBER - 585)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 585)) | (1 << (TSqlParser.OBJECT - 585)) | (1 << (TSqlParser.OFFLINE - 585)) | (1 << (TSqlParser.OFFSET - 585)) | (1 << (TSqlParser.OLD_ACCOUNT - 585)) | (1 << (TSqlParser.ONLINE - 585)) | (1 << (TSqlParser.ONLY - 585)) | (1 << (TSqlParser.OPEN_EXISTING - 585)) | (1 << (TSqlParser.OPTIMISTIC - 585)) | (1 << (TSqlParser.OPTIMIZE - 585)) | (1 << (TSqlParser.OUT - 585)) | (1 << (TSqlParser.OUTPUT - 585)) | (1 << (TSqlParser.OWNER - 585)) | (1 << (TSqlParser.PAGE_VERIFY - 585)) | (1 << (TSqlParser.PARAMETERIZATION - 585)) | (1 << (TSqlParser.PARTITION - 585)) | (1 << (TSqlParser.PARTITIONS - 585)) | (1 << (TSqlParser.PARTNER - 585)) | (1 << (TSqlParser.PATH - 585)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 585)) | (1 << (TSqlParser.POOL - 585)) | (1 << (TSqlParser.PORT - 585)) | (1 << (TSqlParser.PRECEDING - 585)) | (1 << (TSqlParser.PRIMARY_ROLE - 585)) | (1 << (TSqlParser.PRIOR - 585)) | (1 << (TSqlParser.PRIORITY - 585)))) != 0) or ((((_la - 649)) & ~0x3f) == 0 and ((1 << (_la - 649)) & ((1 << (TSqlParser.PRIORITY_LEVEL - 649)) | (1 << (TSqlParser.PRIVATE - 649)) | (1 << (TSqlParser.PRIVATE_KEY - 649)) | (1 << (TSqlParser.PRIVILEGES - 649)) | (1 << (TSqlParser.PROCEDURE_NAME - 649)) | (1 << (TSqlParser.PROPERTY - 649)) | (1 << (TSqlParser.PROVIDER - 649)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 649)) | (1 << (TSqlParser.QUERY - 649)) | (1 << (TSqlParser.QUEUE - 649)) | (1 << (TSqlParser.QUEUE_DELAY - 649)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 649)) | (1 << (TSqlParser.RANGE - 649)) | (1 << (TSqlParser.RANK - 649)) | (1 << (TSqlParser.RC2 - 649)) | (1 << (TSqlParser.RC4 - 649)) | (1 << (TSqlParser.RC4_128 - 649)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 649)) | (1 << (TSqlParser.READ_ONLY - 649)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 649)) | (1 << (TSqlParser.READ_WRITE - 649)) | (1 << (TSqlParser.READONLY - 649)) | (1 << (TSqlParser.REBUILD - 649)) | (1 << (TSqlParser.RECEIVE - 649)) | (1 << (TSqlParser.RECOMPILE - 649)) | (1 << (TSqlParser.RECOVERY - 649)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 649)) | (1 << (TSqlParser.RELATIVE - 649)) | (1 << (TSqlParser.REMOTE - 649)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 649)) | (1 << (TSqlParser.REMOVE - 649)) | (1 << (TSqlParser.REORGANIZE - 649)) | (1 << (TSqlParser.REPEATABLE - 649)) | (1 << (TSqlParser.REPLICA - 649)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 649)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 649)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 649)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 649)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 649)) | (1 << (TSqlParser.RESOURCE - 649)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 649)) | (1 << (TSqlParser.RESTRICTED_USER - 649)) | (1 << (TSqlParser.RETENTION - 649)) | (1 << (TSqlParser.ROBUST - 649)) | (1 << (TSqlParser.ROOT - 649)) | (1 << (TSqlParser.ROUTE - 649)) | (1 << (TSqlParser.ROW - 649)) | (1 << (TSqlParser.ROW_NUMBER - 649)) | (1 << (TSqlParser.ROWGUID - 649)) | (1 << (TSqlParser.ROWS - 649)) | (1 << (TSqlParser.SAMPLE - 649)) | (1 << (TSqlParser.SCHEMABINDING - 649)) | (1 << (TSqlParser.SCOPED - 649)) | (1 << (TSqlParser.SCROLL - 649)) | (1 << (TSqlParser.SCROLL_LOCKS - 649)) | (1 << (TSqlParser.SEARCH - 649)) | (1 << (TSqlParser.SECONDARY - 649)) | (1 << (TSqlParser.SECONDARY_ONLY - 649)) | (1 << (TSqlParser.SECONDARY_ROLE - 649)) | (1 << (TSqlParser.SECONDS - 649)) | (1 << (TSqlParser.SECRET - 649)) | (1 << (TSqlParser.SECURITY_LOG - 649)) | (1 << (TSqlParser.SEEDING_MODE - 649)) | (1 << (TSqlParser.SELF - 649)))) != 0) or ((((_la - 713)) & ~0x3f) == 0 and ((1 << (_la - 713)) & ((1 << (TSqlParser.SEMI_SENSITIVE - 713)) | (1 << (TSqlParser.SEND - 713)) | (1 << (TSqlParser.SENT - 713)) | (1 << (TSqlParser.SERIALIZABLE - 713)) | (1 << (TSqlParser.SESSION_TIMEOUT - 713)) | (1 << (TSqlParser.SETERROR - 713)) | (1 << (TSqlParser.SHARE - 713)) | (1 << (TSqlParser.SHOWPLAN - 713)) | (1 << (TSqlParser.SIGNATURE - 713)) | (1 << (TSqlParser.SIMPLE - 713)) | (1 << (TSqlParser.SINGLE_USER - 713)) | (1 << (TSqlParser.SIZE - 713)) | (1 << (TSqlParser.SMALLINT - 713)) | (1 << (TSqlParser.SNAPSHOT - 713)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 713)) | (1 << (TSqlParser.STANDBY - 713)) | (1 << (TSqlParser.START_DATE - 713)) | (1 << (TSqlParser.STATIC - 713)) | (1 << (TSqlParser.STATS_STREAM - 713)) | (1 << (TSqlParser.STATUS - 713)) | (1 << (TSqlParser.STDEV - 713)) | (1 << (TSqlParser.STDEVP - 713)) | (1 << (TSqlParser.STOPLIST - 713)) | (1 << (TSqlParser.STUFF - 713)) | (1 << (TSqlParser.SUBJECT - 713)) | (1 << (TSqlParser.SUM - 713)) | (1 << (TSqlParser.SUSPEND - 713)) | (1 << (TSqlParser.SYMMETRIC - 713)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 713)) | (1 << (TSqlParser.SYNONYM - 713)) | (1 << (TSqlParser.TAKE - 713)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 713)) | (1 << (TSqlParser.TB - 713)) | (1 << (TSqlParser.TEXTIMAGE_ON - 713)) | (1 << (TSqlParser.THROW - 713)) | (1 << (TSqlParser.TIES - 713)) | (1 << (TSqlParser.TIME - 713)) | (1 << (TSqlParser.TIMEOUT - 713)) | (1 << (TSqlParser.TIMER - 713)) | (1 << (TSqlParser.TINYINT - 713)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 713)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 713)) | (1 << (TSqlParser.TRIPLE_DES - 713)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 713)) | (1 << (TSqlParser.TRUSTWORTHY - 713)) | (1 << (TSqlParser.TRY - 713)) | (1 << (TSqlParser.TSQL - 713)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 713)) | (1 << (TSqlParser.TYPE - 713)) | (1 << (TSqlParser.TYPE_WARNING - 713)) | (1 << (TSqlParser.UNBOUNDED - 713)) | (1 << (TSqlParser.UNCOMMITTED - 713)) | (1 << (TSqlParser.UNKNOWN - 713)) | (1 << (TSqlParser.UNLIMITED - 713)) | (1 << (TSqlParser.USING - 713)) | (1 << (TSqlParser.VALID_XML - 713)) | (1 << (TSqlParser.VALIDATION - 713)) | (1 << (TSqlParser.VALUE - 713)) | (1 << (TSqlParser.VAR - 713)) | (1 << (TSqlParser.VARP - 713)) | (1 << (TSqlParser.VIEW_METADATA - 713)) | (1 << (TSqlParser.VIEWS - 713)) | (1 << (TSqlParser.WAIT - 713)) | (1 << (TSqlParser.WELL_FORMED_XML - 713)))) != 0) or ((((_la - 778)) & ~0x3f) == 0 and ((1 << (_la - 778)) & ((1 << (TSqlParser.WORK - 778)) | (1 << (TSqlParser.WORKLOAD - 778)) | (1 << (TSqlParser.XML - 778)) | (1 << (TSqlParser.XMLNAMESPACES - 778)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 778)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 778)) | (1 << (TSqlParser.LOCAL_ID - 778)) | (1 << (TSqlParser.DECIMAL - 778)) | (1 << (TSqlParser.ID - 778)) | (1 << (TSqlParser.STRING - 778)) | (1 << (TSqlParser.BINARY - 778)) | (1 << (TSqlParser.FLOAT - 778)) | (1 << (TSqlParser.REAL - 778)) | (1 << (TSqlParser.DOLLAR - 778)) | (1 << (TSqlParser.LR_BRACKET - 778)) | (1 << (TSqlParser.SEMI - 778)) | (1 << (TSqlParser.PLUS - 778)) | (1 << (TSqlParser.MINUS - 778)) | (1 << (TSqlParser.BIT_NOT - 778)))) != 0):
                self.state = 958
                self.batch()
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 964
            self.match(TSqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_body(self):
            return self.getTypedRuleContext(TSqlParser.Execute_bodyContext,0)


        def go_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Go_statementContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Go_statementContext,i)


        def sql_clauses(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)




    def batch(self):

        localctx = TSqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        try:
            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self.execute_body()
                self.state = 970
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 967
                        self.go_statement() 
                    self.state = 972
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 973
                    self.execute_body()


                self.state = 976
                self.sql_clauses()
                self.state = 980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 977
                        self.go_statement() 
                    self.state = 982
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_sql_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clauses" ):
                listener.enterSql_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clauses" ):
                listener.exitSql_clauses(self)




    def sql_clauses(self):

        localctx = TSqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 985
                    self.sql_clause()
                    self.state = 987
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                    if la_ == 1:
                        self.state = 986
                        self.match(TSqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 991 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(TSqlParser.Dml_clauseContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(TSqlParser.Cfl_statementContext,0)


        def dbcc_clause(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_clauseContext,0)


        def empty_statement(self):
            return self.getTypedRuleContext(TSqlParser.Empty_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(TSqlParser.Another_statementContext,0)


        def backup_statement(self):
            return self.getTypedRuleContext(TSqlParser.Backup_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clause" ):
                listener.enterSql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clause" ):
                listener.exitSql_clause(self)




    def sql_clause(self):

        localctx = TSqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.ddl_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.cfl_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 996
                self.dbcc_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 997
                self.empty_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 998
                self.another_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 999
                self.backup_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(TSqlParser.Merge_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(TSqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(TSqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(TSqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_dml_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_clause" ):
                listener.enterDml_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_clause" ):
                listener.exitDml_clause(self)




    def dml_clause(self):

        localctx = TSqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.merge_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.delete_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1004
                self.insert_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1005
                self.select_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1006
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_application_role(self):
            return self.getTypedRuleContext(TSqlParser.Alter_application_roleContext,0)


        def alter_assembly(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assemblyContext,0)


        def alter_asymmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Alter_asymmetric_keyContext,0)


        def alter_authorization(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorizationContext,0)


        def alter_authorization_for_azure_dw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_for_azure_dwContext,0)


        def alter_authorization_for_parallel_dw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_for_parallel_dwContext,0)


        def alter_authorization_for_sql_database(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_for_sql_databaseContext,0)


        def alter_availability_group(self):
            return self.getTypedRuleContext(TSqlParser.Alter_availability_groupContext,0)


        def alter_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Alter_certificateContext,0)


        def alter_column_encryption_key(self):
            return self.getTypedRuleContext(TSqlParser.Alter_column_encryption_keyContext,0)


        def alter_credential(self):
            return self.getTypedRuleContext(TSqlParser.Alter_credentialContext,0)


        def alter_cryptographic_provider(self):
            return self.getTypedRuleContext(TSqlParser.Alter_cryptographic_providerContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(TSqlParser.Alter_databaseContext,0)


        def alter_db_role(self):
            return self.getTypedRuleContext(TSqlParser.Alter_db_roleContext,0)


        def alter_endpoint(self):
            return self.getTypedRuleContext(TSqlParser.Alter_endpointContext,0)


        def create_or_alter_event_session(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_event_sessionContext,0)


        def alter_external_data_source(self):
            return self.getTypedRuleContext(TSqlParser.Alter_external_data_sourceContext,0)


        def alter_external_library(self):
            return self.getTypedRuleContext(TSqlParser.Alter_external_libraryContext,0)


        def alter_external_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Alter_external_resource_poolContext,0)


        def alter_fulltext_catalog(self):
            return self.getTypedRuleContext(TSqlParser.Alter_fulltext_catalogContext,0)


        def alter_fulltext_stoplist(self):
            return self.getTypedRuleContext(TSqlParser.Alter_fulltext_stoplistContext,0)


        def alter_login_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Alter_login_azure_sqlContext,0)


        def alter_login_azure_sql_dw_and_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_login_azure_sql_dw_and_pdwContext,0)


        def alter_login_sql_server(self):
            return self.getTypedRuleContext(TSqlParser.Alter_login_sql_serverContext,0)


        def alter_master_key_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Alter_master_key_azure_sqlContext,0)


        def alter_master_key_sql_server(self):
            return self.getTypedRuleContext(TSqlParser.Alter_master_key_sql_serverContext,0)


        def alter_message_type(self):
            return self.getTypedRuleContext(TSqlParser.Alter_message_typeContext,0)


        def alter_partition_function(self):
            return self.getTypedRuleContext(TSqlParser.Alter_partition_functionContext,0)


        def alter_partition_scheme(self):
            return self.getTypedRuleContext(TSqlParser.Alter_partition_schemeContext,0)


        def alter_remote_service_binding(self):
            return self.getTypedRuleContext(TSqlParser.Alter_remote_service_bindingContext,0)


        def alter_resource_governor(self):
            return self.getTypedRuleContext(TSqlParser.Alter_resource_governorContext,0)


        def alter_schema_azure_sql_dw_and_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_schema_azure_sql_dw_and_pdwContext,0)


        def alter_schema_sql(self):
            return self.getTypedRuleContext(TSqlParser.Alter_schema_sqlContext,0)


        def alter_sequence(self):
            return self.getTypedRuleContext(TSqlParser.Alter_sequenceContext,0)


        def alter_server_audit(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_auditContext,0)


        def alter_server_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_audit_specificationContext,0)


        def alter_server_configuration(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_configurationContext,0)


        def alter_server_role(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_roleContext,0)


        def alter_server_role_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Alter_server_role_pdwContext,0)


        def alter_service(self):
            return self.getTypedRuleContext(TSqlParser.Alter_serviceContext,0)


        def alter_service_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Alter_service_master_keyContext,0)


        def alter_symmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Alter_symmetric_keyContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(TSqlParser.Alter_tableContext,0)


        def alter_user(self):
            return self.getTypedRuleContext(TSqlParser.Alter_userContext,0)


        def alter_user_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Alter_user_azure_sqlContext,0)


        def alter_workload_group(self):
            return self.getTypedRuleContext(TSqlParser.Alter_workload_groupContext,0)


        def create_application_role(self):
            return self.getTypedRuleContext(TSqlParser.Create_application_roleContext,0)


        def create_assembly(self):
            return self.getTypedRuleContext(TSqlParser.Create_assemblyContext,0)


        def create_asymmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_asymmetric_keyContext,0)


        def create_column_encryption_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_column_encryption_keyContext,0)


        def create_column_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_column_master_keyContext,0)


        def create_credential(self):
            return self.getTypedRuleContext(TSqlParser.Create_credentialContext,0)


        def create_cryptographic_provider(self):
            return self.getTypedRuleContext(TSqlParser.Create_cryptographic_providerContext,0)


        def create_database(self):
            return self.getTypedRuleContext(TSqlParser.Create_databaseContext,0)


        def create_db_role(self):
            return self.getTypedRuleContext(TSqlParser.Create_db_roleContext,0)


        def create_event_notification(self):
            return self.getTypedRuleContext(TSqlParser.Create_event_notificationContext,0)


        def create_external_library(self):
            return self.getTypedRuleContext(TSqlParser.Create_external_libraryContext,0)


        def create_external_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Create_external_resource_poolContext,0)


        def create_fulltext_catalog(self):
            return self.getTypedRuleContext(TSqlParser.Create_fulltext_catalogContext,0)


        def create_fulltext_stoplist(self):
            return self.getTypedRuleContext(TSqlParser.Create_fulltext_stoplistContext,0)


        def create_index(self):
            return self.getTypedRuleContext(TSqlParser.Create_indexContext,0)


        def create_login_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Create_login_azure_sqlContext,0)


        def create_login_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Create_login_pdwContext,0)


        def create_login_sql_server(self):
            return self.getTypedRuleContext(TSqlParser.Create_login_sql_serverContext,0)


        def create_master_key_azure_sql(self):
            return self.getTypedRuleContext(TSqlParser.Create_master_key_azure_sqlContext,0)


        def create_master_key_sql_server(self):
            return self.getTypedRuleContext(TSqlParser.Create_master_key_sql_serverContext,0)


        def create_or_alter_broker_priority(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_broker_priorityContext,0)


        def create_or_alter_function(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_functionContext,0)


        def create_or_alter_procedure(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_procedureContext,0)


        def create_or_alter_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_triggerContext,0)


        def create_remote_service_binding(self):
            return self.getTypedRuleContext(TSqlParser.Create_remote_service_bindingContext,0)


        def create_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Create_resource_poolContext,0)


        def create_route(self):
            return self.getTypedRuleContext(TSqlParser.Create_routeContext,0)


        def create_rule(self):
            return self.getTypedRuleContext(TSqlParser.Create_ruleContext,0)


        def create_schema(self):
            return self.getTypedRuleContext(TSqlParser.Create_schemaContext,0)


        def create_schema_azure_sql_dw_and_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Create_schema_azure_sql_dw_and_pdwContext,0)


        def create_search_property_list(self):
            return self.getTypedRuleContext(TSqlParser.Create_search_property_listContext,0)


        def create_security_policy(self):
            return self.getTypedRuleContext(TSqlParser.Create_security_policyContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(TSqlParser.Create_sequenceContext,0)


        def create_server_audit(self):
            return self.getTypedRuleContext(TSqlParser.Create_server_auditContext,0)


        def create_server_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Create_server_audit_specificationContext,0)


        def create_server_role(self):
            return self.getTypedRuleContext(TSqlParser.Create_server_roleContext,0)


        def create_service(self):
            return self.getTypedRuleContext(TSqlParser.Create_serviceContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(TSqlParser.Create_statisticsContext,0)


        def create_symmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_symmetric_keyContext,0)


        def create_synonym(self):
            return self.getTypedRuleContext(TSqlParser.Create_synonymContext,0)


        def create_table(self):
            return self.getTypedRuleContext(TSqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(TSqlParser.Create_typeContext,0)


        def create_user(self):
            return self.getTypedRuleContext(TSqlParser.Create_userContext,0)


        def create_user_azure_sql_dw(self):
            return self.getTypedRuleContext(TSqlParser.Create_user_azure_sql_dwContext,0)


        def create_view(self):
            return self.getTypedRuleContext(TSqlParser.Create_viewContext,0)


        def create_workload_group(self):
            return self.getTypedRuleContext(TSqlParser.Create_workload_groupContext,0)


        def create_xml_schema_collection(self):
            return self.getTypedRuleContext(TSqlParser.Create_xml_schema_collectionContext,0)


        def drop_aggregate(self):
            return self.getTypedRuleContext(TSqlParser.Drop_aggregateContext,0)


        def drop_application_role(self):
            return self.getTypedRuleContext(TSqlParser.Drop_application_roleContext,0)


        def drop_assembly(self):
            return self.getTypedRuleContext(TSqlParser.Drop_assemblyContext,0)


        def drop_asymmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_asymmetric_keyContext,0)


        def drop_availability_group(self):
            return self.getTypedRuleContext(TSqlParser.Drop_availability_groupContext,0)


        def drop_broker_priority(self):
            return self.getTypedRuleContext(TSqlParser.Drop_broker_priorityContext,0)


        def drop_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Drop_certificateContext,0)


        def drop_column_encryption_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_column_encryption_keyContext,0)


        def drop_column_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_column_master_keyContext,0)


        def drop_contract(self):
            return self.getTypedRuleContext(TSqlParser.Drop_contractContext,0)


        def drop_credential(self):
            return self.getTypedRuleContext(TSqlParser.Drop_credentialContext,0)


        def drop_cryptograhic_provider(self):
            return self.getTypedRuleContext(TSqlParser.Drop_cryptograhic_providerContext,0)


        def drop_database(self):
            return self.getTypedRuleContext(TSqlParser.Drop_databaseContext,0)


        def drop_database_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Drop_database_audit_specificationContext,0)


        def drop_database_scoped_credential(self):
            return self.getTypedRuleContext(TSqlParser.Drop_database_scoped_credentialContext,0)


        def drop_db_role(self):
            return self.getTypedRuleContext(TSqlParser.Drop_db_roleContext,0)


        def drop_default(self):
            return self.getTypedRuleContext(TSqlParser.Drop_defaultContext,0)


        def drop_endpoint(self):
            return self.getTypedRuleContext(TSqlParser.Drop_endpointContext,0)


        def drop_event_notifications(self):
            return self.getTypedRuleContext(TSqlParser.Drop_event_notificationsContext,0)


        def drop_event_session(self):
            return self.getTypedRuleContext(TSqlParser.Drop_event_sessionContext,0)


        def drop_external_data_source(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_data_sourceContext,0)


        def drop_external_file_format(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_file_formatContext,0)


        def drop_external_library(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_libraryContext,0)


        def drop_external_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_resource_poolContext,0)


        def drop_external_table(self):
            return self.getTypedRuleContext(TSqlParser.Drop_external_tableContext,0)


        def drop_fulltext_catalog(self):
            return self.getTypedRuleContext(TSqlParser.Drop_fulltext_catalogContext,0)


        def drop_fulltext_index(self):
            return self.getTypedRuleContext(TSqlParser.Drop_fulltext_indexContext,0)


        def drop_fulltext_stoplist(self):
            return self.getTypedRuleContext(TSqlParser.Drop_fulltext_stoplistContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(TSqlParser.Drop_functionContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(TSqlParser.Drop_indexContext,0)


        def drop_login(self):
            return self.getTypedRuleContext(TSqlParser.Drop_loginContext,0)


        def drop_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_master_keyContext,0)


        def drop_message_type(self):
            return self.getTypedRuleContext(TSqlParser.Drop_message_typeContext,0)


        def drop_partition_function(self):
            return self.getTypedRuleContext(TSqlParser.Drop_partition_functionContext,0)


        def drop_partition_scheme(self):
            return self.getTypedRuleContext(TSqlParser.Drop_partition_schemeContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(TSqlParser.Drop_procedureContext,0)


        def drop_queue(self):
            return self.getTypedRuleContext(TSqlParser.Drop_queueContext,0)


        def drop_remote_service_binding(self):
            return self.getTypedRuleContext(TSqlParser.Drop_remote_service_bindingContext,0)


        def drop_resource_pool(self):
            return self.getTypedRuleContext(TSqlParser.Drop_resource_poolContext,0)


        def drop_route(self):
            return self.getTypedRuleContext(TSqlParser.Drop_routeContext,0)


        def drop_rule(self):
            return self.getTypedRuleContext(TSqlParser.Drop_ruleContext,0)


        def drop_schema(self):
            return self.getTypedRuleContext(TSqlParser.Drop_schemaContext,0)


        def drop_search_property_list(self):
            return self.getTypedRuleContext(TSqlParser.Drop_search_property_listContext,0)


        def drop_security_policy(self):
            return self.getTypedRuleContext(TSqlParser.Drop_security_policyContext,0)


        def drop_sequence(self):
            return self.getTypedRuleContext(TSqlParser.Drop_sequenceContext,0)


        def drop_server_audit(self):
            return self.getTypedRuleContext(TSqlParser.Drop_server_auditContext,0)


        def drop_server_audit_specification(self):
            return self.getTypedRuleContext(TSqlParser.Drop_server_audit_specificationContext,0)


        def drop_server_role(self):
            return self.getTypedRuleContext(TSqlParser.Drop_server_roleContext,0)


        def drop_service(self):
            return self.getTypedRuleContext(TSqlParser.Drop_serviceContext,0)


        def drop_signature(self):
            return self.getTypedRuleContext(TSqlParser.Drop_signatureContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(TSqlParser.Drop_statisticsContext,0)


        def drop_statistics_name_azure_dw_and_pdw(self):
            return self.getTypedRuleContext(TSqlParser.Drop_statistics_name_azure_dw_and_pdwContext,0)


        def drop_symmetric_key(self):
            return self.getTypedRuleContext(TSqlParser.Drop_symmetric_keyContext,0)


        def drop_synonym(self):
            return self.getTypedRuleContext(TSqlParser.Drop_synonymContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(TSqlParser.Drop_tableContext,0)


        def drop_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Drop_triggerContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(TSqlParser.Drop_typeContext,0)


        def drop_user(self):
            return self.getTypedRuleContext(TSqlParser.Drop_userContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(TSqlParser.Drop_viewContext,0)


        def drop_workload_group(self):
            return self.getTypedRuleContext(TSqlParser.Drop_workload_groupContext,0)


        def drop_xml_schema_collection(self):
            return self.getTypedRuleContext(TSqlParser.Drop_xml_schema_collectionContext,0)


        def disable_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Disable_triggerContext,0)


        def enable_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Enable_triggerContext,0)


        def lock_table(self):
            return self.getTypedRuleContext(TSqlParser.Lock_tableContext,0)


        def truncate_table(self):
            return self.getTypedRuleContext(TSqlParser.Truncate_tableContext,0)


        def update_statistics(self):
            return self.getTypedRuleContext(TSqlParser.Update_statisticsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_ddl_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_clause" ):
                listener.enterDdl_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_clause" ):
                listener.exitDdl_clause(self)




    def ddl_clause(self):

        localctx = TSqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 1168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.alter_application_role()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.alter_assembly()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1011
                self.alter_asymmetric_key()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1012
                self.alter_authorization()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1013
                self.alter_authorization_for_azure_dw()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1014
                self.alter_authorization_for_parallel_dw()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1015
                self.alter_authorization_for_sql_database()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1016
                self.alter_availability_group()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1017
                self.alter_certificate()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1018
                self.alter_column_encryption_key()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1019
                self.alter_credential()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1020
                self.alter_cryptographic_provider()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1021
                self.alter_database()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1022
                self.alter_db_role()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1023
                self.alter_endpoint()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1024
                self.create_or_alter_event_session()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1025
                self.alter_external_data_source()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1026
                self.alter_external_library()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1027
                self.alter_external_resource_pool()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1028
                self.alter_fulltext_catalog()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1029
                self.alter_fulltext_stoplist()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1030
                self.alter_login_azure_sql()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1031
                self.alter_login_azure_sql_dw_and_pdw()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1032
                self.alter_login_sql_server()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1033
                self.alter_master_key_azure_sql()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1034
                self.alter_master_key_sql_server()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1035
                self.alter_message_type()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1036
                self.alter_partition_function()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1037
                self.alter_partition_scheme()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1038
                self.alter_remote_service_binding()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1039
                self.alter_resource_governor()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1040
                self.alter_schema_azure_sql_dw_and_pdw()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1041
                self.alter_schema_sql()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1042
                self.alter_sequence()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1043
                self.alter_server_audit()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1044
                self.alter_server_audit_specification()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1045
                self.alter_server_configuration()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1046
                self.alter_server_role()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1047
                self.alter_server_role_pdw()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1048
                self.alter_service()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1049
                self.alter_service_master_key()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1050
                self.alter_symmetric_key()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1051
                self.alter_table()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1052
                self.alter_user()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1053
                self.alter_user_azure_sql()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1054
                self.alter_workload_group()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1055
                self.create_application_role()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1056
                self.create_assembly()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1057
                self.create_asymmetric_key()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1058
                self.create_column_encryption_key()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1059
                self.create_column_master_key()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1060
                self.create_credential()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1061
                self.create_cryptographic_provider()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1062
                self.create_database()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1063
                self.create_db_role()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1064
                self.create_event_notification()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1065
                self.create_external_library()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1066
                self.create_external_resource_pool()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1067
                self.create_fulltext_catalog()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1068
                self.create_fulltext_stoplist()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1069
                self.create_index()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1070
                self.create_login_azure_sql()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1071
                self.create_login_pdw()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1072
                self.create_login_sql_server()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1073
                self.create_master_key_azure_sql()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1074
                self.create_master_key_sql_server()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1075
                self.create_or_alter_broker_priority()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1076
                self.create_or_alter_function()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1077
                self.create_or_alter_procedure()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1078
                self.create_or_alter_trigger()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1079
                self.create_remote_service_binding()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1080
                self.create_resource_pool()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1081
                self.create_route()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1082
                self.create_rule()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1083
                self.create_schema()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1084
                self.create_schema_azure_sql_dw_and_pdw()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1085
                self.create_search_property_list()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1086
                self.create_security_policy()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1087
                self.create_sequence()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1088
                self.create_server_audit()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1089
                self.create_server_audit_specification()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 1090
                self.create_server_role()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 1091
                self.create_service()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 1092
                self.create_statistics()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 1093
                self.create_symmetric_key()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 1094
                self.create_synonym()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 1095
                self.create_table()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 1096
                self.create_type()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 1097
                self.create_user()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 1098
                self.create_user_azure_sql_dw()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 1099
                self.create_view()
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 1100
                self.create_workload_group()
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 1101
                self.create_xml_schema_collection()
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 1102
                self.drop_aggregate()
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 1103
                self.drop_application_role()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 1104
                self.drop_assembly()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 1105
                self.drop_asymmetric_key()
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 1106
                self.drop_availability_group()
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 1107
                self.drop_broker_priority()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 1108
                self.drop_certificate()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 1109
                self.drop_column_encryption_key()
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 1110
                self.drop_column_master_key()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 1111
                self.drop_contract()
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 1112
                self.drop_credential()
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 1113
                self.drop_cryptograhic_provider()
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 1114
                self.drop_database()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 1115
                self.drop_database_audit_specification()
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 1116
                self.drop_database_scoped_credential()
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 1117
                self.drop_db_role()
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 1118
                self.drop_default()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)
                self.state = 1119
                self.drop_endpoint()
                pass

            elif la_ == 112:
                self.enterOuterAlt(localctx, 112)
                self.state = 1120
                self.drop_event_notifications()
                pass

            elif la_ == 113:
                self.enterOuterAlt(localctx, 113)
                self.state = 1121
                self.drop_event_session()
                pass

            elif la_ == 114:
                self.enterOuterAlt(localctx, 114)
                self.state = 1122
                self.drop_external_data_source()
                pass

            elif la_ == 115:
                self.enterOuterAlt(localctx, 115)
                self.state = 1123
                self.drop_external_file_format()
                pass

            elif la_ == 116:
                self.enterOuterAlt(localctx, 116)
                self.state = 1124
                self.drop_external_library()
                pass

            elif la_ == 117:
                self.enterOuterAlt(localctx, 117)
                self.state = 1125
                self.drop_external_resource_pool()
                pass

            elif la_ == 118:
                self.enterOuterAlt(localctx, 118)
                self.state = 1126
                self.drop_external_table()
                pass

            elif la_ == 119:
                self.enterOuterAlt(localctx, 119)
                self.state = 1127
                self.drop_fulltext_catalog()
                pass

            elif la_ == 120:
                self.enterOuterAlt(localctx, 120)
                self.state = 1128
                self.drop_fulltext_index()
                pass

            elif la_ == 121:
                self.enterOuterAlt(localctx, 121)
                self.state = 1129
                self.drop_fulltext_stoplist()
                pass

            elif la_ == 122:
                self.enterOuterAlt(localctx, 122)
                self.state = 1130
                self.drop_function()
                pass

            elif la_ == 123:
                self.enterOuterAlt(localctx, 123)
                self.state = 1131
                self.drop_index()
                pass

            elif la_ == 124:
                self.enterOuterAlt(localctx, 124)
                self.state = 1132
                self.drop_login()
                pass

            elif la_ == 125:
                self.enterOuterAlt(localctx, 125)
                self.state = 1133
                self.drop_master_key()
                pass

            elif la_ == 126:
                self.enterOuterAlt(localctx, 126)
                self.state = 1134
                self.drop_message_type()
                pass

            elif la_ == 127:
                self.enterOuterAlt(localctx, 127)
                self.state = 1135
                self.drop_partition_function()
                pass

            elif la_ == 128:
                self.enterOuterAlt(localctx, 128)
                self.state = 1136
                self.drop_partition_scheme()
                pass

            elif la_ == 129:
                self.enterOuterAlt(localctx, 129)
                self.state = 1137
                self.drop_procedure()
                pass

            elif la_ == 130:
                self.enterOuterAlt(localctx, 130)
                self.state = 1138
                self.drop_queue()
                pass

            elif la_ == 131:
                self.enterOuterAlt(localctx, 131)
                self.state = 1139
                self.drop_remote_service_binding()
                pass

            elif la_ == 132:
                self.enterOuterAlt(localctx, 132)
                self.state = 1140
                self.drop_resource_pool()
                pass

            elif la_ == 133:
                self.enterOuterAlt(localctx, 133)
                self.state = 1141
                self.drop_route()
                pass

            elif la_ == 134:
                self.enterOuterAlt(localctx, 134)
                self.state = 1142
                self.drop_rule()
                pass

            elif la_ == 135:
                self.enterOuterAlt(localctx, 135)
                self.state = 1143
                self.drop_schema()
                pass

            elif la_ == 136:
                self.enterOuterAlt(localctx, 136)
                self.state = 1144
                self.drop_search_property_list()
                pass

            elif la_ == 137:
                self.enterOuterAlt(localctx, 137)
                self.state = 1145
                self.drop_security_policy()
                pass

            elif la_ == 138:
                self.enterOuterAlt(localctx, 138)
                self.state = 1146
                self.drop_sequence()
                pass

            elif la_ == 139:
                self.enterOuterAlt(localctx, 139)
                self.state = 1147
                self.drop_server_audit()
                pass

            elif la_ == 140:
                self.enterOuterAlt(localctx, 140)
                self.state = 1148
                self.drop_server_audit_specification()
                pass

            elif la_ == 141:
                self.enterOuterAlt(localctx, 141)
                self.state = 1149
                self.drop_server_role()
                pass

            elif la_ == 142:
                self.enterOuterAlt(localctx, 142)
                self.state = 1150
                self.drop_service()
                pass

            elif la_ == 143:
                self.enterOuterAlt(localctx, 143)
                self.state = 1151
                self.drop_signature()
                pass

            elif la_ == 144:
                self.enterOuterAlt(localctx, 144)
                self.state = 1152
                self.drop_statistics()
                pass

            elif la_ == 145:
                self.enterOuterAlt(localctx, 145)
                self.state = 1153
                self.drop_statistics_name_azure_dw_and_pdw()
                pass

            elif la_ == 146:
                self.enterOuterAlt(localctx, 146)
                self.state = 1154
                self.drop_symmetric_key()
                pass

            elif la_ == 147:
                self.enterOuterAlt(localctx, 147)
                self.state = 1155
                self.drop_synonym()
                pass

            elif la_ == 148:
                self.enterOuterAlt(localctx, 148)
                self.state = 1156
                self.drop_table()
                pass

            elif la_ == 149:
                self.enterOuterAlt(localctx, 149)
                self.state = 1157
                self.drop_trigger()
                pass

            elif la_ == 150:
                self.enterOuterAlt(localctx, 150)
                self.state = 1158
                self.drop_type()
                pass

            elif la_ == 151:
                self.enterOuterAlt(localctx, 151)
                self.state = 1159
                self.drop_user()
                pass

            elif la_ == 152:
                self.enterOuterAlt(localctx, 152)
                self.state = 1160
                self.drop_view()
                pass

            elif la_ == 153:
                self.enterOuterAlt(localctx, 153)
                self.state = 1161
                self.drop_workload_group()
                pass

            elif la_ == 154:
                self.enterOuterAlt(localctx, 154)
                self.state = 1162
                self.drop_xml_schema_collection()
                pass

            elif la_ == 155:
                self.enterOuterAlt(localctx, 155)
                self.state = 1163
                self.disable_trigger()
                pass

            elif la_ == 156:
                self.enterOuterAlt(localctx, 156)
                self.state = 1164
                self.enable_trigger()
                pass

            elif la_ == 157:
                self.enterOuterAlt(localctx, 157)
                self.state = 1165
                self.lock_table()
                pass

            elif la_ == 158:
                self.enterOuterAlt(localctx, 158)
                self.state = 1166
                self.truncate_table()
                pass

            elif la_ == 159:
                self.enterOuterAlt(localctx, 159)
                self.state = 1167
                self.update_statistics()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def backup_database(self):
            return self.getTypedRuleContext(TSqlParser.Backup_databaseContext,0)


        def backup_log(self):
            return self.getTypedRuleContext(TSqlParser.Backup_logContext,0)


        def backup_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Backup_certificateContext,0)


        def backup_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Backup_master_keyContext,0)


        def backup_service_master_key(self):
            return self.getTypedRuleContext(TSqlParser.Backup_service_master_keyContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_backup_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_statement" ):
                listener.enterBackup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_statement" ):
                listener.exitBackup_statement(self)




    def backup_statement(self):

        localctx = TSqlParser.Backup_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_backup_statement)
        try:
            self.state = 1175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1170
                self.backup_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1171
                self.backup_log()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1172
                self.backup_certificate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1173
                self.backup_master_key()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1174
                self.backup_service_master_key()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cfl_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block_statement(self):
            return self.getTypedRuleContext(TSqlParser.Block_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(TSqlParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(TSqlParser.Continue_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(TSqlParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(TSqlParser.If_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(TSqlParser.Return_statementContext,0)


        def throw_statement(self):
            return self.getTypedRuleContext(TSqlParser.Throw_statementContext,0)


        def try_catch_statement(self):
            return self.getTypedRuleContext(TSqlParser.Try_catch_statementContext,0)


        def waitfor_statement(self):
            return self.getTypedRuleContext(TSqlParser.Waitfor_statementContext,0)


        def while_statement(self):
            return self.getTypedRuleContext(TSqlParser.While_statementContext,0)


        def print_statement(self):
            return self.getTypedRuleContext(TSqlParser.Print_statementContext,0)


        def raiseerror_statement(self):
            return self.getTypedRuleContext(TSqlParser.Raiseerror_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_cfl_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCfl_statement" ):
                listener.enterCfl_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCfl_statement" ):
                listener.exitCfl_statement(self)




    def cfl_statement(self):

        localctx = TSqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_cfl_statement)
        try:
            self.state = 1189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1177
                self.block_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1178
                self.break_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1179
                self.continue_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1180
                self.goto_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1181
                self.if_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1182
                self.return_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1183
                self.throw_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1184
                self.try_catch_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1185
                self.waitfor_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1186
                self.while_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1187
                self.print_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1188
                self.raiseerror_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def sql_clauses(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_block_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)




    def block_statement(self):

        localctx = TSqlParser.Block_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_block_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.match(TSqlParser.BEGIN)
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 1192
                self.match(TSqlParser.SEMI)


            self.state = 1196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 1195
                self.sql_clauses()


            self.state = 1198
            self.match(TSqlParser.END)
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 1199
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(TSqlParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_break_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)




    def break_statement(self):

        localctx = TSqlParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.match(TSqlParser.BREAK)
            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 1203
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(TSqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)




    def continue_statement(self):

        localctx = TSqlParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.match(TSqlParser.CONTINUE)
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 1207
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(TSqlParser.GOTO, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COLON(self):
            return self.getToken(TSqlParser.COLON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)




    def goto_statement(self):

        localctx = TSqlParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_goto_statement)
        try:
            self.state = 1220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.GOTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.match(TSqlParser.GOTO)
                self.state = 1211
                self.id()
                self.state = 1213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 1212
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.id()
                self.state = 1216
                self.match(TSqlParser.COLON)
                self.state = 1218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 1217
                    self.match(TSqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = TSqlParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_return_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(TSqlParser.RETURN)
            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 1223
                self.expression(0)


            self.state = 1227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 1226
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clauseContext,i)


        def ELSE(self):
            return self.getToken(TSqlParser.ELSE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = TSqlParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_if_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(TSqlParser.IF)
            self.state = 1230
            self.search_condition()
            self.state = 1231
            self.sql_clause()
            self.state = 1234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 1232
                self.match(TSqlParser.ELSE)
                self.state = 1233
                self.sql_clause()


            self.state = 1237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 1236
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(TSqlParser.THROW, 0)

        def throw_error_number(self):
            return self.getTypedRuleContext(TSqlParser.Throw_error_numberContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def throw_message(self):
            return self.getTypedRuleContext(TSqlParser.Throw_messageContext,0)


        def throw_state(self):
            return self.getTypedRuleContext(TSqlParser.Throw_stateContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)




    def throw_statement(self):

        localctx = TSqlParser.Throw_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_throw_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(TSqlParser.THROW)
            self.state = 1246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 1240
                self.throw_error_number()
                self.state = 1241
                self.match(TSqlParser.COMMA)
                self.state = 1242
                self.throw_message()
                self.state = 1243
                self.match(TSqlParser.COMMA)
                self.state = 1244
                self.throw_state()


            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 1248
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_error_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_error_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_error_number" ):
                listener.enterThrow_error_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_error_number" ):
                listener.exitThrow_error_number(self)




    def throw_error_number(self):

        localctx = TSqlParser.Throw_error_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_throw_error_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_messageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_message" ):
                listener.enterThrow_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_message" ):
                listener.exitThrow_message(self)




    def throw_message(self):

        localctx = TSqlParser.Throw_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_throw_message)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throw_stateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_throw_state

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_state" ):
                listener.enterThrow_state(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_state" ):
                listener.exitThrow_state(self)




    def throw_state(self):

        localctx = TSqlParser.Throw_stateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_throw_state)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_catch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BEGIN)
            else:
                return self.getToken(TSqlParser.BEGIN, i)

        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TRY)
            else:
                return self.getToken(TSqlParser.TRY, i)

        def END(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.END)
            else:
                return self.getToken(TSqlParser.END, i)

        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CATCH)
            else:
                return self.getToken(TSqlParser.CATCH, i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_try_catch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_catch_statement" ):
                listener.enterTry_catch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_catch_statement" ):
                listener.exitTry_catch_statement(self)




    def try_catch_statement(self):

        localctx = TSqlParser.Try_catch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_try_catch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.match(TSqlParser.BEGIN)
            self.state = 1258
            self.match(TSqlParser.TRY)
            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 1259
                self.match(TSqlParser.SEMI)


            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 1262
                localctx.try_clauses = self.sql_clauses()


            self.state = 1265
            self.match(TSqlParser.END)
            self.state = 1266
            self.match(TSqlParser.TRY)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.SEMI:
                self.state = 1267
                self.match(TSqlParser.SEMI)


            self.state = 1270
            self.match(TSqlParser.BEGIN)
            self.state = 1271
            self.match(TSqlParser.CATCH)
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 1272
                self.match(TSqlParser.SEMI)


            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 1275
                localctx.catch_clauses = self.sql_clauses()


            self.state = 1278
            self.match(TSqlParser.END)
            self.state = 1279
            self.match(TSqlParser.CATCH)
            self.state = 1281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 1280
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waitfor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAITFOR(self):
            return self.getToken(TSqlParser.WAITFOR, 0)

        def receive_statement(self):
            return self.getTypedRuleContext(TSqlParser.Receive_statementContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DELAY(self):
            return self.getToken(TSqlParser.DELAY, 0)

        def TIME(self):
            return self.getToken(TSqlParser.TIME, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_waitfor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_statement" ):
                listener.enterWaitfor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_statement" ):
                listener.exitWaitfor_statement(self)




    def waitfor_statement(self):

        localctx = TSqlParser.Waitfor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_waitfor_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(TSqlParser.WAITFOR)
            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 1284
                self.receive_statement()


            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 1287
                self.match(TSqlParser.COMMA)


            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 1290
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DELAY or _la==TSqlParser.TIME or _la==TSqlParser.TIMEOUT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1291
                self.time()


            self.state = 1295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 1294
                self.expression(0)


            self.state = 1298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 1297
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(TSqlParser.WHILE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def sql_clause(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clauseContext,0)


        def BREAK(self):
            return self.getToken(TSqlParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(TSqlParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_while_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)




    def while_statement(self):

        localctx = TSqlParser.While_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_while_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(TSqlParser.WHILE)
            self.state = 1301
            self.search_condition()
            self.state = 1311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 1302
                self.sql_clause()
                pass

            elif la_ == 2:
                self.state = 1303
                self.match(TSqlParser.BREAK)
                self.state = 1305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 1304
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.state = 1307
                self.match(TSqlParser.CONTINUE)
                self.state = 1309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 1308
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(TSqlParser.PRINT, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_print_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)




    def print_statement(self):

        localctx = TSqlParser.Print_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_print_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.match(TSqlParser.PRINT)
            self.state = 1316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 1314
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1315
                self.match(TSqlParser.DOUBLE_QUOTE_ID)
                pass


            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 1318
                self.match(TSqlParser.COMMA)
                self.state = 1319
                self.match(TSqlParser.LOCAL_ID)
                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 1325
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raiseerror_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext
            self.formatstring = None # Token
            self.argument = None # Token

        def RAISERROR(self):
            return self.getToken(TSqlParser.RAISERROR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Constant_LOCAL_IDContext,i)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def SETERROR(self):
            return self.getToken(TSqlParser.SETERROR, 0)

        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_raiseerror_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseerror_statement" ):
                listener.enterRaiseerror_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseerror_statement" ):
                listener.exitRaiseerror_statement(self)




    def raiseerror_statement(self):

        localctx = TSqlParser.Raiseerror_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_raiseerror_statement)
        self._la = 0 # Token type
        try:
            self.state = 1360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1328
                self.match(TSqlParser.RAISERROR)
                self.state = 1329
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1330
                localctx.msg = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 792)) & ~0x3f) == 0 and ((1 << (_la - 792)) & ((1 << (TSqlParser.LOCAL_ID - 792)) | (1 << (TSqlParser.DECIMAL - 792)) | (1 << (TSqlParser.STRING - 792)))) != 0)):
                    localctx.msg = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1331
                self.match(TSqlParser.COMMA)
                self.state = 1332
                localctx.severity = self.constant_LOCAL_ID()
                self.state = 1333
                self.match(TSqlParser.COMMA)
                self.state = 1334
                localctx.state = self.constant_LOCAL_ID()
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 1335
                    self.match(TSqlParser.COMMA)
                    self.state = 1336
                    self.constant_LOCAL_ID()
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1342
                self.match(TSqlParser.RR_BRACKET)
                self.state = 1345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 1343
                    self.match(TSqlParser.WITH)
                    self.state = 1344
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LOG or _la==TSqlParser.SETERROR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 1347
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1350
                self.match(TSqlParser.RAISERROR)
                self.state = 1351
                self.match(TSqlParser.DECIMAL)
                self.state = 1352
                localctx.formatstring = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 789)) & ~0x3f) == 0 and ((1 << (_la - 789)) & ((1 << (TSqlParser.DOUBLE_QUOTE_ID - 789)) | (1 << (TSqlParser.LOCAL_ID - 789)) | (1 << (TSqlParser.STRING - 789)))) != 0)):
                    localctx.formatstring = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 1353
                    self.match(TSqlParser.COMMA)
                    self.state = 1354
                    localctx.argument = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 792)) & ~0x3f) == 0 and ((1 << (_la - 792)) & ((1 << (TSqlParser.LOCAL_ID - 792)) | (1 << (TSqlParser.DECIMAL - 792)) | (1 << (TSqlParser.STRING - 792)))) != 0)):
                        localctx.argument = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)




    def empty_statement(self):

        localctx = TSqlParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.match(TSqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Another_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declare_statement(self):
            return self.getTypedRuleContext(TSqlParser.Declare_statementContext,0)


        def cursor_statement(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_statementContext,0)


        def conversation_statement(self):
            return self.getTypedRuleContext(TSqlParser.Conversation_statementContext,0)


        def create_contract(self):
            return self.getTypedRuleContext(TSqlParser.Create_contractContext,0)


        def create_queue(self):
            return self.getTypedRuleContext(TSqlParser.Create_queueContext,0)


        def alter_queue(self):
            return self.getTypedRuleContext(TSqlParser.Alter_queueContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(TSqlParser.Execute_statementContext,0)


        def message_statement(self):
            return self.getTypedRuleContext(TSqlParser.Message_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(TSqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(TSqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(TSqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(TSqlParser.Use_statementContext,0)


        def setuser_statement(self):
            return self.getTypedRuleContext(TSqlParser.Setuser_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_another_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnother_statement" ):
                listener.enterAnother_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnother_statement" ):
                listener.exitAnother_statement(self)




    def another_statement(self):

        localctx = TSqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_another_statement)
        try:
            self.state = 1377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.declare_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1365
                self.cursor_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1366
                self.conversation_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1367
                self.create_contract()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1368
                self.create_queue()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1369
                self.alter_queue()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1370
                self.execute_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1371
                self.message_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1372
                self.security_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1373
                self.set_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1374
                self.transaction_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1375
                self.use_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1376
                self.setuser_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_application_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.appliction_role = None # IdContext
            self.new_application_role_name = None # IdContext
            self.application_role_password = None # Token
            self.app_role_default_schema = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def DEFAULT_SCHEMA(self):
            return self.getToken(TSqlParser.DEFAULT_SCHEMA, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_application_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_application_role" ):
                listener.enterAlter_application_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_application_role" ):
                listener.exitAlter_application_role(self)




    def alter_application_role(self):

        localctx = TSqlParser.Alter_application_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_alter_application_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(TSqlParser.ALTER)
            self.state = 1380
            self.match(TSqlParser.APPLICATION)
            self.state = 1381
            self.match(TSqlParser.ROLE)
            self.state = 1382
            localctx.appliction_role = self.id()
            self.state = 1383
            self.match(TSqlParser.WITH)
            self.state = 1390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 1384
                    self.match(TSqlParser.COMMA)


                self.state = 1387
                self.match(TSqlParser.NAME)
                self.state = 1388
                self.match(TSqlParser.EQUAL)
                self.state = 1389
                localctx.new_application_role_name = self.id()


            self.state = 1398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 1392
                    self.match(TSqlParser.COMMA)


                self.state = 1395
                self.match(TSqlParser.PASSWORD)
                self.state = 1396
                self.match(TSqlParser.EQUAL)
                self.state = 1397
                localctx.application_role_password = self.match(TSqlParser.STRING)


            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.DEFAULT_SCHEMA or _la==TSqlParser.COMMA:
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 1400
                    self.match(TSqlParser.COMMA)


                self.state = 1403
                self.match(TSqlParser.DEFAULT_SCHEMA)
                self.state = 1404
                self.match(TSqlParser.EQUAL)
                self.state = 1405
                localctx.app_role_default_schema = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_application_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.appliction_role = None # IdContext
            self.application_role_password = None # Token
            self.app_role_default_schema = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_SCHEMA(self):
            return self.getToken(TSqlParser.DEFAULT_SCHEMA, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_application_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_application_role" ):
                listener.enterCreate_application_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_application_role" ):
                listener.exitCreate_application_role(self)




    def create_application_role(self):

        localctx = TSqlParser.Create_application_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_create_application_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(TSqlParser.CREATE)
            self.state = 1409
            self.match(TSqlParser.APPLICATION)
            self.state = 1410
            self.match(TSqlParser.ROLE)
            self.state = 1411
            localctx.appliction_role = self.id()
            self.state = 1412
            self.match(TSqlParser.WITH)
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 1413
                    self.match(TSqlParser.COMMA)


                self.state = 1416
                self.match(TSqlParser.PASSWORD)
                self.state = 1417
                self.match(TSqlParser.EQUAL)
                self.state = 1418
                localctx.application_role_password = self.match(TSqlParser.STRING)


            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.DEFAULT_SCHEMA or _la==TSqlParser.COMMA:
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 1421
                    self.match(TSqlParser.COMMA)


                self.state = 1424
                self.match(TSqlParser.DEFAULT_SCHEMA)
                self.state = 1425
                self.match(TSqlParser.EQUAL)
                self.state = 1426
                localctx.app_role_default_schema = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_aggregateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.aggregate_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def AGGREGATE(self):
            return self.getToken(TSqlParser.AGGREGATE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_aggregate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_aggregate" ):
                listener.enterDrop_aggregate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_aggregate" ):
                listener.exitDrop_aggregate(self)




    def drop_aggregate(self):

        localctx = TSqlParser.Drop_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_drop_aggregate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.match(TSqlParser.DROP)
            self.state = 1430
            self.match(TSqlParser.AGGREGATE)
            self.state = 1433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 1431
                self.match(TSqlParser.IF)
                self.state = 1432
                self.match(TSqlParser.EXISTS)


            self.state = 1438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 1435
                localctx.schema_name = self.id()
                self.state = 1436
                self.match(TSqlParser.DOT)


            self.state = 1440
            localctx.aggregate_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_application_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rolename = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def APPLICATION(self):
            return self.getToken(TSqlParser.APPLICATION, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_application_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_application_role" ):
                listener.enterDrop_application_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_application_role" ):
                listener.exitDrop_application_role(self)




    def drop_application_role(self):

        localctx = TSqlParser.Drop_application_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_drop_application_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self.match(TSqlParser.DROP)
            self.state = 1443
            self.match(TSqlParser.APPLICATION)
            self.state = 1444
            self.match(TSqlParser.ROLE)
            self.state = 1445
            localctx.rolename = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assemblyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # IdContext

        def alter_assembly_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_startContext,0)


        def alter_assembly_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_clauseContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly" ):
                listener.enterAlter_assembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly" ):
                listener.exitAlter_assembly(self)




    def alter_assembly(self):

        localctx = TSqlParser.Alter_assemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_alter_assembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.alter_assembly_start()
            self.state = 1448
            localctx.assembly_name = self.id()
            self.state = 1449
            self.alter_assembly_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_start" ):
                listener.enterAlter_assembly_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_start" ):
                listener.exitAlter_assembly_start(self)




    def alter_assembly_start(self):

        localctx = TSqlParser.Alter_assembly_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_alter_assembly_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(TSqlParser.ALTER)
            self.state = 1452
            self.match(TSqlParser.ASSEMBLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_from_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_from_clauseContext,0)


        def alter_assembly_with_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_with_clauseContext,0)


        def alter_assembly_drop_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_drop_clauseContext,0)


        def alter_assembly_add_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_add_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_clause" ):
                listener.enterAlter_assembly_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_clause" ):
                listener.exitAlter_assembly_clause(self)




    def alter_assembly_clause(self):

        localctx = TSqlParser.Alter_assembly_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_alter_assembly_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 1454
                self.alter_assembly_from_clause()


            self.state = 1458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 1457
                self.alter_assembly_with_clause()


            self.state = 1461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 1460
                self.alter_assembly_drop_clause()


            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ADD:
                self.state = 1463
                self.alter_assembly_add_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_from_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_from_clause_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_from_clause_startContext,0)


        def client_assembly_specifier(self):
            return self.getTypedRuleContext(TSqlParser.Client_assembly_specifierContext,0)


        def alter_assembly_file_bits(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_file_bitsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_from_clause" ):
                listener.enterAlter_assembly_from_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_from_clause" ):
                listener.exitAlter_assembly_from_clause(self)




    def alter_assembly_from_clause(self):

        localctx = TSqlParser.Alter_assembly_from_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alter_assembly_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.alter_assembly_from_clause_start()
            self.state = 1469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DOUBLE_BACK_SLASH, TSqlParser.DISK_DRIVE, TSqlParser.STRING]:
                self.state = 1467
                self.client_assembly_specifier()
                pass
            elif token in [TSqlParser.AS]:
                self.state = 1468
                self.alter_assembly_file_bits()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_from_clause_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_from_clause_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_from_clause_start" ):
                listener.enterAlter_assembly_from_clause_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_from_clause_start" ):
                listener.exitAlter_assembly_from_clause_start(self)




    def alter_assembly_from_clause_start(self):

        localctx = TSqlParser.Alter_assembly_from_clause_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_alter_assembly_from_clause_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.match(TSqlParser.FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_drop_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_drop(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_dropContext,0)


        def alter_assembly_drop_multiple_files(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_drop_multiple_filesContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_drop_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_drop_clause" ):
                listener.enterAlter_assembly_drop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_drop_clause" ):
                listener.exitAlter_assembly_drop_clause(self)




    def alter_assembly_drop_clause(self):

        localctx = TSqlParser.Alter_assembly_drop_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alter_assembly_drop_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self.alter_assembly_drop()
            self.state = 1474
            self.alter_assembly_drop_multiple_files()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_drop_multiple_filesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def multiple_local_files(self):
            return self.getTypedRuleContext(TSqlParser.Multiple_local_filesContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_drop_multiple_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_drop_multiple_files" ):
                listener.enterAlter_assembly_drop_multiple_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_drop_multiple_files" ):
                listener.exitAlter_assembly_drop_multiple_files(self)




    def alter_assembly_drop_multiple_files(self):

        localctx = TSqlParser.Alter_assembly_drop_multiple_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_alter_assembly_drop_multiple_files)
        try:
            self.state = 1478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.match(TSqlParser.ALL)
                pass
            elif token in [TSqlParser.DISK_DRIVE, TSqlParser.SINGLE_QUOTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.multiple_local_files()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_dropContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_drop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_drop" ):
                listener.enterAlter_assembly_drop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_drop" ):
                listener.exitAlter_assembly_drop(self)




    def alter_assembly_drop(self):

        localctx = TSqlParser.Alter_assembly_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_alter_assembly_drop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(TSqlParser.DROP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_add_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_asssembly_add_clause_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_asssembly_add_clause_startContext,0)


        def alter_assembly_client_file_clause(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_client_file_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_add_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_add_clause" ):
                listener.enterAlter_assembly_add_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_add_clause" ):
                listener.exitAlter_assembly_add_clause(self)




    def alter_assembly_add_clause(self):

        localctx = TSqlParser.Alter_assembly_add_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_alter_assembly_add_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.alter_asssembly_add_clause_start()
            self.state = 1483
            self.alter_assembly_client_file_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_asssembly_add_clause_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_asssembly_add_clause_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_asssembly_add_clause_start" ):
                listener.enterAlter_asssembly_add_clause_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_asssembly_add_clause_start" ):
                listener.exitAlter_asssembly_add_clause_start(self)




    def alter_asssembly_add_clause_start(self):

        localctx = TSqlParser.Alter_asssembly_add_clause_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_alter_asssembly_add_clause_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(TSqlParser.ADD)
            self.state = 1486
            self.match(TSqlParser.FILE)
            self.state = 1487
            self.match(TSqlParser.FROM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_client_file_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_file_name(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_file_nameContext,0)


        def alter_assembly_as(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_asContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_client_file_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_client_file_clause" ):
                listener.enterAlter_assembly_client_file_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_client_file_clause" ):
                listener.exitAlter_assembly_client_file_clause(self)




    def alter_assembly_client_file_clause(self):

        localctx = TSqlParser.Alter_assembly_client_file_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_alter_assembly_client_file_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            self.alter_assembly_file_name()
            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 1490
                self.alter_assembly_as()
                self.state = 1491
                self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_file_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_file_name" ):
                listener.enterAlter_assembly_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_file_name" ):
                listener.exitAlter_assembly_file_name(self)




    def alter_assembly_file_name(self):

        localctx = TSqlParser.Alter_assembly_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_alter_assembly_file_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_file_bitsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_as(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_asContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_file_bits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_file_bits" ):
                listener.enterAlter_assembly_file_bits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_file_bits" ):
                listener.exitAlter_assembly_file_bits(self)




    def alter_assembly_file_bits(self):

        localctx = TSqlParser.Alter_assembly_file_bitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_alter_assembly_file_bits)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.alter_assembly_as()
            self.state = 1498
            self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_asContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_as" ):
                listener.enterAlter_assembly_as(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_as" ):
                listener.exitAlter_assembly_as(self)




    def alter_assembly_as(self):

        localctx = TSqlParser.Alter_assembly_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_alter_assembly_as)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.match(TSqlParser.AS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_with_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_assembly_with(self):
            return self.getTypedRuleContext(TSqlParser.Alter_assembly_withContext,0)


        def assembly_option(self):
            return self.getTypedRuleContext(TSqlParser.Assembly_optionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_with_clause" ):
                listener.enterAlter_assembly_with_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_with_clause" ):
                listener.exitAlter_assembly_with_clause(self)




    def alter_assembly_with_clause(self):

        localctx = TSqlParser.Alter_assembly_with_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alter_assembly_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.alter_assembly_with()
            self.state = 1503
            self.assembly_option(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_assembly_withContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_assembly_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_assembly_with" ):
                listener.enterAlter_assembly_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_assembly_with" ):
                listener.exitAlter_assembly_with(self)




    def alter_assembly_with(self):

        localctx = TSqlParser.Alter_assembly_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alter_assembly_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self.match(TSqlParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Client_assembly_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def network_file_share(self):
            return self.getTypedRuleContext(TSqlParser.Network_file_shareContext,0)


        def local_file(self):
            return self.getTypedRuleContext(TSqlParser.Local_fileContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_client_assembly_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClient_assembly_specifier" ):
                listener.enterClient_assembly_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClient_assembly_specifier" ):
                listener.exitClient_assembly_specifier(self)




    def client_assembly_specifier(self):

        localctx = TSqlParser.Client_assembly_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_client_assembly_specifier)
        try:
            self.state = 1510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DOUBLE_BACK_SLASH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1507
                self.network_file_share()
                pass
            elif token in [TSqlParser.DISK_DRIVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.local_file()
                pass
            elif token in [TSqlParser.STRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1509
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assembly_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERMISSION_SET(self):
            return self.getToken(TSqlParser.PERMISSION_SET, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def SAFE(self):
            return self.getToken(TSqlParser.SAFE, 0)

        def EXTERNAL_ACCESS(self):
            return self.getToken(TSqlParser.EXTERNAL_ACCESS, 0)

        def UNSAFE(self):
            return self.getToken(TSqlParser.UNSAFE, 0)

        def VISIBILITY(self):
            return self.getToken(TSqlParser.VISIBILITY, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def UNCHECKED(self):
            return self.getToken(TSqlParser.UNCHECKED, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def assembly_option(self):
            return self.getTypedRuleContext(TSqlParser.Assembly_optionContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_assembly_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssembly_option" ):
                listener.enterAssembly_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssembly_option" ):
                listener.exitAssembly_option(self)



    def assembly_option(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TSqlParser.Assembly_optionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_assembly_option, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.PERMISSION_SET]:
                self.state = 1513
                self.match(TSqlParser.PERMISSION_SET)
                self.state = 1514
                self.match(TSqlParser.EQUAL)
                self.state = 1515
                _la = self._input.LA(1)
                if not(_la==TSqlParser.EXTERNAL_ACCESS or _la==TSqlParser.SAFE or _la==TSqlParser.UNSAFE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.VISIBILITY]:
                self.state = 1516
                self.match(TSqlParser.VISIBILITY)
                self.state = 1517
                self.match(TSqlParser.EQUAL)
                self.state = 1518
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.UNCHECKED]:
                self.state = 1519
                self.match(TSqlParser.UNCHECKED)
                self.state = 1520
                self.match(TSqlParser.DATA)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TSqlParser.Assembly_optionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_assembly_option)
                    self.state = 1523
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1524
                    self.match(TSqlParser.COMMA) 
                self.state = 1529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Network_file_shareContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def network_file_start(self):
            return self.getTypedRuleContext(TSqlParser.Network_file_startContext,0)


        def network_computer(self):
            return self.getTypedRuleContext(TSqlParser.Network_computerContext,0)


        def file_path(self):
            return self.getTypedRuleContext(TSqlParser.File_pathContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_network_file_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNetwork_file_share" ):
                listener.enterNetwork_file_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNetwork_file_share" ):
                listener.exitNetwork_file_share(self)




    def network_file_share(self):

        localctx = TSqlParser.Network_file_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_network_file_share)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.network_file_start()
            self.state = 1531
            self.network_computer()
            self.state = 1532
            self.file_path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Network_computerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.computer_name = None # IdContext

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_network_computer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNetwork_computer" ):
                listener.enterNetwork_computer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNetwork_computer" ):
                listener.exitNetwork_computer(self)




    def network_computer(self):

        localctx = TSqlParser.Network_computerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_network_computer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            localctx.computer_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Network_file_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_BACK_SLASH(self):
            return self.getToken(TSqlParser.DOUBLE_BACK_SLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_network_file_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNetwork_file_start" ):
                listener.enterNetwork_file_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNetwork_file_start" ):
                listener.exitNetwork_file_start(self)




    def network_file_start(self):

        localctx = TSqlParser.Network_file_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_network_file_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(TSqlParser.DOUBLE_BACK_SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_pathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_directory_path_separator(self):
            return self.getTypedRuleContext(TSqlParser.File_directory_path_separatorContext,0)


        def file_path(self):
            return self.getTypedRuleContext(TSqlParser.File_pathContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_file_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_path" ):
                listener.enterFile_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_path" ):
                listener.exitFile_path(self)




    def file_path(self):

        localctx = TSqlParser.File_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_file_path)
        try:
            self.state = 1542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.BACKSLASH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1538
                self.file_directory_path_separator()
                self.state = 1539
                self.file_path()
                pass
            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1541
                self.id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_directory_path_separatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKSLASH(self):
            return self.getToken(TSqlParser.BACKSLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_directory_path_separator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_directory_path_separator" ):
                listener.enterFile_directory_path_separator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_directory_path_separator" ):
                listener.exitFile_directory_path_separator(self)




    def file_directory_path_separator(self):

        localctx = TSqlParser.File_directory_path_separatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_file_directory_path_separator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.match(TSqlParser.BACKSLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def local_drive(self):
            return self.getTypedRuleContext(TSqlParser.Local_driveContext,0)


        def file_path(self):
            return self.getTypedRuleContext(TSqlParser.File_pathContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_local_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_file" ):
                listener.enterLocal_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_file" ):
                listener.exitLocal_file(self)




    def local_file(self):

        localctx = TSqlParser.Local_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_local_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.local_drive()
            self.state = 1547
            self.file_path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_driveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISK_DRIVE(self):
            return self.getToken(TSqlParser.DISK_DRIVE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_local_drive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_drive" ):
                listener.enterLocal_drive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_drive" ):
                listener.exitLocal_drive(self)




    def local_drive(self):

        localctx = TSqlParser.Local_driveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_local_drive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.match(TSqlParser.DISK_DRIVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_local_filesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiple_local_file_start(self):
            return self.getTypedRuleContext(TSqlParser.Multiple_local_file_startContext,0)


        def local_file(self):
            return self.getTypedRuleContext(TSqlParser.Local_fileContext,0)


        def SINGLE_QUOTE(self):
            return self.getToken(TSqlParser.SINGLE_QUOTE, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_multiple_local_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_local_files" ):
                listener.enterMultiple_local_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_local_files" ):
                listener.exitMultiple_local_files(self)




    def multiple_local_files(self):

        localctx = TSqlParser.Multiple_local_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_multiple_local_files)
        try:
            self.state = 1557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.SINGLE_QUOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.multiple_local_file_start()
                self.state = 1552
                self.local_file()
                self.state = 1553
                self.match(TSqlParser.SINGLE_QUOTE)
                self.state = 1554
                self.match(TSqlParser.COMMA)
                pass
            elif token in [TSqlParser.DISK_DRIVE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1556
                self.local_file()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiple_local_file_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_QUOTE(self):
            return self.getToken(TSqlParser.SINGLE_QUOTE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_multiple_local_file_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiple_local_file_start" ):
                listener.enterMultiple_local_file_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiple_local_file_start" ):
                listener.exitMultiple_local_file_start(self)




    def multiple_local_file_start(self):

        localctx = TSqlParser.Multiple_local_file_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_multiple_local_file_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self.match(TSqlParser.SINGLE_QUOTE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_assemblyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # IdContext
            self.owner_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PERMISSION_SET(self):
            return self.getToken(TSqlParser.PERMISSION_SET, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BINARY)
            else:
                return self.getToken(TSqlParser.BINARY, i)

        def SAFE(self):
            return self.getToken(TSqlParser.SAFE, 0)

        def EXTERNAL_ACCESS(self):
            return self.getToken(TSqlParser.EXTERNAL_ACCESS, 0)

        def UNSAFE(self):
            return self.getToken(TSqlParser.UNSAFE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_assembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_assembly" ):
                listener.enterCreate_assembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_assembly" ):
                listener.exitCreate_assembly(self)




    def create_assembly(self):

        localctx = TSqlParser.Create_assemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_create_assembly)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.match(TSqlParser.CREATE)
            self.state = 1562
            self.match(TSqlParser.ASSEMBLY)
            self.state = 1563
            localctx.assembly_name = self.id()
            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 1564
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 1565
                localctx.owner_name = self.id()


            self.state = 1568
            self.match(TSqlParser.FROM)
            self.state = 1573 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 1569
                        self.match(TSqlParser.COMMA)


                    self.state = 1572
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.STRING or _la==TSqlParser.BINARY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1575 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 1581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1577
                self.match(TSqlParser.WITH)
                self.state = 1578
                self.match(TSqlParser.PERMISSION_SET)
                self.state = 1579
                self.match(TSqlParser.EQUAL)
                self.state = 1580
                _la = self._input.LA(1)
                if not(_la==TSqlParser.EXTERNAL_ACCESS or _la==TSqlParser.SAFE or _la==TSqlParser.UNSAFE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_assemblyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def DEPENDENTS(self):
            return self.getToken(TSqlParser.DEPENDENTS, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_assembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_assembly" ):
                listener.enterDrop_assembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_assembly" ):
                listener.exitDrop_assembly(self)




    def drop_assembly(self):

        localctx = TSqlParser.Drop_assemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_drop_assembly)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(TSqlParser.DROP)
            self.state = 1584
            self.match(TSqlParser.ASSEMBLY)
            self.state = 1587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 1585
                self.match(TSqlParser.IF)
                self.state = 1586
                self.match(TSqlParser.EXISTS)


            self.state = 1593 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 1589
                        self.match(TSqlParser.COMMA)


                    self.state = 1592
                    localctx.assembly_name = self.id()

                else:
                    raise NoViableAltException(self)
                self.state = 1595 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

            self.state = 1600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 1597
                self.match(TSqlParser.WITH)
                self.state = 1598
                self.match(TSqlParser.NO)
                self.state = 1599
                self.match(TSqlParser.DEPENDENTS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_asymmetric_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Asym_Key_Name = None # IdContext

        def alter_asymmetric_key_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_asymmetric_key_startContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def asymmetric_key_option(self):
            return self.getTypedRuleContext(TSqlParser.Asymmetric_key_optionContext,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_asymmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_asymmetric_key" ):
                listener.enterAlter_asymmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_asymmetric_key" ):
                listener.exitAlter_asymmetric_key(self)




    def alter_asymmetric_key(self):

        localctx = TSqlParser.Alter_asymmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_alter_asymmetric_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.alter_asymmetric_key_start()
            self.state = 1603
            localctx.Asym_Key_Name = self.id()
            self.state = 1608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.WITH]:
                self.state = 1604
                self.asymmetric_key_option()
                pass
            elif token in [TSqlParser.REMOVE]:
                self.state = 1605
                self.match(TSqlParser.REMOVE)
                self.state = 1606
                self.match(TSqlParser.PRIVATE)
                self.state = 1607
                self.match(TSqlParser.KEY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_asymmetric_key_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_asymmetric_key_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_asymmetric_key_start" ):
                listener.enterAlter_asymmetric_key_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_asymmetric_key_start" ):
                listener.exitAlter_asymmetric_key_start(self)




    def alter_asymmetric_key_start(self):

        localctx = TSqlParser.Alter_asymmetric_key_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alter_asymmetric_key_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(TSqlParser.ALTER)
            self.state = 1611
            self.match(TSqlParser.ASYMMETRIC)
            self.state = 1612
            self.match(TSqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asymmetric_key_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asymmetric_key_option_start(self):
            return self.getTypedRuleContext(TSqlParser.Asymmetric_key_option_startContext,0)


        def asymmetric_key_password_change_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Asymmetric_key_password_change_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Asymmetric_key_password_change_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_asymmetric_key_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsymmetric_key_option" ):
                listener.enterAsymmetric_key_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsymmetric_key_option" ):
                listener.exitAsymmetric_key_option(self)




    def asymmetric_key_option(self):

        localctx = TSqlParser.Asymmetric_key_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_asymmetric_key_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            self.asymmetric_key_option_start()
            self.state = 1615
            self.asymmetric_key_password_change_option()
            self.state = 1618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 1616
                self.match(TSqlParser.COMMA)
                self.state = 1617
                self.asymmetric_key_password_change_option()


            self.state = 1620
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asymmetric_key_option_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_asymmetric_key_option_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsymmetric_key_option_start" ):
                listener.enterAsymmetric_key_option_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsymmetric_key_option_start" ):
                listener.exitAsymmetric_key_option_start(self)




    def asymmetric_key_option_start(self):

        localctx = TSqlParser.Asymmetric_key_option_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_asymmetric_key_option_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.match(TSqlParser.WITH)
            self.state = 1623
            self.match(TSqlParser.PRIVATE)
            self.state = 1624
            self.match(TSqlParser.KEY)
            self.state = 1625
            self.match(TSqlParser.LR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asymmetric_key_password_change_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_asymmetric_key_password_change_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsymmetric_key_password_change_option" ):
                listener.enterAsymmetric_key_password_change_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsymmetric_key_password_change_option" ):
                listener.exitAsymmetric_key_password_change_option(self)




    def asymmetric_key_password_change_option(self):

        localctx = TSqlParser.Asymmetric_key_password_change_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_asymmetric_key_password_change_option)
        try:
            self.state = 1637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DECRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1627
                self.match(TSqlParser.DECRYPTION)
                self.state = 1628
                self.match(TSqlParser.BY)
                self.state = 1629
                self.match(TSqlParser.PASSWORD)
                self.state = 1630
                self.match(TSqlParser.EQUAL)
                self.state = 1631
                self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1632
                self.match(TSqlParser.ENCRYPTION)
                self.state = 1633
                self.match(TSqlParser.BY)
                self.state = 1634
                self.match(TSqlParser.PASSWORD)
                self.state = 1635
                self.match(TSqlParser.EQUAL)
                self.state = 1636
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_asymmetric_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Asym_Key_Nam = None # IdContext
            self.database_principal_name = None # IdContext
            self.Assembly_Name = None # IdContext
            self.Provider_Name = None # IdContext
            self.provider_key_name = None # Token
            self.asymmetric_key_password = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EXECUTABLE_FILE(self):
            return self.getToken(TSqlParser.EXECUTABLE_FILE, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def RSA_4096(self):
            return self.getToken(TSqlParser.RSA_4096, 0)

        def RSA_3072(self):
            return self.getToken(TSqlParser.RSA_3072, 0)

        def RSA_2048(self):
            return self.getToken(TSqlParser.RSA_2048, 0)

        def RSA_1024(self):
            return self.getToken(TSqlParser.RSA_1024, 0)

        def RSA_512(self):
            return self.getToken(TSqlParser.RSA_512, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_asymmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_asymmetric_key" ):
                listener.enterCreate_asymmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_asymmetric_key" ):
                listener.exitCreate_asymmetric_key(self)




    def create_asymmetric_key(self):

        localctx = TSqlParser.Create_asymmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_create_asymmetric_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.match(TSqlParser.CREATE)
            self.state = 1640
            self.match(TSqlParser.ASYMMETRIC)
            self.state = 1641
            self.match(TSqlParser.KEY)
            self.state = 1642
            localctx.Asym_Key_Nam = self.id()
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 1643
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 1644
                localctx.database_principal_name = self.id()


            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 1647
                self.match(TSqlParser.FROM)
                self.state = 1658
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.FILE]:
                    self.state = 1648
                    self.match(TSqlParser.FILE)
                    self.state = 1649
                    self.match(TSqlParser.EQUAL)
                    self.state = 1650
                    self.match(TSqlParser.STRING)
                    pass
                elif token in [TSqlParser.EXECUTABLE_FILE]:
                    self.state = 1651
                    self.match(TSqlParser.EXECUTABLE_FILE)
                    self.state = 1652
                    self.match(TSqlParser.EQUAL)
                    self.state = 1653
                    self.match(TSqlParser.STRING)
                    pass
                elif token in [TSqlParser.ASSEMBLY]:
                    self.state = 1654
                    self.match(TSqlParser.ASSEMBLY)
                    self.state = 1655
                    localctx.Assembly_Name = self.id()
                    pass
                elif token in [TSqlParser.PROVIDER]:
                    self.state = 1656
                    self.match(TSqlParser.PROVIDER)
                    self.state = 1657
                    localctx.Provider_Name = self.id()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 1662
                self.match(TSqlParser.WITH)
                self.state = 1672
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.ALGORITHM]:
                    self.state = 1663
                    self.match(TSqlParser.ALGORITHM)
                    self.state = 1664
                    self.match(TSqlParser.EQUAL)
                    self.state = 1665
                    _la = self._input.LA(1)
                    if not(((((_la - 290)) & ~0x3f) == 0 and ((1 << (_la - 290)) & ((1 << (TSqlParser.RSA_512 - 290)) | (1 << (TSqlParser.RSA_1024 - 290)) | (1 << (TSqlParser.RSA_2048 - 290)) | (1 << (TSqlParser.RSA_3072 - 290)) | (1 << (TSqlParser.RSA_4096 - 290)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.PROVIDER_KEY_NAME]:
                    self.state = 1666
                    self.match(TSqlParser.PROVIDER_KEY_NAME)
                    self.state = 1667
                    self.match(TSqlParser.EQUAL)
                    self.state = 1668
                    localctx.provider_key_name = self.match(TSqlParser.STRING)
                    pass
                elif token in [TSqlParser.CREATION_DISPOSITION]:
                    self.state = 1669
                    self.match(TSqlParser.CREATION_DISPOSITION)
                    self.state = 1670
                    self.match(TSqlParser.EQUAL)
                    self.state = 1671
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.CREATE_NEW or _la==TSqlParser.OPEN_EXISTING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 1676
                self.match(TSqlParser.ENCRYPTION)
                self.state = 1677
                self.match(TSqlParser.BY)
                self.state = 1678
                self.match(TSqlParser.PASSWORD)
                self.state = 1679
                self.match(TSqlParser.EQUAL)
                self.state = 1680
                localctx.asymmetric_key_password = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_asymmetric_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_asymmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_asymmetric_key" ):
                listener.enterDrop_asymmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_asymmetric_key" ):
                listener.exitDrop_asymmetric_key(self)




    def drop_asymmetric_key(self):

        localctx = TSqlParser.Drop_asymmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_drop_asymmetric_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.match(TSqlParser.DROP)
            self.state = 1684
            self.match(TSqlParser.ASYMMETRIC)
            self.state = 1685
            self.match(TSqlParser.KEY)
            self.state = 1686
            localctx.key_name = self.id()
            self.state = 1690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 1687
                self.match(TSqlParser.REMOVE)
                self.state = 1688
                self.match(TSqlParser.PROVIDER)
                self.state = 1689
                self.match(TSqlParser.KEY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.entity = None # Entity_nameContext

        def alter_authorization_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_startContext,0)


        def entity_to(self):
            return self.getTypedRuleContext(TSqlParser.Entity_toContext,0)


        def authorization_grantee(self):
            return self.getTypedRuleContext(TSqlParser.Authorization_granteeContext,0)


        def entity_name(self):
            return self.getTypedRuleContext(TSqlParser.Entity_nameContext,0)


        def class_type(self):
            return self.getTypedRuleContext(TSqlParser.Class_typeContext,0)


        def colon_colon(self):
            return self.getTypedRuleContext(TSqlParser.Colon_colonContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization" ):
                listener.enterAlter_authorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization" ):
                listener.exitAlter_authorization(self)




    def alter_authorization(self):

        localctx = TSqlParser.Alter_authorizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alter_authorization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.alter_authorization_start()
            self.state = 1696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1693
                self.class_type()
                self.state = 1694
                self.colon_colon()


            self.state = 1698
            localctx.entity = self.entity_name()
            self.state = 1699
            self.entity_to()
            self.state = 1700
            self.authorization_grantee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Authorization_granteeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.principal_name = None # IdContext

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_authorization_grantee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthorization_grantee" ):
                listener.enterAuthorization_grantee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthorization_grantee" ):
                listener.exitAuthorization_grantee(self)




    def authorization_grantee(self):

        localctx = TSqlParser.Authorization_granteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_authorization_grantee)
        try:
            self.state = 1705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1702
                localctx.principal_name = self.id()
                pass
            elif token in [TSqlParser.SCHEMA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1703
                self.match(TSqlParser.SCHEMA)
                self.state = 1704
                self.match(TSqlParser.OWNER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_toContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_entity_to

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_to" ):
                listener.enterEntity_to(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_to" ):
                listener.exitEntity_to(self)




    def entity_to(self):

        localctx = TSqlParser.Entity_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_entity_to)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self.match(TSqlParser.TO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Colon_colonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLON)
            else:
                return self.getToken(TSqlParser.COLON, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_colon_colon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColon_colon" ):
                listener.enterColon_colon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColon_colon" ):
                listener.exitColon_colon(self)




    def colon_colon(self):

        localctx = TSqlParser.Colon_colonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_colon_colon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.match(TSqlParser.COLON)
            self.state = 1710
            self.match(TSqlParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorization_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization_start" ):
                listener.enterAlter_authorization_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization_start" ):
                listener.exitAlter_authorization_start(self)




    def alter_authorization_start(self):

        localctx = TSqlParser.Alter_authorization_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_alter_authorization_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self.match(TSqlParser.ALTER)
            self.state = 1713
            self.match(TSqlParser.AUTHORIZATION)
            self.state = 1714
            self.match(TSqlParser.ON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorization_for_sql_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.entity = None # Entity_nameContext

        def alter_authorization_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_startContext,0)


        def entity_to(self):
            return self.getTypedRuleContext(TSqlParser.Entity_toContext,0)


        def authorization_grantee(self):
            return self.getTypedRuleContext(TSqlParser.Authorization_granteeContext,0)


        def entity_name(self):
            return self.getTypedRuleContext(TSqlParser.Entity_nameContext,0)


        def class_type_for_sql_database(self):
            return self.getTypedRuleContext(TSqlParser.Class_type_for_sql_databaseContext,0)


        def colon_colon(self):
            return self.getTypedRuleContext(TSqlParser.Colon_colonContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization_for_sql_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization_for_sql_database" ):
                listener.enterAlter_authorization_for_sql_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization_for_sql_database" ):
                listener.exitAlter_authorization_for_sql_database(self)




    def alter_authorization_for_sql_database(self):

        localctx = TSqlParser.Alter_authorization_for_sql_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_alter_authorization_for_sql_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.alter_authorization_start()
            self.state = 1720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1717
                self.class_type_for_sql_database()
                self.state = 1718
                self.colon_colon()


            self.state = 1722
            localctx.entity = self.entity_name()
            self.state = 1723
            self.entity_to()
            self.state = 1724
            self.authorization_grantee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorization_for_azure_dwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.entity = None # Entity_name_for_azure_dwContext

        def alter_authorization_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_startContext,0)


        def entity_to(self):
            return self.getTypedRuleContext(TSqlParser.Entity_toContext,0)


        def authorization_grantee(self):
            return self.getTypedRuleContext(TSqlParser.Authorization_granteeContext,0)


        def entity_name_for_azure_dw(self):
            return self.getTypedRuleContext(TSqlParser.Entity_name_for_azure_dwContext,0)


        def class_type_for_azure_dw(self):
            return self.getTypedRuleContext(TSqlParser.Class_type_for_azure_dwContext,0)


        def colon_colon(self):
            return self.getTypedRuleContext(TSqlParser.Colon_colonContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization_for_azure_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization_for_azure_dw" ):
                listener.enterAlter_authorization_for_azure_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization_for_azure_dw" ):
                listener.exitAlter_authorization_for_azure_dw(self)




    def alter_authorization_for_azure_dw(self):

        localctx = TSqlParser.Alter_authorization_for_azure_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_alter_authorization_for_azure_dw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.alter_authorization_start()
            self.state = 1730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 1727
                self.class_type_for_azure_dw()
                self.state = 1728
                self.colon_colon()


            self.state = 1732
            localctx.entity = self.entity_name_for_azure_dw()
            self.state = 1733
            self.entity_to()
            self.state = 1734
            self.authorization_grantee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_authorization_for_parallel_dwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.entity = None # Entity_name_for_parallel_dwContext

        def alter_authorization_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_authorization_startContext,0)


        def entity_to(self):
            return self.getTypedRuleContext(TSqlParser.Entity_toContext,0)


        def authorization_grantee(self):
            return self.getTypedRuleContext(TSqlParser.Authorization_granteeContext,0)


        def entity_name_for_parallel_dw(self):
            return self.getTypedRuleContext(TSqlParser.Entity_name_for_parallel_dwContext,0)


        def class_type_for_parallel_dw(self):
            return self.getTypedRuleContext(TSqlParser.Class_type_for_parallel_dwContext,0)


        def colon_colon(self):
            return self.getTypedRuleContext(TSqlParser.Colon_colonContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_authorization_for_parallel_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_authorization_for_parallel_dw" ):
                listener.enterAlter_authorization_for_parallel_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_authorization_for_parallel_dw" ):
                listener.exitAlter_authorization_for_parallel_dw(self)




    def alter_authorization_for_parallel_dw(self):

        localctx = TSqlParser.Alter_authorization_for_parallel_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_alter_authorization_for_parallel_dw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.alter_authorization_start()
            self.state = 1740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 1737
                self.class_type_for_parallel_dw()
                self.state = 1738
                self.colon_colon()


            self.state = 1742
            localctx.entity = self.entity_name_for_parallel_dw()
            self.state = 1743
            self.entity_to()
            self.state = 1744
            self.authorization_grantee()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type" ):
                listener.enterClass_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type" ):
                listener.exitClass_type(self)




    def class_type(self):

        localctx = TSqlParser.Class_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_class_type)
        try:
            self.state = 1780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1746
                self.match(TSqlParser.OBJECT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1747
                self.match(TSqlParser.ASSEMBLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1748
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 1749
                self.match(TSqlParser.KEY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1750
                self.match(TSqlParser.AVAILABILITY)
                self.state = 1751
                self.match(TSqlParser.GROUP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1752
                self.match(TSqlParser.CERTIFICATE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1753
                self.match(TSqlParser.CONTRACT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1754
                self.match(TSqlParser.TYPE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1755
                self.match(TSqlParser.DATABASE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1756
                self.match(TSqlParser.ENDPOINT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1757
                self.match(TSqlParser.FULLTEXT)
                self.state = 1758
                self.match(TSqlParser.CATALOG)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1759
                self.match(TSqlParser.FULLTEXT)
                self.state = 1760
                self.match(TSqlParser.STOPLIST)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1761
                self.match(TSqlParser.MESSAGE)
                self.state = 1762
                self.match(TSqlParser.TYPE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1763
                self.match(TSqlParser.REMOTE)
                self.state = 1764
                self.match(TSqlParser.SERVICE)
                self.state = 1765
                self.match(TSqlParser.BINDING)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1766
                self.match(TSqlParser.ROLE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1767
                self.match(TSqlParser.ROUTE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1768
                self.match(TSqlParser.SCHEMA)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1769
                self.match(TSqlParser.SEARCH)
                self.state = 1770
                self.match(TSqlParser.PROPERTY)
                self.state = 1771
                self.match(TSqlParser.LIST)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1772
                self.match(TSqlParser.SERVER)
                self.state = 1773
                self.match(TSqlParser.ROLE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1774
                self.match(TSqlParser.SERVICE)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1775
                self.match(TSqlParser.SYMMETRIC)
                self.state = 1776
                self.match(TSqlParser.KEY)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1777
                self.match(TSqlParser.XML)
                self.state = 1778
                self.match(TSqlParser.SCHEMA)
                self.state = 1779
                self.match(TSqlParser.COLLECTION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_type_for_sql_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type_for_sql_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type_for_sql_database" ):
                listener.enterClass_type_for_sql_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type_for_sql_database" ):
                listener.exitClass_type_for_sql_database(self)




    def class_type_for_sql_database(self):

        localctx = TSqlParser.Class_type_for_sql_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_class_type_for_sql_database)
        try:
            self.state = 1803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1782
                self.match(TSqlParser.OBJECT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1783
                self.match(TSqlParser.ASSEMBLY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1784
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 1785
                self.match(TSqlParser.KEY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1786
                self.match(TSqlParser.CERTIFICATE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1787
                self.match(TSqlParser.TYPE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1788
                self.match(TSqlParser.DATABASE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1789
                self.match(TSqlParser.FULLTEXT)
                self.state = 1790
                self.match(TSqlParser.CATALOG)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1791
                self.match(TSqlParser.FULLTEXT)
                self.state = 1792
                self.match(TSqlParser.STOPLIST)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1793
                self.match(TSqlParser.ROLE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1794
                self.match(TSqlParser.SCHEMA)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1795
                self.match(TSqlParser.SEARCH)
                self.state = 1796
                self.match(TSqlParser.PROPERTY)
                self.state = 1797
                self.match(TSqlParser.LIST)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1798
                self.match(TSqlParser.SYMMETRIC)
                self.state = 1799
                self.match(TSqlParser.KEY)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1800
                self.match(TSqlParser.XML)
                self.state = 1801
                self.match(TSqlParser.SCHEMA)
                self.state = 1802
                self.match(TSqlParser.COLLECTION)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_type_for_azure_dwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type_for_azure_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type_for_azure_dw" ):
                listener.enterClass_type_for_azure_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type_for_azure_dw" ):
                listener.exitClass_type_for_azure_dw(self)




    def class_type_for_azure_dw(self):

        localctx = TSqlParser.Class_type_for_azure_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_class_type_for_azure_dw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            _la = self._input.LA(1)
            if not(_la==TSqlParser.SCHEMA or _la==TSqlParser.OBJECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_type_for_parallel_dwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_class_type_for_parallel_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_type_for_parallel_dw" ):
                listener.enterClass_type_for_parallel_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_type_for_parallel_dw" ):
                listener.exitClass_type_for_parallel_dw(self)




    def class_type_for_parallel_dw(self):

        localctx = TSqlParser.Class_type_for_parallel_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_class_type_for_parallel_dw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            _la = self._input.LA(1)
            if not(_la==TSqlParser.DATABASE or _la==TSqlParser.SCHEMA or _la==TSqlParser.OBJECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_availability_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.group_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_availability_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_availability_group" ):
                listener.enterDrop_availability_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_availability_group" ):
                listener.exitDrop_availability_group(self)




    def drop_availability_group(self):

        localctx = TSqlParser.Drop_availability_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_drop_availability_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.match(TSqlParser.DROP)
            self.state = 1810
            self.match(TSqlParser.AVAILABILITY)
            self.state = 1811
            self.match(TSqlParser.GROUP)
            self.state = 1812
            localctx.group_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_availability_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_availability_group_start(self):
            return self.getTypedRuleContext(TSqlParser.Alter_availability_group_startContext,0)


        def alter_availability_group_options(self):
            return self.getTypedRuleContext(TSqlParser.Alter_availability_group_optionsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_availability_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_availability_group" ):
                listener.enterAlter_availability_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_availability_group" ):
                listener.exitAlter_availability_group(self)




    def alter_availability_group(self):

        localctx = TSqlParser.Alter_availability_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_alter_availability_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.alter_availability_group_start()
            self.state = 1815
            self.alter_availability_group_options()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_availability_group_startContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.group_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_availability_group_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_availability_group_start" ):
                listener.enterAlter_availability_group_start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_availability_group_start" ):
                listener.exitAlter_availability_group_start(self)




    def alter_availability_group_start(self):

        localctx = TSqlParser.Alter_availability_group_startContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_alter_availability_group_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1817
            self.match(TSqlParser.ALTER)
            self.state = 1818
            self.match(TSqlParser.AVAILABILITY)
            self.state = 1819
            self.match(TSqlParser.GROUP)
            self.state = 1820
            localctx.group_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_availability_group_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.milliseconds = None # Token
            self.database_name = None # IdContext
            self.server_instance = None # Token
            self.session_timeout = None # Token
            self.ag_name = None # Token
            self.ag_name_modified = None # Token
            self.listener_name = None # Token

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def AUTOMATED_BACKUP_PREFERENCE(self):
            return self.getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def FAILURE_CONDITION_LEVEL(self):
            return self.getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def HEALTH_CHECK_TIMEOUT(self):
            return self.getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0)

        def DB_FAILOVER(self):
            return self.getToken(TSqlParser.DB_FAILOVER, 0)

        def REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(self):
            return self.getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0)

        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def SECONDARY_ONLY(self):
            return self.getToken(TSqlParser.SECONDARY_ONLY, 0)

        def SECONDARY(self):
            return self.getToken(TSqlParser.SECONDARY, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def REPLICA(self):
            return self.getToken(TSqlParser.REPLICA, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WITH)
            else:
                return self.getToken(TSqlParser.WITH, i)

        def ENDPOINT_URL(self):
            return self.getToken(TSqlParser.ENDPOINT_URL, 0)

        def AVAILABILITY_MODE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AVAILABILITY_MODE)
            else:
                return self.getToken(TSqlParser.AVAILABILITY_MODE, i)

        def FAILOVER_MODE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FAILOVER_MODE)
            else:
                return self.getToken(TSqlParser.FAILOVER_MODE, i)

        def SEEDING_MODE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEEDING_MODE)
            else:
                return self.getToken(TSqlParser.SEEDING_MODE, i)

        def BACKUP_PRIORITY(self):
            return self.getToken(TSqlParser.BACKUP_PRIORITY, 0)

        def PRIMARY_ROLE(self):
            return self.getToken(TSqlParser.PRIMARY_ROLE, 0)

        def ALLOW_CONNECTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALLOW_CONNECTIONS)
            else:
                return self.getToken(TSqlParser.ALLOW_CONNECTIONS, i)

        def SECONDARY_ROLE(self):
            return self.getToken(TSqlParser.SECONDARY_ROLE, 0)

        def SYNCHRONOUS_COMMIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SYNCHRONOUS_COMMIT)
            else:
                return self.getToken(TSqlParser.SYNCHRONOUS_COMMIT, i)

        def ASYNCHRONOUS_COMMIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASYNCHRONOUS_COMMIT)
            else:
                return self.getToken(TSqlParser.ASYNCHRONOUS_COMMIT, i)

        def AUTOMATIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUTOMATIC)
            else:
                return self.getToken(TSqlParser.AUTOMATIC, i)

        def MANUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MANUAL)
            else:
                return self.getToken(TSqlParser.MANUAL, i)

        def READ_WRITE(self):
            return self.getToken(TSqlParser.READ_WRITE, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def READ_ONLY_ROUTING_LIST(self):
            return self.getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def SESSION_TIMEOUT(self):
            return self.getToken(TSqlParser.SESSION_TIMEOUT, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def LISTENER_URL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LISTENER_URL)
            else:
                return self.getToken(TSqlParser.LISTENER_URL, i)

        def GRANT(self):
            return self.getToken(TSqlParser.GRANT, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ANY(self):
            return self.getToken(TSqlParser.ANY, 0)

        def DENY(self):
            return self.getToken(TSqlParser.DENY, 0)

        def FAILOVER(self):
            return self.getToken(TSqlParser.FAILOVER, 0)

        def FORCE_FAILOVER_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0)

        def LISTENER(self):
            return self.getToken(TSqlParser.LISTENER, 0)

        def DHCP(self):
            return self.getToken(TSqlParser.DHCP, 0)

        def IP(self):
            return self.getToken(TSqlParser.IP, 0)

        def IPV4_ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.IPV4_ADDR)
            else:
                return self.getToken(TSqlParser.IPV4_ADDR, i)

        def PORT(self):
            return self.getToken(TSqlParser.PORT, 0)

        def IPV6_ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.IPV6_ADDR)
            else:
                return self.getToken(TSqlParser.IPV6_ADDR, i)

        def RESTART(self):
            return self.getToken(TSqlParser.RESTART, 0)

        def OFFLINE(self):
            return self.getToken(TSqlParser.OFFLINE, 0)

        def DTC_SUPPORT(self):
            return self.getToken(TSqlParser.DTC_SUPPORT, 0)

        def PER_DB(self):
            return self.getToken(TSqlParser.PER_DB, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_availability_group_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_availability_group_options" ):
                listener.enterAlter_availability_group_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_availability_group_options" ):
                listener.exitAlter_availability_group_options(self)




    def alter_availability_group_options(self):

        localctx = TSqlParser.Alter_availability_group_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_alter_availability_group_options)
        self._la = 0 # Token type
        try:
            self.state = 2172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1822
                self.match(TSqlParser.SET)
                self.state = 1823
                self.match(TSqlParser.LR_BRACKET)

                self.state = 1839
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.AUTOMATED_BACKUP_PREFERENCE]:
                    self.state = 1824
                    self.match(TSqlParser.AUTOMATED_BACKUP_PREFERENCE)
                    self.state = 1825
                    self.match(TSqlParser.EQUAL)
                    self.state = 1826
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.NONE or _la==TSqlParser.PRIMARY or _la==TSqlParser.SECONDARY or _la==TSqlParser.SECONDARY_ONLY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.FAILURE_CONDITION_LEVEL]:
                    self.state = 1827
                    self.match(TSqlParser.FAILURE_CONDITION_LEVEL)
                    self.state = 1828
                    self.match(TSqlParser.EQUAL)
                    self.state = 1829
                    self.match(TSqlParser.DECIMAL)
                    pass
                elif token in [TSqlParser.HEALTH_CHECK_TIMEOUT]:
                    self.state = 1830
                    self.match(TSqlParser.HEALTH_CHECK_TIMEOUT)
                    self.state = 1831
                    self.match(TSqlParser.EQUAL)
                    self.state = 1832
                    localctx.milliseconds = self.match(TSqlParser.DECIMAL)
                    pass
                elif token in [TSqlParser.DB_FAILOVER]:
                    self.state = 1833
                    self.match(TSqlParser.DB_FAILOVER)
                    self.state = 1834
                    self.match(TSqlParser.EQUAL)
                    self.state = 1835
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT]:
                    self.state = 1836
                    self.match(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT)
                    self.state = 1837
                    self.match(TSqlParser.EQUAL)
                    self.state = 1838
                    self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1841
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1842
                self.match(TSqlParser.ADD)
                self.state = 1843
                self.match(TSqlParser.DATABASE)
                self.state = 1844
                localctx.database_name = self.id()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1845
                self.match(TSqlParser.REMOVE)
                self.state = 1846
                self.match(TSqlParser.DATABASE)
                self.state = 1847
                localctx.database_name = self.id()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1848
                self.match(TSqlParser.ADD)
                self.state = 1849
                self.match(TSqlParser.REPLICA)
                self.state = 1850
                self.match(TSqlParser.ON)
                self.state = 1851
                localctx.server_instance = self.match(TSqlParser.STRING)

                self.state = 1852
                self.match(TSqlParser.WITH)
                self.state = 1853
                self.match(TSqlParser.LR_BRACKET)

                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ENDPOINT_URL:
                    self.state = 1854
                    self.match(TSqlParser.ENDPOINT_URL)
                    self.state = 1855
                    self.match(TSqlParser.EQUAL)
                    self.state = 1856
                    self.match(TSqlParser.STRING)


                self.state = 1865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 1860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 1859
                        self.match(TSqlParser.COMMA)


                    self.state = 1862
                    self.match(TSqlParser.AVAILABILITY_MODE)
                    self.state = 1863
                    self.match(TSqlParser.EQUAL)
                    self.state = 1864
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ASYNCHRONOUS_COMMIT or _la==TSqlParser.SYNCHRONOUS_COMMIT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 1868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 1867
                        self.match(TSqlParser.COMMA)


                    self.state = 1870
                    self.match(TSqlParser.FAILOVER_MODE)
                    self.state = 1871
                    self.match(TSqlParser.EQUAL)
                    self.state = 1872
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.AUTOMATIC or _la==TSqlParser.MANUAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1881
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 1875
                        self.match(TSqlParser.COMMA)


                    self.state = 1878
                    self.match(TSqlParser.SEEDING_MODE)
                    self.state = 1879
                    self.match(TSqlParser.EQUAL)
                    self.state = 1880
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.AUTOMATIC or _la==TSqlParser.MANUAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1889
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 1883
                        self.match(TSqlParser.COMMA)


                    self.state = 1886
                    self.match(TSqlParser.BACKUP_PRIORITY)
                    self.state = 1887
                    self.match(TSqlParser.EQUAL)
                    self.state = 1888
                    self.match(TSqlParser.DECIMAL)


                self.state = 1900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 1892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 1891
                        self.match(TSqlParser.COMMA)


                    self.state = 1894
                    self.match(TSqlParser.PRIMARY_ROLE)
                    self.state = 1895
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1896
                    self.match(TSqlParser.ALLOW_CONNECTIONS)
                    self.state = 1897
                    self.match(TSqlParser.EQUAL)
                    self.state = 1898
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ALL or _la==TSqlParser.READ_WRITE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1899
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.SECONDARY_ROLE or _la==TSqlParser.COMMA:
                    self.state = 1903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 1902
                        self.match(TSqlParser.COMMA)


                    self.state = 1905
                    self.match(TSqlParser.SECONDARY_ROLE)
                    self.state = 1906
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1907
                    self.match(TSqlParser.ALLOW_CONNECTIONS)
                    self.state = 1908
                    self.match(TSqlParser.EQUAL)

                    self.state = 1909
                    self.match(TSqlParser.READ_ONLY)
                    self.state = 1910
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 1913
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1914
                self.match(TSqlParser.SECONDARY_ROLE)
                self.state = 1915
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1924
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.ALLOW_CONNECTIONS]:
                    self.state = 1916
                    self.match(TSqlParser.ALLOW_CONNECTIONS)
                    self.state = 1917
                    self.match(TSqlParser.EQUAL)
                    self.state = 1918
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ALL or _la==TSqlParser.NO or _la==TSqlParser.READ_ONLY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.READ_ONLY_ROUTING_LIST]:
                    self.state = 1919
                    self.match(TSqlParser.READ_ONLY_ROUTING_LIST)
                    self.state = 1920
                    self.match(TSqlParser.EQUAL)

                    self.state = 1921
                    self.match(TSqlParser.LR_BRACKET)

                    self.state = 1922
                    self.match(TSqlParser.STRING)
                    self.state = 1923
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1926
                self.match(TSqlParser.PRIMARY_ROLE)
                self.state = 1927
                self.match(TSqlParser.LR_BRACKET)
                self.state = 1950
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.ALLOW_CONNECTIONS]:
                    self.state = 1928
                    self.match(TSqlParser.ALLOW_CONNECTIONS)
                    self.state = 1929
                    self.match(TSqlParser.EQUAL)
                    self.state = 1930
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ALL or _la==TSqlParser.NO or _la==TSqlParser.READ_ONLY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.READ_ONLY_ROUTING_LIST]:
                    self.state = 1931
                    self.match(TSqlParser.READ_ONLY_ROUTING_LIST)
                    self.state = 1932
                    self.match(TSqlParser.EQUAL)

                    self.state = 1933
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1944
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.STRING, TSqlParser.RR_BRACKET, TSqlParser.COMMA]:
                        self.state = 1940
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==TSqlParser.STRING or _la==TSqlParser.COMMA:
                            self.state = 1935
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 1934
                                self.match(TSqlParser.COMMA)


                            self.state = 1937
                            self.match(TSqlParser.STRING)
                            self.state = 1942
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [TSqlParser.NONE]:
                        self.state = 1943
                        self.match(TSqlParser.NONE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1946
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [TSqlParser.SESSION_TIMEOUT]:
                    self.state = 1947
                    self.match(TSqlParser.SESSION_TIMEOUT)
                    self.state = 1948
                    self.match(TSqlParser.EQUAL)
                    self.state = 1949
                    localctx.session_timeout = self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1952
                self.match(TSqlParser.MODIFY)
                self.state = 1953
                self.match(TSqlParser.REPLICA)
                self.state = 1954
                self.match(TSqlParser.ON)
                self.state = 1955
                localctx.server_instance = self.match(TSqlParser.STRING)
                self.state = 2013
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.WITH]:
                    self.state = 1956
                    self.match(TSqlParser.WITH)
                    self.state = 1957
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1973
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.ENDPOINT_URL]:
                        self.state = 1958
                        self.match(TSqlParser.ENDPOINT_URL)
                        self.state = 1959
                        self.match(TSqlParser.EQUAL)
                        self.state = 1960
                        self.match(TSqlParser.STRING)
                        pass
                    elif token in [TSqlParser.AVAILABILITY_MODE]:
                        self.state = 1961
                        self.match(TSqlParser.AVAILABILITY_MODE)
                        self.state = 1962
                        self.match(TSqlParser.EQUAL)
                        self.state = 1963
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.ASYNCHRONOUS_COMMIT or _la==TSqlParser.SYNCHRONOUS_COMMIT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [TSqlParser.FAILOVER_MODE]:
                        self.state = 1964
                        self.match(TSqlParser.FAILOVER_MODE)
                        self.state = 1965
                        self.match(TSqlParser.EQUAL)
                        self.state = 1966
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.AUTOMATIC or _la==TSqlParser.MANUAL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [TSqlParser.SEEDING_MODE]:
                        self.state = 1967
                        self.match(TSqlParser.SEEDING_MODE)
                        self.state = 1968
                        self.match(TSqlParser.EQUAL)
                        self.state = 1969
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.AUTOMATIC or _la==TSqlParser.MANUAL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [TSqlParser.BACKUP_PRIORITY]:
                        self.state = 1970
                        self.match(TSqlParser.BACKUP_PRIORITY)
                        self.state = 1971
                        self.match(TSqlParser.EQUAL)
                        self.state = 1972
                        self.match(TSqlParser.DECIMAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [TSqlParser.SECONDARY_ROLE]:
                    self.state = 1975
                    self.match(TSqlParser.SECONDARY_ROLE)
                    self.state = 1976
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 1985
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.ALLOW_CONNECTIONS]:
                        self.state = 1977
                        self.match(TSqlParser.ALLOW_CONNECTIONS)
                        self.state = 1978
                        self.match(TSqlParser.EQUAL)
                        self.state = 1979
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.ALL or _la==TSqlParser.NO or _la==TSqlParser.READ_ONLY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [TSqlParser.READ_ONLY_ROUTING_LIST]:
                        self.state = 1980
                        self.match(TSqlParser.READ_ONLY_ROUTING_LIST)
                        self.state = 1981
                        self.match(TSqlParser.EQUAL)

                        self.state = 1982
                        self.match(TSqlParser.LR_BRACKET)

                        self.state = 1983
                        self.match(TSqlParser.STRING)
                        self.state = 1984
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [TSqlParser.PRIMARY_ROLE]:
                    self.state = 1987
                    self.match(TSqlParser.PRIMARY_ROLE)
                    self.state = 1988
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2011
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.ALLOW_CONNECTIONS]:
                        self.state = 1989
                        self.match(TSqlParser.ALLOW_CONNECTIONS)
                        self.state = 1990
                        self.match(TSqlParser.EQUAL)
                        self.state = 1991
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.ALL or _la==TSqlParser.NO or _la==TSqlParser.READ_ONLY):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [TSqlParser.READ_ONLY_ROUTING_LIST]:
                        self.state = 1992
                        self.match(TSqlParser.READ_ONLY_ROUTING_LIST)
                        self.state = 1993
                        self.match(TSqlParser.EQUAL)

                        self.state = 1994
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 2005
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.STRING, TSqlParser.RR_BRACKET, TSqlParser.COMMA]:
                            self.state = 2001
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==TSqlParser.STRING or _la==TSqlParser.COMMA:
                                self.state = 1996
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 1995
                                    self.match(TSqlParser.COMMA)


                                self.state = 1998
                                self.match(TSqlParser.STRING)
                                self.state = 2003
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass
                        elif token in [TSqlParser.NONE]:
                            self.state = 2004
                            self.match(TSqlParser.NONE)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 2007
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [TSqlParser.SESSION_TIMEOUT]:
                        self.state = 2008
                        self.match(TSqlParser.SESSION_TIMEOUT)
                        self.state = 2009
                        self.match(TSqlParser.EQUAL)
                        self.state = 2010
                        localctx.session_timeout = self.match(TSqlParser.DECIMAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2015
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2016
                self.match(TSqlParser.REMOVE)
                self.state = 2017
                self.match(TSqlParser.REPLICA)
                self.state = 2018
                self.match(TSqlParser.ON)
                self.state = 2019
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2020
                self.match(TSqlParser.JOIN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2021
                self.match(TSqlParser.JOIN)
                self.state = 2022
                self.match(TSqlParser.AVAILABILITY)
                self.state = 2023
                self.match(TSqlParser.GROUP)
                self.state = 2024
                self.match(TSqlParser.ON)
                self.state = 2047 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2026
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 2025
                            self.match(TSqlParser.COMMA)


                        self.state = 2028
                        localctx.ag_name = self.match(TSqlParser.STRING)
                        self.state = 2029
                        self.match(TSqlParser.WITH)
                        self.state = 2030
                        self.match(TSqlParser.LR_BRACKET)

                        self.state = 2031
                        self.match(TSqlParser.LISTENER_URL)
                        self.state = 2032
                        self.match(TSqlParser.EQUAL)
                        self.state = 2033
                        self.match(TSqlParser.STRING)
                        self.state = 2034
                        self.match(TSqlParser.COMMA)
                        self.state = 2035
                        self.match(TSqlParser.AVAILABILITY_MODE)
                        self.state = 2036
                        self.match(TSqlParser.EQUAL)
                        self.state = 2037
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.ASYNCHRONOUS_COMMIT or _la==TSqlParser.SYNCHRONOUS_COMMIT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2038
                        self.match(TSqlParser.COMMA)
                        self.state = 2039
                        self.match(TSqlParser.FAILOVER_MODE)
                        self.state = 2040
                        self.match(TSqlParser.EQUAL)
                        self.state = 2041
                        self.match(TSqlParser.MANUAL)
                        self.state = 2042
                        self.match(TSqlParser.COMMA)
                        self.state = 2043
                        self.match(TSqlParser.SEEDING_MODE)
                        self.state = 2044
                        self.match(TSqlParser.EQUAL)
                        self.state = 2045
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.AUTOMATIC or _la==TSqlParser.MANUAL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2046
                        self.match(TSqlParser.RR_BRACKET)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2049 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2051
                self.match(TSqlParser.MODIFY)
                self.state = 2052
                self.match(TSqlParser.AVAILABILITY)
                self.state = 2053
                self.match(TSqlParser.GROUP)
                self.state = 2054
                self.match(TSqlParser.ON)
                self.state = 2089 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 2055
                            self.match(TSqlParser.COMMA)


                        self.state = 2058
                        localctx.ag_name_modified = self.match(TSqlParser.STRING)
                        self.state = 2059
                        self.match(TSqlParser.WITH)
                        self.state = 2060
                        self.match(TSqlParser.LR_BRACKET)

                        self.state = 2061
                        self.match(TSqlParser.LISTENER_URL)
                        self.state = 2062
                        self.match(TSqlParser.EQUAL)
                        self.state = 2063
                        self.match(TSqlParser.STRING)
                        self.state = 2070
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                        if la_ == 1:
                            self.state = 2065
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 2064
                                self.match(TSqlParser.COMMA)


                            self.state = 2067
                            self.match(TSqlParser.AVAILABILITY_MODE)
                            self.state = 2068
                            self.match(TSqlParser.EQUAL)
                            self.state = 2069
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.ASYNCHRONOUS_COMMIT or _la==TSqlParser.SYNCHRONOUS_COMMIT):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 2078
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                        if la_ == 1:
                            self.state = 2073
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 2072
                                self.match(TSqlParser.COMMA)


                            self.state = 2075
                            self.match(TSqlParser.FAILOVER_MODE)
                            self.state = 2076
                            self.match(TSqlParser.EQUAL)
                            self.state = 2077
                            self.match(TSqlParser.MANUAL)


                        self.state = 2086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.SEEDING_MODE or _la==TSqlParser.COMMA:
                            self.state = 2081
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 2080
                                self.match(TSqlParser.COMMA)


                            self.state = 2083
                            self.match(TSqlParser.SEEDING_MODE)
                            self.state = 2084
                            self.match(TSqlParser.EQUAL)
                            self.state = 2085
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.AUTOMATIC or _la==TSqlParser.MANUAL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 2088
                        self.match(TSqlParser.RR_BRACKET)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2091 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2093
                self.match(TSqlParser.GRANT)
                self.state = 2094
                self.match(TSqlParser.CREATE)
                self.state = 2095
                self.match(TSqlParser.ANY)
                self.state = 2096
                self.match(TSqlParser.DATABASE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2097
                self.match(TSqlParser.DENY)
                self.state = 2098
                self.match(TSqlParser.CREATE)
                self.state = 2099
                self.match(TSqlParser.ANY)
                self.state = 2100
                self.match(TSqlParser.DATABASE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2101
                self.match(TSqlParser.FAILOVER)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2102
                self.match(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2103
                self.match(TSqlParser.ADD)
                self.state = 2104
                self.match(TSqlParser.LISTENER)
                self.state = 2105
                localctx.listener_name = self.match(TSqlParser.STRING)
                self.state = 2106
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 2107
                    self.match(TSqlParser.WITH)
                    self.state = 2108
                    self.match(TSqlParser.DHCP)

                    self.state = 2109
                    self.match(TSqlParser.ON)
                    self.state = 2110
                    self.match(TSqlParser.LR_BRACKET)

                    self.state = 2111
                    self.match(TSqlParser.IPV4_ADDR)
                    self.state = 2112
                    self.match(TSqlParser.IPV4_ADDR)
                    self.state = 2114
                    self.match(TSqlParser.RR_BRACKET)
                    pass

                elif la_ == 2:
                    self.state = 2115
                    self.match(TSqlParser.WITH)
                    self.state = 2116
                    self.match(TSqlParser.IP)
                    self.state = 2117
                    self.match(TSqlParser.LR_BRACKET)

                    self.state = 2129 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 2119
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 2118
                            self.match(TSqlParser.COMMA)


                        self.state = 2121
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 2126
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.IPV4_ADDR]:
                            self.state = 2122
                            self.match(TSqlParser.IPV4_ADDR)
                            self.state = 2123
                            self.match(TSqlParser.COMMA)
                            self.state = 2124
                            self.match(TSqlParser.IPV4_ADDR)
                            pass
                        elif token in [TSqlParser.IPV6_ADDR]:
                            self.state = 2125
                            self.match(TSqlParser.IPV6_ADDR)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 2128
                        self.match(TSqlParser.RR_BRACKET)
                        self.state = 2131 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==TSqlParser.LR_BRACKET or _la==TSqlParser.COMMA):
                            break

                    self.state = 2133
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 2138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2134
                        self.match(TSqlParser.COMMA)
                        self.state = 2135
                        self.match(TSqlParser.PORT)
                        self.state = 2136
                        self.match(TSqlParser.EQUAL)
                        self.state = 2137
                        self.match(TSqlParser.DECIMAL)


                    pass


                self.state = 2142
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2143
                self.match(TSqlParser.MODIFY)
                self.state = 2144
                self.match(TSqlParser.LISTENER)
                self.state = 2157
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.ADD]:
                    self.state = 2145
                    self.match(TSqlParser.ADD)
                    self.state = 2146
                    self.match(TSqlParser.IP)
                    self.state = 2147
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2151
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.IPV4_ADDR]:
                        self.state = 2148
                        self.match(TSqlParser.IPV4_ADDR)
                        self.state = 2149
                        self.match(TSqlParser.IPV4_ADDR)
                        pass
                    elif token in [TSqlParser.IPV6_ADDR]:
                        self.state = 2150
                        self.match(TSqlParser.IPV6_ADDR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2153
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [TSqlParser.PORT]:
                    self.state = 2154
                    self.match(TSqlParser.PORT)
                    self.state = 2155
                    self.match(TSqlParser.EQUAL)
                    self.state = 2156
                    self.match(TSqlParser.DECIMAL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2159
                self.match(TSqlParser.RESTART)
                self.state = 2160
                self.match(TSqlParser.LISTENER)
                self.state = 2161
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2162
                self.match(TSqlParser.REMOVE)
                self.state = 2163
                self.match(TSqlParser.LISTENER)
                self.state = 2164
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2165
                self.match(TSqlParser.OFFLINE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2166
                self.match(TSqlParser.WITH)
                self.state = 2167
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2168
                self.match(TSqlParser.DTC_SUPPORT)
                self.state = 2169
                self.match(TSqlParser.EQUAL)
                self.state = 2170
                self.match(TSqlParser.PER_DB)
                self.state = 2171
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_broker_priorityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ConversationPriorityName = None # IdContext
            self.RemoteServiceName = None # Token
            self.PriorityValue = None # Token

        def BROKER(self):
            return self.getToken(TSqlParser.BROKER, 0)

        def PRIORITY(self):
            return self.getToken(TSqlParser.PRIORITY, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def CONTRACT_NAME(self):
            return self.getToken(TSqlParser.CONTRACT_NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def LOCAL_SERVICE_NAME(self):
            return self.getToken(TSqlParser.LOCAL_SERVICE_NAME, 0)

        def REMOTE_SERVICE_NAME(self):
            return self.getToken(TSqlParser.REMOTE_SERVICE_NAME, 0)

        def PRIORITY_LEVEL(self):
            return self.getToken(TSqlParser.PRIORITY_LEVEL, 0)

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ANY)
            else:
                return self.getToken(TSqlParser.ANY, i)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def DOUBLE_FORWARD_SLASH(self):
            return self.getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_broker_priority

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_broker_priority" ):
                listener.enterCreate_or_alter_broker_priority(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_broker_priority" ):
                listener.exitCreate_or_alter_broker_priority(self)




    def create_or_alter_broker_priority(self):

        localctx = TSqlParser.Create_or_alter_broker_priorityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_create_or_alter_broker_priority)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            _la = self._input.LA(1)
            if not(_la==TSqlParser.ALTER or _la==TSqlParser.CREATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2175
            self.match(TSqlParser.BROKER)
            self.state = 2176
            self.match(TSqlParser.PRIORITY)
            self.state = 2177
            localctx.ConversationPriorityName = self.id()
            self.state = 2178
            self.match(TSqlParser.FOR)
            self.state = 2179
            self.match(TSqlParser.CONVERSATION)
            self.state = 2180
            self.match(TSqlParser.SET)
            self.state = 2181
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONTRACT_NAME:
                self.state = 2182
                self.match(TSqlParser.CONTRACT_NAME)
                self.state = 2183
                self.match(TSqlParser.EQUAL)
                self.state = 2186
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 2184
                    self.id()
                    pass
                elif token in [TSqlParser.ANY]:
                    self.state = 2185
                    self.match(TSqlParser.ANY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 2188
                    self.match(TSqlParser.COMMA)




            self.state = 2205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LOCAL_SERVICE_NAME:
                self.state = 2193
                self.match(TSqlParser.LOCAL_SERVICE_NAME)
                self.state = 2194
                self.match(TSqlParser.EQUAL)
                self.state = 2200
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.DOUBLE_FORWARD_SLASH, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 2196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.DOUBLE_FORWARD_SLASH:
                        self.state = 2195
                        self.match(TSqlParser.DOUBLE_FORWARD_SLASH)


                    self.state = 2198
                    self.id()
                    pass
                elif token in [TSqlParser.ANY]:
                    self.state = 2199
                    self.match(TSqlParser.ANY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 2202
                    self.match(TSqlParser.COMMA)




            self.state = 2216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.REMOTE_SERVICE_NAME:
                self.state = 2207
                self.match(TSqlParser.REMOTE_SERVICE_NAME)
                self.state = 2208
                self.match(TSqlParser.EQUAL)
                self.state = 2211
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.STRING]:
                    self.state = 2209
                    localctx.RemoteServiceName = self.match(TSqlParser.STRING)
                    pass
                elif token in [TSqlParser.ANY]:
                    self.state = 2210
                    self.match(TSqlParser.ANY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 2213
                    self.match(TSqlParser.COMMA)




            self.state = 2224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.PRIORITY_LEVEL:
                self.state = 2218
                self.match(TSqlParser.PRIORITY_LEVEL)
                self.state = 2219
                self.match(TSqlParser.EQUAL)
                self.state = 2222
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.DECIMAL]:
                    self.state = 2220
                    localctx.PriorityValue = self.match(TSqlParser.DECIMAL)
                    pass
                elif token in [TSqlParser.DEFAULT]:
                    self.state = 2221
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2226
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_broker_priorityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ConversationPriorityName = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def BROKER(self):
            return self.getToken(TSqlParser.BROKER, 0)

        def PRIORITY(self):
            return self.getToken(TSqlParser.PRIORITY, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_broker_priority

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_broker_priority" ):
                listener.enterDrop_broker_priority(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_broker_priority" ):
                listener.exitDrop_broker_priority(self)




    def drop_broker_priority(self):

        localctx = TSqlParser.Drop_broker_priorityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_drop_broker_priority)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2228
            self.match(TSqlParser.DROP)
            self.state = 2229
            self.match(TSqlParser.BROKER)
            self.state = 2230
            self.match(TSqlParser.PRIORITY)
            self.state = 2231
            localctx.ConversationPriorityName = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_certificateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def PRIVATE_KEY(self):
            return self.getToken(TSqlParser.PRIVATE_KEY, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ACTIVE(self):
            return self.getToken(TSqlParser.ACTIVE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def BEGIN_DIALOG(self):
            return self.getToken(TSqlParser.BEGIN_DIALOG, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE)
            else:
                return self.getToken(TSqlParser.FILE, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def DECRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECRYPTION)
            else:
                return self.getToken(TSqlParser.DECRYPTION, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PASSWORD)
            else:
                return self.getToken(TSqlParser.PASSWORD, i)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_certificate" ):
                listener.enterAlter_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_certificate" ):
                listener.exitAlter_certificate(self)




    def alter_certificate(self):

        localctx = TSqlParser.Alter_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_alter_certificate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2233
            self.match(TSqlParser.ALTER)
            self.state = 2234
            self.match(TSqlParser.CERTIFICATE)
            self.state = 2235
            localctx.certificate_name = self.id()
            self.state = 2275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 2236
                self.match(TSqlParser.REMOVE)
                self.state = 2237
                self.match(TSqlParser.PRIVATE_KEY)
                pass

            elif la_ == 2:
                self.state = 2238
                self.match(TSqlParser.WITH)
                self.state = 2239
                self.match(TSqlParser.PRIVATE)
                self.state = 2240
                self.match(TSqlParser.KEY)
                self.state = 2241
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2264 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2264
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.FILE]:
                        self.state = 2242
                        self.match(TSqlParser.FILE)
                        self.state = 2243
                        self.match(TSqlParser.EQUAL)
                        self.state = 2244
                        self.match(TSqlParser.STRING)
                        self.state = 2246
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 2245
                            self.match(TSqlParser.COMMA)


                        pass
                    elif token in [TSqlParser.DECRYPTION]:
                        self.state = 2248
                        self.match(TSqlParser.DECRYPTION)
                        self.state = 2249
                        self.match(TSqlParser.BY)
                        self.state = 2250
                        self.match(TSqlParser.PASSWORD)
                        self.state = 2251
                        self.match(TSqlParser.EQUAL)
                        self.state = 2252
                        self.match(TSqlParser.STRING)
                        self.state = 2254
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 2253
                            self.match(TSqlParser.COMMA)


                        pass
                    elif token in [TSqlParser.ENCRYPTION]:
                        self.state = 2256
                        self.match(TSqlParser.ENCRYPTION)
                        self.state = 2257
                        self.match(TSqlParser.BY)
                        self.state = 2258
                        self.match(TSqlParser.PASSWORD)
                        self.state = 2259
                        self.match(TSqlParser.EQUAL)
                        self.state = 2260
                        self.match(TSqlParser.STRING)
                        self.state = 2262
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 2261
                            self.match(TSqlParser.COMMA)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2266 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.FILE or _la==TSqlParser.DECRYPTION or _la==TSqlParser.ENCRYPTION):
                        break

                self.state = 2268
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.state = 2269
                self.match(TSqlParser.WITH)
                self.state = 2270
                self.match(TSqlParser.ACTIVE)
                self.state = 2271
                self.match(TSqlParser.FOR)
                self.state = 2272
                self.match(TSqlParser.BEGIN_DIALOG)
                self.state = 2273
                self.match(TSqlParser.EQUAL)
                self.state = 2274
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_encryption_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_encryption_key = None # IdContext
            self.column_master_key_name = None # IdContext
            self.algorithm_name = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COLUMN_MASTER_KEY(self):
            return self.getToken(TSqlParser.COLUMN_MASTER_KEY, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def ENCRYPTED_VALUE(self):
            return self.getToken(TSqlParser.ENCRYPTED_VALUE, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_column_encryption_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_encryption_key" ):
                listener.enterAlter_column_encryption_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_encryption_key" ):
                listener.exitAlter_column_encryption_key(self)




    def alter_column_encryption_key(self):

        localctx = TSqlParser.Alter_column_encryption_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_alter_column_encryption_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2277
            self.match(TSqlParser.ALTER)
            self.state = 2278
            self.match(TSqlParser.COLUMN)
            self.state = 2279
            self.match(TSqlParser.ENCRYPTION)
            self.state = 2280
            self.match(TSqlParser.KEY)
            self.state = 2281
            localctx.column_encryption_key = self.id()
            self.state = 2282
            _la = self._input.LA(1)
            if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2283
            self.match(TSqlParser.VALUE)
            self.state = 2284
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2285
            self.match(TSqlParser.COLUMN_MASTER_KEY)
            self.state = 2286
            self.match(TSqlParser.EQUAL)
            self.state = 2287
            localctx.column_master_key_name = self.id()
            self.state = 2296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 2288
                self.match(TSqlParser.COMMA)
                self.state = 2289
                self.match(TSqlParser.ALGORITHM)
                self.state = 2290
                self.match(TSqlParser.EQUAL)
                self.state = 2291
                localctx.algorithm_name = self.match(TSqlParser.STRING)
                self.state = 2292
                self.match(TSqlParser.COMMA)
                self.state = 2293
                self.match(TSqlParser.ENCRYPTED_VALUE)
                self.state = 2294
                self.match(TSqlParser.EQUAL)
                self.state = 2295
                self.match(TSqlParser.BINARY)


            self.state = 2298
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_column_encryption_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_encryption_key = None # IdContext
            self.column_master_key_name = None # IdContext
            self.algorithm_name = None # Token
            self.encrypted_value = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def COLUMN_MASTER_KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLUMN_MASTER_KEY)
            else:
                return self.getToken(TSqlParser.COLUMN_MASTER_KEY, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALGORITHM)
            else:
                return self.getToken(TSqlParser.ALGORITHM, i)

        def ENCRYPTED_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTED_VALUE)
            else:
                return self.getToken(TSqlParser.ENCRYPTED_VALUE, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BINARY)
            else:
                return self.getToken(TSqlParser.BINARY, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_column_encryption_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_column_encryption_key" ):
                listener.enterCreate_column_encryption_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_column_encryption_key" ):
                listener.exitCreate_column_encryption_key(self)




    def create_column_encryption_key(self):

        localctx = TSqlParser.Create_column_encryption_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_create_column_encryption_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            self.match(TSqlParser.CREATE)
            self.state = 2301
            self.match(TSqlParser.COLUMN)
            self.state = 2302
            self.match(TSqlParser.ENCRYPTION)
            self.state = 2303
            self.match(TSqlParser.KEY)
            self.state = 2304
            localctx.column_encryption_key = self.id()
            self.state = 2305
            self.match(TSqlParser.WITH)
            self.state = 2306
            self.match(TSqlParser.VALUES)
            self.state = 2326 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2307
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 2309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2308
                        self.match(TSqlParser.COMMA)


                    self.state = 2311
                    self.match(TSqlParser.COLUMN_MASTER_KEY)
                    self.state = 2312
                    self.match(TSqlParser.EQUAL)
                    self.state = 2313
                    localctx.column_master_key_name = self.id()
                    self.state = 2314
                    self.match(TSqlParser.COMMA)
                    self.state = 2315
                    self.match(TSqlParser.ALGORITHM)
                    self.state = 2316
                    self.match(TSqlParser.EQUAL)
                    self.state = 2317
                    localctx.algorithm_name = self.match(TSqlParser.STRING)
                    self.state = 2318
                    self.match(TSqlParser.COMMA)
                    self.state = 2319
                    self.match(TSqlParser.ENCRYPTED_VALUE)
                    self.state = 2320
                    self.match(TSqlParser.EQUAL)
                    self.state = 2321
                    localctx.encrypted_value = self.match(TSqlParser.BINARY)
                    self.state = 2322
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 2324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2323
                        self.match(TSqlParser.COMMA)



                else:
                    raise NoViableAltException(self)
                self.state = 2328 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_certificateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_certificate" ):
                listener.enterDrop_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_certificate" ):
                listener.exitDrop_certificate(self)




    def drop_certificate(self):

        localctx = TSqlParser.Drop_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_drop_certificate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(TSqlParser.DROP)
            self.state = 2331
            self.match(TSqlParser.CERTIFICATE)
            self.state = 2332
            localctx.certificate_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_column_encryption_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_column_encryption_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_column_encryption_key" ):
                listener.enterDrop_column_encryption_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_column_encryption_key" ):
                listener.exitDrop_column_encryption_key(self)




    def drop_column_encryption_key(self):

        localctx = TSqlParser.Drop_column_encryption_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_drop_column_encryption_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self.match(TSqlParser.DROP)
            self.state = 2335
            self.match(TSqlParser.COLUMN)
            self.state = 2336
            self.match(TSqlParser.ENCRYPTION)
            self.state = 2337
            self.match(TSqlParser.KEY)
            self.state = 2338
            localctx.key_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_column_master_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_column_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_column_master_key" ):
                listener.enterDrop_column_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_column_master_key" ):
                listener.exitDrop_column_master_key(self)




    def drop_column_master_key(self):

        localctx = TSqlParser.Drop_column_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_drop_column_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            self.match(TSqlParser.DROP)
            self.state = 2341
            self.match(TSqlParser.COLUMN)
            self.state = 2342
            self.match(TSqlParser.MASTER)
            self.state = 2343
            self.match(TSqlParser.KEY)
            self.state = 2344
            localctx.key_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_contractContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropped_contract_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_contract

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_contract" ):
                listener.enterDrop_contract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_contract" ):
                listener.exitDrop_contract(self)




    def drop_contract(self):

        localctx = TSqlParser.Drop_contractContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_drop_contract)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2346
            self.match(TSqlParser.DROP)
            self.state = 2347
            self.match(TSqlParser.CONTRACT)
            self.state = 2348
            localctx.dropped_contract_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_credentialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.credential_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_credential

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_credential" ):
                listener.enterDrop_credential(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_credential" ):
                listener.exitDrop_credential(self)




    def drop_credential(self):

        localctx = TSqlParser.Drop_credentialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_drop_credential)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self.match(TSqlParser.DROP)
            self.state = 2351
            self.match(TSqlParser.CREDENTIAL)
            self.state = 2352
            localctx.credential_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_cryptograhic_providerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_cryptograhic_provider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_cryptograhic_provider" ):
                listener.enterDrop_cryptograhic_provider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_cryptograhic_provider" ):
                listener.exitDrop_cryptograhic_provider(self)




    def drop_cryptograhic_provider(self):

        localctx = TSqlParser.Drop_cryptograhic_providerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_drop_cryptograhic_provider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2354
            self.match(TSqlParser.DROP)
            self.state = 2355
            self.match(TSqlParser.CRYPTOGRAPHIC)
            self.state = 2356
            self.match(TSqlParser.PROVIDER)
            self.state = 2357
            localctx.provider_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name_or_database_snapshot_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database" ):
                listener.enterDrop_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database" ):
                listener.exitDrop_database(self)




    def drop_database(self):

        localctx = TSqlParser.Drop_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_drop_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.match(TSqlParser.DROP)
            self.state = 2360
            self.match(TSqlParser.DATABASE)
            self.state = 2363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 2361
                self.match(TSqlParser.IF)
                self.state = 2362
                self.match(TSqlParser.EXISTS)


            self.state = 2369 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2365
                        self.match(TSqlParser.COMMA)


                    self.state = 2368
                    localctx.database_name_or_database_snapshot_name = self.id()

                else:
                    raise NoViableAltException(self)
                self.state = 2371 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_database_audit_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_database_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database_audit_specification" ):
                listener.enterDrop_database_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database_audit_specification" ):
                listener.exitDrop_database_audit_specification(self)




    def drop_database_audit_specification(self):

        localctx = TSqlParser.Drop_database_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_drop_database_audit_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self.match(TSqlParser.DROP)
            self.state = 2374
            self.match(TSqlParser.DATABASE)
            self.state = 2375
            self.match(TSqlParser.AUDIT)
            self.state = 2376
            self.match(TSqlParser.SPECIFICATION)
            self.state = 2377
            localctx.audit_specification_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_database_scoped_credentialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.credential_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SCOPED(self):
            return self.getToken(TSqlParser.SCOPED, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_database_scoped_credential

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database_scoped_credential" ):
                listener.enterDrop_database_scoped_credential(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database_scoped_credential" ):
                listener.exitDrop_database_scoped_credential(self)




    def drop_database_scoped_credential(self):

        localctx = TSqlParser.Drop_database_scoped_credentialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_drop_database_scoped_credential)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2379
            self.match(TSqlParser.DROP)
            self.state = 2380
            self.match(TSqlParser.DATABASE)
            self.state = 2381
            self.match(TSqlParser.SCOPED)
            self.state = 2382
            self.match(TSqlParser.CREDENTIAL)
            self.state = 2383
            localctx.credential_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.default_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_default" ):
                listener.enterDrop_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_default" ):
                listener.exitDrop_default(self)




    def drop_default(self):

        localctx = TSqlParser.Drop_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_drop_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2385
            self.match(TSqlParser.DROP)
            self.state = 2386
            self.match(TSqlParser.DEFAULT)
            self.state = 2389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 2387
                self.match(TSqlParser.IF)
                self.state = 2388
                self.match(TSqlParser.EXISTS)


            self.state = 2392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 2391
                self.match(TSqlParser.COMMA)


            self.state = 2397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 2394
                localctx.schema_name = self.id()
                self.state = 2395
                self.match(TSqlParser.DOT)


            self.state = 2399
            localctx.default_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_endpointContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.endPointName = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_endpoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_endpoint" ):
                listener.enterDrop_endpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_endpoint" ):
                listener.exitDrop_endpoint(self)




    def drop_endpoint(self):

        localctx = TSqlParser.Drop_endpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_drop_endpoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.match(TSqlParser.DROP)
            self.state = 2402
            self.match(TSqlParser.ENDPOINT)
            self.state = 2403
            localctx.endPointName = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_data_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_data_source_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_data_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_data_source" ):
                listener.enterDrop_external_data_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_data_source" ):
                listener.exitDrop_external_data_source(self)




    def drop_external_data_source(self):

        localctx = TSqlParser.Drop_external_data_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_drop_external_data_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.match(TSqlParser.DROP)
            self.state = 2406
            self.match(TSqlParser.EXTERNAL)
            self.state = 2407
            self.match(TSqlParser.DATA)
            self.state = 2408
            self.match(TSqlParser.SOURCE)
            self.state = 2409
            localctx.external_data_source_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_file_formatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_file_format_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(TSqlParser.FORMAT, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_file_format" ):
                listener.enterDrop_external_file_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_file_format" ):
                listener.exitDrop_external_file_format(self)




    def drop_external_file_format(self):

        localctx = TSqlParser.Drop_external_file_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_drop_external_file_format)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2411
            self.match(TSqlParser.DROP)
            self.state = 2412
            self.match(TSqlParser.EXTERNAL)
            self.state = 2413
            self.match(TSqlParser.FILE)
            self.state = 2414
            self.match(TSqlParser.FORMAT)
            self.state = 2415
            localctx.external_file_format_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_libraryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library_name = None # IdContext
            self.owner_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_library" ):
                listener.enterDrop_external_library(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_library" ):
                listener.exitDrop_external_library(self)




    def drop_external_library(self):

        localctx = TSqlParser.Drop_external_libraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_drop_external_library)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2417
            self.match(TSqlParser.DROP)
            self.state = 2418
            self.match(TSqlParser.EXTERNAL)
            self.state = 2419
            self.match(TSqlParser.LIBRARY)
            self.state = 2420
            localctx.library_name = self.id()
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 2421
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 2422
                localctx.owner_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_resource_poolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_resource_pool" ):
                listener.enterDrop_external_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_resource_pool" ):
                listener.exitDrop_external_resource_pool(self)




    def drop_external_resource_pool(self):

        localctx = TSqlParser.Drop_external_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_drop_external_resource_pool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2425
            self.match(TSqlParser.DROP)
            self.state = 2426
            self.match(TSqlParser.EXTERNAL)
            self.state = 2427
            self.match(TSqlParser.RESOURCE)
            self.state = 2428
            self.match(TSqlParser.POOL)
            self.state = 2429
            localctx.pool_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # IdContext
            self.schema_name = None # IdContext
            self.table = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_external_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_table" ):
                listener.enterDrop_external_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_table" ):
                listener.exitDrop_external_table(self)




    def drop_external_table(self):

        localctx = TSqlParser.Drop_external_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_drop_external_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.match(TSqlParser.DROP)
            self.state = 2432
            self.match(TSqlParser.EXTERNAL)
            self.state = 2433
            self.match(TSqlParser.TABLE)
            self.state = 2437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 2434
                localctx.database_name = self.id()
                self.state = 2435
                self.match(TSqlParser.DOT)


            self.state = 2442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 2439
                localctx.schema_name = self.id()
                self.state = 2440
                self.match(TSqlParser.DOT)


            self.state = 2444
            localctx.table = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_event_notificationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notification_name = None # IdContext
            self.queue_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def NOTIFICATION(self):
            return self.getToken(TSqlParser.NOTIFICATION, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_event_notifications

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_event_notifications" ):
                listener.enterDrop_event_notifications(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_event_notifications" ):
                listener.exitDrop_event_notifications(self)




    def drop_event_notifications(self):

        localctx = TSqlParser.Drop_event_notificationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_drop_event_notifications)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2446
            self.match(TSqlParser.DROP)
            self.state = 2447
            self.match(TSqlParser.EVENT)
            self.state = 2448
            self.match(TSqlParser.NOTIFICATION)
            self.state = 2453 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 2449
                    self.match(TSqlParser.COMMA)


                self.state = 2452
                localctx.notification_name = self.id()
                self.state = 2455 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                    break

            self.state = 2457
            self.match(TSqlParser.ON)
            self.state = 2462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.SERVER]:
                self.state = 2458
                self.match(TSqlParser.SERVER)
                pass
            elif token in [TSqlParser.DATABASE]:
                self.state = 2459
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [TSqlParser.QUEUE]:
                self.state = 2460
                self.match(TSqlParser.QUEUE)
                self.state = 2461
                localctx.queue_name = self.id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_event_sessionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_session_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def SESSION(self):
            return self.getToken(TSqlParser.SESSION, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_event_session

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_event_session" ):
                listener.enterDrop_event_session(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_event_session" ):
                listener.exitDrop_event_session(self)




    def drop_event_session(self):

        localctx = TSqlParser.Drop_event_sessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_drop_event_session)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2464
            self.match(TSqlParser.DROP)
            self.state = 2465
            self.match(TSqlParser.EVENT)
            self.state = 2466
            self.match(TSqlParser.SESSION)
            self.state = 2467
            localctx.event_session_name = self.id()
            self.state = 2468
            self.match(TSqlParser.ON)
            self.state = 2469
            self.match(TSqlParser.SERVER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_fulltext_catalogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_fulltext_catalog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_fulltext_catalog" ):
                listener.enterDrop_fulltext_catalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_fulltext_catalog" ):
                listener.exitDrop_fulltext_catalog(self)




    def drop_fulltext_catalog(self):

        localctx = TSqlParser.Drop_fulltext_catalogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_drop_fulltext_catalog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            self.match(TSqlParser.DROP)
            self.state = 2472
            self.match(TSqlParser.FULLTEXT)
            self.state = 2473
            self.match(TSqlParser.CATALOG)
            self.state = 2474
            localctx.catalog_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_fulltext_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # IdContext
            self.table = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_fulltext_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_fulltext_index" ):
                listener.enterDrop_fulltext_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_fulltext_index" ):
                listener.exitDrop_fulltext_index(self)




    def drop_fulltext_index(self):

        localctx = TSqlParser.Drop_fulltext_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_drop_fulltext_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2476
            self.match(TSqlParser.DROP)
            self.state = 2477
            self.match(TSqlParser.FULLTEXT)
            self.state = 2478
            self.match(TSqlParser.INDEX)
            self.state = 2479
            self.match(TSqlParser.ON)
            self.state = 2483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 2480
                localctx.schema = self.id()
                self.state = 2481
                self.match(TSqlParser.DOT)


            self.state = 2485
            localctx.table = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_fulltext_stoplistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stoplist_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_fulltext_stoplist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_fulltext_stoplist" ):
                listener.enterDrop_fulltext_stoplist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_fulltext_stoplist" ):
                listener.exitDrop_fulltext_stoplist(self)




    def drop_fulltext_stoplist(self):

        localctx = TSqlParser.Drop_fulltext_stoplistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_drop_fulltext_stoplist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2487
            self.match(TSqlParser.DROP)
            self.state = 2488
            self.match(TSqlParser.FULLTEXT)
            self.state = 2489
            self.match(TSqlParser.STOPLIST)
            self.state = 2490
            localctx.stoplist_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_loginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_login

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_login" ):
                listener.enterDrop_login(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_login" ):
                listener.exitDrop_login(self)




    def drop_login(self):

        localctx = TSqlParser.Drop_loginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_drop_login)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.match(TSqlParser.DROP)
            self.state = 2493
            self.match(TSqlParser.LOGIN)
            self.state = 2494
            localctx.login_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_master_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_master_key" ):
                listener.enterDrop_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_master_key" ):
                listener.exitDrop_master_key(self)




    def drop_master_key(self):

        localctx = TSqlParser.Drop_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_drop_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2496
            self.match(TSqlParser.DROP)
            self.state = 2497
            self.match(TSqlParser.MASTER)
            self.state = 2498
            self.match(TSqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_message_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.message_type_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_message_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_message_type" ):
                listener.enterDrop_message_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_message_type" ):
                listener.exitDrop_message_type(self)




    def drop_message_type(self):

        localctx = TSqlParser.Drop_message_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_drop_message_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2500
            self.match(TSqlParser.DROP)
            self.state = 2501
            self.match(TSqlParser.MESSAGE)
            self.state = 2502
            self.match(TSqlParser.TYPE)
            self.state = 2503
            localctx.message_type_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_partition_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_function_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_partition_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_partition_function" ):
                listener.enterDrop_partition_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_partition_function" ):
                listener.exitDrop_partition_function(self)




    def drop_partition_function(self):

        localctx = TSqlParser.Drop_partition_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_drop_partition_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            self.match(TSqlParser.DROP)
            self.state = 2506
            self.match(TSqlParser.PARTITION)
            self.state = 2507
            self.match(TSqlParser.FUNCTION)
            self.state = 2508
            localctx.partition_function_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_partition_schemeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_scheme_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def SCHEME(self):
            return self.getToken(TSqlParser.SCHEME, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_partition_scheme

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_partition_scheme" ):
                listener.enterDrop_partition_scheme(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_partition_scheme" ):
                listener.exitDrop_partition_scheme(self)




    def drop_partition_scheme(self):

        localctx = TSqlParser.Drop_partition_schemeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_drop_partition_scheme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2510
            self.match(TSqlParser.DROP)
            self.state = 2511
            self.match(TSqlParser.PARTITION)
            self.state = 2512
            self.match(TSqlParser.SCHEME)
            self.state = 2513
            localctx.partition_scheme_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_queueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # IdContext
            self.schema_name = None # IdContext
            self.queue_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_queue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_queue" ):
                listener.enterDrop_queue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_queue" ):
                listener.exitDrop_queue(self)




    def drop_queue(self):

        localctx = TSqlParser.Drop_queueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_drop_queue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2515
            self.match(TSqlParser.DROP)
            self.state = 2516
            self.match(TSqlParser.QUEUE)
            self.state = 2520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 2517
                localctx.database_name = self.id()
                self.state = 2518
                self.match(TSqlParser.DOT)


            self.state = 2525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 2522
                localctx.schema_name = self.id()
                self.state = 2523
                self.match(TSqlParser.DOT)


            self.state = 2527
            localctx.queue_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_remote_service_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.binding_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_remote_service_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_remote_service_binding" ):
                listener.enterDrop_remote_service_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_remote_service_binding" ):
                listener.exitDrop_remote_service_binding(self)




    def drop_remote_service_binding(self):

        localctx = TSqlParser.Drop_remote_service_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_drop_remote_service_binding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            self.match(TSqlParser.DROP)
            self.state = 2530
            self.match(TSqlParser.REMOTE)
            self.state = 2531
            self.match(TSqlParser.SERVICE)
            self.state = 2532
            self.match(TSqlParser.BINDING)
            self.state = 2533
            localctx.binding_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_resource_poolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_resource_pool" ):
                listener.enterDrop_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_resource_pool" ):
                listener.exitDrop_resource_pool(self)




    def drop_resource_pool(self):

        localctx = TSqlParser.Drop_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_drop_resource_pool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2535
            self.match(TSqlParser.DROP)
            self.state = 2536
            self.match(TSqlParser.RESOURCE)
            self.state = 2537
            self.match(TSqlParser.POOL)
            self.state = 2538
            localctx.pool_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_db_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.role_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_db_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_db_role" ):
                listener.enterDrop_db_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_db_role" ):
                listener.exitDrop_db_role(self)




    def drop_db_role(self):

        localctx = TSqlParser.Drop_db_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_drop_db_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2540
            self.match(TSqlParser.DROP)
            self.state = 2541
            self.match(TSqlParser.ROLE)
            self.state = 2544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 2542
                self.match(TSqlParser.IF)
                self.state = 2543
                self.match(TSqlParser.EXISTS)


            self.state = 2546
            localctx.role_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_routeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.route_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_route

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_route" ):
                listener.enterDrop_route(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_route" ):
                listener.exitDrop_route(self)




    def drop_route(self):

        localctx = TSqlParser.Drop_routeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_drop_route)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self.match(TSqlParser.DROP)
            self.state = 2549
            self.match(TSqlParser.ROUTE)
            self.state = 2550
            localctx.route_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_ruleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.rule_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def RULE(self):
            return self.getToken(TSqlParser.RULE, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_rule" ):
                listener.enterDrop_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_rule" ):
                listener.exitDrop_rule(self)




    def drop_rule(self):

        localctx = TSqlParser.Drop_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_drop_rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.match(TSqlParser.DROP)
            self.state = 2553
            self.match(TSqlParser.RULE)
            self.state = 2556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 2554
                self.match(TSqlParser.IF)
                self.state = 2555
                self.match(TSqlParser.EXISTS)


            self.state = 2567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 2559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 2558
                    self.match(TSqlParser.COMMA)


                self.state = 2564
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 2561
                    localctx.schema_name = self.id()
                    self.state = 2562
                    self.match(TSqlParser.DOT)


                self.state = 2566
                localctx.rule_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_schemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_schema" ):
                listener.enterDrop_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_schema" ):
                listener.exitDrop_schema(self)




    def drop_schema(self):

        localctx = TSqlParser.Drop_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_drop_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2569
            self.match(TSqlParser.DROP)
            self.state = 2570
            self.match(TSqlParser.SCHEMA)
            self.state = 2573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 2571
                self.match(TSqlParser.IF)
                self.state = 2572
                self.match(TSqlParser.EXISTS)


            self.state = 2575
            localctx.schema_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_search_property_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.property_list_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_search_property_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_search_property_list" ):
                listener.enterDrop_search_property_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_search_property_list" ):
                listener.exitDrop_search_property_list(self)




    def drop_search_property_list(self):

        localctx = TSqlParser.Drop_search_property_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_drop_search_property_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2577
            self.match(TSqlParser.DROP)
            self.state = 2578
            self.match(TSqlParser.SEARCH)
            self.state = 2579
            self.match(TSqlParser.PROPERTY)
            self.state = 2580
            self.match(TSqlParser.LIST)
            self.state = 2581
            localctx.property_list_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_security_policyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.security_policy_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SECURITY(self):
            return self.getToken(TSqlParser.SECURITY, 0)

        def POLICY(self):
            return self.getToken(TSqlParser.POLICY, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_security_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_security_policy" ):
                listener.enterDrop_security_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_security_policy" ):
                listener.exitDrop_security_policy(self)




    def drop_security_policy(self):

        localctx = TSqlParser.Drop_security_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_drop_security_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2583
            self.match(TSqlParser.DROP)
            self.state = 2584
            self.match(TSqlParser.SECURITY)
            self.state = 2585
            self.match(TSqlParser.POLICY)
            self.state = 2588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 2586
                self.match(TSqlParser.IF)
                self.state = 2587
                self.match(TSqlParser.EXISTS)


            self.state = 2593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 2590
                localctx.schema_name = self.id()
                self.state = 2591
                self.match(TSqlParser.DOT)


            self.state = 2595
            localctx.security_policy_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # IdContext
            self.schema_name = None # IdContext
            self.sequence_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(TSqlParser.SEQUENCE, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_sequence" ):
                listener.enterDrop_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_sequence" ):
                listener.exitDrop_sequence(self)




    def drop_sequence(self):

        localctx = TSqlParser.Drop_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_drop_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2597
            self.match(TSqlParser.DROP)
            self.state = 2598
            self.match(TSqlParser.SEQUENCE)
            self.state = 2601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 2599
                self.match(TSqlParser.IF)
                self.state = 2600
                self.match(TSqlParser.EXISTS)


            self.state = 2617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 2604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 2603
                    self.match(TSqlParser.COMMA)


                self.state = 2609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 2606
                    localctx.database_name = self.id()
                    self.state = 2607
                    self.match(TSqlParser.DOT)


                self.state = 2614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 2611
                    localctx.schema_name = self.id()
                    self.state = 2612
                    self.match(TSqlParser.DOT)


                self.state = 2616
                localctx.sequence_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_server_auditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_server_audit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_server_audit" ):
                listener.enterDrop_server_audit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_server_audit" ):
                listener.exitDrop_server_audit(self)




    def drop_server_audit(self):

        localctx = TSqlParser.Drop_server_auditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_drop_server_audit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619
            self.match(TSqlParser.DROP)
            self.state = 2620
            self.match(TSqlParser.SERVER)
            self.state = 2621
            self.match(TSqlParser.AUDIT)
            self.state = 2622
            localctx.audit_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_server_audit_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_server_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_server_audit_specification" ):
                listener.enterDrop_server_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_server_audit_specification" ):
                listener.exitDrop_server_audit_specification(self)




    def drop_server_audit_specification(self):

        localctx = TSqlParser.Drop_server_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_drop_server_audit_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2624
            self.match(TSqlParser.DROP)
            self.state = 2625
            self.match(TSqlParser.SERVER)
            self.state = 2626
            self.match(TSqlParser.AUDIT)
            self.state = 2627
            self.match(TSqlParser.SPECIFICATION)
            self.state = 2628
            localctx.audit_specification_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_server_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.role_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_server_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_server_role" ):
                listener.enterDrop_server_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_server_role" ):
                listener.exitDrop_server_role(self)




    def drop_server_role(self):

        localctx = TSqlParser.Drop_server_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_drop_server_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2630
            self.match(TSqlParser.DROP)
            self.state = 2631
            self.match(TSqlParser.SERVER)
            self.state = 2632
            self.match(TSqlParser.ROLE)
            self.state = 2633
            localctx.role_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_serviceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropped_service_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_service

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_service" ):
                listener.enterDrop_service(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_service" ):
                listener.exitDrop_service(self)




    def drop_service(self):

        localctx = TSqlParser.Drop_serviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_drop_service)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2635
            self.match(TSqlParser.DROP)
            self.state = 2636
            self.match(TSqlParser.SERVICE)
            self.state = 2637
            localctx.dropped_service_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_signatureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.module_name = None # IdContext
            self.cert_name = None # IdContext
            self.Asym_key_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SIGNATURE(self):
            return self.getToken(TSqlParser.SIGNATURE, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COUNTER(self):
            return self.getToken(TSqlParser.COUNTER, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def CERTIFICATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CERTIFICATE)
            else:
                return self.getToken(TSqlParser.CERTIFICATE, i)

        def ASYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASYMMETRIC)
            else:
                return self.getToken(TSqlParser.ASYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_signature" ):
                listener.enterDrop_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_signature" ):
                listener.exitDrop_signature(self)




    def drop_signature(self):

        localctx = TSqlParser.Drop_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_drop_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2639
            self.match(TSqlParser.DROP)
            self.state = 2641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COUNTER:
                self.state = 2640
                self.match(TSqlParser.COUNTER)


            self.state = 2643
            self.match(TSqlParser.SIGNATURE)
            self.state = 2644
            self.match(TSqlParser.FROM)
            self.state = 2648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 2645
                localctx.schema_name = self.id()
                self.state = 2646
                self.match(TSqlParser.DOT)


            self.state = 2650
            localctx.module_name = self.id()
            self.state = 2651
            self.match(TSqlParser.BY)
            self.state = 2663 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 2653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2652
                        self.match(TSqlParser.COMMA)


                    self.state = 2655
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 2656
                    localctx.cert_name = self.id()
                    pass

                elif la_ == 2:
                    self.state = 2658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2657
                        self.match(TSqlParser.COMMA)


                    self.state = 2660
                    self.match(TSqlParser.ASYMMETRIC)
                    self.state = 2661
                    self.match(TSqlParser.KEY)
                    self.state = 2662
                    localctx.Asym_key_name = self.id()
                    pass


                self.state = 2665 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.ASYMMETRIC or _la==TSqlParser.CERTIFICATE or _la==TSqlParser.COMMA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.object_name = None # IdContext
            self.statistics_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_statistics_name_azure_dw_and_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics_name_azure_dw_and_pdw" ):
                listener.enterDrop_statistics_name_azure_dw_and_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics_name_azure_dw_and_pdw" ):
                listener.exitDrop_statistics_name_azure_dw_and_pdw(self)




    def drop_statistics_name_azure_dw_and_pdw(self):

        localctx = TSqlParser.Drop_statistics_name_azure_dw_and_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_drop_statistics_name_azure_dw_and_pdw)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2667
            self.match(TSqlParser.DROP)
            self.state = 2668
            self.match(TSqlParser.STATISTICS)
            self.state = 2672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 2669
                localctx.schema_name = self.id()
                self.state = 2670
                self.match(TSqlParser.DOT)


            self.state = 2674
            localctx.object_name = self.id()
            self.state = 2675
            self.match(TSqlParser.DOT)
            self.state = 2676
            localctx.statistics_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_symmetric_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.symmetric_key_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_symmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_symmetric_key" ):
                listener.enterDrop_symmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_symmetric_key" ):
                listener.exitDrop_symmetric_key(self)




    def drop_symmetric_key(self):

        localctx = TSqlParser.Drop_symmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_drop_symmetric_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2678
            self.match(TSqlParser.DROP)
            self.state = 2679
            self.match(TSqlParser.SYMMETRIC)
            self.state = 2680
            self.match(TSqlParser.KEY)
            self.state = 2681
            localctx.symmetric_key_name = self.id()
            self.state = 2685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 2682
                self.match(TSqlParser.REMOVE)
                self.state = 2683
                self.match(TSqlParser.PROVIDER)
                self.state = 2684
                self.match(TSqlParser.KEY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # IdContext
            self.synonym_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SYNONYM(self):
            return self.getToken(TSqlParser.SYNONYM, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_synonym" ):
                listener.enterDrop_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_synonym" ):
                listener.exitDrop_synonym(self)




    def drop_synonym(self):

        localctx = TSqlParser.Drop_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_drop_synonym)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2687
            self.match(TSqlParser.DROP)
            self.state = 2688
            self.match(TSqlParser.SYNONYM)
            self.state = 2691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 2689
                self.match(TSqlParser.IF)
                self.state = 2690
                self.match(TSqlParser.EXISTS)


            self.state = 2696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 2693
                localctx.schema = self.id()
                self.state = 2694
                self.match(TSqlParser.DOT)


            self.state = 2698
            localctx.synonym_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_user" ):
                listener.enterDrop_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_user" ):
                listener.exitDrop_user(self)




    def drop_user(self):

        localctx = TSqlParser.Drop_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_drop_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2700
            self.match(TSqlParser.DROP)
            self.state = 2701
            self.match(TSqlParser.USER)
            self.state = 2704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 2702
                self.match(TSqlParser.IF)
                self.state = 2703
                self.match(TSqlParser.EXISTS)


            self.state = 2706
            localctx.user_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_workload_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.group_name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_workload_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_workload_group" ):
                listener.enterDrop_workload_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_workload_group" ):
                listener.exitDrop_workload_group(self)




    def drop_workload_group(self):

        localctx = TSqlParser.Drop_workload_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_drop_workload_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2708
            self.match(TSqlParser.DROP)
            self.state = 2709
            self.match(TSqlParser.WORKLOAD)
            self.state = 2710
            self.match(TSqlParser.GROUP)
            self.state = 2711
            localctx.group_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_xml_schema_collectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.relational_schema = None # IdContext
            self.sql_identifier = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_xml_schema_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_xml_schema_collection" ):
                listener.enterDrop_xml_schema_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_xml_schema_collection" ):
                listener.exitDrop_xml_schema_collection(self)




    def drop_xml_schema_collection(self):

        localctx = TSqlParser.Drop_xml_schema_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_drop_xml_schema_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(TSqlParser.DROP)
            self.state = 2714
            self.match(TSqlParser.XML)
            self.state = 2715
            self.match(TSqlParser.SCHEMA)
            self.state = 2716
            self.match(TSqlParser.COLLECTION)
            self.state = 2720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 2717
                localctx.relational_schema = self.id()
                self.state = 2718
                self.match(TSqlParser.DOT)


            self.state = 2722
            localctx.sql_identifier = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Disable_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.trigger_name = None # IdContext
            self.schema_id = None # IdContext
            self.object_name = None # IdContext

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_disable_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisable_trigger" ):
                listener.enterDisable_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisable_trigger" ):
                listener.exitDisable_trigger(self)




    def disable_trigger(self):

        localctx = TSqlParser.Disable_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_disable_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            self.match(TSqlParser.DISABLE)
            self.state = 2725
            self.match(TSqlParser.TRIGGER)
            self.state = 2740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID, TSqlParser.COMMA]:
                self.state = 2735 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2726
                        self.match(TSqlParser.COMMA)


                    self.state = 2732
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 2729
                        localctx.schema_name = self.id()
                        self.state = 2730
                        self.match(TSqlParser.DOT)


                    self.state = 2734
                    localctx.trigger_name = self.id()
                    self.state = 2737 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                        break

                pass
            elif token in [TSqlParser.ALL]:
                self.state = 2739
                self.match(TSqlParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2742
            self.match(TSqlParser.ON)
            self.state = 2752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.state = 2746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 2743
                    localctx.schema_id = self.id()
                    self.state = 2744
                    self.match(TSqlParser.DOT)


                self.state = 2748
                localctx.object_name = self.id()
                pass
            elif token in [TSqlParser.DATABASE]:
                self.state = 2749
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [TSqlParser.ALL]:
                self.state = 2750
                self.match(TSqlParser.ALL)
                self.state = 2751
                self.match(TSqlParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enable_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.trigger_name = None # IdContext
            self.schema_id = None # IdContext
            self.object_name = None # IdContext

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_enable_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable_trigger" ):
                listener.enterEnable_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable_trigger" ):
                listener.exitEnable_trigger(self)




    def enable_trigger(self):

        localctx = TSqlParser.Enable_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_enable_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.match(TSqlParser.ENABLE)
            self.state = 2755
            self.match(TSqlParser.TRIGGER)
            self.state = 2770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID, TSqlParser.COMMA]:
                self.state = 2765 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2756
                        self.match(TSqlParser.COMMA)


                    self.state = 2762
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                    if la_ == 1:
                        self.state = 2759
                        localctx.schema_name = self.id()
                        self.state = 2760
                        self.match(TSqlParser.DOT)


                    self.state = 2764
                    localctx.trigger_name = self.id()
                    self.state = 2767 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                        break

                pass
            elif token in [TSqlParser.ALL]:
                self.state = 2769
                self.match(TSqlParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2772
            self.match(TSqlParser.ON)
            self.state = 2782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.state = 2776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 2773
                    localctx.schema_id = self.id()
                    self.state = 2774
                    self.match(TSqlParser.DOT)


                self.state = 2778
                localctx.object_name = self.id()
                pass
            elif token in [TSqlParser.DATABASE]:
                self.state = 2779
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [TSqlParser.ALL]:
                self.state = 2780
                self.match(TSqlParser.ALL)
                self.state = 2781
                self.match(TSqlParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def LOCK(self):
            return self.getToken(TSqlParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def MODE(self):
            return self.getToken(TSqlParser.MODE, 0)

        def SHARE(self):
            return self.getToken(TSqlParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(TSqlParser.EXCLUSIVE, 0)

        def WAIT(self):
            return self.getToken(TSqlParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(TSqlParser.NOWAIT, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_lock_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table" ):
                listener.enterLock_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table" ):
                listener.exitLock_table(self)




    def lock_table(self):

        localctx = TSqlParser.Lock_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_lock_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2784
            self.match(TSqlParser.LOCK)
            self.state = 2785
            self.match(TSqlParser.TABLE)
            self.state = 2786
            self.table_name()
            self.state = 2787
            self.match(TSqlParser.IN)
            self.state = 2788
            _la = self._input.LA(1)
            if not(_la==TSqlParser.EXCLUSIVE or _la==TSqlParser.SHARE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2789
            self.match(TSqlParser.MODE)
            self.state = 2793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 2790
                self.match(TSqlParser.WAIT)
                self.state = 2791
                localctx.seconds = self.match(TSqlParser.DECIMAL)

            elif la_ == 2:
                self.state = 2792
                self.match(TSqlParser.NOWAIT)


            self.state = 2796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 2795
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Truncate_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(TSqlParser.TRUNCATE, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def PARTITIONS(self):
            return self.getToken(TSqlParser.PARTITIONS, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_truncate_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncate_table" ):
                listener.enterTruncate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncate_table" ):
                listener.exitTruncate_table(self)




    def truncate_table(self):

        localctx = TSqlParser.Truncate_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_truncate_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2798
            self.match(TSqlParser.TRUNCATE)
            self.state = 2799
            self.match(TSqlParser.TABLE)
            self.state = 2800
            self.table_name()
            self.state = 2820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 2801
                self.match(TSqlParser.WITH)
                self.state = 2802
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2803
                self.match(TSqlParser.PARTITIONS)
                self.state = 2804
                self.match(TSqlParser.LR_BRACKET)
                self.state = 2814 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2805
                        self.match(TSqlParser.COMMA)


                    self.state = 2812
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                    if la_ == 1:
                        self.state = 2808
                        self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 2:
                        self.state = 2809
                        self.match(TSqlParser.DECIMAL)
                        self.state = 2810
                        self.match(TSqlParser.TO)
                        self.state = 2811
                        self.match(TSqlParser.DECIMAL)
                        pass


                    self.state = 2816 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.DECIMAL or _la==TSqlParser.COMMA):
                        break

                self.state = 2818
                self.match(TSqlParser.RR_BRACKET)
                self.state = 2819
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_column_master_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdContext
            self.key_store_provider_name = None # Token
            self.key_path = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def KEY_STORE_PROVIDER_NAME(self):
            return self.getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def KEY_PATH(self):
            return self.getToken(TSqlParser.KEY_PATH, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_column_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_column_master_key" ):
                listener.enterCreate_column_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_column_master_key" ):
                listener.exitCreate_column_master_key(self)




    def create_column_master_key(self):

        localctx = TSqlParser.Create_column_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_create_column_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2822
            self.match(TSqlParser.CREATE)
            self.state = 2823
            self.match(TSqlParser.COLUMN)
            self.state = 2824
            self.match(TSqlParser.MASTER)
            self.state = 2825
            self.match(TSqlParser.KEY)
            self.state = 2826
            localctx.key_name = self.id()
            self.state = 2827
            self.match(TSqlParser.WITH)
            self.state = 2828
            self.match(TSqlParser.LR_BRACKET)
            self.state = 2829
            self.match(TSqlParser.KEY_STORE_PROVIDER_NAME)
            self.state = 2830
            self.match(TSqlParser.EQUAL)
            self.state = 2831
            localctx.key_store_provider_name = self.match(TSqlParser.STRING)
            self.state = 2832
            self.match(TSqlParser.COMMA)
            self.state = 2833
            self.match(TSqlParser.KEY_PATH)
            self.state = 2834
            self.match(TSqlParser.EQUAL)
            self.state = 2835
            localctx.key_path = self.match(TSqlParser.STRING)
            self.state = 2836
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_credentialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.credential_name = None # IdContext
            self.identity_name = None # Token
            self.secret = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def SECRET(self):
            return self.getToken(TSqlParser.SECRET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_credential

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_credential" ):
                listener.enterAlter_credential(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_credential" ):
                listener.exitAlter_credential(self)




    def alter_credential(self):

        localctx = TSqlParser.Alter_credentialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_alter_credential)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2838
            self.match(TSqlParser.ALTER)
            self.state = 2839
            self.match(TSqlParser.CREDENTIAL)
            self.state = 2840
            localctx.credential_name = self.id()
            self.state = 2841
            self.match(TSqlParser.WITH)
            self.state = 2842
            self.match(TSqlParser.IDENTITY)
            self.state = 2843
            self.match(TSqlParser.EQUAL)
            self.state = 2844
            localctx.identity_name = self.match(TSqlParser.STRING)
            self.state = 2849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 2845
                self.match(TSqlParser.COMMA)
                self.state = 2846
                self.match(TSqlParser.SECRET)
                self.state = 2847
                self.match(TSqlParser.EQUAL)
                self.state = 2848
                localctx.secret = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_credentialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.credential_name = None # IdContext
            self.identity_name = None # Token
            self.secret = None # Token
            self.cryptographic_provider_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def SECRET(self):
            return self.getToken(TSqlParser.SECRET, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_credential

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_credential" ):
                listener.enterCreate_credential(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_credential" ):
                listener.exitCreate_credential(self)




    def create_credential(self):

        localctx = TSqlParser.Create_credentialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_create_credential)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2851
            self.match(TSqlParser.CREATE)
            self.state = 2852
            self.match(TSqlParser.CREDENTIAL)
            self.state = 2853
            localctx.credential_name = self.id()
            self.state = 2854
            self.match(TSqlParser.WITH)
            self.state = 2855
            self.match(TSqlParser.IDENTITY)
            self.state = 2856
            self.match(TSqlParser.EQUAL)
            self.state = 2857
            localctx.identity_name = self.match(TSqlParser.STRING)
            self.state = 2862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 2858
                self.match(TSqlParser.COMMA)
                self.state = 2859
                self.match(TSqlParser.SECRET)
                self.state = 2860
                self.match(TSqlParser.EQUAL)
                self.state = 2861
                localctx.secret = self.match(TSqlParser.STRING)


            self.state = 2868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 2864
                self.match(TSqlParser.FOR)
                self.state = 2865
                self.match(TSqlParser.CRYPTOGRAPHIC)
                self.state = 2866
                self.match(TSqlParser.PROVIDER)
                self.state = 2867
                localctx.cryptographic_provider_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_cryptographic_providerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # IdContext
            self.crypto_provider_ddl_file = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_cryptographic_provider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_cryptographic_provider" ):
                listener.enterAlter_cryptographic_provider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_cryptographic_provider" ):
                listener.exitAlter_cryptographic_provider(self)




    def alter_cryptographic_provider(self):

        localctx = TSqlParser.Alter_cryptographic_providerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_alter_cryptographic_provider)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2870
            self.match(TSqlParser.ALTER)
            self.state = 2871
            self.match(TSqlParser.CRYPTOGRAPHIC)
            self.state = 2872
            self.match(TSqlParser.PROVIDER)
            self.state = 2873
            localctx.provider_name = self.id()
            self.state = 2878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 2874
                self.match(TSqlParser.FROM)
                self.state = 2875
                self.match(TSqlParser.FILE)
                self.state = 2876
                self.match(TSqlParser.EQUAL)
                self.state = 2877
                localctx.crypto_provider_ddl_file = self.match(TSqlParser.STRING)


            self.state = 2881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 2880
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DISABLE or _la==TSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_cryptographic_providerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # IdContext
            self.path_of_DLL = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_cryptographic_provider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_cryptographic_provider" ):
                listener.enterCreate_cryptographic_provider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_cryptographic_provider" ):
                listener.exitCreate_cryptographic_provider(self)




    def create_cryptographic_provider(self):

        localctx = TSqlParser.Create_cryptographic_providerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_create_cryptographic_provider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            self.match(TSqlParser.CREATE)
            self.state = 2884
            self.match(TSqlParser.CRYPTOGRAPHIC)
            self.state = 2885
            self.match(TSqlParser.PROVIDER)
            self.state = 2886
            localctx.provider_name = self.id()
            self.state = 2887
            self.match(TSqlParser.FROM)
            self.state = 2888
            self.match(TSqlParser.FILE)
            self.state = 2889
            self.match(TSqlParser.EQUAL)
            self.state = 2890
            localctx.path_of_DLL = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_event_notificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_notification_name = None # IdContext
            self.queue_name = None # IdContext
            self.event_type_or_group = None # IdContext
            self.broker_service = None # Token
            self.broker_service_specifier_or_current_database = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(TSqlParser.EVENT, 0)

        def NOTIFICATION(self):
            return self.getToken(TSqlParser.NOTIFICATION, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FAN_IN(self):
            return self.getToken(TSqlParser.FAN_IN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_event_notification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_event_notification" ):
                listener.enterCreate_event_notification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_event_notification" ):
                listener.exitCreate_event_notification(self)




    def create_event_notification(self):

        localctx = TSqlParser.Create_event_notificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_create_event_notification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2892
            self.match(TSqlParser.CREATE)
            self.state = 2893
            self.match(TSqlParser.EVENT)
            self.state = 2894
            self.match(TSqlParser.NOTIFICATION)
            self.state = 2895
            localctx.event_notification_name = self.id()
            self.state = 2896
            self.match(TSqlParser.ON)
            self.state = 2901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.SERVER]:
                self.state = 2897
                self.match(TSqlParser.SERVER)
                pass
            elif token in [TSqlParser.DATABASE]:
                self.state = 2898
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [TSqlParser.QUEUE]:
                self.state = 2899
                self.match(TSqlParser.QUEUE)
                self.state = 2900
                localctx.queue_name = self.id()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 2903
                self.match(TSqlParser.WITH)
                self.state = 2904
                self.match(TSqlParser.FAN_IN)


            self.state = 2907
            self.match(TSqlParser.FOR)
            self.state = 2912 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 2908
                    self.match(TSqlParser.COMMA)


                self.state = 2911
                localctx.event_type_or_group = self.id()
                self.state = 2914 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                    break

            self.state = 2916
            self.match(TSqlParser.TO)
            self.state = 2917
            self.match(TSqlParser.SERVICE)
            self.state = 2918
            localctx.broker_service = self.match(TSqlParser.STRING)
            self.state = 2919
            self.match(TSqlParser.COMMA)
            self.state = 2920
            localctx.broker_service_specifier_or_current_database = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_event_sessionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_session_name = None # IdContext
            self.event_module_guid = None # IdContext
            self.event_package_name = None # IdContext
            self.event_name = None # IdContext
            self.event_customizable_attributue = None # IdContext
            self.action_name = None # IdContext
            self.target_name = None # IdContext
            self.target_parameter_name = None # IdContext
            self.max_memory = None # Token
            self.max_dispatch_latency_seconds = None # Token
            self.max_event_size = None # Token

        def EVENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EVENT)
            else:
                return self.getToken(TSqlParser.EVENT, i)

        def SESSION(self):
            return self.getToken(TSqlParser.SESSION, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def DROP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DROP)
            else:
                return self.getToken(TSqlParser.DROP, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def TARGET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TARGET)
            else:
                return self.getToken(TSqlParser.TARGET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def START(self):
            return self.getToken(TSqlParser.START, 0)

        def STOP(self):
            return self.getToken(TSqlParser.STOP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SET)
            else:
                return self.getToken(TSqlParser.SET, i)

        def MAX_MEMORY(self):
            return self.getToken(TSqlParser.MAX_MEMORY, 0)

        def EVENT_RETENTION_MODE(self):
            return self.getToken(TSqlParser.EVENT_RETENTION_MODE, 0)

        def MAX_DISPATCH_LATENCY(self):
            return self.getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0)

        def MAX_EVENT_SIZE(self):
            return self.getToken(TSqlParser.MAX_EVENT_SIZE, 0)

        def MEMORY_PARTITION_MODE(self):
            return self.getToken(TSqlParser.MEMORY_PARTITION_MODE, 0)

        def TRACK_CAUSALITY(self):
            return self.getToken(TSqlParser.TRACK_CAUSALITY, 0)

        def STARTUP_STATE(self):
            return self.getToken(TSqlParser.STARTUP_STATE, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def KB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KB)
            else:
                return self.getToken(TSqlParser.KB, i)

        def MB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MB)
            else:
                return self.getToken(TSqlParser.MB, i)

        def ALLOW_SINGLE_EVENT_LOSS(self):
            return self.getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0)

        def ALLOW_MULTIPLE_EVENT_LOSS(self):
            return self.getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0)

        def NO_EVENT_LOSS(self):
            return self.getToken(TSqlParser.NO_EVENT_LOSS, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def PER_NODE(self):
            return self.getToken(TSqlParser.PER_NODE, 0)

        def PER_CPU(self):
            return self.getToken(TSqlParser.PER_CPU, 0)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def SECONDS(self):
            return self.getToken(TSqlParser.SECONDS, 0)

        def INFINITE(self):
            return self.getToken(TSqlParser.INFINITE, 0)

        def ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ACTION)
            else:
                return self.getToken(TSqlParser.ACTION, i)

        def WHERE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WHERE)
            else:
                return self.getToken(TSqlParser.WHERE, i)

        def event_session_predicate_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Event_session_predicate_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Event_session_predicate_expressionContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_event_session

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_event_session" ):
                listener.enterCreate_or_alter_event_session(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_event_session" ):
                listener.exitCreate_or_alter_event_session(self)




    def create_or_alter_event_session(self):

        localctx = TSqlParser.Create_or_alter_event_sessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_create_or_alter_event_session)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2922
            _la = self._input.LA(1)
            if not(_la==TSqlParser.ALTER or _la==TSqlParser.CREATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2923
            self.match(TSqlParser.EVENT)
            self.state = 2924
            self.match(TSqlParser.SESSION)
            self.state = 2925
            localctx.event_session_name = self.id()
            self.state = 2926
            self.match(TSqlParser.ON)
            self.state = 2927
            self.match(TSqlParser.SERVER)
            self.state = 2995
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2928
                        self.match(TSqlParser.COMMA)


                    self.state = 2931
                    self.match(TSqlParser.ADD)
                    self.state = 2932
                    self.match(TSqlParser.EVENT)

                    self.state = 2936
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                    if la_ == 1:
                        self.state = 2933
                        localctx.event_module_guid = self.id()
                        self.state = 2934
                        self.match(TSqlParser.DOT)


                    self.state = 2938
                    localctx.event_package_name = self.id()
                    self.state = 2939
                    self.match(TSqlParser.DOT)
                    self.state = 2940
                    localctx.event_name = self.id()
                    self.state = 2990
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2942
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 2956
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.SET:
                                self.state = 2943
                                self.match(TSqlParser.SET)
                                self.state = 2953
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 2945
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)
                                        if _la==TSqlParser.COMMA:
                                            self.state = 2944
                                            self.match(TSqlParser.COMMA)


                                        self.state = 2947
                                        localctx.event_customizable_attributue = self.id()
                                        self.state = 2948
                                        self.match(TSqlParser.EQUAL)
                                        self.state = 2949
                                        _la = self._input.LA(1)
                                        if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 2955
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,234,self._ctx)



                            self.state = 2978 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 2958
                                self.match(TSqlParser.ACTION)
                                self.state = 2959
                                self.match(TSqlParser.LR_BRACKET)
                                self.state = 2972 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 2961
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==TSqlParser.COMMA:
                                        self.state = 2960
                                        self.match(TSqlParser.COMMA)


                                    self.state = 2966
                                    self._errHandler.sync(self)
                                    la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                                    if la_ == 1:
                                        self.state = 2963
                                        localctx.event_module_guid = self.id()
                                        self.state = 2964
                                        self.match(TSqlParser.DOT)


                                    self.state = 2968
                                    localctx.event_package_name = self.id()
                                    self.state = 2969
                                    self.match(TSqlParser.DOT)
                                    self.state = 2970
                                    localctx.action_name = self.id()
                                    self.state = 2974 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                                        break

                                self.state = 2976
                                self.match(TSqlParser.RR_BRACKET)
                                self.state = 2980 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==TSqlParser.ACTION):
                                    break

                            self.state = 2984
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.WHERE:
                                self.state = 2982
                                self.match(TSqlParser.WHERE)
                                self.state = 2983
                                self.event_session_predicate_expression()


                            self.state = 2986
                            self.match(TSqlParser.RR_BRACKET) 
                        self.state = 2992
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
             
                self.state = 2997
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

            self.state = 3014
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 2998
                        self.match(TSqlParser.COMMA)


                    self.state = 3001
                    self.match(TSqlParser.DROP)
                    self.state = 3002
                    self.match(TSqlParser.EVENT)
                    self.state = 3006
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                    if la_ == 1:
                        self.state = 3003
                        localctx.event_module_guid = self.id()
                        self.state = 3004
                        self.match(TSqlParser.DOT)


                    self.state = 3008
                    localctx.event_package_name = self.id()
                    self.state = 3009
                    self.match(TSqlParser.DOT)
                    self.state = 3010
                    localctx.event_name = self.id() 
                self.state = 3016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

            self.state = 3058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.ADD:
                self.state = 3017
                self.match(TSqlParser.ADD)
                self.state = 3018
                self.match(TSqlParser.TARGET)
                self.state = 3022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 3019
                    localctx.event_module_guid = self.id()
                    self.state = 3020
                    self.match(TSqlParser.DOT)


                self.state = 3024
                localctx.event_package_name = self.id()
                self.state = 3025
                self.match(TSqlParser.DOT)
                self.state = 3026
                localctx.target_name = self.id()
                self.state = 3053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3028
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 3029
                        self.match(TSqlParser.SET)
                        self.state = 3045 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 3031
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 3030
                                self.match(TSqlParser.COMMA)


                            self.state = 3033
                            localctx.target_parameter_name = self.id()
                            self.state = 3034
                            self.match(TSqlParser.EQUAL)
                            self.state = 3043
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.DECIMAL, TSqlParser.LR_BRACKET]:
                                self.state = 3036
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.LR_BRACKET:
                                    self.state = 3035
                                    self.match(TSqlParser.LR_BRACKET)


                                self.state = 3038
                                self.match(TSqlParser.DECIMAL)
                                self.state = 3040
                                self._errHandler.sync(self)
                                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                                if la_ == 1:
                                    self.state = 3039
                                    self.match(TSqlParser.RR_BRACKET)


                                pass
                            elif token in [TSqlParser.STRING]:
                                self.state = 3042
                                self.match(TSqlParser.STRING)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 3047 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                                break

                        self.state = 3049
                        self.match(TSqlParser.RR_BRACKET) 
                    self.state = 3055
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                self.state = 3060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3061
                    self.match(TSqlParser.DROP)
                    self.state = 3062
                    self.match(TSqlParser.TARGET)
                    self.state = 3066
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                    if la_ == 1:
                        self.state = 3063
                        localctx.event_module_guid = self.id()
                        self.state = 3064
                        self.match(TSqlParser.DOT)


                    self.state = 3068
                    localctx.event_package_name = self.id()
                    self.state = 3069
                    self.match(TSqlParser.DOT)
                    self.state = 3070
                    localctx.target_name = self.id() 
                self.state = 3076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

            self.state = 3142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 3077
                self.match(TSqlParser.WITH)
                self.state = 3078
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 3080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3079
                        self.match(TSqlParser.COMMA)


                    self.state = 3082
                    self.match(TSqlParser.MAX_MEMORY)
                    self.state = 3083
                    self.match(TSqlParser.EQUAL)
                    self.state = 3084
                    localctx.max_memory = self.match(TSqlParser.DECIMAL)
                    self.state = 3085
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.KB or _la==TSqlParser.MB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 3089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3088
                        self.match(TSqlParser.COMMA)


                    self.state = 3091
                    self.match(TSqlParser.EVENT_RETENTION_MODE)
                    self.state = 3092
                    self.match(TSqlParser.EQUAL)
                    self.state = 3093
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS or _la==TSqlParser.ALLOW_SINGLE_EVENT_LOSS or _la==TSqlParser.NO_EVENT_LOSS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 3097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3096
                        self.match(TSqlParser.COMMA)


                    self.state = 3099
                    self.match(TSqlParser.MAX_DISPATCH_LATENCY)
                    self.state = 3100
                    self.match(TSqlParser.EQUAL)
                    self.state = 3104
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.DECIMAL]:
                        self.state = 3101
                        localctx.max_dispatch_latency_seconds = self.match(TSqlParser.DECIMAL)
                        self.state = 3102
                        self.match(TSqlParser.SECONDS)
                        pass
                    elif token in [TSqlParser.INFINITE]:
                        self.state = 3103
                        self.match(TSqlParser.INFINITE)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 3115
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 3109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3108
                        self.match(TSqlParser.COMMA)


                    self.state = 3111
                    self.match(TSqlParser.MAX_EVENT_SIZE)
                    self.state = 3112
                    self.match(TSqlParser.EQUAL)
                    self.state = 3113
                    localctx.max_event_size = self.match(TSqlParser.DECIMAL)
                    self.state = 3114
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.KB or _la==TSqlParser.MB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3123
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 3118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3117
                        self.match(TSqlParser.COMMA)


                    self.state = 3120
                    self.match(TSqlParser.MEMORY_PARTITION_MODE)
                    self.state = 3121
                    self.match(TSqlParser.EQUAL)
                    self.state = 3122
                    _la = self._input.LA(1)
                    if not(((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (TSqlParser.NONE - 211)) | (1 << (TSqlParser.PER_CPU - 211)) | (1 << (TSqlParser.PER_NODE - 211)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 3126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3125
                        self.match(TSqlParser.COMMA)


                    self.state = 3128
                    self.match(TSqlParser.TRACK_CAUSALITY)
                    self.state = 3129
                    self.match(TSqlParser.EQUAL)
                    self.state = 3130
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.STARTUP_STATE or _la==TSqlParser.COMMA:
                    self.state = 3134
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3133
                        self.match(TSqlParser.COMMA)


                    self.state = 3136
                    self.match(TSqlParser.STARTUP_STATE)
                    self.state = 3137
                    self.match(TSqlParser.EQUAL)
                    self.state = 3138
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3141
                self.match(TSqlParser.RR_BRACKET)


            self.state = 3147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 3144
                self.match(TSqlParser.STATE)
                self.state = 3145
                self.match(TSqlParser.EQUAL)
                self.state = 3146
                _la = self._input.LA(1)
                if not(_la==TSqlParser.START or _la==TSqlParser.STOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_session_predicate_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Event_session_predicate_factorContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Event_session_predicate_factorContext,i)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def event_session_predicate_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Event_session_predicate_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Event_session_predicate_expressionContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOT)
            else:
                return self.getToken(TSqlParser.NOT, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AND)
            else:
                return self.getToken(TSqlParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OR)
            else:
                return self.getToken(TSqlParser.OR, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_expression" ):
                listener.enterEvent_session_predicate_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_expression" ):
                listener.exitEvent_session_predicate_expression(self)




    def event_session_predicate_expression(self):

        localctx = TSqlParser.Event_session_predicate_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_event_session_predicate_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3165 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3149
                    self.match(TSqlParser.COMMA)


                self.state = 3153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AND or _la==TSqlParser.OR:
                    self.state = 3152
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.AND or _la==TSqlParser.OR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 3155
                    self.match(TSqlParser.NOT)


                self.state = 3163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                if la_ == 1:
                    self.state = 3158
                    self.event_session_predicate_factor()
                    pass

                elif la_ == 2:
                    self.state = 3159
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 3160
                    self.event_session_predicate_expression()
                    self.state = 3161
                    self.match(TSqlParser.RR_BRACKET)
                    pass


                self.state = 3167 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.AND or _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)) | (1 << (TSqlParser.NOT - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.OR - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.LR_BRACKET - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_session_predicate_leaf(self):
            return self.getTypedRuleContext(TSqlParser.Event_session_predicate_leafContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def event_session_predicate_expression(self):
            return self.getTypedRuleContext(TSqlParser.Event_session_predicate_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_factor" ):
                listener.enterEvent_session_predicate_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_factor" ):
                listener.exitEvent_session_predicate_factor(self)




    def event_session_predicate_factor(self):

        localctx = TSqlParser.Event_session_predicate_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_event_session_predicate_factor)
        try:
            self.state = 3174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3169
                self.event_session_predicate_leaf()
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3170
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3171
                self.event_session_predicate_expression()
                self.state = 3172
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_session_predicate_leafContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event_field_name = None # IdContext
            self.event_module_guid = None # IdContext
            self.event_package_name = None # IdContext
            self.predicate_source_name = None # IdContext
            self.predicate_compare_name = None # IdContext

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_event_session_predicate_leaf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_session_predicate_leaf" ):
                listener.enterEvent_session_predicate_leaf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_session_predicate_leaf" ):
                listener.exitEvent_session_predicate_leaf(self)




    def event_session_predicate_leaf(self):

        localctx = TSqlParser.Event_session_predicate_leafContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_event_session_predicate_leaf)
        self._la = 0 # Token type
        try:
            self.state = 3232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 3176
                    localctx.event_field_name = self.id()
                    pass

                elif la_ == 2:
                    self.state = 3187
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                    if la_ == 1:
                        self.state = 3177
                        localctx.event_field_name = self.id()
                        pass

                    elif la_ == 2:
                        self.state = 3181
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                        if la_ == 1:
                            self.state = 3178
                            localctx.event_module_guid = self.id()
                            self.state = 3179
                            self.match(TSqlParser.DOT)


                        self.state = 3183
                        localctx.event_package_name = self.id()
                        self.state = 3184
                        self.match(TSqlParser.DOT)
                        self.state = 3185
                        localctx.predicate_source_name = self.id()
                        pass


                    self.state = 3200
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                    if la_ == 1:
                        self.state = 3189
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 2:
                        self.state = 3190
                        self.match(TSqlParser.LESS)
                        self.state = 3191
                        self.match(TSqlParser.GREATER)
                        pass

                    elif la_ == 3:
                        self.state = 3192
                        self.match(TSqlParser.EXCLAMATION)
                        self.state = 3193
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 4:
                        self.state = 3194
                        self.match(TSqlParser.GREATER)
                        pass

                    elif la_ == 5:
                        self.state = 3195
                        self.match(TSqlParser.GREATER)
                        self.state = 3196
                        self.match(TSqlParser.EQUAL)
                        pass

                    elif la_ == 6:
                        self.state = 3197
                        self.match(TSqlParser.LESS)
                        pass

                    elif la_ == 7:
                        self.state = 3198
                        self.match(TSqlParser.LESS)
                        self.state = 3199
                        self.match(TSqlParser.EQUAL)
                        pass


                    self.state = 3202
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 3206
                    localctx.event_module_guid = self.id()
                    self.state = 3207
                    self.match(TSqlParser.DOT)


                self.state = 3211
                localctx.event_package_name = self.id()
                self.state = 3212
                self.match(TSqlParser.DOT)
                self.state = 3213
                localctx.predicate_compare_name = self.id()
                self.state = 3214
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 3215
                    localctx.event_field_name = self.id()
                    pass

                elif la_ == 2:
                    self.state = 3219
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
                    if la_ == 1:
                        self.state = 3216
                        localctx.event_module_guid = self.id()
                        self.state = 3217
                        self.match(TSqlParser.DOT)


                    self.state = 3221
                    localctx.event_package_name = self.id()
                    self.state = 3222
                    self.match(TSqlParser.DOT)
                    self.state = 3223
                    localctx.predicate_source_name = self.id()
                    self.state = 3225
                    self.match(TSqlParser.COMMA)
                    self.state = 3226
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                self.state = 3230
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_data_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data_source_name = None # IdContext
            self.location = None # Token
            self.resource_manager_location = None # Token
            self.credential_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def DATA(self):
            return self.getToken(TSqlParser.DATA, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def LOCATION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCATION)
            else:
                return self.getToken(TSqlParser.LOCATION, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RESOURCE_MANAGER_LOCATION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESOURCE_MANAGER_LOCATION)
            else:
                return self.getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i)

        def CREDENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CREDENTIAL)
            else:
                return self.getToken(TSqlParser.CREDENTIAL, i)

        def QUOTED_URL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.QUOTED_URL)
            else:
                return self.getToken(TSqlParser.QUOTED_URL, i)

        def QUOTED_HOST_AND_PORT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.QUOTED_HOST_AND_PORT)
            else:
                return self.getToken(TSqlParser.QUOTED_HOST_AND_PORT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def BLOB_STORAGE(self):
            return self.getToken(TSqlParser.BLOB_STORAGE, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_external_data_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_data_source" ):
                listener.enterAlter_external_data_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_data_source" ):
                listener.exitAlter_external_data_source(self)




    def alter_external_data_source(self):

        localctx = TSqlParser.Alter_external_data_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_alter_external_data_source)
        self._la = 0 # Token type
        try:
            self.state = 3281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3234
                self.match(TSqlParser.ALTER)
                self.state = 3235
                self.match(TSqlParser.EXTERNAL)
                self.state = 3236
                self.match(TSqlParser.DATA)
                self.state = 3237
                self.match(TSqlParser.SOURCE)
                self.state = 3238
                localctx.data_source_name = self.id()
                self.state = 3239
                self.match(TSqlParser.SET)
                self.state = 3255 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3255
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.LOCATION]:
                            self.state = 3240
                            self.match(TSqlParser.LOCATION)
                            self.state = 3241
                            self.match(TSqlParser.EQUAL)
                            self.state = 3242
                            localctx.location = self._input.LT(1)
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.QUOTED_URL or _la==TSqlParser.QUOTED_HOST_AND_PORT):
                                localctx.location = self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 3244
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 3243
                                self.match(TSqlParser.COMMA)


                            pass
                        elif token in [TSqlParser.RESOURCE_MANAGER_LOCATION]:
                            self.state = 3246
                            self.match(TSqlParser.RESOURCE_MANAGER_LOCATION)
                            self.state = 3247
                            self.match(TSqlParser.EQUAL)
                            self.state = 3248
                            localctx.resource_manager_location = self._input.LT(1)
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.QUOTED_URL or _la==TSqlParser.QUOTED_HOST_AND_PORT):
                                localctx.resource_manager_location = self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 3250
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 3249
                                self.match(TSqlParser.COMMA)


                            pass
                        elif token in [TSqlParser.CREDENTIAL]:
                            self.state = 3252
                            self.match(TSqlParser.CREDENTIAL)
                            self.state = 3253
                            self.match(TSqlParser.EQUAL)
                            self.state = 3254
                            localctx.credential_name = self.id()
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 3257 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3259
                self.match(TSqlParser.ALTER)
                self.state = 3260
                self.match(TSqlParser.EXTERNAL)
                self.state = 3261
                self.match(TSqlParser.DATA)
                self.state = 3262
                self.match(TSqlParser.SOURCE)
                self.state = 3263
                localctx.data_source_name = self.id()
                self.state = 3264
                self.match(TSqlParser.WITH)
                self.state = 3265
                self.match(TSqlParser.LR_BRACKET)
                self.state = 3266
                self.match(TSqlParser.TYPE)
                self.state = 3267
                self.match(TSqlParser.EQUAL)
                self.state = 3268
                self.match(TSqlParser.BLOB_STORAGE)
                self.state = 3269
                self.match(TSqlParser.COMMA)
                self.state = 3270
                self.match(TSqlParser.LOCATION)
                self.state = 3271
                self.match(TSqlParser.EQUAL)
                self.state = 3272
                localctx.location = self.match(TSqlParser.STRING)
                self.state = 3277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3273
                    self.match(TSqlParser.COMMA)
                    self.state = 3274
                    self.match(TSqlParser.CREDENTIAL)
                    self.state = 3275
                    self.match(TSqlParser.EQUAL)
                    self.state = 3276
                    localctx.credential_name = self.id()


                self.state = 3279
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_libraryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library_name = None # IdContext
            self.owner_name = None # IdContext
            self.client_library = None # Token
            self.external_data_source_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def PLATFORM(self):
            return self.getToken(TSqlParser.PLATFORM, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LANGUAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LANGUAGE)
            else:
                return self.getToken(TSqlParser.LANGUAGE, i)

        def DATA_SOURCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DATA_SOURCE)
            else:
                return self.getToken(TSqlParser.DATA_SOURCE, i)

        def R(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.R)
            else:
                return self.getToken(TSqlParser.R, i)

        def PYTHON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PYTHON)
            else:
                return self.getToken(TSqlParser.PYTHON, i)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def LINUX(self):
            return self.getToken(TSqlParser.LINUX, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_external_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_library" ):
                listener.enterAlter_external_library(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_library" ):
                listener.exitAlter_external_library(self)




    def alter_external_library(self):

        localctx = TSqlParser.Alter_external_libraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_alter_external_library)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3283
            self.match(TSqlParser.ALTER)
            self.state = 3284
            self.match(TSqlParser.EXTERNAL)
            self.state = 3285
            self.match(TSqlParser.LIBRARY)
            self.state = 3286
            localctx.library_name = self.id()
            self.state = 3289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 3287
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 3288
                localctx.owner_name = self.id()


            self.state = 3291
            _la = self._input.LA(1)
            if not(_la==TSqlParser.ADD or _la==TSqlParser.SET):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()

            self.state = 3292
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3293
            self.match(TSqlParser.CONTENT)
            self.state = 3294
            self.match(TSqlParser.EQUAL)
            self.state = 3298
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.STRING]:
                self.state = 3295
                localctx.client_library = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.BINARY]:
                self.state = 3296
                self.match(TSqlParser.BINARY)
                pass
            elif token in [TSqlParser.NONE]:
                self.state = 3297
                self.match(TSqlParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3300
            self.match(TSqlParser.COMMA)
            self.state = 3301
            self.match(TSqlParser.PLATFORM)
            self.state = 3302
            self.match(TSqlParser.EQUAL)
            self.state = 3304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LINUX or _la==TSqlParser.WINDOWS:
                self.state = 3303
                _la = self._input.LA(1)
                if not(_la==TSqlParser.LINUX or _la==TSqlParser.WINDOWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3306
            self.match(TSqlParser.RR_BRACKET)
            self.state = 3308
            self.match(TSqlParser.WITH)
            self.state = 3318 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3318
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.LANGUAGE, TSqlParser.COMMA]:
                    self.state = 3310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3309
                        self.match(TSqlParser.COMMA)


                    self.state = 3312
                    self.match(TSqlParser.LANGUAGE)
                    self.state = 3313
                    self.match(TSqlParser.EQUAL)
                    self.state = 3314
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.PYTHON or _la==TSqlParser.R):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.DATA_SOURCE]:
                    self.state = 3315
                    self.match(TSqlParser.DATA_SOURCE)
                    self.state = 3316
                    self.match(TSqlParser.EQUAL)
                    self.state = 3317
                    localctx.external_data_source_name = self.id()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3320 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.DATA_SOURCE or _la==TSqlParser.LANGUAGE or _la==TSqlParser.COMMA):
                    break

            self.state = 3322
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_external_libraryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library_name = None # IdContext
            self.owner_name = None # IdContext
            self.client_library = None # Token
            self.external_data_source_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def LIBRARY(self):
            return self.getToken(TSqlParser.LIBRARY, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def PLATFORM(self):
            return self.getToken(TSqlParser.PLATFORM, 0)

        def LANGUAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LANGUAGE)
            else:
                return self.getToken(TSqlParser.LANGUAGE, i)

        def DATA_SOURCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DATA_SOURCE)
            else:
                return self.getToken(TSqlParser.DATA_SOURCE, i)

        def R(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.R)
            else:
                return self.getToken(TSqlParser.R, i)

        def PYTHON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PYTHON)
            else:
                return self.getToken(TSqlParser.PYTHON, i)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def LINUX(self):
            return self.getToken(TSqlParser.LINUX, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_external_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_external_library" ):
                listener.enterCreate_external_library(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_external_library" ):
                listener.exitCreate_external_library(self)




    def create_external_library(self):

        localctx = TSqlParser.Create_external_libraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_create_external_library)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3324
            self.match(TSqlParser.CREATE)
            self.state = 3325
            self.match(TSqlParser.EXTERNAL)
            self.state = 3326
            self.match(TSqlParser.LIBRARY)
            self.state = 3327
            localctx.library_name = self.id()
            self.state = 3330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 3328
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 3329
                localctx.owner_name = self.id()


            self.state = 3332
            self.match(TSqlParser.FROM)

            self.state = 3334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 3333
                self.match(TSqlParser.COMMA)


            self.state = 3337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LR_BRACKET:
                self.state = 3336
                self.match(TSqlParser.LR_BRACKET)


            self.state = 3341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONTENT:
                self.state = 3339
                self.match(TSqlParser.CONTENT)
                self.state = 3340
                self.match(TSqlParser.EQUAL)


            self.state = 3346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.STRING]:
                self.state = 3343
                localctx.client_library = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.BINARY]:
                self.state = 3344
                self.match(TSqlParser.BINARY)
                pass
            elif token in [TSqlParser.NONE]:
                self.state = 3345
                self.match(TSqlParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 3348
                self.match(TSqlParser.COMMA)
                self.state = 3349
                self.match(TSqlParser.PLATFORM)
                self.state = 3350
                self.match(TSqlParser.EQUAL)
                self.state = 3352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LINUX or _la==TSqlParser.WINDOWS:
                    self.state = 3351
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LINUX or _la==TSqlParser.WINDOWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3354
                self.match(TSqlParser.RR_BRACKET)


            self.state = 3372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 3357
                self.match(TSqlParser.WITH)
                self.state = 3367 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3367
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.LANGUAGE, TSqlParser.COMMA]:
                        self.state = 3359
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 3358
                            self.match(TSqlParser.COMMA)


                        self.state = 3361
                        self.match(TSqlParser.LANGUAGE)
                        self.state = 3362
                        self.match(TSqlParser.EQUAL)
                        self.state = 3363
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.PYTHON or _la==TSqlParser.R):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [TSqlParser.DATA_SOURCE]:
                        self.state = 3364
                        self.match(TSqlParser.DATA_SOURCE)
                        self.state = 3365
                        self.match(TSqlParser.EQUAL)
                        self.state = 3366
                        localctx.external_data_source_name = self.id()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3369 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.DATA_SOURCE or _la==TSqlParser.LANGUAGE or _la==TSqlParser.COMMA):
                        break

                self.state = 3371
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_resource_poolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # IdContext
            self.max_cpu_percent = None # Token
            self.max_memory_percent = None # Token
            self.max_processes = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def DEFAULT_DOUBLE_QUOTE(self):
            return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MAX_PROCESSES(self):
            return self.getToken(TSqlParser.MAX_PROCESSES, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_external_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_resource_pool" ):
                listener.enterAlter_external_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_resource_pool" ):
                listener.exitAlter_external_resource_pool(self)




    def alter_external_resource_pool(self):

        localctx = TSqlParser.Alter_external_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_alter_external_resource_pool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3374
            self.match(TSqlParser.ALTER)
            self.state = 3375
            self.match(TSqlParser.EXTERNAL)
            self.state = 3376
            self.match(TSqlParser.RESOURCE)
            self.state = 3377
            self.match(TSqlParser.POOL)
            self.state = 3380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 3378
                localctx.pool_name = self.id()
                pass

            elif la_ == 2:
                self.state = 3379
                self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)
                pass


            self.state = 3382
            self.match(TSqlParser.WITH)
            self.state = 3383
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3384
            self.match(TSqlParser.MAX_CPU_PERCENT)
            self.state = 3385
            self.match(TSqlParser.EQUAL)
            self.state = 3386
            localctx.max_cpu_percent = self.match(TSqlParser.DECIMAL)
            self.state = 3424
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.AFFINITY, TSqlParser.COMMA]:
                self.state = 3388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3387
                    self.match(TSqlParser.COMMA)


                self.state = 3390
                self.match(TSqlParser.AFFINITY)
                self.state = 3391
                self.match(TSqlParser.CPU)
                self.state = 3392
                self.match(TSqlParser.EQUAL)
                self.state = 3406
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.AUTO]:
                    self.state = 3393
                    self.match(TSqlParser.AUTO)
                    pass
                elif token in [TSqlParser.DECIMAL, TSqlParser.COMMA]:
                    self.state = 3402 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3402
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                            if la_ == 1:
                                self.state = 3395
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 3394
                                    self.match(TSqlParser.COMMA)


                                self.state = 3397
                                self.match(TSqlParser.DECIMAL)
                                self.state = 3398
                                self.match(TSqlParser.TO)
                                self.state = 3399
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 3400
                                self.match(TSqlParser.COMMA)
                                self.state = 3401
                                self.match(TSqlParser.DECIMAL)
                                pass



                        else:
                            raise NoViableAltException(self)
                        self.state = 3404 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.NUMANODE]:
                self.state = 3408
                self.match(TSqlParser.NUMANODE)
                self.state = 3409
                self.match(TSqlParser.EQUAL)
                self.state = 3420 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3420
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                        if la_ == 1:
                            self.state = 3411
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 3410
                                self.match(TSqlParser.COMMA)


                            self.state = 3413
                            self.match(TSqlParser.DECIMAL)
                            self.state = 3414
                            self.match(TSqlParser.TO)
                            self.state = 3415
                            self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 3417
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 3416
                                self.match(TSqlParser.COMMA)


                            self.state = 3419
                            self.match(TSqlParser.DECIMAL)
                            pass



                    else:
                        raise NoViableAltException(self)
                    self.state = 3422 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.state = 3427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3426
                    self.match(TSqlParser.COMMA)


                self.state = 3429
                self.match(TSqlParser.MAX_MEMORY_PERCENT)
                self.state = 3430
                self.match(TSqlParser.EQUAL)
                self.state = 3431
                localctx.max_memory_percent = self.match(TSqlParser.DECIMAL)


            self.state = 3440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.MAX_PROCESSES or _la==TSqlParser.COMMA:
                self.state = 3435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3434
                    self.match(TSqlParser.COMMA)


                self.state = 3437
                self.match(TSqlParser.MAX_PROCESSES)
                self.state = 3438
                self.match(TSqlParser.EQUAL)
                self.state = 3439
                localctx.max_processes = self.match(TSqlParser.DECIMAL)


            self.state = 3442
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_external_resource_poolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # IdContext
            self.max_cpu_percent = None # Token
            self.max_memory_percent = None # Token
            self.max_processes = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MAX_PROCESSES(self):
            return self.getToken(TSqlParser.MAX_PROCESSES, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_external_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_external_resource_pool" ):
                listener.enterCreate_external_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_external_resource_pool" ):
                listener.exitCreate_external_resource_pool(self)




    def create_external_resource_pool(self):

        localctx = TSqlParser.Create_external_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_create_external_resource_pool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3444
            self.match(TSqlParser.CREATE)
            self.state = 3445
            self.match(TSqlParser.EXTERNAL)
            self.state = 3446
            self.match(TSqlParser.RESOURCE)
            self.state = 3447
            self.match(TSqlParser.POOL)
            self.state = 3448
            localctx.pool_name = self.id()
            self.state = 3449
            self.match(TSqlParser.WITH)
            self.state = 3450
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3451
            self.match(TSqlParser.MAX_CPU_PERCENT)
            self.state = 3452
            self.match(TSqlParser.EQUAL)
            self.state = 3453
            localctx.max_cpu_percent = self.match(TSqlParser.DECIMAL)
            self.state = 3491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.AFFINITY, TSqlParser.COMMA]:
                self.state = 3455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3454
                    self.match(TSqlParser.COMMA)


                self.state = 3457
                self.match(TSqlParser.AFFINITY)
                self.state = 3458
                self.match(TSqlParser.CPU)
                self.state = 3459
                self.match(TSqlParser.EQUAL)
                self.state = 3473
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.AUTO]:
                    self.state = 3460
                    self.match(TSqlParser.AUTO)
                    pass
                elif token in [TSqlParser.DECIMAL, TSqlParser.COMMA]:
                    self.state = 3469 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3469
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                            if la_ == 1:
                                self.state = 3462
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 3461
                                    self.match(TSqlParser.COMMA)


                                self.state = 3464
                                self.match(TSqlParser.DECIMAL)
                                self.state = 3465
                                self.match(TSqlParser.TO)
                                self.state = 3466
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 3467
                                self.match(TSqlParser.COMMA)
                                self.state = 3468
                                self.match(TSqlParser.DECIMAL)
                                pass



                        else:
                            raise NoViableAltException(self)
                        self.state = 3471 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,328,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.NUMANODE]:
                self.state = 3475
                self.match(TSqlParser.NUMANODE)
                self.state = 3476
                self.match(TSqlParser.EQUAL)
                self.state = 3487 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3487
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                        if la_ == 1:
                            self.state = 3478
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 3477
                                self.match(TSqlParser.COMMA)


                            self.state = 3480
                            self.match(TSqlParser.DECIMAL)
                            self.state = 3481
                            self.match(TSqlParser.TO)
                            self.state = 3482
                            self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 3484
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 3483
                                self.match(TSqlParser.COMMA)


                            self.state = 3486
                            self.match(TSqlParser.DECIMAL)
                            pass



                    else:
                        raise NoViableAltException(self)
                    self.state = 3489 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 3494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3493
                    self.match(TSqlParser.COMMA)


                self.state = 3496
                self.match(TSqlParser.MAX_MEMORY_PERCENT)
                self.state = 3497
                self.match(TSqlParser.EQUAL)
                self.state = 3498
                localctx.max_memory_percent = self.match(TSqlParser.DECIMAL)


            self.state = 3507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.MAX_PROCESSES or _la==TSqlParser.COMMA:
                self.state = 3502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 3501
                    self.match(TSqlParser.COMMA)


                self.state = 3504
                self.match(TSqlParser.MAX_PROCESSES)
                self.state = 3505
                self.match(TSqlParser.EQUAL)
                self.state = 3506
                localctx.max_processes = self.match(TSqlParser.DECIMAL)


            self.state = 3509
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_fulltext_catalogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ACCENT_SENSITIVITY(self):
            return self.getToken(TSqlParser.ACCENT_SENSITIVITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_fulltext_catalog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_fulltext_catalog" ):
                listener.enterAlter_fulltext_catalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_fulltext_catalog" ):
                listener.exitAlter_fulltext_catalog(self)




    def alter_fulltext_catalog(self):

        localctx = TSqlParser.Alter_fulltext_catalogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_alter_fulltext_catalog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3511
            self.match(TSqlParser.ALTER)
            self.state = 3512
            self.match(TSqlParser.FULLTEXT)
            self.state = 3513
            self.match(TSqlParser.CATALOG)
            self.state = 3514
            localctx.catalog_name = self.id()
            self.state = 3525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.REBUILD]:
                self.state = 3515
                self.match(TSqlParser.REBUILD)
                self.state = 3520
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 3516
                    self.match(TSqlParser.WITH)
                    self.state = 3517
                    self.match(TSqlParser.ACCENT_SENSITIVITY)
                    self.state = 3518
                    self.match(TSqlParser.EQUAL)
                    self.state = 3519
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [TSqlParser.REORGANIZE]:
                self.state = 3522
                self.match(TSqlParser.REORGANIZE)
                pass
            elif token in [TSqlParser.AS]:
                self.state = 3523
                self.match(TSqlParser.AS)
                self.state = 3524
                self.match(TSqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_fulltext_catalogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catalog_name = None # IdContext
            self.filegroup = None # IdContext
            self.rootpath = None # Token
            self.owner_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ACCENT_SENSITIVITY(self):
            return self.getToken(TSqlParser.ACCENT_SENSITIVITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_fulltext_catalog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_fulltext_catalog" ):
                listener.enterCreate_fulltext_catalog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_fulltext_catalog" ):
                listener.exitCreate_fulltext_catalog(self)




    def create_fulltext_catalog(self):

        localctx = TSqlParser.Create_fulltext_catalogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_create_fulltext_catalog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3527
            self.match(TSqlParser.CREATE)
            self.state = 3528
            self.match(TSqlParser.FULLTEXT)
            self.state = 3529
            self.match(TSqlParser.CATALOG)
            self.state = 3530
            localctx.catalog_name = self.id()
            self.state = 3534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ON:
                self.state = 3531
                self.match(TSqlParser.ON)
                self.state = 3532
                self.match(TSqlParser.FILEGROUP)
                self.state = 3533
                localctx.filegroup = self.id()


            self.state = 3539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IN:
                self.state = 3536
                self.match(TSqlParser.IN)
                self.state = 3537
                self.match(TSqlParser.PATH)
                self.state = 3538
                localctx.rootpath = self.match(TSqlParser.STRING)


            self.state = 3545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 3541
                self.match(TSqlParser.WITH)
                self.state = 3542
                self.match(TSqlParser.ACCENT_SENSITIVITY)
                self.state = 3543
                self.match(TSqlParser.EQUAL)
                self.state = 3544
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 3547
                self.match(TSqlParser.AS)
                self.state = 3548
                self.match(TSqlParser.DEFAULT)


            self.state = 3553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 3551
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 3552
                localctx.owner_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_fulltext_stoplistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stoplist_name = None # IdContext
            self.stopword = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def LANGUAGE(self):
            return self.getToken(TSqlParser.LANGUAGE, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_fulltext_stoplist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_fulltext_stoplist" ):
                listener.enterAlter_fulltext_stoplist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_fulltext_stoplist" ):
                listener.exitAlter_fulltext_stoplist(self)




    def alter_fulltext_stoplist(self):

        localctx = TSqlParser.Alter_fulltext_stoplistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_alter_fulltext_stoplist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3555
            self.match(TSqlParser.ALTER)
            self.state = 3556
            self.match(TSqlParser.FULLTEXT)
            self.state = 3557
            self.match(TSqlParser.STOPLIST)
            self.state = 3558
            localctx.stoplist_name = self.id()
            self.state = 3572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ADD]:
                self.state = 3559
                self.match(TSqlParser.ADD)
                self.state = 3560
                localctx.stopword = self.match(TSqlParser.STRING)
                self.state = 3561
                self.match(TSqlParser.LANGUAGE)
                self.state = 3562
                _la = self._input.LA(1)
                if not(((((_la - 793)) & ~0x3f) == 0 and ((1 << (_la - 793)) & ((1 << (TSqlParser.DECIMAL - 793)) | (1 << (TSqlParser.STRING - 793)) | (1 << (TSqlParser.BINARY - 793)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.DROP]:
                self.state = 3563
                self.match(TSqlParser.DROP)
                self.state = 3570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
                if la_ == 1:
                    self.state = 3564
                    localctx.stopword = self.match(TSqlParser.STRING)
                    self.state = 3565
                    self.match(TSqlParser.LANGUAGE)
                    self.state = 3566
                    _la = self._input.LA(1)
                    if not(((((_la - 793)) & ~0x3f) == 0 and ((1 << (_la - 793)) & ((1 << (TSqlParser.DECIMAL - 793)) | (1 << (TSqlParser.STRING - 793)) | (1 << (TSqlParser.BINARY - 793)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 3567
                    self.match(TSqlParser.ALL)
                    self.state = 3568
                    _la = self._input.LA(1)
                    if not(((((_la - 793)) & ~0x3f) == 0 and ((1 << (_la - 793)) & ((1 << (TSqlParser.DECIMAL - 793)) | (1 << (TSqlParser.STRING - 793)) | (1 << (TSqlParser.BINARY - 793)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 3:
                    self.state = 3569
                    self.match(TSqlParser.ALL)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_fulltext_stoplistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.stoplist_name = None # IdContext
            self.database_name = None # IdContext
            self.source_stoplist_name = None # IdContext
            self.owner_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def STOPLIST(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STOPLIST)
            else:
                return self.getToken(TSqlParser.STOPLIST, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def SYSTEM(self):
            return self.getToken(TSqlParser.SYSTEM, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_fulltext_stoplist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_fulltext_stoplist" ):
                listener.enterCreate_fulltext_stoplist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_fulltext_stoplist" ):
                listener.exitCreate_fulltext_stoplist(self)




    def create_fulltext_stoplist(self):

        localctx = TSqlParser.Create_fulltext_stoplistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_create_fulltext_stoplist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3574
            self.match(TSqlParser.CREATE)
            self.state = 3575
            self.match(TSqlParser.FULLTEXT)
            self.state = 3576
            self.match(TSqlParser.STOPLIST)
            self.state = 3577
            localctx.stoplist_name = self.id()
            self.state = 3589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 3578
                self.match(TSqlParser.FROM)
                self.state = 3587
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 3582
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                    if la_ == 1:
                        self.state = 3579
                        localctx.database_name = self.id()
                        self.state = 3580
                        self.match(TSqlParser.DOT)


                    self.state = 3584
                    localctx.source_stoplist_name = self.id()
                    pass
                elif token in [TSqlParser.SYSTEM]:
                    self.state = 3585
                    self.match(TSqlParser.SYSTEM)
                    self.state = 3586
                    self.match(TSqlParser.STOPLIST)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 3591
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 3592
                localctx.owner_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_login_sql_serverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # IdContext
            self.password = None # Token
            self.password_hash = None # Token
            self.old_password = None # Token
            self.default_database = None # IdContext
            self.default_laguage = None # IdContext
            self.credential_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def CREDENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CREDENTIAL)
            else:
                return self.getToken(TSqlParser.CREDENTIAL, i)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_DATABASE(self):
            return self.getToken(TSqlParser.DEFAULT_DATABASE, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def CHECK_POLICY(self):
            return self.getToken(TSqlParser.CHECK_POLICY, 0)

        def CHECK_EXPIRATION(self):
            return self.getToken(TSqlParser.CHECK_EXPIRATION, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def HASHED(self):
            return self.getToken(TSqlParser.HASHED, 0)

        def MUST_CHANGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MUST_CHANGE)
            else:
                return self.getToken(TSqlParser.MUST_CHANGE, i)

        def UNLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLOCK)
            else:
                return self.getToken(TSqlParser.UNLOCK, i)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_login_sql_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_login_sql_server" ):
                listener.enterAlter_login_sql_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_login_sql_server" ):
                listener.exitAlter_login_sql_server(self)




    def alter_login_sql_server(self):

        localctx = TSqlParser.Alter_login_sql_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_alter_login_sql_server)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3595
            self.match(TSqlParser.ALTER)
            self.state = 3596
            self.match(TSqlParser.LOGIN)
            self.state = 3597
            localctx.login_name = self.id()
            self.state = 3665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.state = 3599
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 3598
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DISABLE or _la==TSqlParser.ENABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.state = 3601
                self.match(TSqlParser.WITH)
                self.state = 3615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PASSWORD:
                    self.state = 3602
                    self.match(TSqlParser.PASSWORD)
                    self.state = 3603
                    self.match(TSqlParser.EQUAL)
                    self.state = 3607
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.STRING]:
                        self.state = 3604
                        localctx.password = self.match(TSqlParser.STRING)
                        pass
                    elif token in [TSqlParser.BINARY]:
                        self.state = 3605
                        localctx.password_hash = self.match(TSqlParser.BINARY)
                        self.state = 3606
                        self.match(TSqlParser.HASHED)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.MUST_CHANGE or _la==TSqlParser.UNLOCK:
                        self.state = 3609
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.MUST_CHANGE or _la==TSqlParser.UNLOCK):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3614
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.OLD_PASSWORD:
                    self.state = 3617
                    self.match(TSqlParser.OLD_PASSWORD)
                    self.state = 3618
                    self.match(TSqlParser.EQUAL)
                    self.state = 3619
                    localctx.old_password = self.match(TSqlParser.STRING)
                    self.state = 3623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.MUST_CHANGE or _la==TSqlParser.UNLOCK:
                        self.state = 3620
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.MUST_CHANGE or _la==TSqlParser.UNLOCK):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3625
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.DEFAULT_DATABASE:
                    self.state = 3628
                    self.match(TSqlParser.DEFAULT_DATABASE)
                    self.state = 3629
                    self.match(TSqlParser.EQUAL)
                    self.state = 3630
                    localctx.default_database = self.id()


                self.state = 3636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 3633
                    self.match(TSqlParser.DEFAULT_LANGUAGE)
                    self.state = 3634
                    self.match(TSqlParser.EQUAL)
                    self.state = 3635
                    localctx.default_laguage = self.id()


                self.state = 3641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                if la_ == 1:
                    self.state = 3638
                    self.match(TSqlParser.NAME)
                    self.state = 3639
                    self.match(TSqlParser.EQUAL)
                    self.state = 3640
                    localctx.login_name = self.id()


                self.state = 3646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CHECK_POLICY:
                    self.state = 3643
                    self.match(TSqlParser.CHECK_POLICY)
                    self.state = 3644
                    self.match(TSqlParser.EQUAL)
                    self.state = 3645
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CHECK_EXPIRATION:
                    self.state = 3648
                    self.match(TSqlParser.CHECK_EXPIRATION)
                    self.state = 3649
                    self.match(TSqlParser.EQUAL)
                    self.state = 3650
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                if la_ == 1:
                    self.state = 3653
                    self.match(TSqlParser.CREDENTIAL)
                    self.state = 3654
                    self.match(TSqlParser.EQUAL)
                    self.state = 3655
                    localctx.credential_name = self.id()


                self.state = 3660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 3658
                    self.match(TSqlParser.NO)
                    self.state = 3659
                    self.match(TSqlParser.CREDENTIAL)


                pass

            elif la_ == 3:
                self.state = 3662
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3663
                self.match(TSqlParser.CREDENTIAL)
                self.state = 3664
                localctx.credential_name = self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_login_sql_serverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # IdContext
            self.password = None # Token
            self.password_hash = None # Token
            self.sid = None # Token
            self.default_database = None # IdContext
            self.default_laguage = None # IdContext
            self.credential_name = None # IdContext
            self.default_language = None # Token
            self.certname = None # IdContext
            self.asym_key_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def SID(self):
            return self.getToken(TSqlParser.SID, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_DATABASE(self):
            return self.getToken(TSqlParser.DEFAULT_DATABASE, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def CHECK_EXPIRATION(self):
            return self.getToken(TSqlParser.CHECK_EXPIRATION, 0)

        def CHECK_POLICY(self):
            return self.getToken(TSqlParser.CHECK_POLICY, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BINARY)
            else:
                return self.getToken(TSqlParser.BINARY, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def HASHED(self):
            return self.getToken(TSqlParser.HASHED, 0)

        def MUST_CHANGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MUST_CHANGE)
            else:
                return self.getToken(TSqlParser.MUST_CHANGE, i)

        def UNLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLOCK)
            else:
                return self.getToken(TSqlParser.UNLOCK, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_login_sql_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_login_sql_server" ):
                listener.enterCreate_login_sql_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_login_sql_server" ):
                listener.exitCreate_login_sql_server(self)




    def create_login_sql_server(self):

        localctx = TSqlParser.Create_login_sql_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_create_login_sql_server)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3667
            self.match(TSqlParser.CREATE)
            self.state = 3668
            self.match(TSqlParser.LOGIN)
            self.state = 3669
            localctx.login_name = self.id()
            self.state = 3760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.WITH]:
                self.state = 3670
                self.match(TSqlParser.WITH)
                self.state = 3684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PASSWORD:
                    self.state = 3671
                    self.match(TSqlParser.PASSWORD)
                    self.state = 3672
                    self.match(TSqlParser.EQUAL)
                    self.state = 3676
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.STRING]:
                        self.state = 3673
                        localctx.password = self.match(TSqlParser.STRING)
                        pass
                    elif token in [TSqlParser.BINARY]:
                        self.state = 3674
                        localctx.password_hash = self.match(TSqlParser.BINARY)
                        self.state = 3675
                        self.match(TSqlParser.HASHED)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.MUST_CHANGE or _la==TSqlParser.UNLOCK:
                        self.state = 3678
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.MUST_CHANGE or _la==TSqlParser.UNLOCK):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3683
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                if la_ == 1:
                    self.state = 3687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3686
                        self.match(TSqlParser.COMMA)


                    self.state = 3689
                    self.match(TSqlParser.SID)
                    self.state = 3690
                    self.match(TSqlParser.EQUAL)
                    self.state = 3691
                    localctx.sid = self.match(TSqlParser.BINARY)


                self.state = 3700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
                if la_ == 1:
                    self.state = 3695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3694
                        self.match(TSqlParser.COMMA)


                    self.state = 3697
                    self.match(TSqlParser.DEFAULT_DATABASE)
                    self.state = 3698
                    self.match(TSqlParser.EQUAL)
                    self.state = 3699
                    localctx.default_database = self.id()


                self.state = 3708
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 3703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3702
                        self.match(TSqlParser.COMMA)


                    self.state = 3705
                    self.match(TSqlParser.DEFAULT_LANGUAGE)
                    self.state = 3706
                    self.match(TSqlParser.EQUAL)
                    self.state = 3707
                    localctx.default_laguage = self.id()


                self.state = 3716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
                if la_ == 1:
                    self.state = 3711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3710
                        self.match(TSqlParser.COMMA)


                    self.state = 3713
                    self.match(TSqlParser.CHECK_EXPIRATION)
                    self.state = 3714
                    self.match(TSqlParser.EQUAL)
                    self.state = 3715
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
                if la_ == 1:
                    self.state = 3719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3718
                        self.match(TSqlParser.COMMA)


                    self.state = 3721
                    self.match(TSqlParser.CHECK_POLICY)
                    self.state = 3722
                    self.match(TSqlParser.EQUAL)
                    self.state = 3723
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 3727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 3726
                        self.match(TSqlParser.COMMA)


                    self.state = 3729
                    self.match(TSqlParser.CREDENTIAL)
                    self.state = 3730
                    self.match(TSqlParser.EQUAL)
                    self.state = 3731
                    localctx.credential_name = self.id()


                pass
            elif token in [TSqlParser.FROM]:
                self.state = 3734
                self.match(TSqlParser.FROM)
                self.state = 3758
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.WINDOWS]:
                    self.state = 3735
                    self.match(TSqlParser.WINDOWS)

                    self.state = 3736
                    self.match(TSqlParser.WITH)
                    self.state = 3743
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
                    if la_ == 1:
                        self.state = 3738
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 3737
                            self.match(TSqlParser.COMMA)


                        self.state = 3740
                        self.match(TSqlParser.DEFAULT_DATABASE)
                        self.state = 3741
                        self.match(TSqlParser.EQUAL)
                        self.state = 3742
                        localctx.default_database = self.id()


                    self.state = 3751
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
                    if la_ == 1:
                        self.state = 3746
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 3745
                            self.match(TSqlParser.COMMA)


                        self.state = 3748
                        self.match(TSqlParser.DEFAULT_LANGUAGE)
                        self.state = 3749
                        self.match(TSqlParser.EQUAL)
                        self.state = 3750
                        localctx.default_language = self.match(TSqlParser.STRING)


                    pass
                elif token in [TSqlParser.CERTIFICATE]:
                    self.state = 3753
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 3754
                    localctx.certname = self.id()
                    pass
                elif token in [TSqlParser.ASYMMETRIC]:
                    self.state = 3755
                    self.match(TSqlParser.ASYMMETRIC)
                    self.state = 3756
                    self.match(TSqlParser.KEY)
                    self.state = 3757
                    localctx.asym_key_name = self.id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_login_azure_sqlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # IdContext
            self.password = None # Token
            self.old_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_login_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_login_azure_sql" ):
                listener.enterAlter_login_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_login_azure_sql" ):
                listener.exitAlter_login_azure_sql(self)




    def alter_login_azure_sql(self):

        localctx = TSqlParser.Alter_login_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_alter_login_azure_sql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3762
            self.match(TSqlParser.ALTER)
            self.state = 3763
            self.match(TSqlParser.LOGIN)
            self.state = 3764
            localctx.login_name = self.id()
            self.state = 3782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
            if la_ == 1:
                self.state = 3766
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
                if la_ == 1:
                    self.state = 3765
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DISABLE or _la==TSqlParser.ENABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.state = 3768
                self.match(TSqlParser.WITH)
                self.state = 3780
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.PASSWORD]:
                    self.state = 3769
                    self.match(TSqlParser.PASSWORD)
                    self.state = 3770
                    self.match(TSqlParser.EQUAL)
                    self.state = 3771
                    localctx.password = self.match(TSqlParser.STRING)
                    self.state = 3775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.OLD_PASSWORD:
                        self.state = 3772
                        self.match(TSqlParser.OLD_PASSWORD)
                        self.state = 3773
                        self.match(TSqlParser.EQUAL)
                        self.state = 3774
                        localctx.old_password = self.match(TSqlParser.STRING)


                    pass
                elif token in [TSqlParser.NAME]:
                    self.state = 3777
                    self.match(TSqlParser.NAME)
                    self.state = 3778
                    self.match(TSqlParser.EQUAL)
                    self.state = 3779
                    localctx.login_name = self.id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_login_azure_sqlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # IdContext
            self.sid = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def SID(self):
            return self.getToken(TSqlParser.SID, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_login_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_login_azure_sql" ):
                listener.enterCreate_login_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_login_azure_sql" ):
                listener.exitCreate_login_azure_sql(self)




    def create_login_azure_sql(self):

        localctx = TSqlParser.Create_login_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_create_login_azure_sql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3784
            self.match(TSqlParser.CREATE)
            self.state = 3785
            self.match(TSqlParser.LOGIN)
            self.state = 3786
            localctx.login_name = self.id()
            self.state = 3787
            self.match(TSqlParser.WITH)
            self.state = 3788
            self.match(TSqlParser.PASSWORD)
            self.state = 3789
            self.match(TSqlParser.EQUAL)
            self.state = 3790
            self.match(TSqlParser.STRING)
            self.state = 3794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
            if la_ == 1:
                self.state = 3791
                self.match(TSqlParser.SID)
                self.state = 3792
                self.match(TSqlParser.EQUAL)
                self.state = 3793
                localctx.sid = self.match(TSqlParser.BINARY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.login_name = None # IdContext
            self.password = None # Token
            self.old_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def MUST_CHANGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MUST_CHANGE)
            else:
                return self.getToken(TSqlParser.MUST_CHANGE, i)

        def UNLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLOCK)
            else:
                return self.getToken(TSqlParser.UNLOCK, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_login_azure_sql_dw_and_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_login_azure_sql_dw_and_pdw" ):
                listener.enterAlter_login_azure_sql_dw_and_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_login_azure_sql_dw_and_pdw" ):
                listener.exitAlter_login_azure_sql_dw_and_pdw(self)




    def alter_login_azure_sql_dw_and_pdw(self):

        localctx = TSqlParser.Alter_login_azure_sql_dw_and_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_alter_login_azure_sql_dw_and_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3796
            self.match(TSqlParser.ALTER)
            self.state = 3797
            self.match(TSqlParser.LOGIN)
            self.state = 3798
            localctx.login_name = self.id()
            self.state = 3822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.state = 3800
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
                if la_ == 1:
                    self.state = 3799
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DISABLE or _la==TSqlParser.ENABLE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.state = 3802
                self.match(TSqlParser.WITH)
                self.state = 3820
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.PASSWORD]:
                    self.state = 3803
                    self.match(TSqlParser.PASSWORD)
                    self.state = 3804
                    self.match(TSqlParser.EQUAL)
                    self.state = 3805
                    localctx.password = self.match(TSqlParser.STRING)
                    self.state = 3815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.OLD_PASSWORD:
                        self.state = 3806
                        self.match(TSqlParser.OLD_PASSWORD)
                        self.state = 3807
                        self.match(TSqlParser.EQUAL)
                        self.state = 3808
                        localctx.old_password = self.match(TSqlParser.STRING)
                        self.state = 3812
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==TSqlParser.MUST_CHANGE or _la==TSqlParser.UNLOCK:
                            self.state = 3809
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.MUST_CHANGE or _la==TSqlParser.UNLOCK):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 3814
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                elif token in [TSqlParser.NAME]:
                    self.state = 3817
                    self.match(TSqlParser.NAME)
                    self.state = 3818
                    self.match(TSqlParser.EQUAL)
                    self.state = 3819
                    localctx.login_name = self.id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_login_pdwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.loginName = None # IdContext
            self.password = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def MUST_CHANGE(self):
            return self.getToken(TSqlParser.MUST_CHANGE, 0)

        def CHECK_POLICY(self):
            return self.getToken(TSqlParser.CHECK_POLICY, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_login_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_login_pdw" ):
                listener.enterCreate_login_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_login_pdw" ):
                listener.exitCreate_login_pdw(self)




    def create_login_pdw(self):

        localctx = TSqlParser.Create_login_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_create_login_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3824
            self.match(TSqlParser.CREATE)
            self.state = 3825
            self.match(TSqlParser.LOGIN)
            self.state = 3826
            localctx.loginName = self.id()
            self.state = 3843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.WITH]:
                self.state = 3827
                self.match(TSqlParser.WITH)

                self.state = 3828
                self.match(TSqlParser.PASSWORD)
                self.state = 3829
                self.match(TSqlParser.EQUAL)
                self.state = 3830
                localctx.password = self.match(TSqlParser.STRING)
                self.state = 3832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.MUST_CHANGE:
                    self.state = 3831
                    self.match(TSqlParser.MUST_CHANGE)


                self.state = 3839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CHECK_POLICY:
                    self.state = 3834
                    self.match(TSqlParser.CHECK_POLICY)
                    self.state = 3835
                    self.match(TSqlParser.EQUAL)
                    self.state = 3837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.OFF or _la==TSqlParser.ON:
                        self.state = 3836
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                pass
            elif token in [TSqlParser.FROM]:
                self.state = 3841
                self.match(TSqlParser.FROM)
                self.state = 3842
                self.match(TSqlParser.WINDOWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_master_key_sql_serverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.encryption_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def MASTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MASTER)
            else:
                return self.getToken(TSqlParser.MASTER, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def REGENERATE(self):
            return self.getToken(TSqlParser.REGENERATE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_master_key_sql_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_master_key_sql_server" ):
                listener.enterAlter_master_key_sql_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_master_key_sql_server" ):
                listener.exitAlter_master_key_sql_server(self)




    def alter_master_key_sql_server(self):

        localctx = TSqlParser.Alter_master_key_sql_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_alter_master_key_sql_server)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3845
            self.match(TSqlParser.ALTER)
            self.state = 3846
            self.match(TSqlParser.MASTER)
            self.state = 3847
            self.match(TSqlParser.KEY)
            self.state = 3869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.REGENERATE, TSqlParser.FORCE]:
                self.state = 3849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FORCE:
                    self.state = 3848
                    self.match(TSqlParser.FORCE)


                self.state = 3851
                self.match(TSqlParser.REGENERATE)
                self.state = 3852
                self.match(TSqlParser.WITH)
                self.state = 3853
                self.match(TSqlParser.ENCRYPTION)
                self.state = 3854
                self.match(TSqlParser.BY)
                self.state = 3855
                self.match(TSqlParser.PASSWORD)
                self.state = 3856
                self.match(TSqlParser.EQUAL)
                self.state = 3857
                localctx.password = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.ADD, TSqlParser.DROP]:
                self.state = 3858
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3859
                self.match(TSqlParser.ENCRYPTION)
                self.state = 3860
                self.match(TSqlParser.BY)
                self.state = 3867
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.SERVICE]:
                    self.state = 3861
                    self.match(TSqlParser.SERVICE)
                    self.state = 3862
                    self.match(TSqlParser.MASTER)
                    self.state = 3863
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [TSqlParser.PASSWORD]:
                    self.state = 3864
                    self.match(TSqlParser.PASSWORD)
                    self.state = 3865
                    self.match(TSqlParser.EQUAL)
                    self.state = 3866
                    localctx.encryption_password = self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_master_key_sql_serverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_master_key_sql_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_master_key_sql_server" ):
                listener.enterCreate_master_key_sql_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_master_key_sql_server" ):
                listener.exitCreate_master_key_sql_server(self)




    def create_master_key_sql_server(self):

        localctx = TSqlParser.Create_master_key_sql_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_create_master_key_sql_server)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3871
            self.match(TSqlParser.CREATE)
            self.state = 3872
            self.match(TSqlParser.MASTER)
            self.state = 3873
            self.match(TSqlParser.KEY)
            self.state = 3874
            self.match(TSqlParser.ENCRYPTION)
            self.state = 3875
            self.match(TSqlParser.BY)
            self.state = 3876
            self.match(TSqlParser.PASSWORD)
            self.state = 3877
            self.match(TSqlParser.EQUAL)
            self.state = 3878
            localctx.password = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_master_key_azure_sqlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.encryption_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def MASTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MASTER)
            else:
                return self.getToken(TSqlParser.MASTER, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def REGENERATE(self):
            return self.getToken(TSqlParser.REGENERATE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_master_key_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_master_key_azure_sql" ):
                listener.enterAlter_master_key_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_master_key_azure_sql" ):
                listener.exitAlter_master_key_azure_sql(self)




    def alter_master_key_azure_sql(self):

        localctx = TSqlParser.Alter_master_key_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_alter_master_key_azure_sql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3880
            self.match(TSqlParser.ALTER)
            self.state = 3881
            self.match(TSqlParser.MASTER)
            self.state = 3882
            self.match(TSqlParser.KEY)
            self.state = 3910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.REGENERATE, TSqlParser.FORCE]:
                self.state = 3884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FORCE:
                    self.state = 3883
                    self.match(TSqlParser.FORCE)


                self.state = 3886
                self.match(TSqlParser.REGENERATE)
                self.state = 3887
                self.match(TSqlParser.WITH)
                self.state = 3888
                self.match(TSqlParser.ENCRYPTION)
                self.state = 3889
                self.match(TSqlParser.BY)
                self.state = 3890
                self.match(TSqlParser.PASSWORD)
                self.state = 3891
                self.match(TSqlParser.EQUAL)
                self.state = 3892
                localctx.password = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.ADD]:
                self.state = 3893
                self.match(TSqlParser.ADD)
                self.state = 3894
                self.match(TSqlParser.ENCRYPTION)
                self.state = 3895
                self.match(TSqlParser.BY)
                self.state = 3902
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.SERVICE]:
                    self.state = 3896
                    self.match(TSqlParser.SERVICE)
                    self.state = 3897
                    self.match(TSqlParser.MASTER)
                    self.state = 3898
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [TSqlParser.PASSWORD]:
                    self.state = 3899
                    self.match(TSqlParser.PASSWORD)
                    self.state = 3900
                    self.match(TSqlParser.EQUAL)
                    self.state = 3901
                    localctx.encryption_password = self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.DROP]:
                self.state = 3904
                self.match(TSqlParser.DROP)
                self.state = 3905
                self.match(TSqlParser.ENCRYPTION)
                self.state = 3906
                self.match(TSqlParser.BY)
                self.state = 3907
                self.match(TSqlParser.PASSWORD)
                self.state = 3908
                self.match(TSqlParser.EQUAL)
                self.state = 3909
                localctx.encryption_password = self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_master_key_azure_sqlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_master_key_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_master_key_azure_sql" ):
                listener.enterCreate_master_key_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_master_key_azure_sql" ):
                listener.exitCreate_master_key_azure_sql(self)




    def create_master_key_azure_sql(self):

        localctx = TSqlParser.Create_master_key_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_create_master_key_azure_sql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3912
            self.match(TSqlParser.CREATE)
            self.state = 3913
            self.match(TSqlParser.MASTER)
            self.state = 3914
            self.match(TSqlParser.KEY)
            self.state = 3920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 3915
                self.match(TSqlParser.ENCRYPTION)
                self.state = 3916
                self.match(TSqlParser.BY)
                self.state = 3917
                self.match(TSqlParser.PASSWORD)
                self.state = 3918
                self.match(TSqlParser.EQUAL)
                self.state = 3919
                localctx.password = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_message_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.message_type_name = None # IdContext
            self.schema_collection_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def VALIDATION(self):
            return self.getToken(TSqlParser.VALIDATION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def EMPTY(self):
            return self.getToken(TSqlParser.EMPTY, 0)

        def WELL_FORMED_XML(self):
            return self.getToken(TSqlParser.WELL_FORMED_XML, 0)

        def VALID_XML(self):
            return self.getToken(TSqlParser.VALID_XML, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_message_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_message_type" ):
                listener.enterAlter_message_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_message_type" ):
                listener.exitAlter_message_type(self)




    def alter_message_type(self):

        localctx = TSqlParser.Alter_message_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_alter_message_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3922
            self.match(TSqlParser.ALTER)
            self.state = 3923
            self.match(TSqlParser.MESSAGE)
            self.state = 3924
            self.match(TSqlParser.TYPE)
            self.state = 3925
            localctx.message_type_name = self.id()
            self.state = 3926
            self.match(TSqlParser.VALIDATION)
            self.state = 3927
            self.match(TSqlParser.EQUAL)
            self.state = 3936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.NONE]:
                self.state = 3928
                self.match(TSqlParser.NONE)
                pass
            elif token in [TSqlParser.EMPTY]:
                self.state = 3929
                self.match(TSqlParser.EMPTY)
                pass
            elif token in [TSqlParser.WELL_FORMED_XML]:
                self.state = 3930
                self.match(TSqlParser.WELL_FORMED_XML)
                pass
            elif token in [TSqlParser.VALID_XML]:
                self.state = 3931
                self.match(TSqlParser.VALID_XML)
                self.state = 3932
                self.match(TSqlParser.WITH)
                self.state = 3933
                self.match(TSqlParser.SCHEMA)
                self.state = 3934
                self.match(TSqlParser.COLLECTION)
                self.state = 3935
                localctx.schema_collection_name = self.id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_partition_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_function_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def SPLIT(self):
            return self.getToken(TSqlParser.SPLIT, 0)

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_partition_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_partition_function" ):
                listener.enterAlter_partition_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_partition_function" ):
                listener.exitAlter_partition_function(self)




    def alter_partition_function(self):

        localctx = TSqlParser.Alter_partition_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_alter_partition_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3938
            self.match(TSqlParser.ALTER)
            self.state = 3939
            self.match(TSqlParser.PARTITION)
            self.state = 3940
            self.match(TSqlParser.FUNCTION)
            self.state = 3941
            localctx.partition_function_name = self.id()
            self.state = 3942
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3943
            self.match(TSqlParser.RR_BRACKET)
            self.state = 3944
            _la = self._input.LA(1)
            if not(_la==TSqlParser.MERGE or _la==TSqlParser.SPLIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3945
            self.match(TSqlParser.RANGE)
            self.state = 3946
            self.match(TSqlParser.LR_BRACKET)
            self.state = 3947
            self.match(TSqlParser.DECIMAL)
            self.state = 3948
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_partition_schemeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partition_scheme_name = None # IdContext
            self.file_group_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def SCHEME(self):
            return self.getToken(TSqlParser.SCHEME, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def USED(self):
            return self.getToken(TSqlParser.USED, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_partition_scheme

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_partition_scheme" ):
                listener.enterAlter_partition_scheme(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_partition_scheme" ):
                listener.exitAlter_partition_scheme(self)




    def alter_partition_scheme(self):

        localctx = TSqlParser.Alter_partition_schemeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_alter_partition_scheme)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3950
            self.match(TSqlParser.ALTER)
            self.state = 3951
            self.match(TSqlParser.PARTITION)
            self.state = 3952
            self.match(TSqlParser.SCHEME)
            self.state = 3953
            localctx.partition_scheme_name = self.id()
            self.state = 3954
            self.match(TSqlParser.NEXT)
            self.state = 3955
            self.match(TSqlParser.USED)
            self.state = 3957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                self.state = 3956
                localctx.file_group_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_remote_service_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.binding_name = None # IdContext
            self.user_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def ANONYMOUS(self):
            return self.getToken(TSqlParser.ANONYMOUS, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_remote_service_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_remote_service_binding" ):
                listener.enterAlter_remote_service_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_remote_service_binding" ):
                listener.exitAlter_remote_service_binding(self)




    def alter_remote_service_binding(self):

        localctx = TSqlParser.Alter_remote_service_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_alter_remote_service_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3959
            self.match(TSqlParser.ALTER)
            self.state = 3960
            self.match(TSqlParser.REMOTE)
            self.state = 3961
            self.match(TSqlParser.SERVICE)
            self.state = 3962
            self.match(TSqlParser.BINDING)
            self.state = 3963
            localctx.binding_name = self.id()
            self.state = 3964
            self.match(TSqlParser.WITH)
            self.state = 3968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.USER:
                self.state = 3965
                self.match(TSqlParser.USER)
                self.state = 3966
                self.match(TSqlParser.EQUAL)
                self.state = 3967
                localctx.user_name = self.id()


            self.state = 3974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 3970
                self.match(TSqlParser.COMMA)
                self.state = 3971
                self.match(TSqlParser.ANONYMOUS)
                self.state = 3972
                self.match(TSqlParser.EQUAL)
                self.state = 3973
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_remote_service_bindingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.binding_name = None # IdContext
            self.owner_name = None # IdContext
            self.remote_service_name = None # Token
            self.user_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def SERVICE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVICE)
            else:
                return self.getToken(TSqlParser.SERVICE, i)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def ANONYMOUS(self):
            return self.getToken(TSqlParser.ANONYMOUS, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_remote_service_binding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_remote_service_binding" ):
                listener.enterCreate_remote_service_binding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_remote_service_binding" ):
                listener.exitCreate_remote_service_binding(self)




    def create_remote_service_binding(self):

        localctx = TSqlParser.Create_remote_service_bindingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_create_remote_service_binding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3976
            self.match(TSqlParser.CREATE)
            self.state = 3977
            self.match(TSqlParser.REMOTE)
            self.state = 3978
            self.match(TSqlParser.SERVICE)
            self.state = 3979
            self.match(TSqlParser.BINDING)
            self.state = 3980
            localctx.binding_name = self.id()
            self.state = 3983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 3981
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 3982
                localctx.owner_name = self.id()


            self.state = 3985
            self.match(TSqlParser.TO)
            self.state = 3986
            self.match(TSqlParser.SERVICE)
            self.state = 3987
            localctx.remote_service_name = self.match(TSqlParser.STRING)
            self.state = 3988
            self.match(TSqlParser.WITH)
            self.state = 3992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.USER:
                self.state = 3989
                self.match(TSqlParser.USER)
                self.state = 3990
                self.match(TSqlParser.EQUAL)
                self.state = 3991
                localctx.user_name = self.id()


            self.state = 3998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 3994
                self.match(TSqlParser.COMMA)
                self.state = 3995
                self.match(TSqlParser.ANONYMOUS)
                self.state = 3996
                self.match(TSqlParser.EQUAL)
                self.state = 3997
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_resource_poolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pool_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def MIN_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MIN_CPU_PERCENT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def CAP_CPU_PERCENT(self):
            return self.getToken(TSqlParser.CAP_CPU_PERCENT, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def SCHEDULER(self):
            return self.getToken(TSqlParser.SCHEDULER, 0)

        def MIN_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MIN_MEMORY_PERCENT, 0)

        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MIN_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0)

        def MAX_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_resource_pool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_resource_pool" ):
                listener.enterCreate_resource_pool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_resource_pool" ):
                listener.exitCreate_resource_pool(self)




    def create_resource_pool(self):

        localctx = TSqlParser.Create_resource_poolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_create_resource_pool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4000
            self.match(TSqlParser.CREATE)
            self.state = 4001
            self.match(TSqlParser.RESOURCE)
            self.state = 4002
            self.match(TSqlParser.POOL)
            self.state = 4003
            localctx.pool_name = self.id()
            self.state = 4106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.state = 4004
                self.match(TSqlParser.WITH)
                self.state = 4005
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
                if la_ == 1:
                    self.state = 4007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4006
                        self.match(TSqlParser.COMMA)


                    self.state = 4009
                    self.match(TSqlParser.MIN_CPU_PERCENT)
                    self.state = 4010
                    self.match(TSqlParser.EQUAL)
                    self.state = 4011
                    self.match(TSqlParser.DECIMAL)


                self.state = 4020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
                if la_ == 1:
                    self.state = 4015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4014
                        self.match(TSqlParser.COMMA)


                    self.state = 4017
                    self.match(TSqlParser.MAX_CPU_PERCENT)
                    self.state = 4018
                    self.match(TSqlParser.EQUAL)
                    self.state = 4019
                    self.match(TSqlParser.DECIMAL)


                self.state = 4028
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
                if la_ == 1:
                    self.state = 4023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4022
                        self.match(TSqlParser.COMMA)


                    self.state = 4025
                    self.match(TSqlParser.CAP_CPU_PERCENT)
                    self.state = 4026
                    self.match(TSqlParser.EQUAL)
                    self.state = 4027
                    self.match(TSqlParser.DECIMAL)


                self.state = 4071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                if la_ == 1:
                    self.state = 4031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4030
                        self.match(TSqlParser.COMMA)


                    self.state = 4033
                    self.match(TSqlParser.AFFINITY)
                    self.state = 4034
                    self.match(TSqlParser.SCHEDULER)
                    self.state = 4035
                    self.match(TSqlParser.EQUAL)
                    self.state = 4069
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.AUTO]:
                        self.state = 4036
                        self.match(TSqlParser.AUTO)
                        pass
                    elif token in [TSqlParser.LR_BRACKET]:
                        self.state = 4037
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 4047 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 4039
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4038
                                self.match(TSqlParser.COMMA)


                            self.state = 4045
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                            if la_ == 1:
                                self.state = 4041
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 4042
                                self.match(TSqlParser.DECIMAL)
                                self.state = 4043
                                self.match(TSqlParser.TO)
                                self.state = 4044
                                self.match(TSqlParser.DECIMAL)
                                pass


                            self.state = 4049 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==TSqlParser.DECIMAL or _la==TSqlParser.COMMA):
                                break

                        self.state = 4051
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [TSqlParser.NUMANODE]:
                        self.state = 4052
                        self.match(TSqlParser.NUMANODE)
                        self.state = 4053
                        self.match(TSqlParser.EQUAL)
                        self.state = 4054
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 4064 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 4056
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4055
                                self.match(TSqlParser.COMMA)


                            self.state = 4062
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                            if la_ == 1:
                                self.state = 4058
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 4059
                                self.match(TSqlParser.DECIMAL)
                                self.state = 4060
                                self.match(TSqlParser.TO)
                                self.state = 4061
                                self.match(TSqlParser.DECIMAL)
                                pass


                            self.state = 4066 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==TSqlParser.DECIMAL or _la==TSqlParser.COMMA):
                                break

                        self.state = 4068
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
                if la_ == 1:
                    self.state = 4074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4073
                        self.match(TSqlParser.COMMA)


                    self.state = 4076
                    self.match(TSqlParser.MIN_MEMORY_PERCENT)
                    self.state = 4077
                    self.match(TSqlParser.EQUAL)
                    self.state = 4078
                    self.match(TSqlParser.DECIMAL)


                self.state = 4087
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                if la_ == 1:
                    self.state = 4082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4081
                        self.match(TSqlParser.COMMA)


                    self.state = 4084
                    self.match(TSqlParser.MAX_MEMORY_PERCENT)
                    self.state = 4085
                    self.match(TSqlParser.EQUAL)
                    self.state = 4086
                    self.match(TSqlParser.DECIMAL)


                self.state = 4095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                if la_ == 1:
                    self.state = 4090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4089
                        self.match(TSqlParser.COMMA)


                    self.state = 4092
                    self.match(TSqlParser.MIN_IOPS_PER_VOLUME)
                    self.state = 4093
                    self.match(TSqlParser.EQUAL)
                    self.state = 4094
                    self.match(TSqlParser.DECIMAL)


                self.state = 4103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.MAX_IOPS_PER_VOLUME or _la==TSqlParser.COMMA:
                    self.state = 4098
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4097
                        self.match(TSqlParser.COMMA)


                    self.state = 4100
                    self.match(TSqlParser.MAX_IOPS_PER_VOLUME)
                    self.state = 4101
                    self.match(TSqlParser.EQUAL)
                    self.state = 4102
                    self.match(TSqlParser.DECIMAL)


                self.state = 4105
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_resource_governorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.function_name = None # IdContext
            self.max_outstanding_io_per_volume = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def GOVERNOR(self):
            return self.getToken(TSqlParser.GOVERNOR, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CLASSIFIER_FUNCTION(self):
            return self.getToken(TSqlParser.CLASSIFIER_FUNCTION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def RESET(self):
            return self.getToken(TSqlParser.RESET, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def MAX_OUTSTANDING_IO_PER_VOLUME(self):
            return self.getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def RECONFIGURE(self):
            return self.getToken(TSqlParser.RECONFIGURE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_resource_governor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_resource_governor" ):
                listener.enterAlter_resource_governor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_resource_governor" ):
                listener.exitAlter_resource_governor(self)




    def alter_resource_governor(self):

        localctx = TSqlParser.Alter_resource_governorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_alter_resource_governor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4108
            self.match(TSqlParser.ALTER)
            self.state = 4109
            self.match(TSqlParser.RESOURCE)
            self.state = 4110
            self.match(TSqlParser.GOVERNOR)
            self.state = 4132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.state = 4111
                _la = self._input.LA(1)
                if not(_la==TSqlParser.RECONFIGURE or _la==TSqlParser.DISABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.state = 4112
                self.match(TSqlParser.WITH)
                self.state = 4113
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4114
                self.match(TSqlParser.CLASSIFIER_FUNCTION)
                self.state = 4115
                self.match(TSqlParser.EQUAL)
                self.state = 4121
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 4116
                    localctx.schema_name = self.id()
                    self.state = 4117
                    self.match(TSqlParser.DOT)
                    self.state = 4118
                    localctx.function_name = self.id()
                    pass
                elif token in [TSqlParser.NULL]:
                    self.state = 4120
                    self.match(TSqlParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4123
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.state = 4124
                self.match(TSqlParser.RESET)
                self.state = 4125
                self.match(TSqlParser.STATISTICS)
                pass

            elif la_ == 4:
                self.state = 4126
                self.match(TSqlParser.WITH)
                self.state = 4127
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4128
                self.match(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME)
                self.state = 4129
                self.match(TSqlParser.EQUAL)
                self.state = 4130
                localctx.max_outstanding_io_per_volume = self.match(TSqlParser.DECIMAL)
                self.state = 4131
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_db_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.role_name = None # IdContext
            self.database_principal = None # IdContext
            self.new_role_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def MEMBER(self):
            return self.getToken(TSqlParser.MEMBER, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_db_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_db_role" ):
                listener.enterAlter_db_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_db_role" ):
                listener.exitAlter_db_role(self)




    def alter_db_role(self):

        localctx = TSqlParser.Alter_db_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_alter_db_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4134
            self.match(TSqlParser.ALTER)
            self.state = 4135
            self.match(TSqlParser.ROLE)
            self.state = 4136
            localctx.role_name = self.id()
            self.state = 4144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ADD, TSqlParser.DROP]:
                self.state = 4137
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4138
                self.match(TSqlParser.MEMBER)
                self.state = 4139
                localctx.database_principal = self.id()
                pass
            elif token in [TSqlParser.WITH]:
                self.state = 4140
                self.match(TSqlParser.WITH)
                self.state = 4141
                self.match(TSqlParser.NAME)
                self.state = 4142
                self.match(TSqlParser.EQUAL)
                self.state = 4143
                localctx.new_role_name = self.id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_db_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.role_name = None # IdContext
            self.owner_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_db_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_db_role" ):
                listener.enterCreate_db_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_db_role" ):
                listener.exitCreate_db_role(self)




    def create_db_role(self):

        localctx = TSqlParser.Create_db_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_create_db_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4146
            self.match(TSqlParser.CREATE)
            self.state = 4147
            self.match(TSqlParser.ROLE)
            self.state = 4148
            localctx.role_name = self.id()
            self.state = 4151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 4149
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4150
                localctx.owner_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_routeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.route_name = None # IdContext
            self.owner_name = None # IdContext
            self.route_service_name = None # Token
            self.broker_instance_identifier = None # Token

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ADDRESS(self):
            return self.getToken(TSqlParser.ADDRESS, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def QUOTED_URL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.QUOTED_URL)
            else:
                return self.getToken(TSqlParser.QUOTED_URL, i)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def SERVICE_NAME(self):
            return self.getToken(TSqlParser.SERVICE_NAME, 0)

        def BROKER_INSTANCE(self):
            return self.getToken(TSqlParser.BROKER_INSTANCE, 0)

        def LIFETIME(self):
            return self.getToken(TSqlParser.LIFETIME, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def MIRROR_ADDRESS(self):
            return self.getToken(TSqlParser.MIRROR_ADDRESS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_route

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_route" ):
                listener.enterCreate_route(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_route" ):
                listener.exitCreate_route(self)




    def create_route(self):

        localctx = TSqlParser.Create_routeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_create_route)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4153
            self.match(TSqlParser.CREATE)
            self.state = 4154
            self.match(TSqlParser.ROUTE)
            self.state = 4155
            localctx.route_name = self.id()
            self.state = 4158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 4156
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4157
                localctx.owner_name = self.id()


            self.state = 4160
            self.match(TSqlParser.WITH)
            self.state = 4167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
            if la_ == 1:
                self.state = 4162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 4161
                    self.match(TSqlParser.COMMA)


                self.state = 4164
                self.match(TSqlParser.SERVICE_NAME)
                self.state = 4165
                self.match(TSqlParser.EQUAL)
                self.state = 4166
                localctx.route_service_name = self.match(TSqlParser.STRING)


            self.state = 4175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.state = 4170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 4169
                    self.match(TSqlParser.COMMA)


                self.state = 4172
                self.match(TSqlParser.BROKER_INSTANCE)
                self.state = 4173
                self.match(TSqlParser.EQUAL)
                self.state = 4174
                localctx.broker_instance_identifier = self.match(TSqlParser.STRING)


            self.state = 4183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.state = 4178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 4177
                    self.match(TSqlParser.COMMA)


                self.state = 4180
                self.match(TSqlParser.LIFETIME)
                self.state = 4181
                self.match(TSqlParser.EQUAL)
                self.state = 4182
                self.match(TSqlParser.DECIMAL)


            self.state = 4186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 4185
                self.match(TSqlParser.COMMA)


            self.state = 4188
            self.match(TSqlParser.ADDRESS)
            self.state = 4189
            self.match(TSqlParser.EQUAL)
            self.state = 4190
            _la = self._input.LA(1)
            if not(_la==TSqlParser.QUOTED_URL or _la==TSqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 4191
                self.match(TSqlParser.COMMA)
                self.state = 4192
                self.match(TSqlParser.MIRROR_ADDRESS)
                self.state = 4193
                self.match(TSqlParser.EQUAL)
                self.state = 4194
                _la = self._input.LA(1)
                if not(_la==TSqlParser.QUOTED_URL or _la==TSqlParser.STRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_ruleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.rule_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def RULE(self):
            return self.getToken(TSqlParser.RULE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_rule" ):
                listener.enterCreate_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_rule" ):
                listener.exitCreate_rule(self)




    def create_rule(self):

        localctx = TSqlParser.Create_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_create_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4197
            self.match(TSqlParser.CREATE)
            self.state = 4198
            self.match(TSqlParser.RULE)
            self.state = 4202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.state = 4199
                localctx.schema_name = self.id()
                self.state = 4200
                self.match(TSqlParser.DOT)


            self.state = 4204
            localctx.rule_name = self.id()
            self.state = 4205
            self.match(TSqlParser.AS)
            self.state = 4206
            self.search_condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_schema_sqlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SCHEMA)
            else:
                return self.getToken(TSqlParser.SCHEMA, i)

        def TRANSFER(self):
            return self.getToken(TSqlParser.TRANSFER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLON)
            else:
                return self.getToken(TSqlParser.COLON, i)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_schema_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_schema_sql" ):
                listener.enterAlter_schema_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_schema_sql" ):
                listener.exitAlter_schema_sql(self)




    def alter_schema_sql(self):

        localctx = TSqlParser.Alter_schema_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_alter_schema_sql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4208
            self.match(TSqlParser.ALTER)
            self.state = 4209
            self.match(TSqlParser.SCHEMA)
            self.state = 4210
            localctx.schema_name = self.id()
            self.state = 4211
            self.match(TSqlParser.TRANSFER)
            self.state = 4221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
            if la_ == 1:
                self.state = 4217
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.OBJECT]:
                    self.state = 4212
                    self.match(TSqlParser.OBJECT)
                    pass
                elif token in [TSqlParser.TYPE]:
                    self.state = 4213
                    self.match(TSqlParser.TYPE)
                    pass
                elif token in [TSqlParser.XML]:
                    self.state = 4214
                    self.match(TSqlParser.XML)
                    self.state = 4215
                    self.match(TSqlParser.SCHEMA)
                    self.state = 4216
                    self.match(TSqlParser.COLLECTION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4219
                self.match(TSqlParser.COLON)
                self.state = 4220
                self.match(TSqlParser.COLON)


            self.state = 4223
            self.id()
            self.state = 4226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.DOT:
                self.state = 4224
                self.match(TSqlParser.DOT)
                self.state = 4225
                self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_schemaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.owner_name = None # IdContext
            self.object_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SCHEMA)
            else:
                return self.getToken(TSqlParser.SCHEMA, i)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def create_table(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Create_tableContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Create_tableContext,i)


        def create_view(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Create_viewContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Create_viewContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def REVOKE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REVOKE)
            else:
                return self.getToken(TSqlParser.REVOKE, i)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FROM)
            else:
                return self.getToken(TSqlParser.FROM, i)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GRANT)
            else:
                return self.getToken(TSqlParser.GRANT, i)

        def DENY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DENY)
            else:
                return self.getToken(TSqlParser.DENY, i)

        def SELECT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SELECT)
            else:
                return self.getToken(TSqlParser.SELECT, i)

        def INSERT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INSERT)
            else:
                return self.getToken(TSqlParser.INSERT, i)

        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DELETE)
            else:
                return self.getToken(TSqlParser.DELETE, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UPDATE)
            else:
                return self.getToken(TSqlParser.UPDATE, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLON)
            else:
                return self.getToken(TSqlParser.COLON, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_schema" ):
                listener.enterCreate_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_schema" ):
                listener.exitCreate_schema(self)




    def create_schema(self):

        localctx = TSqlParser.Create_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_create_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4228
            self.match(TSqlParser.CREATE)
            self.state = 4229
            self.match(TSqlParser.SCHEMA)
            self.state = 4237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
            if la_ == 1:
                self.state = 4230
                localctx.schema_name = self.id()
                pass

            elif la_ == 2:
                self.state = 4231
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4232
                localctx.owner_name = self.id()
                pass

            elif la_ == 3:
                self.state = 4233
                localctx.schema_name = self.id()
                self.state = 4234
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4235
                localctx.owner_name = self.id()
                pass


            self.state = 4267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,460,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4265
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
                    if la_ == 1:
                        self.state = 4239
                        self.create_table()
                        pass

                    elif la_ == 2:
                        self.state = 4240
                        self.create_view()
                        pass

                    elif la_ == 3:
                        self.state = 4241
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DENY or _la==TSqlParser.GRANT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4242
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DELETE or _la==TSqlParser.INSERT or _la==TSqlParser.SELECT or _la==TSqlParser.UPDATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4243
                        self.match(TSqlParser.ON)
                        self.state = 4247
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.SCHEMA:
                            self.state = 4244
                            self.match(TSqlParser.SCHEMA)
                            self.state = 4245
                            self.match(TSqlParser.COLON)
                            self.state = 4246
                            self.match(TSqlParser.COLON)


                        self.state = 4249
                        localctx.object_name = self.id()
                        self.state = 4250
                        self.match(TSqlParser.TO)
                        self.state = 4251
                        localctx.owner_name = self.id()
                        pass

                    elif la_ == 4:
                        self.state = 4253
                        self.match(TSqlParser.REVOKE)
                        self.state = 4254
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DELETE or _la==TSqlParser.INSERT or _la==TSqlParser.SELECT or _la==TSqlParser.UPDATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4255
                        self.match(TSqlParser.ON)
                        self.state = 4259
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.SCHEMA:
                            self.state = 4256
                            self.match(TSqlParser.SCHEMA)
                            self.state = 4257
                            self.match(TSqlParser.COLON)
                            self.state = 4258
                            self.match(TSqlParser.COLON)


                        self.state = 4261
                        localctx.object_name = self.id()
                        self.state = 4262
                        self.match(TSqlParser.FROM)
                        self.state = 4263
                        localctx.owner_name = self.id()
                        pass

             
                self.state = 4269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,460,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.owner_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_schema_azure_sql_dw_and_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_schema_azure_sql_dw_and_pdw" ):
                listener.enterCreate_schema_azure_sql_dw_and_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_schema_azure_sql_dw_and_pdw" ):
                listener.exitCreate_schema_azure_sql_dw_and_pdw(self)




    def create_schema_azure_sql_dw_and_pdw(self):

        localctx = TSqlParser.Create_schema_azure_sql_dw_and_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_create_schema_azure_sql_dw_and_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4270
            self.match(TSqlParser.CREATE)
            self.state = 4271
            self.match(TSqlParser.SCHEMA)
            self.state = 4272
            localctx.schema_name = self.id()
            self.state = 4275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 4273
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4274
                localctx.owner_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def TRANSFER(self):
            return self.getToken(TSqlParser.TRANSFER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLON)
            else:
                return self.getToken(TSqlParser.COLON, i)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_schema_azure_sql_dw_and_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_schema_azure_sql_dw_and_pdw" ):
                listener.enterAlter_schema_azure_sql_dw_and_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_schema_azure_sql_dw_and_pdw" ):
                listener.exitAlter_schema_azure_sql_dw_and_pdw(self)




    def alter_schema_azure_sql_dw_and_pdw(self):

        localctx = TSqlParser.Alter_schema_azure_sql_dw_and_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_alter_schema_azure_sql_dw_and_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4277
            self.match(TSqlParser.ALTER)
            self.state = 4278
            self.match(TSqlParser.SCHEMA)
            self.state = 4279
            localctx.schema_name = self.id()
            self.state = 4280
            self.match(TSqlParser.TRANSFER)
            self.state = 4284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.state = 4281
                self.match(TSqlParser.OBJECT)
                self.state = 4282
                self.match(TSqlParser.COLON)
                self.state = 4283
                self.match(TSqlParser.COLON)


            self.state = 4286
            self.id()
            self.state = 4289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.DOT:
                self.state = 4287
                self.match(TSqlParser.DOT)
                self.state = 4288
                self.match(TSqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_search_property_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.new_list_name = None # IdContext
            self.database_name = None # IdContext
            self.source_list_name = None # IdContext
            self.owner_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_search_property_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_search_property_list" ):
                listener.enterCreate_search_property_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_search_property_list" ):
                listener.exitCreate_search_property_list(self)




    def create_search_property_list(self):

        localctx = TSqlParser.Create_search_property_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_create_search_property_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4291
            self.match(TSqlParser.CREATE)
            self.state = 4292
            self.match(TSqlParser.SEARCH)
            self.state = 4293
            self.match(TSqlParser.PROPERTY)
            self.state = 4294
            self.match(TSqlParser.LIST)
            self.state = 4295
            localctx.new_list_name = self.id()
            self.state = 4303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 4296
                self.match(TSqlParser.FROM)
                self.state = 4300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
                if la_ == 1:
                    self.state = 4297
                    localctx.database_name = self.id()
                    self.state = 4298
                    self.match(TSqlParser.DOT)


                self.state = 4302
                localctx.source_list_name = self.id()


            self.state = 4307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 4305
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4306
                localctx.owner_name = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_security_policyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.security_policy_name = None # IdContext
            self.tvf_schema_name = None # IdContext
            self.security_predicate_function_name = None # IdContext
            self.column_name_or_arguments = None # IdContext
            self.table_schema_name = None # IdContext
            self.name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SECURITY(self):
            return self.getToken(TSqlParser.SECURITY, 0)

        def POLICY(self):
            return self.getToken(TSqlParser.POLICY, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def PREDICATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PREDICATE)
            else:
                return self.getToken(TSqlParser.PREDICATE, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def AFTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AFTER)
            else:
                return self.getToken(TSqlParser.AFTER, i)

        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BEFORE)
            else:
                return self.getToken(TSqlParser.BEFORE, i)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def FILTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILTER)
            else:
                return self.getToken(TSqlParser.FILTER, i)

        def BLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BLOCK)
            else:
                return self.getToken(TSqlParser.BLOCK, i)

        def INSERT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INSERT)
            else:
                return self.getToken(TSqlParser.INSERT, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UPDATE)
            else:
                return self.getToken(TSqlParser.UPDATE, i)

        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DELETE)
            else:
                return self.getToken(TSqlParser.DELETE, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_security_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_security_policy" ):
                listener.enterCreate_security_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_security_policy" ):
                listener.exitCreate_security_policy(self)




    def create_security_policy(self):

        localctx = TSqlParser.Create_security_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_create_security_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4309
            self.match(TSqlParser.CREATE)
            self.state = 4310
            self.match(TSqlParser.SECURITY)
            self.state = 4311
            self.match(TSqlParser.POLICY)
            self.state = 4315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.state = 4312
                localctx.schema_name = self.id()
                self.state = 4313
                self.match(TSqlParser.DOT)


            self.state = 4317
            localctx.security_policy_name = self.id()
            self.state = 4358 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 4318
                    self.match(TSqlParser.COMMA)


                self.state = 4321
                self.match(TSqlParser.ADD)
                self.state = 4323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.BLOCK or _la==TSqlParser.FILTER:
                    self.state = 4322
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.BLOCK or _la==TSqlParser.FILTER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4325
                self.match(TSqlParser.PREDICATE)
                self.state = 4326
                localctx.tvf_schema_name = self.id()
                self.state = 4327
                self.match(TSqlParser.DOT)
                self.state = 4328
                localctx.security_predicate_function_name = self.id()
                self.state = 4329
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4334 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4330
                        self.match(TSqlParser.COMMA)


                    self.state = 4333
                    localctx.column_name_or_arguments = self.id()
                    self.state = 4336 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                        break

                self.state = 4338
                self.match(TSqlParser.RR_BRACKET)
                self.state = 4339
                self.match(TSqlParser.ON)
                self.state = 4340
                localctx.table_schema_name = self.id()
                self.state = 4341
                self.match(TSqlParser.DOT)
                self.state = 4342
                localctx.name = self.id()
                self.state = 4355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,475,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4353
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
                        if la_ == 1:
                            self.state = 4344
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4343
                                self.match(TSqlParser.COMMA)


                            self.state = 4346
                            self.match(TSqlParser.AFTER)
                            self.state = 4347
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.INSERT or _la==TSqlParser.UPDATE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 2:
                            self.state = 4349
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4348
                                self.match(TSqlParser.COMMA)


                            self.state = 4351
                            self.match(TSqlParser.BEFORE)
                            self.state = 4352
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.DELETE or _la==TSqlParser.UPDATE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                 
                    self.state = 4357
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,475,self._ctx)

                self.state = 4360 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.ADD or _la==TSqlParser.COMMA):
                    break

            self.state = 4372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.state = 4362
                self.match(TSqlParser.WITH)
                self.state = 4363
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4364
                self.match(TSqlParser.STATE)
                self.state = 4365
                self.match(TSqlParser.EQUAL)
                self.state = 4366
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.SCHEMABINDING:
                    self.state = 4367
                    self.match(TSqlParser.SCHEMABINDING)
                    self.state = 4368
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4371
                self.match(TSqlParser.RR_BRACKET)


            self.state = 4377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.NOT:
                self.state = 4374
                self.match(TSqlParser.NOT)
                self.state = 4375
                self.match(TSqlParser.FOR)
                self.state = 4376
                self.match(TSqlParser.REPLICATION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.sequence_name = None # IdContext
            self.sequnce_increment = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(TSqlParser.SEQUENCE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def RESTART(self):
            return self.getToken(TSqlParser.RESTART, 0)

        def INCREMENT(self):
            return self.getToken(TSqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def MINVALUE(self):
            return self.getToken(TSqlParser.MINVALUE, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO)
            else:
                return self.getToken(TSqlParser.NO, i)

        def MAXVALUE(self):
            return self.getToken(TSqlParser.MAXVALUE, 0)

        def CYCLE(self):
            return self.getToken(TSqlParser.CYCLE, 0)

        def CACHE(self):
            return self.getToken(TSqlParser.CACHE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence" ):
                listener.enterAlter_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence" ):
                listener.exitAlter_sequence(self)




    def alter_sequence(self):

        localctx = TSqlParser.Alter_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_alter_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4379
            self.match(TSqlParser.ALTER)
            self.state = 4380
            self.match(TSqlParser.SEQUENCE)
            self.state = 4384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
            if la_ == 1:
                self.state = 4381
                localctx.schema_name = self.id()
                self.state = 4382
                self.match(TSqlParser.DOT)


            self.state = 4386
            localctx.sequence_name = self.id()
            self.state = 4392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.RESTART:
                self.state = 4387
                self.match(TSqlParser.RESTART)
                self.state = 4390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
                if la_ == 1:
                    self.state = 4388
                    self.match(TSqlParser.WITH)
                    self.state = 4389
                    self.match(TSqlParser.DECIMAL)




            self.state = 4397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INCREMENT:
                self.state = 4394
                self.match(TSqlParser.INCREMENT)
                self.state = 4395
                self.match(TSqlParser.BY)
                self.state = 4396
                localctx.sequnce_increment = self.match(TSqlParser.DECIMAL)


            self.state = 4403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 4399
                self.match(TSqlParser.MINVALUE)
                self.state = 4400
                self.match(TSqlParser.DECIMAL)

            elif la_ == 2:
                self.state = 4401
                self.match(TSqlParser.NO)
                self.state = 4402
                self.match(TSqlParser.MINVALUE)


            self.state = 4409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                self.state = 4405
                self.match(TSqlParser.MAXVALUE)
                self.state = 4406
                self.match(TSqlParser.DECIMAL)

            elif la_ == 2:
                self.state = 4407
                self.match(TSqlParser.NO)
                self.state = 4408
                self.match(TSqlParser.MAXVALUE)


            self.state = 4414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 4411
                self.match(TSqlParser.CYCLE)

            elif la_ == 2:
                self.state = 4412
                self.match(TSqlParser.NO)
                self.state = 4413
                self.match(TSqlParser.CYCLE)


            self.state = 4420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.state = 4416
                self.match(TSqlParser.CACHE)
                self.state = 4417
                self.match(TSqlParser.DECIMAL)

            elif la_ == 2:
                self.state = 4418
                self.match(TSqlParser.NO)
                self.state = 4419
                self.match(TSqlParser.CACHE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # IdContext
            self.sequence_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(TSqlParser.SEQUENCE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def START(self):
            return self.getToken(TSqlParser.START, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def INCREMENT(self):
            return self.getToken(TSqlParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def MINVALUE(self):
            return self.getToken(TSqlParser.MINVALUE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO)
            else:
                return self.getToken(TSqlParser.NO, i)

        def MAXVALUE(self):
            return self.getToken(TSqlParser.MAXVALUE, 0)

        def CYCLE(self):
            return self.getToken(TSqlParser.CYCLE, 0)

        def CACHE(self):
            return self.getToken(TSqlParser.CACHE, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)




    def create_sequence(self):

        localctx = TSqlParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4422
            self.match(TSqlParser.CREATE)
            self.state = 4423
            self.match(TSqlParser.SEQUENCE)
            self.state = 4427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.state = 4424
                localctx.schema_name = self.id()
                self.state = 4425
                self.match(TSqlParser.DOT)


            self.state = 4429
            localctx.sequence_name = self.id()
            self.state = 4432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 4430
                self.match(TSqlParser.AS)
                self.state = 4431
                self.data_type()


            self.state = 4437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.state = 4434
                self.match(TSqlParser.START)
                self.state = 4435
                self.match(TSqlParser.WITH)
                self.state = 4436
                self.match(TSqlParser.DECIMAL)


            self.state = 4445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INCREMENT:
                self.state = 4439
                self.match(TSqlParser.INCREMENT)
                self.state = 4440
                self.match(TSqlParser.BY)
                self.state = 4442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.MINUS:
                    self.state = 4441
                    self.match(TSqlParser.MINUS)


                self.state = 4444
                self.match(TSqlParser.DECIMAL)


            self.state = 4453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.state = 4447
                self.match(TSqlParser.MINVALUE)
                self.state = 4449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
                if la_ == 1:
                    self.state = 4448
                    self.match(TSqlParser.DECIMAL)



            elif la_ == 2:
                self.state = 4451
                self.match(TSqlParser.NO)
                self.state = 4452
                self.match(TSqlParser.MINVALUE)


            self.state = 4461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.state = 4455
                self.match(TSqlParser.MAXVALUE)
                self.state = 4457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 4456
                    self.match(TSqlParser.DECIMAL)



            elif la_ == 2:
                self.state = 4459
                self.match(TSqlParser.NO)
                self.state = 4460
                self.match(TSqlParser.MAXVALUE)


            self.state = 4466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
            if la_ == 1:
                self.state = 4463
                self.match(TSqlParser.CYCLE)

            elif la_ == 2:
                self.state = 4464
                self.match(TSqlParser.NO)
                self.state = 4465
                self.match(TSqlParser.CYCLE)


            self.state = 4474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.state = 4468
                self.match(TSqlParser.CACHE)
                self.state = 4470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
                if la_ == 1:
                    self.state = 4469
                    self.match(TSqlParser.DECIMAL)



            elif la_ == 2:
                self.state = 4472
                self.match(TSqlParser.NO)
                self.state = 4473
                self.match(TSqlParser.CACHE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_auditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_name = None # IdContext
            self.filepath = None # Token
            self.max_rollover_files = None # Token
            self.max_files = None # Token
            self.queue_delay = None # Token
            self.event_field_name = None # IdContext
            self.new_audit_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def APPLICATION_LOG(self):
            return self.getToken(TSqlParser.APPLICATION_LOG, 0)

        def SECURITY_LOG(self):
            return self.getToken(TSqlParser.SECURITY_LOG, 0)

        def QUEUE_DELAY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.QUEUE_DELAY)
            else:
                return self.getToken(TSqlParser.QUEUE_DELAY, i)

        def ON_FAILURE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON_FAILURE)
            else:
                return self.getToken(TSqlParser.ON_FAILURE, i)

        def STATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATE)
            else:
                return self.getToken(TSqlParser.STATE, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTINUE)
            else:
                return self.getToken(TSqlParser.CONTINUE, i)

        def SHUTDOWN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SHUTDOWN)
            else:
                return self.getToken(TSqlParser.SHUTDOWN, i)

        def FAIL_OPERATION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FAIL_OPERATION)
            else:
                return self.getToken(TSqlParser.FAIL_OPERATION, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def FILEPATH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILEPATH)
            else:
                return self.getToken(TSqlParser.FILEPATH, i)

        def MAXSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAXSIZE)
            else:
                return self.getToken(TSqlParser.MAXSIZE, i)

        def MAX_ROLLOVER_FILES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_ROLLOVER_FILES)
            else:
                return self.getToken(TSqlParser.MAX_ROLLOVER_FILES, i)

        def MAX_FILES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_FILES)
            else:
                return self.getToken(TSqlParser.MAX_FILES, i)

        def RESERVE_DISK_SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESERVE_DISK_SPACE)
            else:
                return self.getToken(TSqlParser.RESERVE_DISK_SPACE, i)

        def UNLIMITED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLIMITED)
            else:
                return self.getToken(TSqlParser.UNLIMITED, i)

        def MB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MB)
            else:
                return self.getToken(TSqlParser.MB, i)

        def GB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GB)
            else:
                return self.getToken(TSqlParser.GB, i)

        def TB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TB)
            else:
                return self.getToken(TSqlParser.TB, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_audit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_audit" ):
                listener.enterAlter_server_audit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_audit" ):
                listener.exitAlter_server_audit(self)




    def alter_server_audit(self):

        localctx = TSqlParser.Alter_server_auditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_alter_server_audit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4476
            self.match(TSqlParser.ALTER)
            self.state = 4477
            self.match(TSqlParser.SERVER)
            self.state = 4478
            self.match(TSqlParser.AUDIT)
            self.state = 4479
            localctx.audit_name = self.id()
            self.state = 4611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,524,self._ctx)
            if la_ == 1:
                self.state = 4527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.TO:
                    self.state = 4480
                    self.match(TSqlParser.TO)
                    self.state = 4525
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.FILE]:
                        self.state = 4481
                        self.match(TSqlParser.FILE)

                        self.state = 4482
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 4519
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==TSqlParser.FILEPATH or ((((_la - 579)) & ~0x3f) == 0 and ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_FILES - 579)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXSIZE - 579)))) != 0) or _la==TSqlParser.RESERVE_DISK_SPACE or _la==TSqlParser.COMMA:
                            self.state = 4517
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
                            if la_ == 1:
                                self.state = 4484
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4483
                                    self.match(TSqlParser.COMMA)


                                self.state = 4486
                                self.match(TSqlParser.FILEPATH)
                                self.state = 4487
                                self.match(TSqlParser.EQUAL)
                                self.state = 4488
                                localctx.filepath = self.match(TSqlParser.STRING)
                                pass

                            elif la_ == 2:
                                self.state = 4490
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4489
                                    self.match(TSqlParser.COMMA)


                                self.state = 4492
                                self.match(TSqlParser.MAXSIZE)
                                self.state = 4493
                                self.match(TSqlParser.EQUAL)
                                self.state = 4497
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [TSqlParser.DECIMAL]:
                                    self.state = 4494
                                    self.match(TSqlParser.DECIMAL)
                                    self.state = 4495
                                    _la = self._input.LA(1)
                                    if not(_la==TSqlParser.GB or _la==TSqlParser.MB or _la==TSqlParser.TB):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    pass
                                elif token in [TSqlParser.UNLIMITED]:
                                    self.state = 4496
                                    self.match(TSqlParser.UNLIMITED)
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass

                            elif la_ == 3:
                                self.state = 4500
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4499
                                    self.match(TSqlParser.COMMA)


                                self.state = 4502
                                self.match(TSqlParser.MAX_ROLLOVER_FILES)
                                self.state = 4503
                                self.match(TSqlParser.EQUAL)
                                self.state = 4504
                                localctx.max_rollover_files = self._input.LT(1)
                                _la = self._input.LA(1)
                                if not(_la==TSqlParser.UNLIMITED or _la==TSqlParser.DECIMAL):
                                    localctx.max_rollover_files = self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                            elif la_ == 4:
                                self.state = 4506
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4505
                                    self.match(TSqlParser.COMMA)


                                self.state = 4508
                                self.match(TSqlParser.MAX_FILES)
                                self.state = 4509
                                self.match(TSqlParser.EQUAL)
                                self.state = 4510
                                localctx.max_files = self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 5:
                                self.state = 4512
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4511
                                    self.match(TSqlParser.COMMA)


                                self.state = 4514
                                self.match(TSqlParser.RESERVE_DISK_SPACE)
                                self.state = 4515
                                self.match(TSqlParser.EQUAL)
                                self.state = 4516
                                _la = self._input.LA(1)
                                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass


                            self.state = 4521
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 4522
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [TSqlParser.APPLICATION_LOG]:
                        self.state = 4523
                        self.match(TSqlParser.APPLICATION_LOG)
                        pass
                    elif token in [TSqlParser.SECURITY_LOG]:
                        self.state = 4524
                        self.match(TSqlParser.SECURITY_LOG)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 4529
                    self.match(TSqlParser.WITH)
                    self.state = 4530
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 4551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.ON_FAILURE or _la==TSqlParser.STATE or _la==TSqlParser.QUEUE_DELAY or _la==TSqlParser.COMMA:
                        self.state = 4549
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,513,self._ctx)
                        if la_ == 1:
                            self.state = 4532
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4531
                                self.match(TSqlParser.COMMA)


                            self.state = 4534
                            self.match(TSqlParser.QUEUE_DELAY)
                            self.state = 4535
                            self.match(TSqlParser.EQUAL)
                            self.state = 4536
                            localctx.queue_delay = self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 4538
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4537
                                self.match(TSqlParser.COMMA)


                            self.state = 4540
                            self.match(TSqlParser.ON_FAILURE)
                            self.state = 4541
                            self.match(TSqlParser.EQUAL)
                            self.state = 4542
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.CONTINUE or _la==TSqlParser.SHUTDOWN or _la==TSqlParser.FAIL_OPERATION):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 3:
                            self.state = 4544
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4543
                                self.match(TSqlParser.COMMA)


                            self.state = 4546
                            self.match(TSqlParser.STATE)
                            self.state = 4547
                            self.match(TSqlParser.EQUAL)
                            self.state = 4548
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass


                        self.state = 4553
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4554
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 4603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.WHERE:
                    self.state = 4557
                    self.match(TSqlParser.WHERE)
                    self.state = 4601
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
                    if la_ == 1:
                        self.state = 4559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 4558
                            self.match(TSqlParser.COMMA)


                        self.state = 4562
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.NOT:
                            self.state = 4561
                            self.match(TSqlParser.NOT)


                        self.state = 4564
                        localctx.event_field_name = self.id()
                        self.state = 4576
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                        if la_ == 1:
                            self.state = 4565
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 4566
                            self.match(TSqlParser.LESS)
                            self.state = 4567
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 3:
                            self.state = 4568
                            self.match(TSqlParser.EXCLAMATION)
                            self.state = 4569
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 4:
                            self.state = 4570
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 5:
                            self.state = 4571
                            self.match(TSqlParser.GREATER)
                            self.state = 4572
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 6:
                            self.state = 4573
                            self.match(TSqlParser.LESS)
                            pass

                        elif la_ == 7:
                            self.state = 4574
                            self.match(TSqlParser.LESS)
                            self.state = 4575
                            self.match(TSqlParser.EQUAL)
                            pass


                        self.state = 4578
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 4581
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 4580
                            self.match(TSqlParser.COMMA)


                        self.state = 4583
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.AND or _la==TSqlParser.OR):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4585
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.NOT:
                            self.state = 4584
                            self.match(TSqlParser.NOT)


                        self.state = 4598
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                        if la_ == 1:
                            self.state = 4587
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 4588
                            self.match(TSqlParser.LESS)
                            self.state = 4589
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 3:
                            self.state = 4590
                            self.match(TSqlParser.EXCLAMATION)
                            self.state = 4591
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 4:
                            self.state = 4592
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 5:
                            self.state = 4593
                            self.match(TSqlParser.GREATER)
                            self.state = 4594
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 6:
                            self.state = 4595
                            self.match(TSqlParser.LESS)
                            pass

                        elif la_ == 7:
                            self.state = 4596
                            self.match(TSqlParser.LESS)
                            self.state = 4597
                            self.match(TSqlParser.EQUAL)
                            pass


                        self.state = 4600
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass




                pass

            elif la_ == 2:
                self.state = 4605
                self.match(TSqlParser.REMOVE)
                self.state = 4606
                self.match(TSqlParser.WHERE)
                pass

            elif la_ == 3:
                self.state = 4607
                self.match(TSqlParser.MODIFY)
                self.state = 4608
                self.match(TSqlParser.NAME)
                self.state = 4609
                self.match(TSqlParser.EQUAL)
                self.state = 4610
                localctx.new_audit_name = self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_server_auditContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_name = None # IdContext
            self.filepath = None # Token
            self.max_rollover_files = None # Token
            self.max_files = None # Token
            self.queue_delay = None # Token
            self.audit_guid = None # IdContext
            self.event_field_name = None # IdContext
            self.new_audit_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def APPLICATION_LOG(self):
            return self.getToken(TSqlParser.APPLICATION_LOG, 0)

        def SECURITY_LOG(self):
            return self.getToken(TSqlParser.SECURITY_LOG, 0)

        def QUEUE_DELAY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.QUEUE_DELAY)
            else:
                return self.getToken(TSqlParser.QUEUE_DELAY, i)

        def ON_FAILURE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON_FAILURE)
            else:
                return self.getToken(TSqlParser.ON_FAILURE, i)

        def STATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATE)
            else:
                return self.getToken(TSqlParser.STATE, i)

        def AUDIT_GUID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUDIT_GUID)
            else:
                return self.getToken(TSqlParser.AUDIT_GUID, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def CONTINUE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTINUE)
            else:
                return self.getToken(TSqlParser.CONTINUE, i)

        def SHUTDOWN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SHUTDOWN)
            else:
                return self.getToken(TSqlParser.SHUTDOWN, i)

        def FAIL_OPERATION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FAIL_OPERATION)
            else:
                return self.getToken(TSqlParser.FAIL_OPERATION, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def FILEPATH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILEPATH)
            else:
                return self.getToken(TSqlParser.FILEPATH, i)

        def MAXSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAXSIZE)
            else:
                return self.getToken(TSqlParser.MAXSIZE, i)

        def MAX_ROLLOVER_FILES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_ROLLOVER_FILES)
            else:
                return self.getToken(TSqlParser.MAX_ROLLOVER_FILES, i)

        def MAX_FILES(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_FILES)
            else:
                return self.getToken(TSqlParser.MAX_FILES, i)

        def RESERVE_DISK_SPACE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESERVE_DISK_SPACE)
            else:
                return self.getToken(TSqlParser.RESERVE_DISK_SPACE, i)

        def UNLIMITED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.UNLIMITED)
            else:
                return self.getToken(TSqlParser.UNLIMITED, i)

        def MB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MB)
            else:
                return self.getToken(TSqlParser.MB, i)

        def GB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GB)
            else:
                return self.getToken(TSqlParser.GB, i)

        def TB(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TB)
            else:
                return self.getToken(TSqlParser.TB, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_server_audit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_server_audit" ):
                listener.enterCreate_server_audit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_server_audit" ):
                listener.exitCreate_server_audit(self)




    def create_server_audit(self):

        localctx = TSqlParser.Create_server_auditContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_create_server_audit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4613
            self.match(TSqlParser.CREATE)
            self.state = 4614
            self.match(TSqlParser.SERVER)
            self.state = 4615
            self.match(TSqlParser.AUDIT)
            self.state = 4616
            localctx.audit_name = self.id()
            self.state = 4754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
            if la_ == 1:
                self.state = 4664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.TO:
                    self.state = 4617
                    self.match(TSqlParser.TO)
                    self.state = 4662
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.FILE]:
                        self.state = 4618
                        self.match(TSqlParser.FILE)

                        self.state = 4619
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 4656
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==TSqlParser.FILEPATH or ((((_la - 579)) & ~0x3f) == 0 and ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_FILES - 579)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXSIZE - 579)))) != 0) or _la==TSqlParser.RESERVE_DISK_SPACE or _la==TSqlParser.COMMA:
                            self.state = 4654
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                            if la_ == 1:
                                self.state = 4621
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4620
                                    self.match(TSqlParser.COMMA)


                                self.state = 4623
                                self.match(TSqlParser.FILEPATH)
                                self.state = 4624
                                self.match(TSqlParser.EQUAL)
                                self.state = 4625
                                localctx.filepath = self.match(TSqlParser.STRING)
                                pass

                            elif la_ == 2:
                                self.state = 4627
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4626
                                    self.match(TSqlParser.COMMA)


                                self.state = 4629
                                self.match(TSqlParser.MAXSIZE)
                                self.state = 4630
                                self.match(TSqlParser.EQUAL)
                                self.state = 4634
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [TSqlParser.DECIMAL]:
                                    self.state = 4631
                                    self.match(TSqlParser.DECIMAL)
                                    self.state = 4632
                                    _la = self._input.LA(1)
                                    if not(_la==TSqlParser.GB or _la==TSqlParser.MB or _la==TSqlParser.TB):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    pass
                                elif token in [TSqlParser.UNLIMITED]:
                                    self.state = 4633
                                    self.match(TSqlParser.UNLIMITED)
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass

                            elif la_ == 3:
                                self.state = 4637
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4636
                                    self.match(TSqlParser.COMMA)


                                self.state = 4639
                                self.match(TSqlParser.MAX_ROLLOVER_FILES)
                                self.state = 4640
                                self.match(TSqlParser.EQUAL)
                                self.state = 4641
                                localctx.max_rollover_files = self._input.LT(1)
                                _la = self._input.LA(1)
                                if not(_la==TSqlParser.UNLIMITED or _la==TSqlParser.DECIMAL):
                                    localctx.max_rollover_files = self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                            elif la_ == 4:
                                self.state = 4643
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4642
                                    self.match(TSqlParser.COMMA)


                                self.state = 4645
                                self.match(TSqlParser.MAX_FILES)
                                self.state = 4646
                                self.match(TSqlParser.EQUAL)
                                self.state = 4647
                                localctx.max_files = self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 5:
                                self.state = 4649
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4648
                                    self.match(TSqlParser.COMMA)


                                self.state = 4651
                                self.match(TSqlParser.RESERVE_DISK_SPACE)
                                self.state = 4652
                                self.match(TSqlParser.EQUAL)
                                self.state = 4653
                                _la = self._input.LA(1)
                                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass


                            self.state = 4658
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 4659
                        self.match(TSqlParser.RR_BRACKET)
                        pass
                    elif token in [TSqlParser.APPLICATION_LOG]:
                        self.state = 4660
                        self.match(TSqlParser.APPLICATION_LOG)
                        pass
                    elif token in [TSqlParser.SECURITY_LOG]:
                        self.state = 4661
                        self.match(TSqlParser.SECURITY_LOG)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
                if la_ == 1:
                    self.state = 4666
                    self.match(TSqlParser.WITH)
                    self.state = 4667
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 4694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.ON_FAILURE or _la==TSqlParser.STATE or _la==TSqlParser.AUDIT_GUID or _la==TSqlParser.QUEUE_DELAY or _la==TSqlParser.COMMA:
                        self.state = 4692
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
                        if la_ == 1:
                            self.state = 4669
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4668
                                self.match(TSqlParser.COMMA)


                            self.state = 4671
                            self.match(TSqlParser.QUEUE_DELAY)
                            self.state = 4672
                            self.match(TSqlParser.EQUAL)
                            self.state = 4673
                            localctx.queue_delay = self.match(TSqlParser.DECIMAL)
                            pass

                        elif la_ == 2:
                            self.state = 4675
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4674
                                self.match(TSqlParser.COMMA)


                            self.state = 4677
                            self.match(TSqlParser.ON_FAILURE)
                            self.state = 4678
                            self.match(TSqlParser.EQUAL)
                            self.state = 4679
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.CONTINUE or _la==TSqlParser.SHUTDOWN or _la==TSqlParser.FAIL_OPERATION):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 3:
                            self.state = 4681
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4680
                                self.match(TSqlParser.COMMA)


                            self.state = 4683
                            self.match(TSqlParser.STATE)
                            self.state = 4684
                            self.match(TSqlParser.EQUAL)
                            self.state = 4685
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 4:
                            self.state = 4687
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 4686
                                self.match(TSqlParser.COMMA)


                            self.state = 4689
                            self.match(TSqlParser.AUDIT_GUID)
                            self.state = 4690
                            self.match(TSqlParser.EQUAL)
                            self.state = 4691
                            localctx.audit_guid = self.id()
                            pass


                        self.state = 4696
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4697
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 4746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.WHERE:
                    self.state = 4700
                    self.match(TSqlParser.WHERE)
                    self.state = 4744
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
                    if la_ == 1:
                        self.state = 4702
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 4701
                            self.match(TSqlParser.COMMA)


                        self.state = 4705
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.NOT:
                            self.state = 4704
                            self.match(TSqlParser.NOT)


                        self.state = 4707
                        localctx.event_field_name = self.id()
                        self.state = 4719
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,544,self._ctx)
                        if la_ == 1:
                            self.state = 4708
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 4709
                            self.match(TSqlParser.LESS)
                            self.state = 4710
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 3:
                            self.state = 4711
                            self.match(TSqlParser.EXCLAMATION)
                            self.state = 4712
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 4:
                            self.state = 4713
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 5:
                            self.state = 4714
                            self.match(TSqlParser.GREATER)
                            self.state = 4715
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 6:
                            self.state = 4716
                            self.match(TSqlParser.LESS)
                            pass

                        elif la_ == 7:
                            self.state = 4717
                            self.match(TSqlParser.LESS)
                            self.state = 4718
                            self.match(TSqlParser.EQUAL)
                            pass


                        self.state = 4721
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 4724
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 4723
                            self.match(TSqlParser.COMMA)


                        self.state = 4726
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.AND or _la==TSqlParser.OR):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4728
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.NOT:
                            self.state = 4727
                            self.match(TSqlParser.NOT)


                        self.state = 4741
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
                        if la_ == 1:
                            self.state = 4730
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 2:
                            self.state = 4731
                            self.match(TSqlParser.LESS)
                            self.state = 4732
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 3:
                            self.state = 4733
                            self.match(TSqlParser.EXCLAMATION)
                            self.state = 4734
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 4:
                            self.state = 4735
                            self.match(TSqlParser.GREATER)
                            pass

                        elif la_ == 5:
                            self.state = 4736
                            self.match(TSqlParser.GREATER)
                            self.state = 4737
                            self.match(TSqlParser.EQUAL)
                            pass

                        elif la_ == 6:
                            self.state = 4738
                            self.match(TSqlParser.LESS)
                            pass

                        elif la_ == 7:
                            self.state = 4739
                            self.match(TSqlParser.LESS)
                            self.state = 4740
                            self.match(TSqlParser.EQUAL)
                            pass


                        self.state = 4743
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass




                pass

            elif la_ == 2:
                self.state = 4748
                self.match(TSqlParser.REMOVE)
                self.state = 4749
                self.match(TSqlParser.WHERE)
                pass

            elif la_ == 3:
                self.state = 4750
                self.match(TSqlParser.MODIFY)
                self.state = 4751
                self.match(TSqlParser.NAME)
                self.state = 4752
                self.match(TSqlParser.EQUAL)
                self.state = 4753
                localctx.new_audit_name = self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_audit_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # IdContext
            self.audit_name = None # IdContext
            self.audit_action_group_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVER)
            else:
                return self.getToken(TSqlParser.SERVER, i)

        def AUDIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUDIT)
            else:
                return self.getToken(TSqlParser.AUDIT, i)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def DROP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DROP)
            else:
                return self.getToken(TSqlParser.DROP, i)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_audit_specification" ):
                listener.enterAlter_server_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_audit_specification" ):
                listener.exitAlter_server_audit_specification(self)




    def alter_server_audit_specification(self):

        localctx = TSqlParser.Alter_server_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_alter_server_audit_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4756
            self.match(TSqlParser.ALTER)
            self.state = 4757
            self.match(TSqlParser.SERVER)
            self.state = 4758
            self.match(TSqlParser.AUDIT)
            self.state = 4759
            self.match(TSqlParser.SPECIFICATION)
            self.state = 4760
            localctx.audit_specification_name = self.id()
            self.state = 4765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 4761
                self.match(TSqlParser.FOR)
                self.state = 4762
                self.match(TSqlParser.SERVER)
                self.state = 4763
                self.match(TSqlParser.AUDIT)
                self.state = 4764
                localctx.audit_name = self.id()


            self.state = 4774
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,552,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4767
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4768
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 4769
                    localctx.audit_action_group_name = self.id()
                    self.state = 4770
                    self.match(TSqlParser.RR_BRACKET) 
                self.state = 4776
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,552,self._ctx)

            self.state = 4783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
            if la_ == 1:
                self.state = 4777
                self.match(TSqlParser.WITH)
                self.state = 4778
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4779
                self.match(TSqlParser.STATE)
                self.state = 4780
                self.match(TSqlParser.EQUAL)
                self.state = 4781
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4782
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_server_audit_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.audit_specification_name = None # IdContext
            self.audit_name = None # IdContext
            self.audit_action_group_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SERVER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVER)
            else:
                return self.getToken(TSqlParser.SERVER, i)

        def AUDIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AUDIT)
            else:
                return self.getToken(TSqlParser.AUDIT, i)

        def SPECIFICATION(self):
            return self.getToken(TSqlParser.SPECIFICATION, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_server_audit_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_server_audit_specification" ):
                listener.enterCreate_server_audit_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_server_audit_specification" ):
                listener.exitCreate_server_audit_specification(self)




    def create_server_audit_specification(self):

        localctx = TSqlParser.Create_server_audit_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_create_server_audit_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4785
            self.match(TSqlParser.CREATE)
            self.state = 4786
            self.match(TSqlParser.SERVER)
            self.state = 4787
            self.match(TSqlParser.AUDIT)
            self.state = 4788
            self.match(TSqlParser.SPECIFICATION)
            self.state = 4789
            localctx.audit_specification_name = self.id()
            self.state = 4794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 4790
                self.match(TSqlParser.FOR)
                self.state = 4791
                self.match(TSqlParser.SERVER)
                self.state = 4792
                self.match(TSqlParser.AUDIT)
                self.state = 4793
                localctx.audit_name = self.id()


            self.state = 4803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.ADD:
                self.state = 4796
                self.match(TSqlParser.ADD)
                self.state = 4797
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4798
                localctx.audit_action_group_name = self.id()
                self.state = 4799
                self.match(TSqlParser.RR_BRACKET)
                self.state = 4805
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
            if la_ == 1:
                self.state = 4806
                self.match(TSqlParser.WITH)
                self.state = 4807
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4808
                self.match(TSqlParser.STATE)
                self.state = 4809
                self.match(TSqlParser.EQUAL)
                self.state = 4810
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4811
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_configurationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def CONFIGURATION(self):
            return self.getToken(TSqlParser.CONFIGURATION, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SET)
            else:
                return self.getToken(TSqlParser.SET, i)

        def PROCESS(self):
            return self.getToken(TSqlParser.PROCESS, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TSqlParser.DIAGNOSTICS, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def FAILOVER(self):
            return self.getToken(TSqlParser.FAILOVER, 0)

        def CLUSTER(self):
            return self.getToken(TSqlParser.CLUSTER, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def HADR(self):
            return self.getToken(TSqlParser.HADR, 0)

        def CONTEXT(self):
            return self.getToken(TSqlParser.CONTEXT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def BUFFER(self):
            return self.getToken(TSqlParser.BUFFER, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def EXTENSION(self):
            return self.getToken(TSqlParser.EXTENSION, 0)

        def SOFTNUMA(self):
            return self.getToken(TSqlParser.SOFTNUMA, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def MAX_SIZE(self):
            return self.getToken(TSqlParser.MAX_SIZE, 0)

        def MAX_FILES(self):
            return self.getToken(TSqlParser.MAX_FILES, 0)

        def VERBOSELOGGING(self):
            return self.getToken(TSqlParser.VERBOSELOGGING, 0)

        def SQLDUMPERFLAGS(self):
            return self.getToken(TSqlParser.SQLDUMPERFLAGS, 0)

        def SQLDUMPERPATH(self):
            return self.getToken(TSqlParser.SQLDUMPERPATH, 0)

        def SQLDUMPERTIMEOUT(self):
            return self.getToken(TSqlParser.SQLDUMPERTIMEOUT, 0)

        def FAILURECONDITIONLEVEL(self):
            return self.getToken(TSqlParser.FAILURECONDITIONLEVEL, 0)

        def HEALTHCHECKTIMEOUT(self):
            return self.getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def FILENAME(self):
            return self.getToken(TSqlParser.FILENAME, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def KB(self):
            return self.getToken(TSqlParser.KB, 0)

        def MB(self):
            return self.getToken(TSqlParser.MB, 0)

        def GB(self):
            return self.getToken(TSqlParser.GB, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_configuration" ):
                listener.enterAlter_server_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_configuration" ):
                listener.exitAlter_server_configuration(self)




    def alter_server_configuration(self):

        localctx = TSqlParser.Alter_server_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_alter_server_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4814
            self.match(TSqlParser.ALTER)
            self.state = 4815
            self.match(TSqlParser.SERVER)
            self.state = 4816
            self.match(TSqlParser.CONFIGURATION)
            self.state = 4817
            self.match(TSqlParser.SET)

            self.state = 4923
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.PROCESS]:
                self.state = 4818
                self.match(TSqlParser.PROCESS)
                self.state = 4819
                self.match(TSqlParser.AFFINITY)
                self.state = 4855
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CPU]:
                    self.state = 4820
                    self.match(TSqlParser.CPU)
                    self.state = 4821
                    self.match(TSqlParser.EQUAL)
                    self.state = 4837
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.AUTO]:
                        self.state = 4822
                        self.match(TSqlParser.AUTO)
                        pass
                    elif token in [TSqlParser.DECIMAL, TSqlParser.COMMA]:
                        self.state = 4833 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 4833
                                self._errHandler.sync(self)
                                la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
                                if la_ == 1:
                                    self.state = 4824
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==TSqlParser.COMMA:
                                        self.state = 4823
                                        self.match(TSqlParser.COMMA)


                                    self.state = 4826
                                    self.match(TSqlParser.DECIMAL)
                                    pass

                                elif la_ == 2:
                                    self.state = 4828
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==TSqlParser.COMMA:
                                        self.state = 4827
                                        self.match(TSqlParser.COMMA)


                                    self.state = 4830
                                    self.match(TSqlParser.DECIMAL)
                                    self.state = 4831
                                    self.match(TSqlParser.TO)
                                    self.state = 4832
                                    self.match(TSqlParser.DECIMAL)
                                    pass



                            else:
                                raise NoViableAltException(self)
                            self.state = 4835 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,560,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [TSqlParser.NUMANODE]:
                    self.state = 4839
                    self.match(TSqlParser.NUMANODE)
                    self.state = 4840
                    self.match(TSqlParser.EQUAL)
                    self.state = 4851 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 4851
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
                            if la_ == 1:
                                self.state = 4842
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4841
                                    self.match(TSqlParser.COMMA)


                                self.state = 4844
                                self.match(TSqlParser.DECIMAL)
                                pass

                            elif la_ == 2:
                                self.state = 4846
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 4845
                                    self.match(TSqlParser.COMMA)


                                self.state = 4848
                                self.match(TSqlParser.DECIMAL)
                                self.state = 4849
                                self.match(TSqlParser.TO)
                                self.state = 4850
                                self.match(TSqlParser.DECIMAL)
                                pass



                        else:
                            raise NoViableAltException(self)
                        self.state = 4853 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,565,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.DIAGNOSTICS]:
                self.state = 4857
                self.match(TSqlParser.DIAGNOSTICS)
                self.state = 4858
                self.match(TSqlParser.LOG)
                self.state = 4874
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.ON]:
                    self.state = 4859
                    self.match(TSqlParser.ON)
                    pass
                elif token in [TSqlParser.OFF]:
                    self.state = 4860
                    self.match(TSqlParser.OFF)
                    pass
                elif token in [TSqlParser.PATH]:
                    self.state = 4861
                    self.match(TSqlParser.PATH)
                    self.state = 4862
                    self.match(TSqlParser.EQUAL)
                    self.state = 4863
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DEFAULT or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.MAX_SIZE]:
                    self.state = 4864
                    self.match(TSqlParser.MAX_SIZE)
                    self.state = 4865
                    self.match(TSqlParser.EQUAL)
                    self.state = 4869
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.DECIMAL]:
                        self.state = 4866
                        self.match(TSqlParser.DECIMAL)
                        self.state = 4867
                        self.match(TSqlParser.MB)
                        pass
                    elif token in [TSqlParser.DEFAULT]:
                        self.state = 4868
                        self.match(TSqlParser.DEFAULT)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [TSqlParser.MAX_FILES]:
                    self.state = 4871
                    self.match(TSqlParser.MAX_FILES)
                    self.state = 4872
                    self.match(TSqlParser.EQUAL)
                    self.state = 4873
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DEFAULT or _la==TSqlParser.DECIMAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.FAILOVER]:
                self.state = 4876
                self.match(TSqlParser.FAILOVER)
                self.state = 4877
                self.match(TSqlParser.CLUSTER)
                self.state = 4878
                self.match(TSqlParser.PROPERTY)
                self.state = 4896
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.VERBOSELOGGING]:
                    self.state = 4879
                    self.match(TSqlParser.VERBOSELOGGING)
                    self.state = 4880
                    self.match(TSqlParser.EQUAL)
                    self.state = 4881
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DEFAULT or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.SQLDUMPERFLAGS]:
                    self.state = 4882
                    self.match(TSqlParser.SQLDUMPERFLAGS)
                    self.state = 4883
                    self.match(TSqlParser.EQUAL)
                    self.state = 4884
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DEFAULT or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.SQLDUMPERPATH]:
                    self.state = 4885
                    self.match(TSqlParser.SQLDUMPERPATH)
                    self.state = 4886
                    self.match(TSqlParser.EQUAL)
                    self.state = 4887
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DEFAULT or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.SQLDUMPERTIMEOUT]:
                    self.state = 4888
                    self.match(TSqlParser.SQLDUMPERTIMEOUT)
                    self.state = 4889
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DEFAULT or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.FAILURECONDITIONLEVEL]:
                    self.state = 4890
                    self.match(TSqlParser.FAILURECONDITIONLEVEL)
                    self.state = 4891
                    self.match(TSqlParser.EQUAL)
                    self.state = 4892
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DEFAULT or _la==TSqlParser.STRING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.HEALTHCHECKTIMEOUT]:
                    self.state = 4893
                    self.match(TSqlParser.HEALTHCHECKTIMEOUT)
                    self.state = 4894
                    self.match(TSqlParser.EQUAL)
                    self.state = 4895
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DEFAULT or _la==TSqlParser.DECIMAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.HADR]:
                self.state = 4898
                self.match(TSqlParser.HADR)
                self.state = 4899
                self.match(TSqlParser.CLUSTER)
                self.state = 4900
                self.match(TSqlParser.CONTEXT)
                self.state = 4901
                self.match(TSqlParser.EQUAL)
                self.state = 4902
                _la = self._input.LA(1)
                if not(_la==TSqlParser.LOCAL or _la==TSqlParser.STRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.BUFFER]:
                self.state = 4903
                self.match(TSqlParser.BUFFER)
                self.state = 4904
                self.match(TSqlParser.POOL)
                self.state = 4905
                self.match(TSqlParser.EXTENSION)
                self.state = 4918
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.ON]:
                    self.state = 4906
                    self.match(TSqlParser.ON)
                    self.state = 4907
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 4908
                    self.match(TSqlParser.FILENAME)
                    self.state = 4909
                    self.match(TSqlParser.EQUAL)
                    self.state = 4910
                    self.match(TSqlParser.STRING)
                    self.state = 4911
                    self.match(TSqlParser.COMMA)
                    self.state = 4912
                    self.match(TSqlParser.SIZE)
                    self.state = 4913
                    self.match(TSqlParser.EQUAL)
                    self.state = 4914
                    self.match(TSqlParser.DECIMAL)
                    self.state = 4915
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.GB or _la==TSqlParser.KB or _la==TSqlParser.MB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4916
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [TSqlParser.OFF]:
                    self.state = 4917
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.SET]:
                self.state = 4920
                self.match(TSqlParser.SET)
                self.state = 4921
                self.match(TSqlParser.SOFTNUMA)
                self.state = 4922
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_role_name = None # IdContext
            self.server_principal = None # IdContext
            self.new_server_role_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def MEMBER(self):
            return self.getToken(TSqlParser.MEMBER, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_role" ):
                listener.enterAlter_server_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_role" ):
                listener.exitAlter_server_role(self)




    def alter_server_role(self):

        localctx = TSqlParser.Alter_server_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_alter_server_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4925
            self.match(TSqlParser.ALTER)
            self.state = 4926
            self.match(TSqlParser.SERVER)
            self.state = 4927
            self.match(TSqlParser.ROLE)
            self.state = 4928
            localctx.server_role_name = self.id()
            self.state = 4936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ADD, TSqlParser.DROP]:
                self.state = 4929
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4930
                self.match(TSqlParser.MEMBER)
                self.state = 4931
                localctx.server_principal = self.id()
                pass
            elif token in [TSqlParser.WITH]:
                self.state = 4932
                self.match(TSqlParser.WITH)
                self.state = 4933
                self.match(TSqlParser.NAME)
                self.state = 4934
                self.match(TSqlParser.EQUAL)
                self.state = 4935
                localctx.new_server_role_name = self.id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_server_roleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_role = None # IdContext
            self.server_principal = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_server_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_server_role" ):
                listener.enterCreate_server_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_server_role" ):
                listener.exitCreate_server_role(self)




    def create_server_role(self):

        localctx = TSqlParser.Create_server_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_create_server_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4938
            self.match(TSqlParser.CREATE)
            self.state = 4939
            self.match(TSqlParser.SERVER)
            self.state = 4940
            self.match(TSqlParser.ROLE)
            self.state = 4941
            localctx.server_role = self.id()
            self.state = 4944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 4942
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4943
                localctx.server_principal = self.id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_server_role_pdwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_role_name = None # IdContext
            self.login = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def MEMBER(self):
            return self.getToken(TSqlParser.MEMBER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_server_role_pdw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_server_role_pdw" ):
                listener.enterAlter_server_role_pdw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_server_role_pdw" ):
                listener.exitAlter_server_role_pdw(self)




    def alter_server_role_pdw(self):

        localctx = TSqlParser.Alter_server_role_pdwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_alter_server_role_pdw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4946
            self.match(TSqlParser.ALTER)
            self.state = 4947
            self.match(TSqlParser.SERVER)
            self.state = 4948
            self.match(TSqlParser.ROLE)
            self.state = 4949
            localctx.server_role_name = self.id()
            self.state = 4950
            _la = self._input.LA(1)
            if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4951
            self.match(TSqlParser.MEMBER)
            self.state = 4952
            localctx.login = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_serviceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.modified_service_name = None # IdContext
            self.schema_name = None # IdContext
            self.queue_name = None # IdContext
            self.modified_contract_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ADD)
            else:
                return self.getToken(TSqlParser.ADD, i)

        def DROP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DROP)
            else:
                return self.getToken(TSqlParser.DROP, i)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_service

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_service" ):
                listener.enterAlter_service(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_service" ):
                listener.exitAlter_service(self)




    def alter_service(self):

        localctx = TSqlParser.Alter_serviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_alter_service)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4954
            self.match(TSqlParser.ALTER)
            self.state = 4955
            self.match(TSqlParser.SERVICE)
            self.state = 4956
            localctx.modified_service_name = self.id()
            self.state = 4964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ON:
                self.state = 4957
                self.match(TSqlParser.ON)
                self.state = 4958
                self.match(TSqlParser.QUEUE)

                self.state = 4959
                localctx.schema_name = self.id()
                self.state = 4960
                self.match(TSqlParser.DOT)
                self.state = 4962
                localctx.queue_name = self.id()


            self.state = 4973
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,576,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4966
                        self.match(TSqlParser.COMMA)


                    self.state = 4969
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4970
                    localctx.modified_contract_name = self.id() 
                self.state = 4975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,576,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_serviceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.create_service_name = None # IdContext
            self.owner_name = None # IdContext
            self.schema_name = None # IdContext
            self.queue_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT)
            else:
                return self.getToken(TSqlParser.DEFAULT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_service

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_service" ):
                listener.enterCreate_service(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_service" ):
                listener.exitCreate_service(self)




    def create_service(self):

        localctx = TSqlParser.Create_serviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_create_service)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4976
            self.match(TSqlParser.CREATE)
            self.state = 4977
            self.match(TSqlParser.SERVICE)
            self.state = 4978
            localctx.create_service_name = self.id()
            self.state = 4981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 4979
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 4980
                localctx.owner_name = self.id()


            self.state = 4983
            self.match(TSqlParser.ON)
            self.state = 4984
            self.match(TSqlParser.QUEUE)
            self.state = 4988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
            if la_ == 1:
                self.state = 4985
                localctx.schema_name = self.id()
                self.state = 4986
                self.match(TSqlParser.DOT)


            self.state = 4990
            localctx.queue_name = self.id()
            self.state = 5004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,582,self._ctx)
            if la_ == 1:
                self.state = 4991
                self.match(TSqlParser.LR_BRACKET)
                self.state = 4999 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4993
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 4992
                        self.match(TSqlParser.COMMA)


                    self.state = 4997
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                        self.state = 4995
                        self.id()
                        pass
                    elif token in [TSqlParser.DEFAULT]:
                        self.state = 4996
                        self.match(TSqlParser.DEFAULT)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5001 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.DEFAULT - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                        break

                self.state = 5003
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_service_master_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.acold_account_name = None # Token
            self.old_password = None # Token
            self.new_account_name = None # Token
            self.new_password = None # Token

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def REGENERATE(self):
            return self.getToken(TSqlParser.REGENERATE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def OLD_ACCOUNT(self):
            return self.getToken(TSqlParser.OLD_ACCOUNT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def OLD_PASSWORD(self):
            return self.getToken(TSqlParser.OLD_PASSWORD, 0)

        def NEW_ACCOUNT(self):
            return self.getToken(TSqlParser.NEW_ACCOUNT, 0)

        def NEW_PASSWORD(self):
            return self.getToken(TSqlParser.NEW_PASSWORD, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_service_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_service_master_key" ):
                listener.enterAlter_service_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_service_master_key" ):
                listener.exitAlter_service_master_key(self)




    def alter_service_master_key(self):

        localctx = TSqlParser.Alter_service_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_alter_service_master_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5006
            self.match(TSqlParser.ALTER)
            self.state = 5007
            self.match(TSqlParser.SERVICE)
            self.state = 5008
            self.match(TSqlParser.MASTER)
            self.state = 5009
            self.match(TSqlParser.KEY)
            self.state = 5031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.REGENERATE, TSqlParser.FORCE]:
                self.state = 5011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FORCE:
                    self.state = 5010
                    self.match(TSqlParser.FORCE)


                self.state = 5013
                self.match(TSqlParser.REGENERATE)
                pass
            elif token in [TSqlParser.WITH]:
                self.state = 5014
                self.match(TSqlParser.WITH)
                self.state = 5029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
                if la_ == 1:
                    self.state = 5015
                    self.match(TSqlParser.OLD_ACCOUNT)
                    self.state = 5016
                    self.match(TSqlParser.EQUAL)
                    self.state = 5017
                    localctx.acold_account_name = self.match(TSqlParser.STRING)
                    self.state = 5018
                    self.match(TSqlParser.COMMA)
                    self.state = 5019
                    self.match(TSqlParser.OLD_PASSWORD)
                    self.state = 5020
                    self.match(TSqlParser.EQUAL)
                    self.state = 5021
                    localctx.old_password = self.match(TSqlParser.STRING)

                elif la_ == 2:
                    self.state = 5022
                    self.match(TSqlParser.NEW_ACCOUNT)
                    self.state = 5023
                    self.match(TSqlParser.EQUAL)
                    self.state = 5024
                    localctx.new_account_name = self.match(TSqlParser.STRING)
                    self.state = 5025
                    self.match(TSqlParser.COMMA)
                    self.state = 5026
                    self.match(TSqlParser.NEW_PASSWORD)
                    self.state = 5027
                    self.match(TSqlParser.EQUAL)
                    self.state = 5028
                    localctx.new_password = self.match(TSqlParser.STRING)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_symmetric_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdContext
            self.certificate_name = None # IdContext
            self.password = None # Token
            self.symmetric_key_name = None # IdContext
            self.Asym_key_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SYMMETRIC)
            else:
                return self.getToken(TSqlParser.SYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_symmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_symmetric_key" ):
                listener.enterAlter_symmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_symmetric_key" ):
                listener.exitAlter_symmetric_key(self)




    def alter_symmetric_key(self):

        localctx = TSqlParser.Alter_symmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_alter_symmetric_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5033
            self.match(TSqlParser.ALTER)
            self.state = 5034
            self.match(TSqlParser.SYMMETRIC)
            self.state = 5035
            self.match(TSqlParser.KEY)
            self.state = 5036
            localctx.key_name = self.id()

            self.state = 5037
            _la = self._input.LA(1)
            if not(_la==TSqlParser.ADD or _la==TSqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5038
            self.match(TSqlParser.ENCRYPTION)
            self.state = 5039
            self.match(TSqlParser.BY)
            self.state = 5051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CERTIFICATE]:
                self.state = 5040
                self.match(TSqlParser.CERTIFICATE)
                self.state = 5041
                localctx.certificate_name = self.id()
                pass
            elif token in [TSqlParser.PASSWORD]:
                self.state = 5042
                self.match(TSqlParser.PASSWORD)
                self.state = 5043
                self.match(TSqlParser.EQUAL)
                self.state = 5044
                localctx.password = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.SYMMETRIC]:
                self.state = 5045
                self.match(TSqlParser.SYMMETRIC)
                self.state = 5046
                self.match(TSqlParser.KEY)
                self.state = 5047
                localctx.symmetric_key_name = self.id()
                pass
            elif token in [TSqlParser.ASYMMETRIC]:
                self.state = 5048
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 5049
                self.match(TSqlParser.KEY)
                self.state = 5050
                localctx.Asym_key_name = self.id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_symmetric_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdContext
            self.owner_name = None # IdContext
            self.provider_name = None # IdContext
            self.key_pass_phrase = None # Token
            self.identity_phrase = None # Token
            self.provider_key_name = None # Token
            self.certificate_name = None # IdContext
            self.password = None # Token
            self.symmetric_key_name = None # IdContext
            self.asym_key_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def SYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SYMMETRIC)
            else:
                return self.getToken(TSqlParser.SYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def KEY_SOURCE(self):
            return self.getToken(TSqlParser.KEY_SOURCE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def IDENTITY_VALUE(self):
            return self.getToken(TSqlParser.IDENTITY_VALUE, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DES(self):
            return self.getToken(TSqlParser.DES, 0)

        def TRIPLE_DES(self):
            return self.getToken(TSqlParser.TRIPLE_DES, 0)

        def TRIPLE_DES_3KEY(self):
            return self.getToken(TSqlParser.TRIPLE_DES_3KEY, 0)

        def RC2(self):
            return self.getToken(TSqlParser.RC2, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def RC4_128(self):
            return self.getToken(TSqlParser.RC4_128, 0)

        def DESX(self):
            return self.getToken(TSqlParser.DESX, 0)

        def AES_128(self):
            return self.getToken(TSqlParser.AES_128, 0)

        def AES_192(self):
            return self.getToken(TSqlParser.AES_192, 0)

        def AES_256(self):
            return self.getToken(TSqlParser.AES_256, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_symmetric_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_symmetric_key" ):
                listener.enterCreate_symmetric_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_symmetric_key" ):
                listener.exitCreate_symmetric_key(self)




    def create_symmetric_key(self):

        localctx = TSqlParser.Create_symmetric_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_create_symmetric_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5053
            self.match(TSqlParser.ALTER)
            self.state = 5054
            self.match(TSqlParser.SYMMETRIC)
            self.state = 5055
            self.match(TSqlParser.KEY)
            self.state = 5056
            localctx.key_name = self.id()
            self.state = 5059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 5057
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 5058
                localctx.owner_name = self.id()


            self.state = 5064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 5061
                self.match(TSqlParser.FROM)
                self.state = 5062
                self.match(TSqlParser.PROVIDER)
                self.state = 5063
                localctx.provider_name = self.id()


            self.state = 5066
            self.match(TSqlParser.WITH)
            self.state = 5099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ALGORITHM, TSqlParser.CREATION_DISPOSITION, TSqlParser.IDENTITY_VALUE, TSqlParser.KEY_SOURCE, TSqlParser.PROVIDER_KEY_NAME]:
                self.state = 5082
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.KEY_SOURCE]:
                    self.state = 5067
                    self.match(TSqlParser.KEY_SOURCE)
                    self.state = 5068
                    self.match(TSqlParser.EQUAL)
                    self.state = 5069
                    localctx.key_pass_phrase = self.match(TSqlParser.STRING)
                    pass
                elif token in [TSqlParser.ALGORITHM]:
                    self.state = 5070
                    self.match(TSqlParser.ALGORITHM)
                    self.state = 5071
                    self.match(TSqlParser.EQUAL)
                    self.state = 5072
                    _la = self._input.LA(1)
                    if not(((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (TSqlParser.AES_128 - 389)) | (1 << (TSqlParser.AES_192 - 389)) | (1 << (TSqlParser.AES_256 - 389)))) != 0) or _la==TSqlParser.DES or _la==TSqlParser.DESX or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & ((1 << (TSqlParser.RC2 - 663)) | (1 << (TSqlParser.RC4 - 663)) | (1 << (TSqlParser.RC4_128 - 663)))) != 0) or _la==TSqlParser.TRIPLE_DES or _la==TSqlParser.TRIPLE_DES_3KEY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.IDENTITY_VALUE]:
                    self.state = 5073
                    self.match(TSqlParser.IDENTITY_VALUE)
                    self.state = 5074
                    self.match(TSqlParser.EQUAL)
                    self.state = 5075
                    localctx.identity_phrase = self.match(TSqlParser.STRING)
                    pass
                elif token in [TSqlParser.PROVIDER_KEY_NAME]:
                    self.state = 5076
                    self.match(TSqlParser.PROVIDER_KEY_NAME)
                    self.state = 5077
                    self.match(TSqlParser.EQUAL)
                    self.state = 5078
                    localctx.provider_key_name = self.match(TSqlParser.STRING)
                    pass
                elif token in [TSqlParser.CREATION_DISPOSITION]:
                    self.state = 5079
                    self.match(TSqlParser.CREATION_DISPOSITION)
                    self.state = 5080
                    self.match(TSqlParser.EQUAL)
                    self.state = 5081
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.CREATE_NEW or _la==TSqlParser.OPEN_EXISTING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.ENCRYPTION]:
                self.state = 5084
                self.match(TSqlParser.ENCRYPTION)
                self.state = 5085
                self.match(TSqlParser.BY)
                self.state = 5097
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CERTIFICATE]:
                    self.state = 5086
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 5087
                    localctx.certificate_name = self.id()
                    pass
                elif token in [TSqlParser.PASSWORD]:
                    self.state = 5088
                    self.match(TSqlParser.PASSWORD)
                    self.state = 5089
                    self.match(TSqlParser.EQUAL)
                    self.state = 5090
                    localctx.password = self.match(TSqlParser.STRING)
                    pass
                elif token in [TSqlParser.SYMMETRIC]:
                    self.state = 5091
                    self.match(TSqlParser.SYMMETRIC)
                    self.state = 5092
                    self.match(TSqlParser.KEY)
                    self.state = 5093
                    localctx.symmetric_key_name = self.id()
                    pass
                elif token in [TSqlParser.ASYMMETRIC]:
                    self.state = 5094
                    self.match(TSqlParser.ASYMMETRIC)
                    self.state = 5095
                    self.match(TSqlParser.KEY)
                    self.state = 5096
                    localctx.asym_key_name = self.id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name_1 = None # IdContext
            self.synonym_name = None # IdContext
            self.server_name = None # IdContext
            self.database_name = None # IdContext
            self.schema_name_2 = None # IdContext
            self.object_name = None # IdContext
            self.database_or_schema2 = None # IdContext
            self.schema_id_2_or_object_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def SYNONYM(self):
            return self.getToken(TSqlParser.SYNONYM, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_synonym" ):
                listener.enterCreate_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_synonym" ):
                listener.exitCreate_synonym(self)




    def create_synonym(self):

        localctx = TSqlParser.Create_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_create_synonym)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5101
            self.match(TSqlParser.CREATE)
            self.state = 5102
            self.match(TSqlParser.SYNONYM)
            self.state = 5106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
            if la_ == 1:
                self.state = 5103
                localctx.schema_name_1 = self.id()
                self.state = 5104
                self.match(TSqlParser.DOT)


            self.state = 5108
            localctx.synonym_name = self.id()
            self.state = 5109
            self.match(TSqlParser.FOR)
            self.state = 5136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
            if la_ == 1:
                self.state = 5113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
                if la_ == 1:
                    self.state = 5110
                    localctx.server_name = self.id()
                    self.state = 5111
                    self.match(TSqlParser.DOT)


                self.state = 5118
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
                if la_ == 1:
                    self.state = 5115
                    localctx.database_name = self.id()
                    self.state = 5116
                    self.match(TSqlParser.DOT)


                self.state = 5123
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
                if la_ == 1:
                    self.state = 5120
                    localctx.schema_name_2 = self.id()
                    self.state = 5121
                    self.match(TSqlParser.DOT)


                self.state = 5125
                localctx.object_name = self.id()
                pass

            elif la_ == 2:
                self.state = 5129
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
                if la_ == 1:
                    self.state = 5126
                    localctx.database_or_schema2 = self.id()
                    self.state = 5127
                    self.match(TSqlParser.DOT)


                self.state = 5134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,597,self._ctx)
                if la_ == 1:
                    self.state = 5131
                    localctx.schema_id_2_or_object_name = self.id()
                    self.state = 5132
                    self.match(TSqlParser.DOT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.username = None # IdContext
            self.newusername = None # IdContext
            self.schema_name = None # IdContext
            self.loginame = None # IdContext
            self.lcid = None # Token
            self.language_name_or_alias = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NAME)
            else:
                return self.getToken(TSqlParser.NAME, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_SCHEMA)
            else:
                return self.getToken(TSqlParser.DEFAULT_SCHEMA, i)

        def LOGIN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOGIN)
            else:
                return self.getToken(TSqlParser.LOGIN, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PASSWORD)
            else:
                return self.getToken(TSqlParser.PASSWORD, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def DEFAULT_LANGUAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_LANGUAGE)
            else:
                return self.getToken(TSqlParser.DEFAULT_LANGUAGE, i)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
            else:
                return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NULL)
            else:
                return self.getToken(TSqlParser.NULL, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NONE)
            else:
                return self.getToken(TSqlParser.NONE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def OLD_PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OLD_PASSWORD)
            else:
                return self.getToken(TSqlParser.OLD_PASSWORD, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user" ):
                listener.enterAlter_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user" ):
                listener.exitAlter_user(self)




    def alter_user(self):

        localctx = TSqlParser.Alter_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_alter_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5138
            self.match(TSqlParser.ALTER)
            self.state = 5139
            self.match(TSqlParser.USER)
            self.state = 5140
            localctx.username = self.id()
            self.state = 5141
            self.match(TSqlParser.WITH)
            self.state = 5192 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5192
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
                    if la_ == 1:
                        self.state = 5143
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5142
                            self.match(TSqlParser.COMMA)


                        self.state = 5145
                        self.match(TSqlParser.NAME)
                        self.state = 5146
                        self.match(TSqlParser.EQUAL)
                        self.state = 5147
                        localctx.newusername = self.id()
                        pass

                    elif la_ == 2:
                        self.state = 5149
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5148
                            self.match(TSqlParser.COMMA)


                        self.state = 5151
                        self.match(TSqlParser.DEFAULT_SCHEMA)
                        self.state = 5152
                        self.match(TSqlParser.EQUAL)
                        self.state = 5155
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                            self.state = 5153
                            localctx.schema_name = self.id()
                            pass
                        elif token in [TSqlParser.NULL]:
                            self.state = 5154
                            self.match(TSqlParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 3:
                        self.state = 5158
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5157
                            self.match(TSqlParser.COMMA)


                        self.state = 5160
                        self.match(TSqlParser.LOGIN)
                        self.state = 5161
                        self.match(TSqlParser.EQUAL)
                        self.state = 5162
                        localctx.loginame = self.id()
                        pass

                    elif la_ == 4:
                        self.state = 5164
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5163
                            self.match(TSqlParser.COMMA)


                        self.state = 5166
                        self.match(TSqlParser.PASSWORD)
                        self.state = 5167
                        self.match(TSqlParser.EQUAL)
                        self.state = 5168
                        self.match(TSqlParser.STRING)
                        self.state = 5172 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 5169
                            self.match(TSqlParser.OLD_PASSWORD)
                            self.state = 5170
                            self.match(TSqlParser.EQUAL)
                            self.state = 5171
                            self.match(TSqlParser.STRING)
                            self.state = 5174 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==TSqlParser.OLD_PASSWORD):
                                break

                        pass

                    elif la_ == 5:
                        self.state = 5177
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5176
                            self.match(TSqlParser.COMMA)


                        self.state = 5179
                        self.match(TSqlParser.DEFAULT_LANGUAGE)
                        self.state = 5180
                        self.match(TSqlParser.EQUAL)
                        self.state = 5184
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.NONE]:
                            self.state = 5181
                            self.match(TSqlParser.NONE)
                            pass
                        elif token in [TSqlParser.DECIMAL]:
                            self.state = 5182
                            localctx.lcid = self.match(TSqlParser.DECIMAL)
                            pass
                        elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                            self.state = 5183
                            localctx.language_name_or_alias = self.id()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 5187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5186
                            self.match(TSqlParser.COMMA)


                        self.state = 5189
                        self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                        self.state = 5190
                        self.match(TSqlParser.EQUAL)
                        self.state = 5191
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 5194 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,609,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_userContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_name = None # IdContext
            self.login_name = None # IdContext
            self.schema_name = None # IdContext
            self.windows_principal = None # IdContext
            self.language_name_or_alias = None # IdContext
            self.password = None # Token
            self.Azure_Active_Directory_principal = None # IdContext
            self.cert_name = None # IdContext
            self.asym_key_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def DEFAULT_SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_SCHEMA)
            else:
                return self.getToken(TSqlParser.DEFAULT_SCHEMA, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
            else:
                return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DEFAULT_LANGUAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_LANGUAGE)
            else:
                return self.getToken(TSqlParser.DEFAULT_LANGUAGE, i)

        def SID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SID)
            else:
                return self.getToken(TSqlParser.SID, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BINARY)
            else:
                return self.getToken(TSqlParser.BINARY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NONE)
            else:
                return self.getToken(TSqlParser.NONE, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def WITHOUT(self):
            return self.getToken(TSqlParser.WITHOUT, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user" ):
                listener.enterCreate_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user" ):
                listener.exitCreate_user(self)




    def create_user(self):

        localctx = TSqlParser.Create_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_create_user)
        self._la = 0 # Token type
        try:
            self.state = 5342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5196
                self.match(TSqlParser.CREATE)
                self.state = 5197
                self.match(TSqlParser.USER)
                self.state = 5198
                localctx.user_name = self.id()
                self.state = 5202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FOR or _la==TSqlParser.FROM:
                    self.state = 5199
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.FOR or _la==TSqlParser.FROM):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5200
                    self.match(TSqlParser.LOGIN)
                    self.state = 5201
                    localctx.login_name = self.id()


                self.state = 5222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,615,self._ctx)
                if la_ == 1:
                    self.state = 5204
                    self.match(TSqlParser.WITH)
                    self.state = 5219
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,614,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5217
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,613,self._ctx)
                            if la_ == 1:
                                self.state = 5206
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 5205
                                    self.match(TSqlParser.COMMA)


                                self.state = 5208
                                self.match(TSqlParser.DEFAULT_SCHEMA)
                                self.state = 5209
                                self.match(TSqlParser.EQUAL)
                                self.state = 5210
                                localctx.schema_name = self.id()
                                pass

                            elif la_ == 2:
                                self.state = 5212
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 5211
                                    self.match(TSqlParser.COMMA)


                                self.state = 5214
                                self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                                self.state = 5215
                                self.match(TSqlParser.EQUAL)
                                self.state = 5216
                                _la = self._input.LA(1)
                                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                     
                        self.state = 5221
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,614,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5224
                self.match(TSqlParser.CREATE)
                self.state = 5225
                self.match(TSqlParser.USER)
                self.state = 5306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,631,self._ctx)
                if la_ == 1:
                    self.state = 5226
                    localctx.windows_principal = self.id()
                    self.state = 5261
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,623,self._ctx)
                    if la_ == 1:
                        self.state = 5227
                        self.match(TSqlParser.WITH)
                        self.state = 5258
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,622,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 5256
                                self._errHandler.sync(self)
                                la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
                                if la_ == 1:
                                    self.state = 5229
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==TSqlParser.COMMA:
                                        self.state = 5228
                                        self.match(TSqlParser.COMMA)


                                    self.state = 5231
                                    self.match(TSqlParser.DEFAULT_SCHEMA)
                                    self.state = 5232
                                    self.match(TSqlParser.EQUAL)
                                    self.state = 5233
                                    localctx.schema_name = self.id()
                                    pass

                                elif la_ == 2:
                                    self.state = 5235
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==TSqlParser.COMMA:
                                        self.state = 5234
                                        self.match(TSqlParser.COMMA)


                                    self.state = 5237
                                    self.match(TSqlParser.DEFAULT_LANGUAGE)
                                    self.state = 5238
                                    self.match(TSqlParser.EQUAL)
                                    self.state = 5242
                                    self._errHandler.sync(self)
                                    token = self._input.LA(1)
                                    if token in [TSqlParser.NONE]:
                                        self.state = 5239
                                        self.match(TSqlParser.NONE)
                                        pass
                                    elif token in [TSqlParser.DECIMAL]:
                                        self.state = 5240
                                        self.match(TSqlParser.DECIMAL)
                                        pass
                                    elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                        self.state = 5241
                                        localctx.language_name_or_alias = self.id()
                                        pass
                                    else:
                                        raise NoViableAltException(self)

                                    pass

                                elif la_ == 3:
                                    self.state = 5245
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==TSqlParser.COMMA:
                                        self.state = 5244
                                        self.match(TSqlParser.COMMA)


                                    self.state = 5247
                                    self.match(TSqlParser.SID)
                                    self.state = 5248
                                    self.match(TSqlParser.EQUAL)
                                    self.state = 5249
                                    self.match(TSqlParser.BINARY)
                                    pass

                                elif la_ == 4:
                                    self.state = 5251
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la==TSqlParser.COMMA:
                                        self.state = 5250
                                        self.match(TSqlParser.COMMA)


                                    self.state = 5253
                                    self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                                    self.state = 5254
                                    self.match(TSqlParser.EQUAL)
                                    self.state = 5255
                                    _la = self._input.LA(1)
                                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    pass

                         
                            self.state = 5260
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,622,self._ctx)



                    pass

                elif la_ == 2:
                    self.state = 5263
                    localctx.user_name = self.id()
                    self.state = 5264
                    self.match(TSqlParser.WITH)
                    self.state = 5265
                    self.match(TSqlParser.PASSWORD)
                    self.state = 5266
                    self.match(TSqlParser.EQUAL)
                    self.state = 5267
                    localctx.password = self.match(TSqlParser.STRING)
                    self.state = 5298
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,630,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5296
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,629,self._ctx)
                            if la_ == 1:
                                self.state = 5269
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 5268
                                    self.match(TSqlParser.COMMA)


                                self.state = 5271
                                self.match(TSqlParser.DEFAULT_SCHEMA)
                                self.state = 5272
                                self.match(TSqlParser.EQUAL)
                                self.state = 5273
                                localctx.schema_name = self.id()
                                pass

                            elif la_ == 2:
                                self.state = 5275
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 5274
                                    self.match(TSqlParser.COMMA)


                                self.state = 5277
                                self.match(TSqlParser.DEFAULT_LANGUAGE)
                                self.state = 5278
                                self.match(TSqlParser.EQUAL)
                                self.state = 5282
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [TSqlParser.NONE]:
                                    self.state = 5279
                                    self.match(TSqlParser.NONE)
                                    pass
                                elif token in [TSqlParser.DECIMAL]:
                                    self.state = 5280
                                    self.match(TSqlParser.DECIMAL)
                                    pass
                                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                    self.state = 5281
                                    localctx.language_name_or_alias = self.id()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass

                            elif la_ == 3:
                                self.state = 5285
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 5284
                                    self.match(TSqlParser.COMMA)


                                self.state = 5287
                                self.match(TSqlParser.SID)
                                self.state = 5288
                                self.match(TSqlParser.EQUAL)
                                self.state = 5289
                                self.match(TSqlParser.BINARY)
                                pass

                            elif la_ == 4:
                                self.state = 5291
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 5290
                                    self.match(TSqlParser.COMMA)


                                self.state = 5293
                                self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                                self.state = 5294
                                self.match(TSqlParser.EQUAL)
                                self.state = 5295
                                _la = self._input.LA(1)
                                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                     
                        self.state = 5300
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,630,self._ctx)

                    pass

                elif la_ == 3:
                    self.state = 5301
                    localctx.Azure_Active_Directory_principal = self.id()
                    self.state = 5302
                    self.match(TSqlParser.FROM)
                    self.state = 5303
                    self.match(TSqlParser.EXTERNAL)
                    self.state = 5304
                    self.match(TSqlParser.PROVIDER)
                    pass


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5308
                self.match(TSqlParser.CREATE)
                self.state = 5309
                self.match(TSqlParser.USER)
                self.state = 5310
                localctx.user_name = self.id()
                self.state = 5337
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
                if la_ == 1:
                    self.state = 5311
                    self.match(TSqlParser.WITHOUT)
                    self.state = 5312
                    self.match(TSqlParser.LOGIN)
                    self.state = 5327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,635,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5325
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,634,self._ctx)
                            if la_ == 1:
                                self.state = 5314
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 5313
                                    self.match(TSqlParser.COMMA)


                                self.state = 5316
                                self.match(TSqlParser.DEFAULT_SCHEMA)
                                self.state = 5317
                                self.match(TSqlParser.EQUAL)
                                self.state = 5318
                                localctx.schema_name = self.id()
                                pass

                            elif la_ == 2:
                                self.state = 5320
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==TSqlParser.COMMA:
                                    self.state = 5319
                                    self.match(TSqlParser.COMMA)


                                self.state = 5322
                                self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                                self.state = 5323
                                self.match(TSqlParser.EQUAL)
                                self.state = 5324
                                _la = self._input.LA(1)
                                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                pass

                     
                        self.state = 5329
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,635,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 5330
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.FOR or _la==TSqlParser.FROM):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5331
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 5332
                    localctx.cert_name = self.id()
                    pass

                elif la_ == 3:
                    self.state = 5333
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.FOR or _la==TSqlParser.FROM):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5334
                    self.match(TSqlParser.ASYMMETRIC)
                    self.state = 5335
                    self.match(TSqlParser.KEY)
                    self.state = 5336
                    localctx.asym_key_name = self.id()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5339
                self.match(TSqlParser.CREATE)
                self.state = 5340
                self.match(TSqlParser.USER)
                self.state = 5341
                localctx.user_name = self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_user_azure_sql_dwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_name = None # IdContext
            self.login_name = None # IdContext
            self.schema_name = None # IdContext
            self.Azure_Active_Directory_principal = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def WITHOUT(self):
            return self.getToken(TSqlParser.WITHOUT, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def DEFAULT_SCHEMA(self):
            return self.getToken(TSqlParser.DEFAULT_SCHEMA, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_user_azure_sql_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user_azure_sql_dw" ):
                listener.enterCreate_user_azure_sql_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user_azure_sql_dw" ):
                listener.exitCreate_user_azure_sql_dw(self)




    def create_user_azure_sql_dw(self):

        localctx = TSqlParser.Create_user_azure_sql_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_create_user_azure_sql_dw)
        self._la = 0 # Token type
        try:
            self.state = 5372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,641,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5344
                self.match(TSqlParser.CREATE)
                self.state = 5345
                self.match(TSqlParser.USER)
                self.state = 5346
                localctx.user_name = self.id()
                self.state = 5352
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.FOR, TSqlParser.FROM]:
                    self.state = 5347
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.FOR or _la==TSqlParser.FROM):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5348
                    self.match(TSqlParser.LOGIN)
                    self.state = 5349
                    localctx.login_name = self.id()
                    pass
                elif token in [TSqlParser.WITHOUT]:
                    self.state = 5350
                    self.match(TSqlParser.WITHOUT)
                    self.state = 5351
                    self.match(TSqlParser.LOGIN)
                    pass
                elif token in [TSqlParser.EOF, TSqlParser.ALTER, TSqlParser.BACKUP, TSqlParser.BEGIN, TSqlParser.BLOCKING_HIERARCHY, TSqlParser.BREAK, TSqlParser.CALLED, TSqlParser.CASE, TSqlParser.CLOSE, TSqlParser.COALESCE, TSqlParser.COMMIT, TSqlParser.CONTINUE, TSqlParser.CONVERT, TSqlParser.CREATE, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.DBCC, TSqlParser.DEALLOCATE, TSqlParser.DECLARE, TSqlParser.DEFAULT, TSqlParser.DELETE, TSqlParser.DROP, TSqlParser.ELSE, TSqlParser.END, TSqlParser.EVENTDATA, TSqlParser.EXECUTE, TSqlParser.FETCH, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.GET, TSqlParser.GOTO, TSqlParser.GRANT, TSqlParser.IDENTITY, TSqlParser.IF, TSqlParser.INIT, TSqlParser.INSERT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.MERGE, TSqlParser.NULL, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.OPEN, TSqlParser.OVER, TSqlParser.PAGE, TSqlParser.PRINT, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAISERROR, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.REVERT, TSqlParser.RIGHT, TSqlParser.ROLLBACK, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SAVE, TSqlParser.SELECT, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SET, TSqlParser.SETUSER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.TRUNCATE, TSqlParser.UPDATE, TSqlParser.USE, TSqlParser.WAITFOR, TSqlParser.WHILE, TSqlParser.WITH, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.ID, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.LR_BRACKET, TSqlParser.SEMI, TSqlParser.PLUS, TSqlParser.MINUS, TSqlParser.BIT_NOT]:
                    pass
                else:
                    pass
                self.state = 5358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
                if la_ == 1:
                    self.state = 5354
                    self.match(TSqlParser.WITH)
                    self.state = 5355
                    self.match(TSqlParser.DEFAULT_SCHEMA)
                    self.state = 5356
                    self.match(TSqlParser.EQUAL)
                    self.state = 5357
                    localctx.schema_name = self.id()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5360
                self.match(TSqlParser.CREATE)
                self.state = 5361
                self.match(TSqlParser.USER)
                self.state = 5362
                localctx.Azure_Active_Directory_principal = self.id()
                self.state = 5363
                self.match(TSqlParser.FROM)
                self.state = 5364
                self.match(TSqlParser.EXTERNAL)
                self.state = 5365
                self.match(TSqlParser.PROVIDER)
                self.state = 5370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
                if la_ == 1:
                    self.state = 5366
                    self.match(TSqlParser.WITH)
                    self.state = 5367
                    self.match(TSqlParser.DEFAULT_SCHEMA)
                    self.state = 5368
                    self.match(TSqlParser.EQUAL)
                    self.state = 5369
                    localctx.schema_name = self.id()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_user_azure_sqlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.username = None # IdContext
            self.newusername = None # IdContext
            self.schema_name = None # IdContext
            self.loginame = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NAME)
            else:
                return self.getToken(TSqlParser.NAME, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DEFAULT_SCHEMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_SCHEMA)
            else:
                return self.getToken(TSqlParser.DEFAULT_SCHEMA, i)

        def LOGIN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOGIN)
            else:
                return self.getToken(TSqlParser.LOGIN, i)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
            else:
                return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_user_azure_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user_azure_sql" ):
                listener.enterAlter_user_azure_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user_azure_sql" ):
                listener.exitAlter_user_azure_sql(self)




    def alter_user_azure_sql(self):

        localctx = TSqlParser.Alter_user_azure_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_alter_user_azure_sql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5374
            self.match(TSqlParser.ALTER)
            self.state = 5375
            self.match(TSqlParser.USER)
            self.state = 5376
            localctx.username = self.id()
            self.state = 5377
            self.match(TSqlParser.WITH)
            self.state = 5402 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
                    if la_ == 1:
                        self.state = 5379
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5378
                            self.match(TSqlParser.COMMA)


                        self.state = 5381
                        self.match(TSqlParser.NAME)
                        self.state = 5382
                        self.match(TSqlParser.EQUAL)
                        self.state = 5383
                        localctx.newusername = self.id()
                        pass

                    elif la_ == 2:
                        self.state = 5385
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5384
                            self.match(TSqlParser.COMMA)


                        self.state = 5387
                        self.match(TSqlParser.DEFAULT_SCHEMA)
                        self.state = 5388
                        self.match(TSqlParser.EQUAL)
                        self.state = 5389
                        localctx.schema_name = self.id()
                        pass

                    elif la_ == 3:
                        self.state = 5391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5390
                            self.match(TSqlParser.COMMA)


                        self.state = 5393
                        self.match(TSqlParser.LOGIN)
                        self.state = 5394
                        self.match(TSqlParser.EQUAL)
                        self.state = 5395
                        localctx.loginame = self.id()
                        pass

                    elif la_ == 4:
                        self.state = 5397
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5396
                            self.match(TSqlParser.COMMA)


                        self.state = 5399
                        self.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
                        self.state = 5400
                        self.match(TSqlParser.EQUAL)
                        self.state = 5401
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 5404 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,647,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_workload_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_group_group_name = None # IdContext
            self.request_max_memory_grant = None # Token
            self.request_max_cpu_time_sec = None # Token
            self.request_memory_grant_timeout_sec = None # Token
            self.max_dop = None # Token
            self.group_max_requests = None # Token
            self.workload_group_pool_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def DEFAULT_DOUBLE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE)
            else:
                return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def IMPORTANCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.IMPORTANCE)
            else:
                return self.getToken(TSqlParser.IMPORTANCE, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def REQUEST_MAX_MEMORY_GRANT_PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT)
            else:
                return self.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i)

        def REQUEST_MAX_CPU_TIME_SEC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC)
            else:
                return self.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i)

        def REQUEST_MEMORY_GRANT_TIMEOUT_SEC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC)
            else:
                return self.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i)

        def MAX_DOP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_DOP)
            else:
                return self.getToken(TSqlParser.MAX_DOP, i)

        def GROUP_MAX_REQUESTS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GROUP_MAX_REQUESTS)
            else:
                return self.getToken(TSqlParser.GROUP_MAX_REQUESTS, i)

        def LOW(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOW)
            else:
                return self.getToken(TSqlParser.LOW, i)

        def MEDIUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIUM)
            else:
                return self.getToken(TSqlParser.MEDIUM, i)

        def HIGH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.HIGH)
            else:
                return self.getToken(TSqlParser.HIGH, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_workload_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_workload_group" ):
                listener.enterAlter_workload_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_workload_group" ):
                listener.exitAlter_workload_group(self)




    def alter_workload_group(self):

        localctx = TSqlParser.Alter_workload_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_alter_workload_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5406
            self.match(TSqlParser.ALTER)
            self.state = 5407
            self.match(TSqlParser.WORKLOAD)
            self.state = 5408
            self.match(TSqlParser.GROUP)
            self.state = 5411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,648,self._ctx)
            if la_ == 1:
                self.state = 5409
                localctx.workload_group_group_name = self.id()
                pass

            elif la_ == 2:
                self.state = 5410
                self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)
                pass


            self.state = 5444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,653,self._ctx)
            if la_ == 1:
                self.state = 5413
                self.match(TSqlParser.WITH)
                self.state = 5414
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5439 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5439
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,651,self._ctx)
                    if la_ == 1:
                        self.state = 5415
                        self.match(TSqlParser.IMPORTANCE)
                        self.state = 5416
                        self.match(TSqlParser.EQUAL)
                        self.state = 5417
                        _la = self._input.LA(1)
                        if not(((((_la - 533)) & ~0x3f) == 0 and ((1 << (_la - 533)) & ((1 << (TSqlParser.HIGH - 533)) | (1 << (TSqlParser.LOW - 533)) | (1 << (TSqlParser.MEDIUM - 533)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 5419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5418
                            self.match(TSqlParser.COMMA)


                        self.state = 5421
                        self.match(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT)
                        self.state = 5422
                        self.match(TSqlParser.EQUAL)
                        self.state = 5423
                        localctx.request_max_memory_grant = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 3:
                        self.state = 5425
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5424
                            self.match(TSqlParser.COMMA)


                        self.state = 5427
                        self.match(TSqlParser.REQUEST_MAX_CPU_TIME_SEC)
                        self.state = 5428
                        self.match(TSqlParser.EQUAL)
                        self.state = 5429
                        localctx.request_max_cpu_time_sec = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 4:
                        self.state = 5430
                        self.match(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC)
                        self.state = 5431
                        self.match(TSqlParser.EQUAL)
                        self.state = 5432
                        localctx.request_memory_grant_timeout_sec = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 5:
                        self.state = 5433
                        self.match(TSqlParser.MAX_DOP)
                        self.state = 5434
                        self.match(TSqlParser.EQUAL)
                        self.state = 5435
                        localctx.max_dop = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 6:
                        self.state = 5436
                        self.match(TSqlParser.GROUP_MAX_REQUESTS)
                        self.state = 5437
                        self.match(TSqlParser.EQUAL)
                        self.state = 5438
                        localctx.group_max_requests = self.match(TSqlParser.DECIMAL)
                        pass


                    self.state = 5441 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & ((1 << (TSqlParser.GROUP_MAX_REQUESTS - 527)) | (1 << (TSqlParser.IMPORTANCE - 527)) | (1 << (TSqlParser.MAX_DOP - 527)))) != 0) or ((((_la - 683)) & ~0x3f) == 0 and ((1 << (_la - 683)) & ((1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 683)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 683)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 683)))) != 0) or _la==TSqlParser.COMMA):
                        break

                self.state = 5443
                self.match(TSqlParser.RR_BRACKET)


            self.state = 5451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,655,self._ctx)
            if la_ == 1:
                self.state = 5446
                self.match(TSqlParser.USING)
                self.state = 5449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,654,self._ctx)
                if la_ == 1:
                    self.state = 5447
                    localctx.workload_group_pool_name = self.id()
                    pass

                elif la_ == 2:
                    self.state = 5448
                    self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_workload_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_group_group_name = None # IdContext
            self.request_max_memory_grant = None # Token
            self.request_max_cpu_time_sec = None # Token
            self.request_memory_grant_timeout_sec = None # Token
            self.max_dop = None # Token
            self.group_max_requests = None # Token
            self.workload_group_pool_name = None # IdContext
            self.external_pool_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def IMPORTANCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.IMPORTANCE)
            else:
                return self.getToken(TSqlParser.IMPORTANCE, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def REQUEST_MAX_MEMORY_GRANT_PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT)
            else:
                return self.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i)

        def REQUEST_MAX_CPU_TIME_SEC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC)
            else:
                return self.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i)

        def REQUEST_MEMORY_GRANT_TIMEOUT_SEC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC)
            else:
                return self.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i)

        def MAX_DOP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAX_DOP)
            else:
                return self.getToken(TSqlParser.MAX_DOP, i)

        def GROUP_MAX_REQUESTS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GROUP_MAX_REQUESTS)
            else:
                return self.getToken(TSqlParser.GROUP_MAX_REQUESTS, i)

        def DEFAULT_DOUBLE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE)
            else:
                return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i)

        def EXTERNAL(self):
            return self.getToken(TSqlParser.EXTERNAL, 0)

        def LOW(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOW)
            else:
                return self.getToken(TSqlParser.LOW, i)

        def MEDIUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIUM)
            else:
                return self.getToken(TSqlParser.MEDIUM, i)

        def HIGH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.HIGH)
            else:
                return self.getToken(TSqlParser.HIGH, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_workload_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_workload_group" ):
                listener.enterCreate_workload_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_workload_group" ):
                listener.exitCreate_workload_group(self)




    def create_workload_group(self):

        localctx = TSqlParser.Create_workload_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_create_workload_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5453
            self.match(TSqlParser.CREATE)
            self.state = 5454
            self.match(TSqlParser.WORKLOAD)
            self.state = 5455
            self.match(TSqlParser.GROUP)
            self.state = 5456
            localctx.workload_group_group_name = self.id()
            self.state = 5488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
            if la_ == 1:
                self.state = 5457
                self.match(TSqlParser.WITH)
                self.state = 5458
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5483 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5483
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,658,self._ctx)
                    if la_ == 1:
                        self.state = 5459
                        self.match(TSqlParser.IMPORTANCE)
                        self.state = 5460
                        self.match(TSqlParser.EQUAL)
                        self.state = 5461
                        _la = self._input.LA(1)
                        if not(((((_la - 533)) & ~0x3f) == 0 and ((1 << (_la - 533)) & ((1 << (TSqlParser.HIGH - 533)) | (1 << (TSqlParser.LOW - 533)) | (1 << (TSqlParser.MEDIUM - 533)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        self.state = 5463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5462
                            self.match(TSqlParser.COMMA)


                        self.state = 5465
                        self.match(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT)
                        self.state = 5466
                        self.match(TSqlParser.EQUAL)
                        self.state = 5467
                        localctx.request_max_memory_grant = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 3:
                        self.state = 5469
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5468
                            self.match(TSqlParser.COMMA)


                        self.state = 5471
                        self.match(TSqlParser.REQUEST_MAX_CPU_TIME_SEC)
                        self.state = 5472
                        self.match(TSqlParser.EQUAL)
                        self.state = 5473
                        localctx.request_max_cpu_time_sec = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 4:
                        self.state = 5474
                        self.match(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC)
                        self.state = 5475
                        self.match(TSqlParser.EQUAL)
                        self.state = 5476
                        localctx.request_memory_grant_timeout_sec = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 5:
                        self.state = 5477
                        self.match(TSqlParser.MAX_DOP)
                        self.state = 5478
                        self.match(TSqlParser.EQUAL)
                        self.state = 5479
                        localctx.max_dop = self.match(TSqlParser.DECIMAL)
                        pass

                    elif la_ == 6:
                        self.state = 5480
                        self.match(TSqlParser.GROUP_MAX_REQUESTS)
                        self.state = 5481
                        self.match(TSqlParser.EQUAL)
                        self.state = 5482
                        localctx.group_max_requests = self.match(TSqlParser.DECIMAL)
                        pass


                    self.state = 5485 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & ((1 << (TSqlParser.GROUP_MAX_REQUESTS - 527)) | (1 << (TSqlParser.IMPORTANCE - 527)) | (1 << (TSqlParser.MAX_DOP - 527)))) != 0) or ((((_la - 683)) & ~0x3f) == 0 and ((1 << (_la - 683)) & ((1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 683)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 683)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 683)))) != 0) or _la==TSqlParser.COMMA):
                        break

                self.state = 5487
                self.match(TSqlParser.RR_BRACKET)


            self.state = 5503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,664,self._ctx)
            if la_ == 1:
                self.state = 5490
                self.match(TSqlParser.USING)
                self.state = 5493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
                if la_ == 1:
                    self.state = 5491
                    localctx.workload_group_pool_name = self.id()

                elif la_ == 2:
                    self.state = 5492
                    self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)


                self.state = 5501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,663,self._ctx)
                if la_ == 1:
                    self.state = 5496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 5495
                        self.match(TSqlParser.COMMA)


                    self.state = 5498
                    self.match(TSqlParser.EXTERNAL)
                    self.state = 5499
                    localctx.external_pool_name = self.id()

                elif la_ == 2:
                    self.state = 5500
                    self.match(TSqlParser.DEFAULT_DOUBLE_QUOTE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_xml_schema_collectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.relational_schema = None # IdContext
            self.sql_identifier = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_xml_schema_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_xml_schema_collection" ):
                listener.enterCreate_xml_schema_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_xml_schema_collection" ):
                listener.exitCreate_xml_schema_collection(self)




    def create_xml_schema_collection(self):

        localctx = TSqlParser.Create_xml_schema_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_create_xml_schema_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5505
            self.match(TSqlParser.CREATE)
            self.state = 5506
            self.match(TSqlParser.XML)
            self.state = 5507
            self.match(TSqlParser.SCHEMA)
            self.state = 5508
            self.match(TSqlParser.COLLECTION)
            self.state = 5512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,665,self._ctx)
            if la_ == 1:
                self.state = 5509
                localctx.relational_schema = self.id()
                self.state = 5510
                self.match(TSqlParser.DOT)


            self.state = 5514
            localctx.sql_identifier = self.id()
            self.state = 5515
            self.match(TSqlParser.AS)
            self.state = 5519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.STRING]:
                self.state = 5516
                self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.state = 5517
                self.id()
                pass
            elif token in [TSqlParser.LOCAL_ID]:
                self.state = 5518
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_queueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.queue_name = None # IdContext
            self.filegroup = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def queue_settings(self):
            return self.getTypedRuleContext(TSqlParser.Queue_settingsContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_queue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_queue" ):
                listener.enterCreate_queue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_queue" ):
                listener.exitCreate_queue(self)




    def create_queue(self):

        localctx = TSqlParser.Create_queueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_create_queue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5521
            self.match(TSqlParser.CREATE)
            self.state = 5522
            self.match(TSqlParser.QUEUE)
            self.state = 5525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.state = 5523
                self.full_table_name()
                pass

            elif la_ == 2:
                self.state = 5524
                localctx.queue_name = self.id()
                pass


            self.state = 5528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
            if la_ == 1:
                self.state = 5527
                self.queue_settings()


            self.state = 5533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,669,self._ctx)
            if la_ == 1:
                self.state = 5530
                self.match(TSqlParser.ON)
                self.state = 5531
                localctx.filegroup = self.id()

            elif la_ == 2:
                self.state = 5532
                self.match(TSqlParser.DEFAULT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_settingsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_readers = None # Token
            self.user_name = None # Token

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def STATUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATUS)
            else:
                return self.getToken(TSqlParser.STATUS, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RETENTION(self):
            return self.getToken(TSqlParser.RETENTION, 0)

        def ACTIVATION(self):
            return self.getToken(TSqlParser.ACTIVATION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def POISON_MESSAGE_HANDLING(self):
            return self.getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def OFF(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OFF)
            else:
                return self.getToken(TSqlParser.OFF, i)

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def PROCEDURE_NAME(self):
            return self.getToken(TSqlParser.PROCEDURE_NAME, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_nameContext,0)


        def MAX_QUEUE_READERS(self):
            return self.getToken(TSqlParser.MAX_QUEUE_READERS, 0)

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_settings" ):
                listener.enterQueue_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_settings" ):
                listener.exitQueue_settings(self)




    def queue_settings(self):

        localctx = TSqlParser.Queue_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_queue_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5535
            self.match(TSqlParser.WITH)
            self.state = 5542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
            if la_ == 1:
                self.state = 5536
                self.match(TSqlParser.STATUS)
                self.state = 5537
                self.match(TSqlParser.EQUAL)
                self.state = 5538
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 5539
                    self.match(TSqlParser.COMMA)




            self.state = 5550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
            if la_ == 1:
                self.state = 5544
                self.match(TSqlParser.RETENTION)
                self.state = 5545
                self.match(TSqlParser.EQUAL)
                self.state = 5546
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 5547
                    self.match(TSqlParser.COMMA)




            self.state = 5597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,685,self._ctx)
            if la_ == 1:
                self.state = 5552
                self.match(TSqlParser.ACTIVATION)
                self.state = 5553
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5591
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.EXECUTE, TSqlParser.MAX_QUEUE_READERS, TSqlParser.PROCEDURE_NAME, TSqlParser.STATUS, TSqlParser.RR_BRACKET]:
                    self.state = 5560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.STATUS:
                        self.state = 5554
                        self.match(TSqlParser.STATUS)
                        self.state = 5555
                        self.match(TSqlParser.EQUAL)
                        self.state = 5556
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5558
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5557
                            self.match(TSqlParser.COMMA)




                    self.state = 5568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.PROCEDURE_NAME:
                        self.state = 5562
                        self.match(TSqlParser.PROCEDURE_NAME)
                        self.state = 5563
                        self.match(TSqlParser.EQUAL)
                        self.state = 5564
                        self.func_proc_name()
                        self.state = 5566
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5565
                            self.match(TSqlParser.COMMA)




                    self.state = 5576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.MAX_QUEUE_READERS:
                        self.state = 5570
                        self.match(TSqlParser.MAX_QUEUE_READERS)
                        self.state = 5571
                        self.match(TSqlParser.EQUAL)
                        self.state = 5572
                        localctx.max_readers = self.match(TSqlParser.DECIMAL)
                        self.state = 5574
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5573
                            self.match(TSqlParser.COMMA)




                    self.state = 5588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.EXECUTE:
                        self.state = 5578
                        self.match(TSqlParser.EXECUTE)
                        self.state = 5579
                        self.match(TSqlParser.AS)
                        self.state = 5583
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.SELF]:
                            self.state = 5580
                            self.match(TSqlParser.SELF)
                            pass
                        elif token in [TSqlParser.STRING]:
                            self.state = 5581
                            localctx.user_name = self.match(TSqlParser.STRING)
                            pass
                        elif token in [TSqlParser.OWNER]:
                            self.state = 5582
                            self.match(TSqlParser.OWNER)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 5586
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 5585
                            self.match(TSqlParser.COMMA)




                    pass
                elif token in [TSqlParser.DROP]:
                    self.state = 5590
                    self.match(TSqlParser.DROP)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5593
                self.match(TSqlParser.RR_BRACKET)
                self.state = 5595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 5594
                    self.match(TSqlParser.COMMA)




            self.state = 5606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
            if la_ == 1:
                self.state = 5599
                self.match(TSqlParser.POISON_MESSAGE_HANDLING)
                self.state = 5600
                self.match(TSqlParser.LR_BRACKET)

                self.state = 5601
                self.match(TSqlParser.STATUS)
                self.state = 5602
                self.match(TSqlParser.EQUAL)
                self.state = 5603
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5605
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_queueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.queue_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def queue_settings(self):
            return self.getTypedRuleContext(TSqlParser.Queue_settingsContext,0)


        def queue_action(self):
            return self.getTypedRuleContext(TSqlParser.Queue_actionContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_queue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_queue" ):
                listener.enterAlter_queue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_queue" ):
                listener.exitAlter_queue(self)




    def alter_queue(self):

        localctx = TSqlParser.Alter_queueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_alter_queue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5608
            self.match(TSqlParser.ALTER)
            self.state = 5609
            self.match(TSqlParser.QUEUE)
            self.state = 5612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,687,self._ctx)
            if la_ == 1:
                self.state = 5610
                self.full_table_name()
                pass

            elif la_ == 2:
                self.state = 5611
                localctx.queue_name = self.id()
                pass


            self.state = 5616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.WITH]:
                self.state = 5614
                self.queue_settings()
                pass
            elif token in [TSqlParser.MOVE, TSqlParser.REBUILD, TSqlParser.REORGANIZE]:
                self.state = 5615
                self.queue_action()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_actionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def queue_rebuild_options(self):
            return self.getTypedRuleContext(TSqlParser.Queue_rebuild_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def LOB_COMPACTION(self):
            return self.getToken(TSqlParser.LOB_COMPACTION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def MOVE(self):
            return self.getToken(TSqlParser.MOVE, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_action" ):
                listener.enterQueue_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_action" ):
                listener.exitQueue_action(self)




    def queue_action(self):

        localctx = TSqlParser.Queue_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_queue_action)
        self._la = 0 # Token type
        try:
            self.state = 5639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.REBUILD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5618
                self.match(TSqlParser.REBUILD)
                self.state = 5624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
                if la_ == 1:
                    self.state = 5619
                    self.match(TSqlParser.WITH)
                    self.state = 5620
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 5621
                    self.queue_rebuild_options()
                    self.state = 5622
                    self.match(TSqlParser.RR_BRACKET)


                pass
            elif token in [TSqlParser.REORGANIZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5626
                self.match(TSqlParser.REORGANIZE)
                self.state = 5631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,690,self._ctx)
                if la_ == 1:
                    self.state = 5627
                    self.match(TSqlParser.WITH)
                    self.state = 5628
                    self.match(TSqlParser.LOB_COMPACTION)
                    self.state = 5629
                    self.match(TSqlParser.EQUAL)
                    self.state = 5630
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [TSqlParser.MOVE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5633
                self.match(TSqlParser.MOVE)
                self.state = 5634
                self.match(TSqlParser.TO)
                self.state = 5637
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 5635
                    self.id()
                    pass
                elif token in [TSqlParser.DEFAULT]:
                    self.state = 5636
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_rebuild_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_queue_rebuild_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_rebuild_options" ):
                listener.enterQueue_rebuild_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_rebuild_options" ):
                listener.exitQueue_rebuild_options(self)




    def queue_rebuild_options(self):

        localctx = TSqlParser.Queue_rebuild_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_queue_rebuild_options)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5641
            self.match(TSqlParser.MAXDOP)
            self.state = 5642
            self.match(TSqlParser.EQUAL)
            self.state = 5643
            self.match(TSqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_contractContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.owner_name = None # IdContext
            self.message_type_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def contract_name(self):
            return self.getTypedRuleContext(TSqlParser.Contract_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def SENT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SENT)
            else:
                return self.getToken(TSqlParser.SENT, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def INITIATOR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INITIATOR)
            else:
                return self.getToken(TSqlParser.INITIATOR, i)

        def TARGET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TARGET)
            else:
                return self.getToken(TSqlParser.TARGET, i)

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ANY)
            else:
                return self.getToken(TSqlParser.ANY, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT)
            else:
                return self.getToken(TSqlParser.DEFAULT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_contract

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_contract" ):
                listener.enterCreate_contract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_contract" ):
                listener.exitCreate_contract(self)




    def create_contract(self):

        localctx = TSqlParser.Create_contractContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_create_contract)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5645
            self.match(TSqlParser.CREATE)
            self.state = 5646
            self.match(TSqlParser.CONTRACT)
            self.state = 5647
            self.contract_name()
            self.state = 5650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 5648
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 5649
                localctx.owner_name = self.id()


            self.state = 5652
            self.match(TSqlParser.LR_BRACKET)
            self.state = 5663 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5655
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 5653
                    localctx.message_type_name = self.id()
                    pass
                elif token in [TSqlParser.DEFAULT]:
                    self.state = 5654
                    self.match(TSqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5657
                self.match(TSqlParser.SENT)
                self.state = 5658
                self.match(TSqlParser.BY)
                self.state = 5659
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ANY or _la==TSqlParser.TARGET or _la==TSqlParser.INITIATOR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 5660
                    self.match(TSqlParser.COMMA)


                self.state = 5665 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.DEFAULT - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0)):
                    break

            self.state = 5667
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def begin_conversation_timer(self):
            return self.getTypedRuleContext(TSqlParser.Begin_conversation_timerContext,0)


        def begin_conversation_dialog(self):
            return self.getTypedRuleContext(TSqlParser.Begin_conversation_dialogContext,0)


        def end_conversation(self):
            return self.getTypedRuleContext(TSqlParser.End_conversationContext,0)


        def get_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Get_conversationContext,0)


        def send_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Send_conversationContext,0)


        def waitfor_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Waitfor_conversationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_conversation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversation_statement" ):
                listener.enterConversation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversation_statement" ):
                listener.exitConversation_statement(self)




    def conversation_statement(self):

        localctx = TSqlParser.Conversation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_conversation_statement)
        try:
            self.state = 5675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5669
                self.begin_conversation_timer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5670
                self.begin_conversation_dialog()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5671
                self.end_conversation()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5672
                self.get_conversation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5673
                self.send_conversation()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5674
                self.waitfor_conversation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Message_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.message_type_name = None # IdContext
            self.owner_name = None # IdContext
            self.schema_collection_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def VALIDATION(self):
            return self.getToken(TSqlParser.VALIDATION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def EMPTY(self):
            return self.getToken(TSqlParser.EMPTY, 0)

        def WELL_FORMED_XML(self):
            return self.getToken(TSqlParser.WELL_FORMED_XML, 0)

        def VALID_XML(self):
            return self.getToken(TSqlParser.VALID_XML, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TSqlParser.SCHEMA, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_message_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessage_statement" ):
                listener.enterMessage_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessage_statement" ):
                listener.exitMessage_statement(self)




    def message_statement(self):

        localctx = TSqlParser.Message_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_message_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5677
            self.match(TSqlParser.CREATE)
            self.state = 5678
            self.match(TSqlParser.MESSAGE)
            self.state = 5679
            self.match(TSqlParser.TYPE)
            self.state = 5680
            localctx.message_type_name = self.id()
            self.state = 5683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 5681
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 5682
                localctx.owner_name = self.id()


            self.state = 5685
            self.match(TSqlParser.VALIDATION)
            self.state = 5686
            self.match(TSqlParser.EQUAL)
            self.state = 5695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.NONE]:
                self.state = 5687
                self.match(TSqlParser.NONE)
                pass
            elif token in [TSqlParser.EMPTY]:
                self.state = 5688
                self.match(TSqlParser.EMPTY)
                pass
            elif token in [TSqlParser.WELL_FORMED_XML]:
                self.state = 5689
                self.match(TSqlParser.WELL_FORMED_XML)
                pass
            elif token in [TSqlParser.VALID_XML]:
                self.state = 5690
                self.match(TSqlParser.VALID_XML)
                self.state = 5691
                self.match(TSqlParser.WITH)
                self.state = 5692
                self.match(TSqlParser.SCHEMA)
                self.state = 5693
                self.match(TSqlParser.COLLECTION)
                self.state = 5694
                localctx.schema_collection_name = self.id()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.Insert_with_table_hintsContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WHEN)
            else:
                return self.getToken(TSqlParser.WHEN, i)

        def MATCHED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MATCHED)
            else:
                return self.getToken(TSqlParser.MATCHED, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.THEN)
            else:
                return self.getToken(TSqlParser.THEN, i)

        def merge_matched(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Merge_matchedContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Merge_matchedContext,i)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOT)
            else:
                return self.getToken(TSqlParser.NOT, i)

        def merge_not_matched(self):
            return self.getTypedRuleContext(TSqlParser.Merge_not_matchedContext,0)


        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def SOURCE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SOURCE)
            else:
                return self.getToken(TSqlParser.SOURCE, i)

        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AND)
            else:
                return self.getToken(TSqlParser.AND, i)

        def TARGET(self):
            return self.getToken(TSqlParser.TARGET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)




    def merge_statement(self):

        localctx = TSqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 5697
                self.with_expression()


            self.state = 5700
            self.match(TSqlParser.MERGE)
            self.state = 5708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.TOP:
                self.state = 5701
                self.match(TSqlParser.TOP)
                self.state = 5702
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5703
                self.expression(0)
                self.state = 5704
                self.match(TSqlParser.RR_BRACKET)
                self.state = 5706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PERCENT:
                    self.state = 5705
                    self.match(TSqlParser.PERCENT)




            self.state = 5711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 5710
                self.match(TSqlParser.INTO)


            self.state = 5713
            self.ddl_object()
            self.state = 5715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 5714
                self.insert_with_table_hints()


            self.state = 5718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,705,self._ctx)
            if la_ == 1:
                self.state = 5717
                self.as_table_alias()


            self.state = 5720
            self.match(TSqlParser.USING)
            self.state = 5721
            self.table_sources()
            self.state = 5722
            self.match(TSqlParser.ON)
            self.state = 5723
            self.search_condition()
            self.state = 5734
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,707,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5724
                    self.match(TSqlParser.WHEN)
                    self.state = 5725
                    self.match(TSqlParser.MATCHED)
                    self.state = 5728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.AND:
                        self.state = 5726
                        self.match(TSqlParser.AND)
                        self.state = 5727
                        self.search_condition()


                    self.state = 5730
                    self.match(TSqlParser.THEN)
                    self.state = 5731
                    self.merge_matched() 
                self.state = 5736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,707,self._ctx)

            self.state = 5750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
            if la_ == 1:
                self.state = 5737
                self.match(TSqlParser.WHEN)
                self.state = 5738
                self.match(TSqlParser.NOT)
                self.state = 5739
                self.match(TSqlParser.MATCHED)
                self.state = 5742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.BY:
                    self.state = 5740
                    self.match(TSqlParser.BY)
                    self.state = 5741
                    self.match(TSqlParser.TARGET)


                self.state = 5746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AND:
                    self.state = 5744
                    self.match(TSqlParser.AND)
                    self.state = 5745
                    self.search_condition()


                self.state = 5748
                self.match(TSqlParser.THEN)
                self.state = 5749
                self.merge_not_matched()


            self.state = 5765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.WHEN:
                self.state = 5752
                self.match(TSqlParser.WHEN)
                self.state = 5753
                self.match(TSqlParser.NOT)
                self.state = 5754
                self.match(TSqlParser.MATCHED)
                self.state = 5755
                self.match(TSqlParser.BY)
                self.state = 5756
                self.match(TSqlParser.SOURCE)
                self.state = 5759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AND:
                    self.state = 5757
                    self.match(TSqlParser.AND)
                    self.state = 5758
                    self.search_condition()


                self.state = 5761
                self.match(TSqlParser.THEN)
                self.state = 5762
                self.merge_matched()
                self.state = 5767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OUTPUT:
                self.state = 5768
                self.output_clause()


            self.state = 5772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OPTION:
                self.state = 5771
                self.option_clause()


            self.state = 5774
            self.match(TSqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_matchedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Update_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_matched" ):
                listener.enterMerge_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_matched" ):
                listener.exitMerge_matched(self)




    def merge_matched(self):

        localctx = TSqlParser.Merge_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_merge_matched)
        self._la = 0 # Token type
        try:
            self.state = 5787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5776
                self.match(TSqlParser.UPDATE)
                self.state = 5777
                self.match(TSqlParser.SET)
                self.state = 5778
                self.update_elem()
                self.state = 5783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 5779
                    self.match(TSqlParser.COMMA)
                    self.state = 5780
                    self.update_elem()
                    self.state = 5785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [TSqlParser.DELETE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5786
                self.match(TSqlParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_not_matchedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_merge_not_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_not_matched" ):
                listener.enterMerge_not_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_not_matched" ):
                listener.exitMerge_not_matched(self)




    def merge_not_matched(self):

        localctx = TSqlParser.Merge_not_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_merge_not_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5789
            self.match(TSqlParser.INSERT)
            self.state = 5794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LR_BRACKET:
                self.state = 5790
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5791
                self.column_name_list()
                self.state = 5792
                self.match(TSqlParser.RR_BRACKET)


            self.state = 5799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.VALUES]:
                self.state = 5796
                self.table_value_constructor()
                pass
            elif token in [TSqlParser.DEFAULT]:
                self.state = 5797
                self.match(TSqlParser.DEFAULT)
                self.state = 5798
                self.match(TSqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(TSqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FROM)
            else:
                return self.getToken(TSqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)




    def delete_statement(self):

        localctx = TSqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 5801
                self.with_expression()


            self.state = 5804
            self.match(TSqlParser.DELETE)
            self.state = 5814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
            if la_ == 1:
                self.state = 5805
                self.match(TSqlParser.TOP)
                self.state = 5806
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5807
                self.expression(0)
                self.state = 5808
                self.match(TSqlParser.RR_BRACKET)
                self.state = 5810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PERCENT:
                    self.state = 5809
                    self.match(TSqlParser.PERCENT)



            elif la_ == 2:
                self.state = 5812
                self.match(TSqlParser.TOP)
                self.state = 5813
                self.match(TSqlParser.DECIMAL)


            self.state = 5817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 5816
                self.match(TSqlParser.FROM)


            self.state = 5819
            self.delete_statement_from()
            self.state = 5821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
            if la_ == 1:
                self.state = 5820
                self.insert_with_table_hints()


            self.state = 5824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
            if la_ == 1:
                self.state = 5823
                self.output_clause()


            self.state = 5828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 5826
                self.match(TSqlParser.FROM)
                self.state = 5827
                self.table_sources()


            self.state = 5843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WHERE:
                self.state = 5830
                self.match(TSqlParser.WHERE)
                self.state = 5841
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.CASE, TSqlParser.COALESCE, TSqlParser.CONVERT, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.DEFAULT, TSqlParser.EVENTDATA, TSqlParser.EXISTS, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.IDENTITY, TSqlParser.INIT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.NOT, TSqlParser.NULL, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.OVER, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.RIGHT, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.ID, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.LR_BRACKET, TSqlParser.PLUS, TSqlParser.MINUS, TSqlParser.BIT_NOT]:
                    self.state = 5831
                    self.search_condition()
                    pass
                elif token in [TSqlParser.CURRENT]:
                    self.state = 5832
                    self.match(TSqlParser.CURRENT)
                    self.state = 5833
                    self.match(TSqlParser.OF)
                    self.state = 5839
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
                    if la_ == 1:
                        self.state = 5835
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,726,self._ctx)
                        if la_ == 1:
                            self.state = 5834
                            self.match(TSqlParser.GLOBAL)


                        self.state = 5837
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 5838
                        localctx.cursor_var = self.match(TSqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 5846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 5845
                self.for_clause()


            self.state = 5849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OPTION:
                self.state = 5848
                self.option_clause()


            self.state = 5852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,732,self._ctx)
            if la_ == 1:
                self.state = 5851
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statement_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(TSqlParser.Table_aliasContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_delete_statement_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_from" ):
                listener.enterDelete_statement_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_from" ):
                listener.exitDelete_statement_from(self)




    def delete_statement_from(self):

        localctx = TSqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_delete_statement_from)
        try:
            self.state = 5858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,733,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5854
                self.ddl_object()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5855
                self.table_alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5856
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5857
                localctx.table_var = self.match(TSqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(TSqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.Insert_with_table_hintsContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)




    def insert_statement(self):

        localctx = TSqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 5860
                self.with_expression()


            self.state = 5863
            self.match(TSqlParser.INSERT)
            self.state = 5871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.TOP:
                self.state = 5864
                self.match(TSqlParser.TOP)
                self.state = 5865
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5866
                self.expression(0)
                self.state = 5867
                self.match(TSqlParser.RR_BRACKET)
                self.state = 5869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PERCENT:
                    self.state = 5868
                    self.match(TSqlParser.PERCENT)




            self.state = 5874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 5873
                self.match(TSqlParser.INTO)


            self.state = 5878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.ID]:
                self.state = 5876
                self.ddl_object()
                pass
            elif token in [TSqlParser.OPENDATASOURCE, TSqlParser.OPENQUERY]:
                self.state = 5877
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,739,self._ctx)
            if la_ == 1:
                self.state = 5880
                self.insert_with_table_hints()


            self.state = 5887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
            if la_ == 1:
                self.state = 5883
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5884
                self.column_name_list()
                self.state = 5885
                self.match(TSqlParser.RR_BRACKET)


            self.state = 5890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OUTPUT:
                self.state = 5889
                self.output_clause()


            self.state = 5892
            self.insert_statement_value()
            self.state = 5894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 5893
                self.for_clause()


            self.state = 5897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OPTION:
                self.state = 5896
                self.option_clause()


            self.state = 5900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
            if la_ == 1:
                self.state = 5899
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statement_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(TSqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(TSqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_statement_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement_value" ):
                listener.enterInsert_statement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement_value" ):
                listener.exitInsert_statement_value(self)




    def insert_statement_value(self):

        localctx = TSqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_insert_statement_value)
        try:
            self.state = 5907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5902
                self.table_value_constructor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5903
                self.derived_table()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5904
                self.execute_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5905
                self.match(TSqlParser.DEFAULT)
                self.state = 5906
                self.match(TSqlParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Receive_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_variable = None # IdContext
            self.where = None # Search_conditionContext

        def RECEIVE(self):
            return self.getToken(TSqlParser.RECEIVE, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def top_clause(self):
            return self.getTypedRuleContext(TSqlParser.Top_clauseContext,0)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_receive_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceive_statement" ):
                listener.enterReceive_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceive_statement" ):
                listener.exitReceive_statement(self)




    def receive_statement(self):

        localctx = TSqlParser.Receive_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_receive_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LR_BRACKET:
                self.state = 5909
                self.match(TSqlParser.LR_BRACKET)


            self.state = 5912
            self.match(TSqlParser.RECEIVE)
            self.state = 5917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ALL]:
                self.state = 5913
                self.match(TSqlParser.ALL)
                pass
            elif token in [TSqlParser.DISTINCT]:
                self.state = 5914
                self.match(TSqlParser.DISTINCT)
                pass
            elif token in [TSqlParser.TOP]:
                self.state = 5915
                self.top_clause()
                pass
            elif token in [TSqlParser.STAR]:
                self.state = 5916
                self.match(TSqlParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.LOCAL_ID:
                self.state = 5919
                self.match(TSqlParser.LOCAL_ID)
                self.state = 5920
                self.match(TSqlParser.EQUAL)
                self.state = 5921
                self.expression(0)
                self.state = 5923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 5922
                    self.match(TSqlParser.COMMA)


                self.state = 5929
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5930
            self.match(TSqlParser.FROM)
            self.state = 5931
            self.full_table_name()
            self.state = 5937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 5932
                self.match(TSqlParser.INTO)
                self.state = 5933
                localctx.table_variable = self.id()

                self.state = 5934
                self.match(TSqlParser.WHERE)
                self.state = 5935
                localctx.where = self.search_condition()


            self.state = 5940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.RR_BRACKET:
                self.state = 5939
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(TSqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = TSqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 5942
                self.with_expression()


            self.state = 5945
            self.query_expression()
            self.state = 5947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
            if la_ == 1:
                self.state = 5946
                self.order_by_clause()


            self.state = 5950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,754,self._ctx)
            if la_ == 1:
                self.state = 5949
                self.for_clause()


            self.state = 5953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
            if la_ == 1:
                self.state = 5952
                self.option_clause()


            self.state = 5956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
            if la_ == 1:
                self.state = 5955
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime" ):
                listener.enterTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime" ):
                listener.exitTime(self)




    def time(self):

        localctx = TSqlParser.TimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.LOCAL_ID]:
                self.state = 5958
                self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.state = 5959
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(TSqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def output_clause(self):
            return self.getTypedRuleContext(TSqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(TSqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(TSqlParser.Option_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def search_condition_list(self):
            return self.getTypedRuleContext(TSqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)




    def update_statement(self):

        localctx = TSqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 5962
                self.with_expression()


            self.state = 5965
            self.match(TSqlParser.UPDATE)
            self.state = 5973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.TOP:
                self.state = 5966
                self.match(TSqlParser.TOP)
                self.state = 5967
                self.match(TSqlParser.LR_BRACKET)
                self.state = 5968
                self.expression(0)
                self.state = 5969
                self.match(TSqlParser.RR_BRACKET)
                self.state = 5971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PERCENT:
                    self.state = 5970
                    self.match(TSqlParser.PERCENT)




            self.state = 5977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.ID]:
                self.state = 5975
                self.ddl_object()
                pass
            elif token in [TSqlParser.OPENDATASOURCE, TSqlParser.OPENQUERY]:
                self.state = 5976
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH or _la==TSqlParser.LR_BRACKET:
                self.state = 5979
                self.with_table_hints()


            self.state = 5982
            self.match(TSqlParser.SET)
            self.state = 5983
            self.update_elem()
            self.state = 5988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 5984
                self.match(TSqlParser.COMMA)
                self.state = 5985
                self.update_elem()
                self.state = 5990
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,764,self._ctx)
            if la_ == 1:
                self.state = 5991
                self.output_clause()


            self.state = 5996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 5994
                self.match(TSqlParser.FROM)
                self.state = 5995
                self.table_sources()


            self.state = 6011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WHERE:
                self.state = 5998
                self.match(TSqlParser.WHERE)
                self.state = 6009
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.CASE, TSqlParser.COALESCE, TSqlParser.CONVERT, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.DEFAULT, TSqlParser.EVENTDATA, TSqlParser.EXISTS, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.IDENTITY, TSqlParser.INIT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.NOT, TSqlParser.NULL, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.OVER, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.RIGHT, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.ID, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.LR_BRACKET, TSqlParser.PLUS, TSqlParser.MINUS, TSqlParser.BIT_NOT]:
                    self.state = 5999
                    self.search_condition_list()
                    pass
                elif token in [TSqlParser.CURRENT]:
                    self.state = 6000
                    self.match(TSqlParser.CURRENT)
                    self.state = 6001
                    self.match(TSqlParser.OF)
                    self.state = 6007
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,767,self._ctx)
                    if la_ == 1:
                        self.state = 6003
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,766,self._ctx)
                        if la_ == 1:
                            self.state = 6002
                            self.match(TSqlParser.GLOBAL)


                        self.state = 6005
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 6006
                        localctx.cursor_var = self.match(TSqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 6014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 6013
                self.for_clause()


            self.state = 6017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.OPTION:
                self.state = 6016
                self.option_clause()


            self.state = 6020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,772,self._ctx)
            if la_ == 1:
                self.state = 6019
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Output_dml_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_output_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_clause" ):
                listener.enterOutput_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_clause" ):
                listener.exitOutput_clause(self)




    def output_clause(self):

        localctx = TSqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6022
            self.match(TSqlParser.OUTPUT)
            self.state = 6023
            self.output_dml_list_elem()
            self.state = 6028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 6024
                self.match(TSqlParser.COMMA)
                self.state = 6025
                self.output_dml_list_elem()
                self.state = 6030
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 6031
                self.match(TSqlParser.INTO)
                self.state = 6034
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.LOCAL_ID]:
                    self.state = 6032
                    self.match(TSqlParser.LOCAL_ID)
                    pass
                elif token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 6033
                    self.table_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6040
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,775,self._ctx)
                if la_ == 1:
                    self.state = 6036
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 6037
                    self.column_name_list()
                    self.state = 6038
                    self.match(TSqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_dml_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_output_dml_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_dml_list_elem" ):
                listener.enterOutput_dml_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_dml_list_elem" ):
                listener.exitOutput_dml_list_elem(self)




    def output_dml_list_elem(self):

        localctx = TSqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_output_dml_list_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,777,self._ctx)
            if la_ == 1:
                self.state = 6044
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 6045
                self.expression(0)
                pass


            self.state = 6049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
            if la_ == 1:
                self.state = 6048
                self.as_column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def DELETED(self):
            return self.getToken(TSqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(TSqlParser.INSERTED, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(TSqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_output_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_column_name" ):
                listener.enterOutput_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_column_name" ):
                listener.exitOutput_column_name(self)




    def output_column_name(self):

        localctx = TSqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_output_column_name)
        try:
            self.state = 6062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,779,self._ctx)
                if la_ == 1:
                    self.state = 6051
                    self.match(TSqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 6052
                    self.match(TSqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 6053
                    self.table_name()
                    pass


                self.state = 6056
                self.match(TSqlParser.DOT)
                self.state = 6059
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.STAR]:
                    self.state = 6057
                    self.match(TSqlParser.STAR)
                    pass
                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 6058
                    self.id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.DOLLAR_ACTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6061
                self.match(TSqlParser.DOLLAR_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # IdContext
            self.collation_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def CONTAINMENT(self):
            return self.getToken(TSqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(TSqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)




    def create_database(self):

        localctx = TSqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6064
            self.match(TSqlParser.CREATE)
            self.state = 6065
            self.match(TSqlParser.DATABASE)

            self.state = 6066
            localctx.database = self.id()
            self.state = 6070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONTAINMENT:
                self.state = 6067
                self.match(TSqlParser.CONTAINMENT)
                self.state = 6068
                self.match(TSqlParser.EQUAL)
                self.state = 6069
                _la = self._input.LA(1)
                if not(_la==TSqlParser.NONE or _la==TSqlParser.PARTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ON:
                self.state = 6072
                self.match(TSqlParser.ON)
                self.state = 6074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PRIMARY:
                    self.state = 6073
                    self.match(TSqlParser.PRIMARY)


                self.state = 6076
                self.database_file_spec()
                self.state = 6081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6077
                    self.match(TSqlParser.COMMA)
                    self.state = 6078
                    self.database_file_spec()
                    self.state = 6083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LOG:
                self.state = 6086
                self.match(TSqlParser.LOG)
                self.state = 6087
                self.match(TSqlParser.ON)
                self.state = 6088
                self.database_file_spec()
                self.state = 6093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6089
                    self.match(TSqlParser.COMMA)
                    self.state = 6090
                    self.database_file_spec()
                    self.state = 6095
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COLLATE:
                self.state = 6098
                self.match(TSqlParser.COLLATE)
                self.state = 6099
                localctx.collation_name = self.id()


            self.state = 6111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,790,self._ctx)
            if la_ == 1:
                self.state = 6102
                self.match(TSqlParser.WITH)
                self.state = 6103
                self.create_database_option()
                self.state = 6108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6104
                    self.match(TSqlParser.COMMA)
                    self.state = 6105
                    self.create_database_option()
                    self.state = 6110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(TSqlParser.Table_name_with_hintContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def column_name_list_with_order(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_list_with_orderContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def INCLUDE(self):
            return self.getToken(TSqlParser.INCLUDE, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def index_options(self):
            return self.getTypedRuleContext(TSqlParser.Index_optionsContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)




    def create_index(self):

        localctx = TSqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6113
            self.match(TSqlParser.CREATE)
            self.state = 6115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.UNIQUE:
                self.state = 6114
                self.match(TSqlParser.UNIQUE)


            self.state = 6118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CLUSTERED or _la==TSqlParser.NONCLUSTERED:
                self.state = 6117
                self.clustered()


            self.state = 6120
            self.match(TSqlParser.INDEX)
            self.state = 6121
            self.id()
            self.state = 6122
            self.match(TSqlParser.ON)
            self.state = 6123
            self.table_name_with_hint()
            self.state = 6124
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6125
            self.column_name_list_with_order()
            self.state = 6126
            self.match(TSqlParser.RR_BRACKET)
            self.state = 6132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INCLUDE:
                self.state = 6127
                self.match(TSqlParser.INCLUDE)
                self.state = 6128
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6129
                self.column_name_list()
                self.state = 6130
                self.match(TSqlParser.RR_BRACKET)


            self.state = 6136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WHERE:
                self.state = 6134
                self.match(TSqlParser.WHERE)
                self.state = 6135
                localctx.where = self.search_condition()


            self.state = 6139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
            if la_ == 1:
                self.state = 6138
                self.index_options()


            self.state = 6143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ON:
                self.state = 6141
                self.match(TSqlParser.ON)
                self.state = 6142
                self.id()


            self.state = 6146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
            if la_ == 1:
                self.state = 6145
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def func_proc_name(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_nameContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,0)


        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def PROC(self):
            return self.getToken(TSqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(TSqlParser.PROCEDURE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_procedure" ):
                listener.enterCreate_or_alter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_procedure" ):
                listener.exitCreate_or_alter_procedure(self)




    def create_or_alter_procedure(self):

        localctx = TSqlParser.Create_or_alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_create_or_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6154
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CREATE]:
                self.state = 6148
                self.match(TSqlParser.CREATE)
                self.state = 6151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.OR:
                    self.state = 6149
                    self.match(TSqlParser.OR)
                    self.state = 6150
                    self.match(TSqlParser.ALTER)


                pass
            elif token in [TSqlParser.ALTER]:
                self.state = 6153
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6156
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.PROC or _la==TSqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6157
            self.func_proc_name()
            self.state = 6160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.SEMI:
                self.state = 6158
                self.match(TSqlParser.SEMI)
                self.state = 6159
                self.match(TSqlParser.DECIMAL)


            self.state = 6176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LOCAL_ID or _la==TSqlParser.LR_BRACKET:
                self.state = 6163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 6162
                    self.match(TSqlParser.LR_BRACKET)


                self.state = 6165
                self.procedure_param()
                self.state = 6170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6166
                    self.match(TSqlParser.COMMA)
                    self.state = 6167
                    self.procedure_param()
                    self.state = 6172
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.RR_BRACKET:
                    self.state = 6173
                    self.match(TSqlParser.RR_BRACKET)




            self.state = 6187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 6178
                self.match(TSqlParser.WITH)
                self.state = 6179
                self.procedure_option()
                self.state = 6184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6180
                    self.match(TSqlParser.COMMA)
                    self.state = 6181
                    self.procedure_option()
                    self.state = 6186
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FOR:
                self.state = 6189
                self.match(TSqlParser.FOR)
                self.state = 6190
                self.match(TSqlParser.REPLICATION)


            self.state = 6193
            self.match(TSqlParser.AS)
            self.state = 6194
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_or_alter_dml_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_dml_triggerContext,0)


        def create_or_alter_ddl_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Create_or_alter_ddl_triggerContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_trigger" ):
                listener.enterCreate_or_alter_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_trigger" ):
                listener.exitCreate_or_alter_trigger(self)




    def create_or_alter_trigger(self):

        localctx = TSqlParser.Create_or_alter_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_create_or_alter_trigger)
        try:
            self.state = 6198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6196
                self.create_or_alter_dml_trigger()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6197
                self.create_or_alter_ddl_trigger()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def dml_trigger_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dml_trigger_operationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dml_trigger_operationContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,0)


        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FOR)
            else:
                return self.getToken(TSqlParser.FOR, i)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(TSqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WITH)
            else:
                return self.getToken(TSqlParser.WITH, i)

        def dml_trigger_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dml_trigger_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dml_trigger_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def APPEND(self):
            return self.getToken(TSqlParser.APPEND, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_dml_trigger" ):
                listener.enterCreate_or_alter_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_dml_trigger" ):
                listener.exitCreate_or_alter_dml_trigger(self)




    def create_or_alter_dml_trigger(self):

        localctx = TSqlParser.Create_or_alter_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_create_or_alter_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CREATE]:
                self.state = 6200
                self.match(TSqlParser.CREATE)
                self.state = 6203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.OR:
                    self.state = 6201
                    self.match(TSqlParser.OR)
                    self.state = 6202
                    self.match(TSqlParser.ALTER)


                pass
            elif token in [TSqlParser.ALTER]:
                self.state = 6205
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6208
            self.match(TSqlParser.TRIGGER)
            self.state = 6209
            self.simple_name()
            self.state = 6210
            self.match(TSqlParser.ON)
            self.state = 6211
            self.table_name()
            self.state = 6221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 6212
                self.match(TSqlParser.WITH)
                self.state = 6213
                self.dml_trigger_option()
                self.state = 6218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6214
                    self.match(TSqlParser.COMMA)
                    self.state = 6215
                    self.dml_trigger_option()
                    self.state = 6220
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FOR]:
                self.state = 6223
                self.match(TSqlParser.FOR)
                pass
            elif token in [TSqlParser.AFTER]:
                self.state = 6224
                self.match(TSqlParser.AFTER)
                pass
            elif token in [TSqlParser.INSTEAD]:
                self.state = 6225
                self.match(TSqlParser.INSTEAD)
                self.state = 6226
                self.match(TSqlParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6229
            self.dml_trigger_operation()
            self.state = 6234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 6230
                self.match(TSqlParser.COMMA)
                self.state = 6231
                self.dml_trigger_operation()
                self.state = 6236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 6237
                self.match(TSqlParser.WITH)
                self.state = 6238
                self.match(TSqlParser.APPEND)


            self.state = 6244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.NOT:
                self.state = 6241
                self.match(TSqlParser.NOT)
                self.state = 6242
                self.match(TSqlParser.FOR)
                self.state = 6243
                self.match(TSqlParser.REPLICATION)


            self.state = 6246
            self.match(TSqlParser.AS)
            self.state = 6247
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_trigger_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_dml_trigger_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_trigger_option" ):
                listener.enterDml_trigger_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_trigger_option" ):
                listener.exitDml_trigger_option(self)




    def dml_trigger_option(self):

        localctx = TSqlParser.Dml_trigger_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_dml_trigger_option)
        try:
            self.state = 6251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6249
                self.match(TSqlParser.ENCRYPTION)
                pass
            elif token in [TSqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6250
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_trigger_operationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dml_trigger_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_trigger_operation" ):
                listener.enterDml_trigger_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_trigger_operation" ):
                listener.exitDml_trigger_operation(self)




    def dml_trigger_operation(self):

        localctx = TSqlParser.Dml_trigger_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_dml_trigger_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6253
            _la = self._input.LA(1)
            if not(_la==TSqlParser.DELETE or _la==TSqlParser.INSERT or _la==TSqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_ddl_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def ddl_trigger_operation(self):
            return self.getTypedRuleContext(TSqlParser.Ddl_trigger_operationContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(TSqlParser.Sql_clausesContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def dml_trigger_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dml_trigger_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dml_trigger_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def dml_trigger_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Dml_trigger_operationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Dml_trigger_operationContext,i)


        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_ddl_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_ddl_trigger" ):
                listener.enterCreate_or_alter_ddl_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_ddl_trigger" ):
                listener.exitCreate_or_alter_ddl_trigger(self)




    def create_or_alter_ddl_trigger(self):

        localctx = TSqlParser.Create_or_alter_ddl_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_create_or_alter_ddl_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CREATE]:
                self.state = 6255
                self.match(TSqlParser.CREATE)
                self.state = 6258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.OR:
                    self.state = 6256
                    self.match(TSqlParser.OR)
                    self.state = 6257
                    self.match(TSqlParser.ALTER)


                pass
            elif token in [TSqlParser.ALTER]:
                self.state = 6260
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6263
            self.match(TSqlParser.TRIGGER)
            self.state = 6264
            self.simple_name()
            self.state = 6265
            self.match(TSqlParser.ON)
            self.state = 6269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ALL]:
                self.state = 6266
                self.match(TSqlParser.ALL)
                self.state = 6267
                self.match(TSqlParser.SERVER)
                pass
            elif token in [TSqlParser.DATABASE]:
                self.state = 6268
                self.match(TSqlParser.DATABASE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 6271
                self.match(TSqlParser.WITH)
                self.state = 6272
                self.dml_trigger_option()
                self.state = 6277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6273
                    self.match(TSqlParser.COMMA)
                    self.state = 6274
                    self.dml_trigger_option()
                    self.state = 6279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6282
            _la = self._input.LA(1)
            if not(_la==TSqlParser.FOR or _la==TSqlParser.AFTER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6283
            self.ddl_trigger_operation()
            self.state = 6288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 6284
                self.match(TSqlParser.COMMA)
                self.state = 6285
                self.dml_trigger_operation()
                self.state = 6290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6291
            self.match(TSqlParser.AS)
            self.state = 6292
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_trigger_operationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(TSqlParser.Simple_idContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_ddl_trigger_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_trigger_operation" ):
                listener.enterDdl_trigger_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_trigger_operation" ):
                listener.exitDdl_trigger_operation(self)




    def ddl_trigger_operation(self):

        localctx = TSqlParser.Ddl_trigger_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_ddl_trigger_operation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6294
            self.simple_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_or_alter_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_nameContext,0)


        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def func_body_returns_select(self):
            return self.getTypedRuleContext(TSqlParser.Func_body_returns_selectContext,0)


        def func_body_returns_table(self):
            return self.getTypedRuleContext(TSqlParser.Func_body_returns_tableContext,0)


        def func_body_returns_scalar(self):
            return self.getTypedRuleContext(TSqlParser.Func_body_returns_scalarContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Procedure_paramContext,i)


        def OR(self):
            return self.getToken(TSqlParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_or_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_function" ):
                listener.enterCreate_or_alter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_function" ):
                listener.exitCreate_or_alter_function(self)




    def create_or_alter_function(self):

        localctx = TSqlParser.Create_or_alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_create_or_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CREATE]:
                self.state = 6296
                self.match(TSqlParser.CREATE)
                self.state = 6299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.OR:
                    self.state = 6297
                    self.match(TSqlParser.OR)
                    self.state = 6298
                    self.match(TSqlParser.ALTER)


                pass
            elif token in [TSqlParser.ALTER]:
                self.state = 6301
                self.match(TSqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6304
            self.match(TSqlParser.FUNCTION)
            self.state = 6305
            self.func_proc_name()
            self.state = 6319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,827,self._ctx)
            if la_ == 1:
                self.state = 6306
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6307
                self.procedure_param()
                self.state = 6312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6308
                    self.match(TSqlParser.COMMA)
                    self.state = 6309
                    self.procedure_param()
                    self.state = 6314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6315
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 6317
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6318
                self.match(TSqlParser.RR_BRACKET)
                pass


            self.state = 6324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,828,self._ctx)
            if la_ == 1:
                self.state = 6321
                self.func_body_returns_select()
                pass

            elif la_ == 2:
                self.state = 6322
                self.func_body_returns_table()
                pass

            elif la_ == 3:
                self.state = 6323
                self.func_body_returns_scalar()
                pass


            self.state = 6327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                self.state = 6326
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_selectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_body_returns_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_select" ):
                listener.enterFunc_body_returns_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_select" ):
                listener.exitFunc_body_returns_select(self)




    def func_body_returns_select(self):

        localctx = TSqlParser.Func_body_returns_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_func_body_returns_select)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6329
            self.match(TSqlParser.RETURNS)
            self.state = 6330
            self.match(TSqlParser.TABLE)
            self.state = 6340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 6331
                self.match(TSqlParser.WITH)
                self.state = 6332
                self.function_option()
                self.state = 6337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6333
                    self.match(TSqlParser.COMMA)
                    self.state = 6334
                    self.function_option()
                    self.state = 6339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 6342
                self.match(TSqlParser.AS)


            self.state = 6345
            self.match(TSqlParser.RETURN)
            self.state = 6351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.state = 6346
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6347
                self.select_statement()
                self.state = 6348
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 6350
                self.select_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(TSqlParser.Table_type_definitionContext,0)


        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SEMI)
            else:
                return self.getToken(TSqlParser.SEMI, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_body_returns_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_table" ):
                listener.enterFunc_body_returns_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_table" ):
                listener.exitFunc_body_returns_table(self)




    def func_body_returns_table(self):

        localctx = TSqlParser.Func_body_returns_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_func_body_returns_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6353
            self.match(TSqlParser.RETURNS)
            self.state = 6354
            self.match(TSqlParser.LOCAL_ID)
            self.state = 6355
            self.table_type_definition()
            self.state = 6365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 6356
                self.match(TSqlParser.WITH)
                self.state = 6357
                self.function_option()
                self.state = 6362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6358
                    self.match(TSqlParser.COMMA)
                    self.state = 6359
                    self.function_option()
                    self.state = 6364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 6367
                self.match(TSqlParser.AS)


            self.state = 6370
            self.match(TSqlParser.BEGIN)
            self.state = 6374
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,837,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6371
                    self.sql_clause() 
                self.state = 6376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,837,self._ctx)

            self.state = 6377
            self.match(TSqlParser.RETURN)
            self.state = 6379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.SEMI:
                self.state = 6378
                self.match(TSqlParser.SEMI)


            self.state = 6381
            self.match(TSqlParser.END)
            self.state = 6383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,839,self._ctx)
            if la_ == 1:
                self.state = 6382
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_body_returns_scalarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret = None # ExpressionContext

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_clauseContext,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_body_returns_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_scalar" ):
                listener.enterFunc_body_returns_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_scalar" ):
                listener.exitFunc_body_returns_scalar(self)




    def func_body_returns_scalar(self):

        localctx = TSqlParser.Func_body_returns_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_func_body_returns_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6385
            self.match(TSqlParser.RETURNS)
            self.state = 6386
            self.data_type()
            self.state = 6396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 6387
                self.match(TSqlParser.WITH)
                self.state = 6388
                self.function_option()
                self.state = 6393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6389
                    self.match(TSqlParser.COMMA)
                    self.state = 6390
                    self.function_option()
                    self.state = 6395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 6398
                self.match(TSqlParser.AS)


            self.state = 6401
            self.match(TSqlParser.BEGIN)
            self.state = 6405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,843,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6402
                    self.sql_clause() 
                self.state = 6407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,843,self._ctx)

            self.state = 6408
            self.match(TSqlParser.RETURN)
            self.state = 6409
            localctx.ret = self.expression(0)
            self.state = 6411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.SEMI:
                self.state = 6410
                self.match(TSqlParser.SEMI)


            self.state = 6413
            self.match(TSqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.default_val = None # Default_valueContext

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def VARYING(self):
            return self.getToken(TSqlParser.VARYING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def default_value(self):
            return self.getTypedRuleContext(TSqlParser.Default_valueContext,0)


        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(TSqlParser.READONLY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_procedure_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_param" ):
                listener.enterProcedure_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_param" ):
                listener.exitProcedure_param(self)




    def procedure_param(self):

        localctx = TSqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6415
            self.match(TSqlParser.LOCAL_ID)
            self.state = 6419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,845,self._ctx)
            if la_ == 1:
                self.state = 6416
                self.id()
                self.state = 6417
                self.match(TSqlParser.DOT)


            self.state = 6422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 6421
                self.match(TSqlParser.AS)


            self.state = 6424
            self.data_type()
            self.state = 6426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.VARYING:
                self.state = 6425
                self.match(TSqlParser.VARYING)


            self.state = 6430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.EQUAL:
                self.state = 6428
                self.match(TSqlParser.EQUAL)
                self.state = 6429
                localctx.default_val = self.default_value()


            self.state = 6433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 633)) & ~0x3f) == 0 and ((1 << (_la - 633)) & ((1 << (TSqlParser.OUT - 633)) | (1 << (TSqlParser.OUTPUT - 633)) | (1 << (TSqlParser.READONLY - 633)))) != 0):
                self.state = 6432
                _la = self._input.LA(1)
                if not(((((_la - 633)) & ~0x3f) == 0 and ((1 << (_la - 633)) & ((1 << (TSqlParser.OUT - 633)) | (1 << (TSqlParser.OUTPUT - 633)) | (1 << (TSqlParser.READONLY - 633)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(TSqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_procedure_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_option" ):
                listener.enterProcedure_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_option" ):
                listener.exitProcedure_option(self)




    def procedure_option(self):

        localctx = TSqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_procedure_option)
        try:
            self.state = 6438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6435
                self.match(TSqlParser.ENCRYPTION)
                pass
            elif token in [TSqlParser.RECOMPILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6436
                self.match(TSqlParser.RECOMPILE)
                pass
            elif token in [TSqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6437
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NULL)
            else:
                return self.getToken(TSqlParser.NULL, i)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def INPUT(self):
            return self.getToken(TSqlParser.INPUT, 0)

        def CALLED(self):
            return self.getToken(TSqlParser.CALLED, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_function_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_option" ):
                listener.enterFunction_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_option" ):
                listener.exitFunction_option(self)




    def function_option(self):

        localctx = TSqlParser.Function_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_function_option)
        try:
            self.state = 6452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6440
                self.match(TSqlParser.ENCRYPTION)
                pass
            elif token in [TSqlParser.SCHEMABINDING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6441
                self.match(TSqlParser.SCHEMABINDING)
                pass
            elif token in [TSqlParser.RETURNS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6442
                self.match(TSqlParser.RETURNS)
                self.state = 6443
                self.match(TSqlParser.NULL)
                self.state = 6444
                self.match(TSqlParser.ON)
                self.state = 6445
                self.match(TSqlParser.NULL)
                self.state = 6446
                self.match(TSqlParser.INPUT)
                pass
            elif token in [TSqlParser.CALLED]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6447
                self.match(TSqlParser.CALLED)
                self.state = 6448
                self.match(TSqlParser.ON)
                self.state = 6449
                self.match(TSqlParser.NULL)
                self.state = 6450
                self.match(TSqlParser.INPUT)
                pass
            elif token in [TSqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6451
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(TSqlParser.Table_name_with_hintContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def FULLSCAN(self):
            return self.getToken(TSqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(TSqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(TSqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def NORECOMPUTE(self):
            return self.getToken(TSqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(TSqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_create_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_statistics" ):
                listener.enterCreate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_statistics" ):
                listener.exitCreate_statistics(self)




    def create_statistics(self):

        localctx = TSqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6454
            self.match(TSqlParser.CREATE)
            self.state = 6455
            self.match(TSqlParser.STATISTICS)
            self.state = 6456
            self.id()
            self.state = 6457
            self.match(TSqlParser.ON)
            self.state = 6458
            self.table_name_with_hint()
            self.state = 6459
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6460
            self.column_name_list()
            self.state = 6461
            self.match(TSqlParser.RR_BRACKET)
            self.state = 6480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,855,self._ctx)
            if la_ == 1:
                self.state = 6462
                self.match(TSqlParser.WITH)
                self.state = 6468
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.FULLSCAN]:
                    self.state = 6463
                    self.match(TSqlParser.FULLSCAN)
                    pass
                elif token in [TSqlParser.SAMPLE]:
                    self.state = 6464
                    self.match(TSqlParser.SAMPLE)
                    self.state = 6465
                    self.match(TSqlParser.DECIMAL)
                    self.state = 6466
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.PERCENT or _la==TSqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [TSqlParser.STATS_STREAM]:
                    self.state = 6467
                    self.match(TSqlParser.STATS_STREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,853,self._ctx)
                if la_ == 1:
                    self.state = 6470
                    self.match(TSqlParser.COMMA)
                    self.state = 6471
                    self.match(TSqlParser.NORECOMPUTE)


                self.state = 6478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 6474
                    self.match(TSqlParser.COMMA)
                    self.state = 6475
                    self.match(TSqlParser.INCREMENTAL)
                    self.state = 6476
                    self.match(TSqlParser.EQUAL)
                    self.state = 6477
                    self.on_off()




            self.state = 6483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
            if la_ == 1:
                self.state = 6482
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_update_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statistics" ):
                listener.enterUpdate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statistics" ):
                listener.exitUpdate_statistics(self)




    def update_statistics(self):

        localctx = TSqlParser.Update_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_update_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6485
            self.match(TSqlParser.UPDATE)
            self.state = 6487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ALL or _la==TSqlParser.INDEX:
                self.state = 6486
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.INDEX):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6489
            self.match(TSqlParser.STATISTICS)
            self.state = 6490
            self.full_table_name()
            self.state = 6492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,858,self._ctx)
            if la_ == 1:
                self.state = 6491
                self.id()


            self.state = 6497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,859,self._ctx)
            if la_ == 1:
                self.state = 6494
                self.match(TSqlParser.USING)
                self.state = 6495
                self.match(TSqlParser.DECIMAL)
                self.state = 6496
                self.match(TSqlParser.VALUES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def LOCK(self):
            return self.getToken(TSqlParser.LOCK, 0)

        def simple_id(self):
            return self.getTypedRuleContext(TSqlParser.Simple_idContext,0)


        def table_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_optionsContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_optionsContext,i)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DEFAULT)
            else:
                return self.getToken(TSqlParser.DEFAULT, i)

        def TEXTIMAGE_ON(self):
            return self.getToken(TSqlParser.TEXTIMAGE_ON, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)




    def create_table(self):

        localctx = TSqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6499
            self.match(TSqlParser.CREATE)
            self.state = 6500
            self.match(TSqlParser.TABLE)
            self.state = 6501
            self.table_name()
            self.state = 6502
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6503
            self.column_def_table_constraints()
            self.state = 6505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 6504
                self.match(TSqlParser.COMMA)


            self.state = 6507
            self.match(TSqlParser.RR_BRACKET)
            self.state = 6510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,861,self._ctx)
            if la_ == 1:
                self.state = 6508
                self.match(TSqlParser.LOCK)
                self.state = 6509
                self.simple_id()


            self.state = 6515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,862,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6512
                    self.table_options() 
                self.state = 6517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,862,self._ctx)

            self.state = 6521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,863,self._ctx)
            if la_ == 1:
                self.state = 6518
                self.match(TSqlParser.ON)
                self.state = 6519
                self.id()

            elif la_ == 2:
                self.state = 6520
                self.match(TSqlParser.DEFAULT)


            self.state = 6526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,864,self._ctx)
            if la_ == 1:
                self.state = 6523
                self.match(TSqlParser.TEXTIMAGE_ON)
                self.state = 6524
                self.id()

            elif la_ == 2:
                self.state = 6525
                self.match(TSqlParser.DEFAULT)


            self.state = 6529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,865,self._ctx)
            if la_ == 1:
                self.state = 6528
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_options" ):
                listener.enterTable_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_options" ):
                listener.exitTable_options(self)




    def table_options(self):

        localctx = TSqlParser.Table_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_table_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6531
            self.match(TSqlParser.WITH)
            self.state = 6551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.LR_BRACKET]:
                self.state = 6532
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6533
                self.index_option()
                self.state = 6538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6534
                    self.match(TSqlParser.COMMA)
                    self.state = 6535
                    self.index_option()
                    self.state = 6540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6541
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.ID]:
                self.state = 6543
                self.index_option()
                self.state = 6548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6544
                    self.match(TSqlParser.COMMA)
                    self.state = 6545
                    self.index_option()
                    self.state = 6550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(TSqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.WITH)
            else:
                return self.getToken(TSqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(TSqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TSqlParser.OPTION, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)




    def create_view(self):

        localctx = TSqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6553
            self.match(TSqlParser.CREATE)
            self.state = 6554
            self.match(TSqlParser.VIEW)
            self.state = 6555
            self.simple_name()
            self.state = 6560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LR_BRACKET:
                self.state = 6556
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6557
                self.column_name_list()
                self.state = 6558
                self.match(TSqlParser.RR_BRACKET)


            self.state = 6571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 6562
                self.match(TSqlParser.WITH)
                self.state = 6563
                self.view_attribute()
                self.state = 6568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 6564
                    self.match(TSqlParser.COMMA)
                    self.state = 6565
                    self.view_attribute()
                    self.state = 6570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6573
            self.match(TSqlParser.AS)
            self.state = 6574
            self.select_statement()
            self.state = 6578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,872,self._ctx)
            if la_ == 1:
                self.state = 6575
                self.match(TSqlParser.WITH)
                self.state = 6576
                self.match(TSqlParser.CHECK)
                self.state = 6577
                self.match(TSqlParser.OPTION)


            self.state = 6581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
            if la_ == 1:
                self.state = 6580
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(TSqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_view_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_attribute" ):
                listener.enterView_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_attribute" ):
                listener.exitView_attribute(self)




    def view_attribute(self):

        localctx = TSqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6583
            _la = self._input.LA(1)
            if not(_la==TSqlParser.ENCRYPTION or _la==TSqlParser.SCHEMABINDING or _la==TSqlParser.VIEW_METADATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # IdContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALTER)
            else:
                return self.getToken(TSqlParser.ALTER, i)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TABLE)
            else:
                return self.getToken(TSqlParser.TABLE, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def LOCK_ESCALATION(self):
            return self.getToken(TSqlParser.LOCK_ESCALATION, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def ADD(self):
            return self.getToken(TSqlParser.ADD, 0)

        def column_def_table_constraint(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintContext,0)


        def COLUMN(self):
            return self.getToken(TSqlParser.COLUMN, 0)

        def column_definition(self):
            return self.getTypedRuleContext(TSqlParser.Column_definitionContext,0)


        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def FOREIGN(self):
            return self.getToken(TSqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def table_options(self):
            return self.getTypedRuleContext(TSqlParser.Table_optionsContext,0)


        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_name_listContext,i)


        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)




    def alter_table(self):

        localctx = TSqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6585
            self.match(TSqlParser.ALTER)
            self.state = 6586
            self.match(TSqlParser.TABLE)
            self.state = 6587
            self.table_name()
            self.state = 6631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,875,self._ctx)
            if la_ == 1:
                self.state = 6588
                self.match(TSqlParser.SET)
                self.state = 6589
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6590
                self.match(TSqlParser.LOCK_ESCALATION)
                self.state = 6591
                self.match(TSqlParser.EQUAL)
                self.state = 6592
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TABLE or _la==TSqlParser.AUTO or _la==TSqlParser.DISABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6593
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 6594
                self.match(TSqlParser.ADD)
                self.state = 6595
                self.column_def_table_constraint()
                pass

            elif la_ == 3:
                self.state = 6596
                self.match(TSqlParser.ALTER)
                self.state = 6597
                self.match(TSqlParser.COLUMN)
                self.state = 6598
                self.column_definition()
                pass

            elif la_ == 4:
                self.state = 6599
                self.match(TSqlParser.DROP)
                self.state = 6600
                self.match(TSqlParser.COLUMN)
                self.state = 6601
                self.id()
                pass

            elif la_ == 5:
                self.state = 6602
                self.match(TSqlParser.DROP)
                self.state = 6603
                self.match(TSqlParser.CONSTRAINT)
                self.state = 6604
                localctx.constraint = self.id()
                pass

            elif la_ == 6:
                self.state = 6605
                self.match(TSqlParser.WITH)
                self.state = 6606
                self.match(TSqlParser.CHECK)
                self.state = 6607
                self.match(TSqlParser.ADD)
                self.state = 6608
                self.match(TSqlParser.CONSTRAINT)
                self.state = 6609
                localctx.constraint = self.id()
                self.state = 6610
                self.match(TSqlParser.FOREIGN)
                self.state = 6611
                self.match(TSqlParser.KEY)
                self.state = 6612
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6613
                localctx.fk = self.column_name_list()
                self.state = 6614
                self.match(TSqlParser.RR_BRACKET)
                self.state = 6615
                self.match(TSqlParser.REFERENCES)
                self.state = 6616
                self.table_name()
                self.state = 6617
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6618
                localctx.pk = self.column_name_list()
                self.state = 6619
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                self.state = 6621
                self.match(TSqlParser.CHECK)
                self.state = 6622
                self.match(TSqlParser.CONSTRAINT)
                self.state = 6623
                localctx.constraint = self.id()
                pass

            elif la_ == 8:
                self.state = 6624
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DISABLE or _la==TSqlParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6625
                self.match(TSqlParser.TRIGGER)
                self.state = 6627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,874,self._ctx)
                if la_ == 1:
                    self.state = 6626
                    self.id()


                pass

            elif la_ == 9:
                self.state = 6629
                self.match(TSqlParser.REBUILD)
                self.state = 6630
                self.table_options()
                pass


            self.state = 6634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,876,self._ctx)
            if la_ == 1:
                self.state = 6633
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # IdContext
            self.new_name = None # IdContext
            self.collation = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(TSqlParser.Database_optionspecContext,0)


        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(TSqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)




    def alter_database(self):

        localctx = TSqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6636
            self.match(TSqlParser.ALTER)
            self.state = 6637
            self.match(TSqlParser.DATABASE)
            self.state = 6640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.state = 6638
                localctx.database = self.id()
                pass
            elif token in [TSqlParser.CURRENT]:
                self.state = 6639
                self.match(TSqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.MODIFY]:
                self.state = 6642
                self.match(TSqlParser.MODIFY)
                self.state = 6643
                self.match(TSqlParser.NAME)
                self.state = 6644
                self.match(TSqlParser.EQUAL)
                self.state = 6645
                localctx.new_name = self.id()
                pass
            elif token in [TSqlParser.COLLATE]:
                self.state = 6646
                self.match(TSqlParser.COLLATE)
                self.state = 6647
                localctx.collation = self.id()
                pass
            elif token in [TSqlParser.SET]:
                self.state = 6648
                self.match(TSqlParser.SET)
                self.state = 6649
                self.database_optionspec()
                self.state = 6652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
                if la_ == 1:
                    self.state = 6650
                    self.match(TSqlParser.WITH)
                    self.state = 6651
                    self.termination()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 6657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,880,self._ctx)
            if la_ == 1:
                self.state = 6656
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_optionspecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(TSqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(TSqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(TSqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_optionContext,0)


        def database_mirroring_option(self):
            return self.getTypedRuleContext(TSqlParser.Database_mirroring_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(TSqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(TSqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(TSqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(TSqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(TSqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(TSqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(TSqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(TSqlParser.Database_filestream_optionContext,0)


        def hadr_options(self):
            return self.getTypedRuleContext(TSqlParser.Hadr_optionsContext,0)


        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(TSqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(TSqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(TSqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(TSqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(TSqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(TSqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(TSqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(TSqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_database_optionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_optionspec" ):
                listener.enterDatabase_optionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_optionspec" ):
                listener.exitDatabase_optionspec(self)




    def database_optionspec(self):

        localctx = TSqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_database_optionspec)
        try:
            self.state = 6682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,881,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6659
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6660
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6661
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6662
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6663
                self.database_mirroring_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6664
                self.date_correlation_optimization_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6665
                self.db_encryption_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6666
                self.db_state_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6667
                self.db_update_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6668
                self.db_user_access_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6669
                self.delayed_durability_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6670
                self.external_access_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6671
                self.match(TSqlParser.FILESTREAM)
                self.state = 6672
                self.database_filestream_option()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6673
                self.hadr_options()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6674
                self.mixed_page_allocation_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6675
                self.parameterization_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6676
                self.recovery_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6677
                self.service_broker_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6678
                self.snapshot_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6679
                self.sql_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6680
                self.target_recovery_time_option()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6681
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auto_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(TSqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(TSqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(TSqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_auto_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_option" ):
                listener.enterAuto_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_option" ):
                listener.exitAuto_option(self)




    def auto_option(self):

        localctx = TSqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 6701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.AUTO_CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6684
                self.match(TSqlParser.AUTO_CLOSE)
                self.state = 6685
                self.on_off()
                pass
            elif token in [TSqlParser.AUTO_CREATE_STATISTICS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6686
                self.match(TSqlParser.AUTO_CREATE_STATISTICS)
                self.state = 6687
                self.match(TSqlParser.OFF)
                pass
            elif token in [TSqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6688
                self.match(TSqlParser.ON)
                self.state = 6693
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.INCREMENTAL]:
                    self.state = 6689
                    self.match(TSqlParser.INCREMENTAL)
                    self.state = 6690
                    self.match(TSqlParser.EQUAL)
                    self.state = 6691
                    self.match(TSqlParser.ON)
                    pass
                elif token in [TSqlParser.OFF]:
                    self.state = 6692
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.AUTO_SHRINK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6695
                self.match(TSqlParser.AUTO_SHRINK)
                self.state = 6696
                self.on_off()
                pass
            elif token in [TSqlParser.AUTO_UPDATE_STATISTICS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6697
                self.match(TSqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 6698
                self.on_off()
                pass
            elif token in [TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6699
                self.match(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 6700
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tracking_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(TSqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Change_tracking_option_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_change_tracking_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option" ):
                listener.enterChange_tracking_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option" ):
                listener.exitChange_tracking_option(self)




    def change_tracking_option(self):

        localctx = TSqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6703
            self.match(TSqlParser.CHANGE_TRACKING)
            self.state = 6704
            self.match(TSqlParser.EQUAL)
            self.state = 6720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.OFF]:
                self.state = 6705
                self.match(TSqlParser.OFF)
                pass
            elif token in [TSqlParser.ON]:
                self.state = 6706
                self.match(TSqlParser.ON)
                self.state = 6717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,885,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6707
                        self.change_tracking_option_list()
                        self.state = 6712
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==TSqlParser.COMMA:
                            self.state = 6708
                            self.match(TSqlParser.COMMA)
                            self.state = 6709
                            self.change_tracking_option_list()
                            self.state = 6714
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                 
                    self.state = 6719
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,885,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tracking_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(TSqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(TSqlParser.CHANGE_RETENTION, 0)

        def DAYS(self):
            return self.getToken(TSqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(TSqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_change_tracking_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option_list" ):
                listener.enterChange_tracking_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option_list" ):
                listener.exitChange_tracking_option_list(self)




    def change_tracking_option_list(self):

        localctx = TSqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 6728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.AUTO_CLEANUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6722
                self.match(TSqlParser.AUTO_CLEANUP)
                self.state = 6723
                self.match(TSqlParser.EQUAL)
                self.state = 6724
                self.on_off()
                pass
            elif token in [TSqlParser.CHANGE_RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6725
                self.match(TSqlParser.CHANGE_RETENTION)
                self.state = 6726
                self.match(TSqlParser.EQUAL)
                self.state = 6727
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DAYS or _la==TSqlParser.HOURS or _la==TSqlParser.MINUTES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Containment_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(TSqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(TSqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_containment_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainment_option" ):
                listener.enterContainment_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainment_option" ):
                listener.exitContainment_option(self)




    def containment_option(self):

        localctx = TSqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6730
            self.match(TSqlParser.CONTAINMENT)
            self.state = 6731
            self.match(TSqlParser.EQUAL)
            self.state = 6732
            _la = self._input.LA(1)
            if not(_la==TSqlParser.NONE or _la==TSqlParser.PARTIAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(TSqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_cursor_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_option" ):
                listener.enterCursor_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_option" ):
                listener.exitCursor_option(self)




    def cursor_option(self):

        localctx = TSqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 6738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CURSOR_CLOSE_ON_COMMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6734
                self.match(TSqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 6735
                self.on_off()
                pass
            elif token in [TSqlParser.CURSOR_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6736
                self.match(TSqlParser.CURSOR_DEFAULT)
                self.state = 6737
                _la = self._input.LA(1)
                if not(_la==TSqlParser.GLOBAL or _la==TSqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_endpointContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.endpointname = None # IdContext
            self.login = None # IdContext
            self.state = None # Token
            self.port = None # Token
            self.cert_name = None # IdContext

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def ENDPOINT(self):
            return self.getToken(TSqlParser.ENDPOINT, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def TCP(self):
            return self.getToken(TSqlParser.TCP, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def LISTENER_PORT(self):
            return self.getToken(TSqlParser.LISTENER_PORT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def TSQL(self):
            return self.getToken(TSqlParser.TSQL, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def SERVICE_BROKER(self):
            return self.getToken(TSqlParser.SERVICE_BROKER, 0)

        def AUTHENTICATION(self):
            return self.getToken(TSqlParser.AUTHENTICATION, 0)

        def DATABASE_MIRRORING(self):
            return self.getToken(TSqlParser.DATABASE_MIRRORING, 0)

        def ROLE(self):
            return self.getToken(TSqlParser.ROLE, 0)

        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LISTENER_IP(self):
            return self.getToken(TSqlParser.LISTENER_IP, 0)

        def WITNESS(self):
            return self.getToken(TSqlParser.WITNESS, 0)

        def PARTNER(self):
            return self.getToken(TSqlParser.PARTNER, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def IPV4_ADDR(self):
            return self.getToken(TSqlParser.IPV4_ADDR, 0)

        def IPV6_ADDR(self):
            return self.getToken(TSqlParser.IPV6_ADDR, 0)

        def WINDOWS(self):
            return self.getToken(TSqlParser.WINDOWS, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def MESSAGE_FORWARDING(self):
            return self.getToken(TSqlParser.MESSAGE_FORWARDING, 0)

        def MESSAGE_FORWARD_SIZE(self):
            return self.getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0)

        def STARTED(self):
            return self.getToken(TSqlParser.STARTED, 0)

        def STOPPED(self):
            return self.getToken(TSqlParser.STOPPED, 0)

        def DISABLED(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DISABLED)
            else:
                return self.getToken(TSqlParser.DISABLED, i)

        def SUPPORTED(self):
            return self.getToken(TSqlParser.SUPPORTED, 0)

        def REQUIRED(self):
            return self.getToken(TSqlParser.REQUIRED, 0)

        def ENABLED(self):
            return self.getToken(TSqlParser.ENABLED, 0)

        def NTLM(self):
            return self.getToken(TSqlParser.NTLM, 0)

        def KERBEROS(self):
            return self.getToken(TSqlParser.KERBEROS, 0)

        def NEGOTIATE(self):
            return self.getToken(TSqlParser.NEGOTIATE, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def AES(self):
            return self.getToken(TSqlParser.AES, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_alter_endpoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_endpoint" ):
                listener.enterAlter_endpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_endpoint" ):
                listener.exitAlter_endpoint(self)




    def alter_endpoint(self):

        localctx = TSqlParser.Alter_endpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_alter_endpoint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6740
            self.match(TSqlParser.ALTER)
            self.state = 6741
            self.match(TSqlParser.ENDPOINT)
            self.state = 6742
            localctx.endpointname = self.id()
            self.state = 6745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 6743
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 6744
                localctx.login = self.id()


            self.state = 6754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.STATE:
                self.state = 6747
                self.match(TSqlParser.STATE)
                self.state = 6748
                self.match(TSqlParser.EQUAL)
                self.state = 6752
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.STARTED]:
                    self.state = 6749
                    localctx.state = self.match(TSqlParser.STARTED)
                    pass
                elif token in [TSqlParser.STOPPED]:
                    self.state = 6750
                    localctx.state = self.match(TSqlParser.STOPPED)
                    pass
                elif token in [TSqlParser.DISABLED]:
                    self.state = 6751
                    localctx.state = self.match(TSqlParser.DISABLED)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 6756
            self.match(TSqlParser.AS)
            self.state = 6757
            self.match(TSqlParser.TCP)
            self.state = 6758
            self.match(TSqlParser.LR_BRACKET)
            self.state = 6759
            self.match(TSqlParser.LISTENER_PORT)
            self.state = 6760
            self.match(TSqlParser.EQUAL)
            self.state = 6761
            localctx.port = self.match(TSqlParser.DECIMAL)
            self.state = 6766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 6762
                self.match(TSqlParser.COMMA)
                self.state = 6763
                self.match(TSqlParser.LISTENER_IP)
                self.state = 6764
                self.match(TSqlParser.EQUAL)
                self.state = 6765
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.IPV4_ADDR or _la==TSqlParser.IPV6_ADDR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6768
            self.match(TSqlParser.RR_BRACKET)
            self.state = 6878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
            if la_ == 1:
                self.state = 6769
                self.match(TSqlParser.TSQL)
                pass

            elif la_ == 2:
                self.state = 6770
                self.match(TSqlParser.FOR)
                self.state = 6771
                self.match(TSqlParser.SERVICE_BROKER)
                self.state = 6772
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6773
                self.match(TSqlParser.AUTHENTICATION)
                self.state = 6774
                self.match(TSqlParser.EQUAL)
                self.state = 6791
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.WINDOWS]:
                    self.state = 6775
                    self.match(TSqlParser.WINDOWS)
                    self.state = 6777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (TSqlParser.KERBEROS - 169)) | (1 << (TSqlParser.NEGOTIATE - 169)) | (1 << (TSqlParser.NTLM - 169)))) != 0):
                        self.state = 6776
                        _la = self._input.LA(1)
                        if not(((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (TSqlParser.KERBEROS - 169)) | (1 << (TSqlParser.NEGOTIATE - 169)) | (1 << (TSqlParser.NTLM - 169)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 6781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CERTIFICATE:
                        self.state = 6779
                        self.match(TSqlParser.CERTIFICATE)
                        self.state = 6780
                        localctx.cert_name = self.id()


                    pass
                elif token in [TSqlParser.CERTIFICATE]:
                    self.state = 6783
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 6784
                    localctx.cert_name = self.id()
                    self.state = 6786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.WINDOWS:
                        self.state = 6785
                        self.match(TSqlParser.WINDOWS)


                    self.state = 6789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (TSqlParser.KERBEROS - 169)) | (1 << (TSqlParser.NEGOTIATE - 169)) | (1 << (TSqlParser.NTLM - 169)))) != 0):
                        self.state = 6788
                        _la = self._input.LA(1)
                        if not(((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (TSqlParser.KERBEROS - 169)) | (1 << (TSqlParser.NEGOTIATE - 169)) | (1 << (TSqlParser.NTLM - 169)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
                if la_ == 1:
                    self.state = 6794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 6793
                        self.match(TSqlParser.COMMA)


                    self.state = 6796
                    self.match(TSqlParser.ENCRYPTION)
                    self.state = 6797
                    self.match(TSqlParser.EQUAL)
                    self.state = 6798
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.REQUIRED or _la==TSqlParser.SUPPORTED or _la==TSqlParser.DISABLED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.ALGORITHM:
                        self.state = 6799
                        self.match(TSqlParser.ALGORITHM)
                        self.state = 6806
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
                        if la_ == 1:
                            self.state = 6800
                            self.match(TSqlParser.AES)
                            pass

                        elif la_ == 2:
                            self.state = 6801
                            self.match(TSqlParser.RC4)
                            pass

                        elif la_ == 3:
                            self.state = 6802
                            self.match(TSqlParser.AES)
                            self.state = 6803
                            self.match(TSqlParser.RC4)
                            pass

                        elif la_ == 4:
                            self.state = 6804
                            self.match(TSqlParser.RC4)
                            self.state = 6805
                            self.match(TSqlParser.AES)
                            pass






                self.state = 6818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,903,self._ctx)
                if la_ == 1:
                    self.state = 6813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 6812
                        self.match(TSqlParser.COMMA)


                    self.state = 6815
                    self.match(TSqlParser.MESSAGE_FORWARDING)
                    self.state = 6816
                    self.match(TSqlParser.EQUAL)
                    self.state = 6817
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ENABLED or _la==TSqlParser.DISABLED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.MESSAGE_FORWARD_SIZE or _la==TSqlParser.COMMA:
                    self.state = 6821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 6820
                        self.match(TSqlParser.COMMA)


                    self.state = 6823
                    self.match(TSqlParser.MESSAGE_FORWARD_SIZE)
                    self.state = 6824
                    self.match(TSqlParser.EQUAL)
                    self.state = 6825
                    self.match(TSqlParser.DECIMAL)


                self.state = 6828
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.state = 6829
                self.match(TSqlParser.FOR)
                self.state = 6830
                self.match(TSqlParser.DATABASE_MIRRORING)
                self.state = 6831
                self.match(TSqlParser.LR_BRACKET)
                self.state = 6832
                self.match(TSqlParser.AUTHENTICATION)
                self.state = 6833
                self.match(TSqlParser.EQUAL)
                self.state = 6850
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.WINDOWS]:
                    self.state = 6834
                    self.match(TSqlParser.WINDOWS)
                    self.state = 6836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (TSqlParser.KERBEROS - 169)) | (1 << (TSqlParser.NEGOTIATE - 169)) | (1 << (TSqlParser.NTLM - 169)))) != 0):
                        self.state = 6835
                        _la = self._input.LA(1)
                        if not(((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (TSqlParser.KERBEROS - 169)) | (1 << (TSqlParser.NEGOTIATE - 169)) | (1 << (TSqlParser.NTLM - 169)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 6840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CERTIFICATE:
                        self.state = 6838
                        self.match(TSqlParser.CERTIFICATE)
                        self.state = 6839
                        localctx.cert_name = self.id()


                    pass
                elif token in [TSqlParser.CERTIFICATE]:
                    self.state = 6842
                    self.match(TSqlParser.CERTIFICATE)
                    self.state = 6843
                    localctx.cert_name = self.id()
                    self.state = 6845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.WINDOWS:
                        self.state = 6844
                        self.match(TSqlParser.WINDOWS)


                    self.state = 6848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (TSqlParser.KERBEROS - 169)) | (1 << (TSqlParser.NEGOTIATE - 169)) | (1 << (TSqlParser.NTLM - 169)))) != 0):
                        self.state = 6847
                        _la = self._input.LA(1)
                        if not(((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (TSqlParser.KERBEROS - 169)) | (1 << (TSqlParser.NEGOTIATE - 169)) | (1 << (TSqlParser.NTLM - 169)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,914,self._ctx)
                if la_ == 1:
                    self.state = 6853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 6852
                        self.match(TSqlParser.COMMA)


                    self.state = 6855
                    self.match(TSqlParser.ENCRYPTION)
                    self.state = 6856
                    self.match(TSqlParser.EQUAL)
                    self.state = 6857
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.REQUIRED or _la==TSqlParser.SUPPORTED or _la==TSqlParser.DISABLED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.ALGORITHM:
                        self.state = 6858
                        self.match(TSqlParser.ALGORITHM)
                        self.state = 6865
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
                        if la_ == 1:
                            self.state = 6859
                            self.match(TSqlParser.AES)
                            pass

                        elif la_ == 2:
                            self.state = 6860
                            self.match(TSqlParser.RC4)
                            pass

                        elif la_ == 3:
                            self.state = 6861
                            self.match(TSqlParser.AES)
                            self.state = 6862
                            self.match(TSqlParser.RC4)
                            pass

                        elif la_ == 4:
                            self.state = 6863
                            self.match(TSqlParser.RC4)
                            self.state = 6864
                            self.match(TSqlParser.AES)
                            pass






                self.state = 6872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 6871
                    self.match(TSqlParser.COMMA)


                self.state = 6874
                self.match(TSqlParser.ROLE)
                self.state = 6875
                self.match(TSqlParser.EQUAL)
                self.state = 6876
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.WITNESS or _la==TSqlParser.PARTNER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6877
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_mirroring_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mirroring_set_option(self):
            return self.getTypedRuleContext(TSqlParser.Mirroring_set_optionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_database_mirroring_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_mirroring_option" ):
                listener.enterDatabase_mirroring_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_mirroring_option" ):
                listener.exitDatabase_mirroring_option(self)




    def database_mirroring_option(self):

        localctx = TSqlParser.Database_mirroring_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_database_mirroring_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6880
            self.mirroring_set_option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mirroring_set_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mirroring_partner(self):
            return self.getTypedRuleContext(TSqlParser.Mirroring_partnerContext,0)


        def partner_option(self):
            return self.getTypedRuleContext(TSqlParser.Partner_optionContext,0)


        def mirroring_witness(self):
            return self.getTypedRuleContext(TSqlParser.Mirroring_witnessContext,0)


        def witness_option(self):
            return self.getTypedRuleContext(TSqlParser.Witness_optionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_mirroring_set_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirroring_set_option" ):
                listener.enterMirroring_set_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirroring_set_option" ):
                listener.exitMirroring_set_option(self)




    def mirroring_set_option(self):

        localctx = TSqlParser.Mirroring_set_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_mirroring_set_option)
        try:
            self.state = 6888
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.PARTNER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6882
                self.mirroring_partner()
                self.state = 6883
                self.partner_option()
                pass
            elif token in [TSqlParser.WITNESS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6885
                self.mirroring_witness()
                self.state = 6886
                self.witness_option()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mirroring_partnerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTNER(self):
            return self.getToken(TSqlParser.PARTNER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_mirroring_partner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirroring_partner" ):
                listener.enterMirroring_partner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirroring_partner" ):
                listener.exitMirroring_partner(self)




    def mirroring_partner(self):

        localctx = TSqlParser.Mirroring_partnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_mirroring_partner)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6890
            self.match(TSqlParser.PARTNER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mirroring_witnessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITNESS(self):
            return self.getToken(TSqlParser.WITNESS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_mirroring_witness

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirroring_witness" ):
                listener.enterMirroring_witness(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirroring_witness" ):
                listener.exitMirroring_witness(self)




    def mirroring_witness(self):

        localctx = TSqlParser.Mirroring_witnessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_mirroring_witness)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6892
            self.match(TSqlParser.WITNESS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Witness_partner_equalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_witness_partner_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitness_partner_equal" ):
                listener.enterWitness_partner_equal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitness_partner_equal" ):
                listener.exitWitness_partner_equal(self)




    def witness_partner_equal(self):

        localctx = TSqlParser.Witness_partner_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_witness_partner_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6894
            self.match(TSqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partner_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def witness_partner_equal(self):
            return self.getTypedRuleContext(TSqlParser.Witness_partner_equalContext,0)


        def partner_server(self):
            return self.getTypedRuleContext(TSqlParser.Partner_serverContext,0)


        def FAILOVER(self):
            return self.getToken(TSqlParser.FAILOVER, 0)

        def FORCE_SERVICE_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def RESUME(self):
            return self.getToken(TSqlParser.RESUME, 0)

        def SAFETY(self):
            return self.getToken(TSqlParser.SAFETY, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def SUSPEND(self):
            return self.getToken(TSqlParser.SUSPEND, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_partner_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartner_option" ):
                listener.enterPartner_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartner_option" ):
                listener.exitPartner_option(self)




    def partner_option(self):

        localctx = TSqlParser.Partner_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_partner_option)
        self._la = 0 # Token type
        try:
            self.state = 6908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.EQUAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6896
                self.witness_partner_equal()
                self.state = 6897
                self.partner_server()
                pass
            elif token in [TSqlParser.FAILOVER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6899
                self.match(TSqlParser.FAILOVER)
                pass
            elif token in [TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6900
                self.match(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS)
                pass
            elif token in [TSqlParser.OFF]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6901
                self.match(TSqlParser.OFF)
                pass
            elif token in [TSqlParser.RESUME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6902
                self.match(TSqlParser.RESUME)
                pass
            elif token in [TSqlParser.SAFETY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6903
                self.match(TSqlParser.SAFETY)
                self.state = 6904
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FULL or _la==TSqlParser.OFF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.SUSPEND]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6905
                self.match(TSqlParser.SUSPEND)
                pass
            elif token in [TSqlParser.TIMEOUT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6906
                self.match(TSqlParser.TIMEOUT)
                self.state = 6907
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Witness_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def witness_partner_equal(self):
            return self.getTypedRuleContext(TSqlParser.Witness_partner_equalContext,0)


        def witness_server(self):
            return self.getTypedRuleContext(TSqlParser.Witness_serverContext,0)


        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_witness_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitness_option" ):
                listener.enterWitness_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitness_option" ):
                listener.exitWitness_option(self)




    def witness_option(self):

        localctx = TSqlParser.Witness_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_witness_option)
        try:
            self.state = 6914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.EQUAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6910
                self.witness_partner_equal()
                self.state = 6911
                self.witness_server()
                pass
            elif token in [TSqlParser.OFF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6913
                self.match(TSqlParser.OFF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Witness_serverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partner_server(self):
            return self.getTypedRuleContext(TSqlParser.Partner_serverContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_witness_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWitness_server" ):
                listener.enterWitness_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWitness_server" ):
                listener.exitWitness_server(self)




    def witness_server(self):

        localctx = TSqlParser.Witness_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_witness_server)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6916
            self.partner_server()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partner_serverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partner_server_tcp_prefix(self):
            return self.getTypedRuleContext(TSqlParser.Partner_server_tcp_prefixContext,0)


        def host(self):
            return self.getTypedRuleContext(TSqlParser.HostContext,0)


        def mirroring_host_port_seperator(self):
            return self.getTypedRuleContext(TSqlParser.Mirroring_host_port_seperatorContext,0)


        def port_number(self):
            return self.getTypedRuleContext(TSqlParser.Port_numberContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_partner_server

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartner_server" ):
                listener.enterPartner_server(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartner_server" ):
                listener.exitPartner_server(self)




    def partner_server(self):

        localctx = TSqlParser.Partner_serverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_partner_server)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6918
            self.partner_server_tcp_prefix()
            self.state = 6919
            self.host()
            self.state = 6920
            self.mirroring_host_port_seperator()
            self.state = 6921
            self.port_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mirroring_host_port_seperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(TSqlParser.COLON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_mirroring_host_port_seperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMirroring_host_port_seperator" ):
                listener.enterMirroring_host_port_seperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMirroring_host_port_seperator" ):
                listener.exitMirroring_host_port_seperator(self)




    def mirroring_host_port_seperator(self):

        localctx = TSqlParser.Mirroring_host_port_seperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_mirroring_host_port_seperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6923
            self.match(TSqlParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partner_server_tcp_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TCP(self):
            return self.getToken(TSqlParser.TCP, 0)

        def COLON(self):
            return self.getToken(TSqlParser.COLON, 0)

        def DOUBLE_FORWARD_SLASH(self):
            return self.getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_partner_server_tcp_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartner_server_tcp_prefix" ):
                listener.enterPartner_server_tcp_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartner_server_tcp_prefix" ):
                listener.exitPartner_server_tcp_prefix(self)




    def partner_server_tcp_prefix(self):

        localctx = TSqlParser.Partner_server_tcp_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_partner_server_tcp_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6925
            self.match(TSqlParser.TCP)
            self.state = 6926
            self.match(TSqlParser.COLON)
            self.state = 6927
            self.match(TSqlParser.DOUBLE_FORWARD_SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Port_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.port = None # Token

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_port_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPort_number" ):
                listener.enterPort_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPort_number" ):
                listener.exitPort_number(self)




    def port_number(self):

        localctx = TSqlParser.Port_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_port_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6929
            localctx.port = self.match(TSqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def host(self):
            return self.getTypedRuleContext(TSqlParser.HostContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_host

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHost" ):
                listener.enterHost(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHost" ):
                listener.exitHost(self)




    def host(self):

        localctx = TSqlParser.HostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_host)
        try:
            self.state = 6941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6931
                self.id()
                self.state = 6932
                self.match(TSqlParser.DOT)
                self.state = 6933
                self.host()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6939
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
                if la_ == 1:
                    self.state = 6935
                    self.id()
                    self.state = 6936
                    self.match(TSqlParser.DOT)
                    pass

                elif la_ == 2:
                    self.state = 6938
                    self.id()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_correlation_optimization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_date_correlation_optimization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_correlation_optimization_option" ):
                listener.enterDate_correlation_optimization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_correlation_optimization_option" ):
                listener.exitDate_correlation_optimization_option(self)




    def date_correlation_optimization_option(self):

        localctx = TSqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6943
            self.match(TSqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 6944
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_encryption_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_db_encryption_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_encryption_option" ):
                listener.enterDb_encryption_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_encryption_option" ):
                listener.exitDb_encryption_option(self)




    def db_encryption_option(self):

        localctx = TSqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6946
            self.match(TSqlParser.ENCRYPTION)
            self.state = 6947
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_state_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(TSqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(TSqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_db_state_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_state_option" ):
                listener.enterDb_state_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_state_option" ):
                listener.exitDb_state_option(self)




    def db_state_option(self):

        localctx = TSqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6949
            _la = self._input.LA(1)
            if not(_la==TSqlParser.EMERGENCY or _la==TSqlParser.OFFLINE or _la==TSqlParser.ONLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_update_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(TSqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_db_update_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_update_option" ):
                listener.enterDb_update_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_update_option" ):
                listener.exitDb_update_option(self)




    def db_update_option(self):

        localctx = TSqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6951
            _la = self._input.LA(1)
            if not(_la==TSqlParser.READ_ONLY or _la==TSqlParser.READ_WRITE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_user_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(TSqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(TSqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(TSqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_db_user_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_user_access_option" ):
                listener.enterDb_user_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_user_access_option" ):
                listener.exitDb_user_access_option(self)




    def db_user_access_option(self):

        localctx = TSqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6953
            _la = self._input.LA(1)
            if not(_la==TSqlParser.MULTI_USER or _la==TSqlParser.RESTRICTED_USER or _la==TSqlParser.SINGLE_USER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delayed_durability_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(TSqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(TSqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(TSqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_delayed_durability_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayed_durability_option" ):
                listener.enterDelayed_durability_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayed_durability_option" ):
                listener.exitDelayed_durability_option(self)




    def delayed_durability_option(self):

        localctx = TSqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6955
            self.match(TSqlParser.DELAYED_DURABILITY)
            self.state = 6956
            self.match(TSqlParser.EQUAL)
            self.state = 6957
            _la = self._input.LA(1)
            if not(_la==TSqlParser.ALLOWED or _la==TSqlParser.DISABLED or _la==TSqlParser.FORCED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(TSqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(TSqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(TSqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_external_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_access_option" ):
                listener.enterExternal_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_access_option" ):
                listener.exitExternal_access_option(self)




    def external_access_option(self):

        localctx = TSqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 6984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6959
                self.match(TSqlParser.DB_CHAINING)
                self.state = 6960
                self.on_off()
                pass
            elif token in [TSqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6961
                self.match(TSqlParser.TRUSTWORTHY)
                self.state = 6962
                self.on_off()
                pass
            elif token in [TSqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6963
                self.match(TSqlParser.DEFAULT_LANGUAGE)
                self.state = 6964
                self.match(TSqlParser.EQUAL)
                self.state = 6967
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 6965
                    self.id()
                    pass
                elif token in [TSqlParser.STRING]:
                    self.state = 6966
                    self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6969
                self.match(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 6970
                self.match(TSqlParser.EQUAL)
                self.state = 6973
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 6971
                    self.id()
                    pass
                elif token in [TSqlParser.STRING]:
                    self.state = 6972
                    self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6975
                self.match(TSqlParser.NESTED_TRIGGERS)
                self.state = 6976
                self.match(TSqlParser.EQUAL)
                self.state = 6977
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6978
                self.match(TSqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 6979
                self.match(TSqlParser.EQUAL)
                self.state = 6980
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6981
                self.match(TSqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 6982
                self.match(TSqlParser.EQUAL)
                self.state = 6983
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hadr_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.availability_group_name = None # IdContext

        def HADR(self):
            return self.getToken(TSqlParser.HADR, 0)

        def SUSPEND(self):
            return self.getToken(TSqlParser.SUSPEND, 0)

        def RESUME(self):
            return self.getToken(TSqlParser.RESUME, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_hadr_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHadr_options" ):
                listener.enterHadr_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHadr_options" ):
                listener.exitHadr_options(self)




    def hadr_options(self):

        localctx = TSqlParser.Hadr_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_hadr_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6986
            self.match(TSqlParser.HADR)
            self.state = 6995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.OFF, TSqlParser.AVAILABILITY]:
                self.state = 6992
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.AVAILABILITY]:
                    self.state = 6987
                    self.match(TSqlParser.AVAILABILITY)
                    self.state = 6988
                    self.match(TSqlParser.GROUP)
                    self.state = 6989
                    self.match(TSqlParser.EQUAL)
                    self.state = 6990
                    localctx.availability_group_name = self.id()
                    pass
                elif token in [TSqlParser.OFF]:
                    self.state = 6991
                    self.match(TSqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.RESUME, TSqlParser.SUSPEND]:
                self.state = 6994
                _la = self._input.LA(1)
                if not(_la==TSqlParser.RESUME or _la==TSqlParser.SUSPEND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mixed_page_allocation_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_mixed_page_allocation_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixed_page_allocation_option" ):
                listener.enterMixed_page_allocation_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixed_page_allocation_option" ):
                listener.exitMixed_page_allocation_option(self)




    def mixed_page_allocation_option(self):

        localctx = TSqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6997
            self.match(TSqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 6998
            _la = self._input.LA(1)
            if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameterization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(TSqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_parameterization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterization_option" ):
                listener.enterParameterization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterization_option" ):
                listener.exitParameterization_option(self)




    def parameterization_option(self):

        localctx = TSqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7000
            self.match(TSqlParser.PARAMETERIZATION)
            self.state = 7001
            _la = self._input.LA(1)
            if not(_la==TSqlParser.FORCED or _la==TSqlParser.SIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recovery_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(TSqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(TSqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(TSqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def PAGE_VERIFY(self):
            return self.getToken(TSqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(TSqlParser.NONE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_recovery_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecovery_option" ):
                listener.enterRecovery_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecovery_option" ):
                listener.exitRecovery_option(self)




    def recovery_option(self):

        localctx = TSqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 7009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.RECOVERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7003
                self.match(TSqlParser.RECOVERY)
                self.state = 7004
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FULL or _la==TSqlParser.BULK_LOGGED or _la==TSqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.TORN_PAGE_DETECTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7005
                self.match(TSqlParser.TORN_PAGE_DETECTION)
                self.state = 7006
                self.on_off()
                pass
            elif token in [TSqlParser.PAGE_VERIFY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7007
                self.match(TSqlParser.PAGE_VERIFY)
                self.state = 7008
                _la = self._input.LA(1)
                if not(_la==TSqlParser.NONE or _la==TSqlParser.CHECKSUM or _la==TSqlParser.TORN_PAGE_DETECTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Service_broker_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(TSqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(TSqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(TSqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_service_broker_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_broker_option" ):
                listener.enterService_broker_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_broker_option" ):
                listener.exitService_broker_option(self)




    def service_broker_option(self):

        localctx = TSqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_service_broker_option)
        try:
            self.state = 7017
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ENABLE_BROKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7011
                self.match(TSqlParser.ENABLE_BROKER)
                pass
            elif token in [TSqlParser.DISABLE_BROKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7012
                self.match(TSqlParser.DISABLE_BROKER)
                pass
            elif token in [TSqlParser.NEW_BROKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7013
                self.match(TSqlParser.NEW_BROKER)
                pass
            elif token in [TSqlParser.ERROR_BROKER_CONVERSATIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7014
                self.match(TSqlParser.ERROR_BROKER_CONVERSATIONS)
                pass
            elif token in [TSqlParser.HONOR_BROKER_PRIORITY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7015
                self.match(TSqlParser.HONOR_BROKER_PRIORITY)
                self.state = 7016
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Snapshot_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_snapshot_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnapshot_option" ):
                listener.enterSnapshot_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnapshot_option" ):
                listener.exitSnapshot_option(self)




    def snapshot_option(self):

        localctx = TSqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 7024
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ALLOW_SNAPSHOT_ISOLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7019
                self.match(TSqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 7020
                self.on_off()
                pass
            elif token in [TSqlParser.READ_COMMITTED_SNAPSHOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7021
                self.match(TSqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 7022
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.OFF, TSqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7023
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(TSqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(TSqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(TSqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(TSqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_sql_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_option" ):
                listener.enterSql_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_option" ):
                listener.exitSql_option(self)




    def sql_option(self):

        localctx = TSqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_sql_option)
        try:
            self.state = 7047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ANSI_NULL_DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7026
                self.match(TSqlParser.ANSI_NULL_DEFAULT)
                self.state = 7027
                self.on_off()
                pass
            elif token in [TSqlParser.ANSI_NULLS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7028
                self.match(TSqlParser.ANSI_NULLS)
                self.state = 7029
                self.on_off()
                pass
            elif token in [TSqlParser.ANSI_PADDING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7030
                self.match(TSqlParser.ANSI_PADDING)
                self.state = 7031
                self.on_off()
                pass
            elif token in [TSqlParser.ANSI_WARNINGS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7032
                self.match(TSqlParser.ANSI_WARNINGS)
                self.state = 7033
                self.on_off()
                pass
            elif token in [TSqlParser.ARITHABORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7034
                self.match(TSqlParser.ARITHABORT)
                self.state = 7035
                self.on_off()
                pass
            elif token in [TSqlParser.COMPATIBILITY_LEVEL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 7036
                self.match(TSqlParser.COMPATIBILITY_LEVEL)
                self.state = 7037
                self.match(TSqlParser.EQUAL)
                self.state = 7038
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [TSqlParser.CONCAT_NULL_YIELDS_NULL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 7039
                self.match(TSqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 7040
                self.on_off()
                pass
            elif token in [TSqlParser.NUMERIC_ROUNDABORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 7041
                self.match(TSqlParser.NUMERIC_ROUNDABORT)
                self.state = 7042
                self.on_off()
                pass
            elif token in [TSqlParser.QUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 7043
                self.match(TSqlParser.QUOTED_IDENTIFIER)
                self.state = 7044
                self.on_off()
                pass
            elif token in [TSqlParser.RECURSIVE_TRIGGERS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 7045
                self.match(TSqlParser.RECURSIVE_TRIGGERS)
                self.state = 7046
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_recovery_time_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(TSqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(TSqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_target_recovery_time_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_recovery_time_option" ):
                listener.enterTarget_recovery_time_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_recovery_time_option" ):
                listener.exitTarget_recovery_time_option(self)




    def target_recovery_time_option(self):

        localctx = TSqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7049
            self.match(TSqlParser.TARGET_RECOVERY_TIME)
            self.state = 7050
            self.match(TSqlParser.EQUAL)
            self.state = 7051
            self.match(TSqlParser.DECIMAL)
            self.state = 7052
            _la = self._input.LA(1)
            if not(_la==TSqlParser.MINUTES or _la==TSqlParser.SECONDS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(TSqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(TSqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(TSqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_termination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermination" ):
                listener.enterTermination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermination" ):
                listener.exitTermination(self)




    def termination(self):

        localctx = TSqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_termination)
        try:
            self.state = 7060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,931,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7054
                self.match(TSqlParser.ROLLBACK)
                self.state = 7055
                self.match(TSqlParser.AFTER)
                self.state = 7056
                localctx.seconds = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7057
                self.match(TSqlParser.ROLLBACK)
                self.state = 7058
                self.match(TSqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7059
                self.match(TSqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def drop_relational_or_xml_or_spatial_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Drop_relational_or_xml_or_spatial_indexContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Drop_relational_or_xml_or_spatial_indexContext,i)


        def drop_backward_compatible_index(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Drop_backward_compatible_indexContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Drop_backward_compatible_indexContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index" ):
                listener.enterDrop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index" ):
                listener.exitDrop_index(self)




    def drop_index(self):

        localctx = TSqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7062
            self.match(TSqlParser.DROP)
            self.state = 7063
            self.match(TSqlParser.INDEX)
            self.state = 7066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 7064
                self.match(TSqlParser.IF)
                self.state = 7065
                self.match(TSqlParser.EXISTS)


            self.state = 7084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,935,self._ctx)
            if la_ == 1:
                self.state = 7068
                self.drop_relational_or_xml_or_spatial_index()
                self.state = 7073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 7069
                    self.match(TSqlParser.COMMA)
                    self.state = 7070
                    self.drop_relational_or_xml_or_spatial_index()
                    self.state = 7075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 7076
                self.drop_backward_compatible_index()
                self.state = 7081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 7077
                    self.match(TSqlParser.COMMA)
                    self.state = 7078
                    self.drop_backward_compatible_index()
                    self.state = 7083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 7087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,936,self._ctx)
            if la_ == 1:
                self.state = 7086
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # IdContext

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_relational_or_xml_or_spatial_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_relational_or_xml_or_spatial_index" ):
                listener.enterDrop_relational_or_xml_or_spatial_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_relational_or_xml_or_spatial_index" ):
                listener.exitDrop_relational_or_xml_or_spatial_index(self)




    def drop_relational_or_xml_or_spatial_index(self):

        localctx = TSqlParser.Drop_relational_or_xml_or_spatial_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_drop_relational_or_xml_or_spatial_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7089
            localctx.index_name = self.id()
            self.state = 7090
            self.match(TSqlParser.ON)
            self.state = 7091
            self.full_table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_backward_compatible_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.owner_name = None # IdContext
            self.table_or_view_name = None # IdContext
            self.index_name = None # IdContext

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_backward_compatible_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_backward_compatible_index" ):
                listener.enterDrop_backward_compatible_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_backward_compatible_index" ):
                listener.exitDrop_backward_compatible_index(self)




    def drop_backward_compatible_index(self):

        localctx = TSqlParser.Drop_backward_compatible_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_drop_backward_compatible_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
            if la_ == 1:
                self.state = 7093
                localctx.owner_name = self.id()
                self.state = 7094
                self.match(TSqlParser.DOT)


            self.state = 7098
            localctx.table_or_view_name = self.id()
            self.state = 7099
            self.match(TSqlParser.DOT)
            self.state = 7100
            localctx.index_name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def func_proc_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Func_proc_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Func_proc_nameContext,i)


        def PROC(self):
            return self.getToken(TSqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(TSqlParser.PROCEDURE, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)




    def drop_procedure(self):

        localctx = TSqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7102
            self.match(TSqlParser.DROP)
            self.state = 7103
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.PROC or _la==TSqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 7104
                self.match(TSqlParser.IF)
                self.state = 7105
                self.match(TSqlParser.EXISTS)


            self.state = 7108
            self.func_proc_name()
            self.state = 7113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 7109
                self.match(TSqlParser.COMMA)
                self.state = 7110
                self.func_proc_name()
                self.state = 7115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,940,self._ctx)
            if la_ == 1:
                self.state = 7116
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_dml_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Drop_dml_triggerContext,0)


        def drop_ddl_trigger(self):
            return self.getTypedRuleContext(TSqlParser.Drop_ddl_triggerContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_drop_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger" ):
                listener.enterDrop_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger" ):
                listener.exitDrop_trigger(self)




    def drop_trigger(self):

        localctx = TSqlParser.Drop_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_drop_trigger)
        try:
            self.state = 7121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,941,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7119
                self.drop_dml_trigger()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7120
                self.drop_ddl_trigger()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_dml_trigger" ):
                listener.enterDrop_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_dml_trigger" ):
                listener.exitDrop_dml_trigger(self)




    def drop_dml_trigger(self):

        localctx = TSqlParser.Drop_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_drop_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7123
            self.match(TSqlParser.DROP)
            self.state = 7124
            self.match(TSqlParser.TRIGGER)
            self.state = 7127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 7125
                self.match(TSqlParser.IF)
                self.state = 7126
                self.match(TSqlParser.EXISTS)


            self.state = 7129
            self.simple_name()
            self.state = 7134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 7130
                self.match(TSqlParser.COMMA)
                self.state = 7131
                self.simple_name()
                self.state = 7136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
            if la_ == 1:
                self.state = 7137
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_ddl_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(TSqlParser.TRIGGER, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_nameContext,i)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_ddl_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_ddl_trigger" ):
                listener.enterDrop_ddl_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_ddl_trigger" ):
                listener.exitDrop_ddl_trigger(self)




    def drop_ddl_trigger(self):

        localctx = TSqlParser.Drop_ddl_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_drop_ddl_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7140
            self.match(TSqlParser.DROP)
            self.state = 7141
            self.match(TSqlParser.TRIGGER)
            self.state = 7144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 7142
                self.match(TSqlParser.IF)
                self.state = 7143
                self.match(TSqlParser.EXISTS)


            self.state = 7146
            self.simple_name()
            self.state = 7151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 7147
                self.match(TSqlParser.COMMA)
                self.state = 7148
                self.simple_name()
                self.state = 7153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7154
            self.match(TSqlParser.ON)
            self.state = 7158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DATABASE]:
                self.state = 7155
                self.match(TSqlParser.DATABASE)
                pass
            elif token in [TSqlParser.ALL]:
                self.state = 7156
                self.match(TSqlParser.ALL)
                self.state = 7157
                self.match(TSqlParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,948,self._ctx)
            if la_ == 1:
                self.state = 7160
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(TSqlParser.FUNCTION, 0)

        def func_proc_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Func_proc_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Func_proc_nameContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)




    def drop_function(self):

        localctx = TSqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_drop_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7163
            self.match(TSqlParser.DROP)
            self.state = 7164
            self.match(TSqlParser.FUNCTION)
            self.state = 7167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 7165
                self.match(TSqlParser.IF)
                self.state = 7166
                self.match(TSqlParser.EXISTS)


            self.state = 7169
            self.func_proc_name()
            self.state = 7174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 7170
                self.match(TSqlParser.COMMA)
                self.state = 7171
                self.func_proc_name()
                self.state = 7176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
            if la_ == 1:
                self.state = 7177
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(TSqlParser.STATISTICS, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_nameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics" ):
                listener.enterDrop_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics" ):
                listener.exitDrop_statistics(self)




    def drop_statistics(self):

        localctx = TSqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_drop_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7180
            self.match(TSqlParser.DROP)
            self.state = 7181
            self.match(TSqlParser.STATISTICS)
            self.state = 7191 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 7183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 7182
                    self.match(TSqlParser.COMMA)


                self.state = 7188
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,953,self._ctx)
                if la_ == 1:
                    self.state = 7185
                    self.table_name()
                    self.state = 7186
                    self.match(TSqlParser.DOT)


                self.state = 7190
                localctx.name = self.id()
                self.state = 7193 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==TSqlParser.BLOCKING_HIERARCHY or _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.COMMA - 767)))) != 0)):
                    break

            self.state = 7195
            self.match(TSqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)




    def drop_table(self):

        localctx = TSqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7197
            self.match(TSqlParser.DROP)
            self.state = 7198
            self.match(TSqlParser.TABLE)
            self.state = 7201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 7199
                self.match(TSqlParser.IF)
                self.state = 7200
                self.match(TSqlParser.EXISTS)


            self.state = 7203
            self.table_name()
            self.state = 7205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,956,self._ctx)
            if la_ == 1:
                self.state = 7204
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(TSqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)




    def drop_view(self):

        localctx = TSqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7207
            self.match(TSqlParser.DROP)
            self.state = 7208
            self.match(TSqlParser.VIEW)
            self.state = 7211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 7209
                self.match(TSqlParser.IF)
                self.state = 7210
                self.match(TSqlParser.EXISTS)


            self.state = 7213
            self.simple_name()
            self.state = 7218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 7214
                self.match(TSqlParser.COMMA)
                self.state = 7215
                self.simple_name()
                self.state = 7220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,959,self._ctx)
            if la_ == 1:
                self.state = 7221
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def default_value(self):
            return self.getTypedRuleContext(TSqlParser.Default_valueContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)




    def create_type(self):

        localctx = TSqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7224
            self.match(TSqlParser.CREATE)
            self.state = 7225
            self.match(TSqlParser.TYPE)
            self.state = 7226
            localctx.name = self.simple_name()
            self.state = 7231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 7227
                self.match(TSqlParser.FROM)
                self.state = 7228
                self.data_type()
                self.state = 7229
                self.default_value()


            self.state = 7239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 7233
                self.match(TSqlParser.AS)
                self.state = 7234
                self.match(TSqlParser.TABLE)
                self.state = 7235
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7236
                self.column_def_table_constraints()
                self.state = 7237
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(TSqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(TSqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(TSqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)




    def drop_type(self):

        localctx = TSqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7241
            self.match(TSqlParser.DROP)
            self.state = 7242
            self.match(TSqlParser.TYPE)
            self.state = 7245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.IF:
                self.state = 7243
                self.match(TSqlParser.IF)
                self.state = 7244
                self.match(TSqlParser.EXISTS)


            self.state = 7247
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_function_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(TSqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(TSqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_rowset_function_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function_limited" ):
                listener.enterRowset_function_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function_limited" ):
                listener.exitRowset_function_limited(self)




    def rowset_function_limited(self):

        localctx = TSqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_rowset_function_limited)
        try:
            self.state = 7251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.OPENQUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7249
                self.openquery()
                pass
            elif token in [TSqlParser.OPENDATASOURCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7250
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # IdContext
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(TSqlParser.OPENQUERY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_openquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenquery" ):
                listener.enterOpenquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenquery" ):
                listener.exitOpenquery(self)




    def openquery(self):

        localctx = TSqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7253
            self.match(TSqlParser.OPENQUERY)
            self.state = 7254
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7255
            localctx.linked_server = self.id()
            self.state = 7256
            self.match(TSqlParser.COMMA)
            self.state = 7257
            localctx.query = self.match(TSqlParser.STRING)
            self.state = 7258
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpendatasourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # IdContext
            self.scheme = None # IdContext
            self.table = None # IdContext

        def OPENDATASOURCE(self):
            return self.getToken(TSqlParser.OPENDATASOURCE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_opendatasource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpendatasource" ):
                listener.enterOpendatasource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpendatasource" ):
                listener.exitOpendatasource(self)




    def opendatasource(self):

        localctx = TSqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7260
            self.match(TSqlParser.OPENDATASOURCE)
            self.state = 7261
            self.match(TSqlParser.LR_BRACKET)
            self.state = 7262
            localctx.provider = self.match(TSqlParser.STRING)
            self.state = 7263
            self.match(TSqlParser.COMMA)
            self.state = 7264
            localctx.init = self.match(TSqlParser.STRING)
            self.state = 7265
            self.match(TSqlParser.RR_BRACKET)
            self.state = 7266
            self.match(TSqlParser.DOT)
            self.state = 7268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                self.state = 7267
                localctx.database = self.id()


            self.state = 7270
            self.match(TSqlParser.DOT)
            self.state = 7272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                self.state = 7271
                localctx.scheme = self.id()


            self.state = 7274
            self.match(TSqlParser.DOT)

            self.state = 7275
            localctx.table = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Token

        def DECLARE(self):
            return self.getToken(TSqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(TSqlParser.Table_type_definitionContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Declare_localContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def xml_type_definition(self):
            return self.getTypedRuleContext(TSqlParser.Xml_type_definitionContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TSqlParser.XMLNAMESPACES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)




    def declare_statement(self):

        localctx = TSqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 7320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7277
                self.match(TSqlParser.DECLARE)
                self.state = 7278
                self.match(TSqlParser.LOCAL_ID)
                self.state = 7280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AS:
                    self.state = 7279
                    self.match(TSqlParser.AS)


                self.state = 7282
                self.table_type_definition()
                self.state = 7284
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
                if la_ == 1:
                    self.state = 7283
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7286
                self.match(TSqlParser.DECLARE)
                self.state = 7287
                self.declare_local()
                self.state = 7292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 7288
                    self.match(TSqlParser.COMMA)
                    self.state = 7289
                    self.declare_local()
                    self.state = 7294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,969,self._ctx)
                if la_ == 1:
                    self.state = 7295
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7298
                self.match(TSqlParser.DECLARE)
                self.state = 7299
                self.match(TSqlParser.LOCAL_ID)
                self.state = 7301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AS:
                    self.state = 7300
                    self.match(TSqlParser.AS)


                self.state = 7303
                self.xml_type_definition()
                self.state = 7305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,971,self._ctx)
                if la_ == 1:
                    self.state = 7304
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7307
                self.match(TSqlParser.WITH)
                self.state = 7308
                self.match(TSqlParser.XMLNAMESPACES)
                self.state = 7309
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7310
                localctx.xml_namespace_uri = self.match(TSqlParser.STRING)
                self.state = 7312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 7311
                    self.match(TSqlParser.COMMA)


                self.state = 7314
                self.match(TSqlParser.AS)
                self.state = 7315
                self.id()
                self.state = 7316
                self.match(TSqlParser.RR_BRACKET)
                self.state = 7318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
                if la_ == 1:
                    self.state = 7317
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(TSqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def DEALLOCATE(self):
            return self.getToken(TSqlParser.DEALLOCATE, 0)

        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(TSqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(TSqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(TSqlParser.OPEN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_cursor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_statement" ):
                listener.enterCursor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_statement" ):
                listener.exitCursor_statement(self)




    def cursor_statement(self):

        localctx = TSqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_cursor_statement)
        self._la = 0 # Token type
        try:
            self.state = 7351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7322
                self.match(TSqlParser.CLOSE)
                self.state = 7324
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
                if la_ == 1:
                    self.state = 7323
                    self.match(TSqlParser.GLOBAL)


                self.state = 7326
                self.cursor_name()
                self.state = 7328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,976,self._ctx)
                if la_ == 1:
                    self.state = 7327
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [TSqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7330
                self.match(TSqlParser.DEALLOCATE)
                self.state = 7332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,977,self._ctx)
                if la_ == 1:
                    self.state = 7331
                    self.match(TSqlParser.GLOBAL)


                self.state = 7335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CURSOR:
                    self.state = 7334
                    self.match(TSqlParser.CURSOR)


                self.state = 7337
                self.cursor_name()
                self.state = 7339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,979,self._ctx)
                if la_ == 1:
                    self.state = 7338
                    self.match(TSqlParser.SEMI)


                pass
            elif token in [TSqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7341
                self.declare_cursor()
                pass
            elif token in [TSqlParser.FETCH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7342
                self.fetch_cursor()
                pass
            elif token in [TSqlParser.OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7343
                self.match(TSqlParser.OPEN)
                self.state = 7345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,980,self._ctx)
                if la_ == 1:
                    self.state = 7344
                    self.match(TSqlParser.GLOBAL)


                self.state = 7347
                self.cursor_name()
                self.state = 7349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
                if la_ == 1:
                    self.state = 7348
                    self.match(TSqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # IdContext
            self.file_or_filegroup = None # Token
            self.logical_device_name = None # IdContext
            self.backup_set_name = None # IdContext
            self.medianame = None # Token
            self.stats_percent = None # Token
            self.encryptor_name = None # IdContext

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def READ_WRITE_FILEGROUPS(self):
            return self.getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE)
            else:
                return self.getToken(TSqlParser.FILE, i)

        def FILEGROUP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILEGROUP)
            else:
                return self.getToken(TSqlParser.FILEGROUP, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def DISK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DISK)
            else:
                return self.getToken(TSqlParser.DISK, i)

        def TAPE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TAPE)
            else:
                return self.getToken(TSqlParser.TAPE, i)

        def URL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.URL)
            else:
                return self.getToken(TSqlParser.URL, i)

        def MIRROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MIRROR)
            else:
                return self.getToken(TSqlParser.MIRROR, i)

        def DIFFERENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DIFFERENTIAL)
            else:
                return self.getToken(TSqlParser.DIFFERENTIAL, i)

        def COPY_ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COPY_ONLY)
            else:
                return self.getToken(TSqlParser.COPY_ONLY, i)

        def DESCRIPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESCRIPTION)
            else:
                return self.getToken(TSqlParser.DESCRIPTION, i)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NAME)
            else:
                return self.getToken(TSqlParser.NAME, i)

        def CREDENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CREDENTIAL)
            else:
                return self.getToken(TSqlParser.CREDENTIAL, i)

        def FILE_SNAPSHOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE_SNAPSHOT)
            else:
                return self.getToken(TSqlParser.FILE_SNAPSHOT, i)

        def MEDIADESCRIPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIADESCRIPTION)
            else:
                return self.getToken(TSqlParser.MEDIADESCRIPTION, i)

        def MEDIANAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIANAME)
            else:
                return self.getToken(TSqlParser.MEDIANAME, i)

        def BLOCKSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BLOCKSIZE)
            else:
                return self.getToken(TSqlParser.BLOCKSIZE, i)

        def BUFFERCOUNT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BUFFERCOUNT)
            else:
                return self.getToken(TSqlParser.BUFFERCOUNT, i)

        def MAXTRANSFER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAXTRANSFER)
            else:
                return self.getToken(TSqlParser.MAXTRANSFER, i)

        def RESTART(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESTART)
            else:
                return self.getToken(TSqlParser.RESTART, i)

        def STATS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATS)
            else:
                return self.getToken(TSqlParser.STATS, i)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALGORITHM)
            else:
                return self.getToken(TSqlParser.ALGORITHM, i)

        def SERVER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVER)
            else:
                return self.getToken(TSqlParser.SERVER, i)

        def CERTIFICATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CERTIFICATE)
            else:
                return self.getToken(TSqlParser.CERTIFICATE, i)

        def COMPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMPRESSION)
            else:
                return self.getToken(TSqlParser.COMPRESSION, i)

        def NO_COMPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_COMPRESSION)
            else:
                return self.getToken(TSqlParser.NO_COMPRESSION, i)

        def NOINIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOINIT)
            else:
                return self.getToken(TSqlParser.NOINIT, i)

        def INIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INIT)
            else:
                return self.getToken(TSqlParser.INIT, i)

        def NOSKIP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOSKIP)
            else:
                return self.getToken(TSqlParser.NOSKIP, i)

        def SKIP_KEYWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SKIP_KEYWORD)
            else:
                return self.getToken(TSqlParser.SKIP_KEYWORD, i)

        def NOFORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOFORMAT)
            else:
                return self.getToken(TSqlParser.NOFORMAT, i)

        def FORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FORMAT)
            else:
                return self.getToken(TSqlParser.FORMAT, i)

        def NO_CHECKSUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_CHECKSUM)
            else:
                return self.getToken(TSqlParser.NO_CHECKSUM, i)

        def CHECKSUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CHECKSUM)
            else:
                return self.getToken(TSqlParser.CHECKSUM, i)

        def STOP_ON_ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STOP_ON_ERROR)
            else:
                return self.getToken(TSqlParser.STOP_ON_ERROR, i)

        def CONTINUE_AFTER_ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTINUE_AFTER_ERROR)
            else:
                return self.getToken(TSqlParser.CONTINUE_AFTER_ERROR, i)

        def REWIND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REWIND)
            else:
                return self.getToken(TSqlParser.REWIND, i)

        def NOREWIND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOREWIND)
            else:
                return self.getToken(TSqlParser.NOREWIND, i)

        def LOAD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOAD)
            else:
                return self.getToken(TSqlParser.LOAD, i)

        def NOUNLOAD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOUNLOAD)
            else:
                return self.getToken(TSqlParser.NOUNLOAD, i)

        def AES_128(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_128)
            else:
                return self.getToken(TSqlParser.AES_128, i)

        def AES_192(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_192)
            else:
                return self.getToken(TSqlParser.AES_192, i)

        def AES_256(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_256)
            else:
                return self.getToken(TSqlParser.AES_256, i)

        def TRIPLE_DES_3KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TRIPLE_DES_3KEY)
            else:
                return self.getToken(TSqlParser.TRIPLE_DES_3KEY, i)

        def EXPIREDATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EXPIREDATE)
            else:
                return self.getToken(TSqlParser.EXPIREDATE, i)

        def RETAINDAYS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RETAINDAYS)
            else:
                return self.getToken(TSqlParser.RETAINDAYS, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def ASYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASYMMETRIC)
            else:
                return self.getToken(TSqlParser.ASYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_database" ):
                listener.enterBackup_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_database" ):
                listener.exitBackup_database(self)




    def backup_database(self):

        localctx = TSqlParser.Backup_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_backup_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7353
            self.match(TSqlParser.BACKUP)
            self.state = 7354
            self.match(TSqlParser.DATABASE)

            self.state = 7355
            localctx.database_name = self.id()
            self.state = 7368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.READ_WRITE_FILEGROUPS:
                self.state = 7356
                self.match(TSqlParser.READ_WRITE_FILEGROUPS)
                self.state = 7365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,984,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7358
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 7357
                            self.match(TSqlParser.COMMA)


                        self.state = 7360
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.FILE or _la==TSqlParser.FILEGROUP):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 7361
                        self.match(TSqlParser.EQUAL)
                        self.state = 7362
                        localctx.file_or_filegroup = self.match(TSqlParser.STRING) 
                    self.state = 7367
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,984,self._ctx)



            self.state = 7378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.FILE or _la==TSqlParser.FILEGROUP or _la==TSqlParser.COMMA:
                self.state = 7371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 7370
                    self.match(TSqlParser.COMMA)


                self.state = 7373
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FILE or _la==TSqlParser.FILEGROUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7374
                self.match(TSqlParser.EQUAL)
                self.state = 7375
                localctx.file_or_filegroup = self.match(TSqlParser.STRING)
                self.state = 7380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,993,self._ctx)
            if la_ == 1:
                self.state = 7381
                self.match(TSqlParser.TO)
                self.state = 7386 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 7383
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 7382
                            self.match(TSqlParser.COMMA)


                        self.state = 7385
                        localctx.logical_device_name = self.id()

                    else:
                        raise NoViableAltException(self)
                    self.state = 7388 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,989,self._ctx)

                pass

            elif la_ == 2:
                self.state = 7390
                self.match(TSqlParser.TO)
                self.state = 7400 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 7391
                        self.match(TSqlParser.COMMA)


                    self.state = 7394
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DISK or _la==TSqlParser.TAPE or _la==TSqlParser.URL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 7395
                    self.match(TSqlParser.EQUAL)
                    self.state = 7398
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.STRING]:
                        self.state = 7396
                        self.match(TSqlParser.STRING)
                        pass
                    elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                        self.state = 7397
                        self.id()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 7402 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.DISK or _la==TSqlParser.TAPE or _la==TSqlParser.URL or _la==TSqlParser.COMMA):
                        break

                pass


            self.state = 7439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1001,self._ctx)
            if la_ == 1:
                self.state = 7416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7406
                    self.match(TSqlParser.MIRROR)
                    self.state = 7407
                    self.match(TSqlParser.TO)
                    self.state = 7412 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 7409
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7408
                                self.match(TSqlParser.COMMA)


                            self.state = 7411
                            localctx.logical_device_name = self.id()

                        else:
                            raise NoViableAltException(self)
                        self.state = 7414 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,995,self._ctx)

                    self.state = 7418 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.MIRROR):
                        break


            elif la_ == 2:
                self.state = 7435 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7420
                    self.match(TSqlParser.MIRROR)
                    self.state = 7421
                    self.match(TSqlParser.TO)
                    self.state = 7431 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 7423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 7422
                            self.match(TSqlParser.COMMA)


                        self.state = 7425
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DISK or _la==TSqlParser.TAPE or _la==TSqlParser.URL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 7426
                        self.match(TSqlParser.EQUAL)
                        self.state = 7429
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.STRING]:
                            self.state = 7427
                            self.match(TSqlParser.STRING)
                            pass
                        elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                            self.state = 7428
                            self.id()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 7433 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==TSqlParser.DISK or _la==TSqlParser.TAPE or _la==TSqlParser.URL or _la==TSqlParser.COMMA):
                            break

                    self.state = 7437 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.MIRROR):
                        break



            self.state = 7601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1037,self._ctx)
            if la_ == 1:
                self.state = 7441
                self.match(TSqlParser.WITH)
                self.state = 7598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1036,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7596
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1035,self._ctx)
                        if la_ == 1:
                            self.state = 7443
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7442
                                self.match(TSqlParser.COMMA)


                            self.state = 7445
                            self.match(TSqlParser.DIFFERENTIAL)
                            pass

                        elif la_ == 2:
                            self.state = 7447
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7446
                                self.match(TSqlParser.COMMA)


                            self.state = 7449
                            self.match(TSqlParser.COPY_ONLY)
                            pass

                        elif la_ == 3:
                            self.state = 7451
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7450
                                self.match(TSqlParser.COMMA)


                            self.state = 7453
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.COMPRESSION or _la==TSqlParser.NO_COMPRESSION):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 4:
                            self.state = 7455
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7454
                                self.match(TSqlParser.COMMA)


                            self.state = 7457
                            self.match(TSqlParser.DESCRIPTION)
                            self.state = 7458
                            self.match(TSqlParser.EQUAL)
                            self.state = 7461
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.STRING]:
                                self.state = 7459
                                self.match(TSqlParser.STRING)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7460
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 5:
                            self.state = 7464
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7463
                                self.match(TSqlParser.COMMA)


                            self.state = 7466
                            self.match(TSqlParser.NAME)
                            self.state = 7467
                            self.match(TSqlParser.EQUAL)
                            self.state = 7468
                            localctx.backup_set_name = self.id()
                            pass

                        elif la_ == 6:
                            self.state = 7470
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7469
                                self.match(TSqlParser.COMMA)


                            self.state = 7472
                            self.match(TSqlParser.CREDENTIAL)
                            pass

                        elif la_ == 7:
                            self.state = 7474
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7473
                                self.match(TSqlParser.COMMA)


                            self.state = 7476
                            self.match(TSqlParser.FILE_SNAPSHOT)
                            pass

                        elif la_ == 8:
                            self.state = 7478
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7477
                                self.match(TSqlParser.COMMA)


                            self.state = 7492
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.EXPIREDATE]:
                                self.state = 7480
                                self.match(TSqlParser.EXPIREDATE)
                                self.state = 7481
                                self.match(TSqlParser.EQUAL)
                                self.state = 7484
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [TSqlParser.STRING]:
                                    self.state = 7482
                                    self.match(TSqlParser.STRING)
                                    pass
                                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                    self.state = 7483
                                    self.id()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass
                            elif token in [TSqlParser.RETAINDAYS]:
                                self.state = 7486
                                self.match(TSqlParser.RETAINDAYS)
                                self.state = 7487
                                self.match(TSqlParser.EQUAL)
                                self.state = 7490
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [TSqlParser.DECIMAL]:
                                    self.state = 7488
                                    self.match(TSqlParser.DECIMAL)
                                    pass
                                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                    self.state = 7489
                                    self.id()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 9:
                            self.state = 7495
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7494
                                self.match(TSqlParser.COMMA)


                            self.state = 7497
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.INIT or _la==TSqlParser.NOINIT):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 7499
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7498
                                self.match(TSqlParser.COMMA)


                            self.state = 7501
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.NOSKIP or _la==TSqlParser.SKIP_KEYWORD):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 11:
                            self.state = 7503
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7502
                                self.match(TSqlParser.COMMA)


                            self.state = 7505
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.NOFORMAT or _la==TSqlParser.FORMAT):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 12:
                            self.state = 7507
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7506
                                self.match(TSqlParser.COMMA)


                            self.state = 7509
                            self.match(TSqlParser.MEDIADESCRIPTION)
                            self.state = 7510
                            self.match(TSqlParser.EQUAL)
                            self.state = 7513
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.STRING]:
                                self.state = 7511
                                self.match(TSqlParser.STRING)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7512
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 13:
                            self.state = 7516
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7515
                                self.match(TSqlParser.COMMA)


                            self.state = 7518
                            self.match(TSqlParser.MEDIANAME)
                            self.state = 7519
                            self.match(TSqlParser.EQUAL)

                            self.state = 7520
                            localctx.medianame = self.match(TSqlParser.STRING)
                            pass

                        elif la_ == 14:
                            self.state = 7522
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7521
                                self.match(TSqlParser.COMMA)


                            self.state = 7524
                            self.match(TSqlParser.BLOCKSIZE)
                            self.state = 7525
                            self.match(TSqlParser.EQUAL)
                            self.state = 7528
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.DECIMAL]:
                                self.state = 7526
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7527
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 15:
                            self.state = 7531
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7530
                                self.match(TSqlParser.COMMA)


                            self.state = 7533
                            self.match(TSqlParser.BUFFERCOUNT)
                            self.state = 7534
                            self.match(TSqlParser.EQUAL)
                            self.state = 7537
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.DECIMAL]:
                                self.state = 7535
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7536
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 16:
                            self.state = 7540
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7539
                                self.match(TSqlParser.COMMA)


                            self.state = 7542
                            self.match(TSqlParser.MAXTRANSFER)
                            self.state = 7543
                            self.match(TSqlParser.EQUAL)
                            self.state = 7546
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.DECIMAL]:
                                self.state = 7544
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7545
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 17:
                            self.state = 7549
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7548
                                self.match(TSqlParser.COMMA)


                            self.state = 7551
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.NO_CHECKSUM or _la==TSqlParser.CHECKSUM):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 18:
                            self.state = 7553
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7552
                                self.match(TSqlParser.COMMA)


                            self.state = 7555
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.CONTINUE_AFTER_ERROR or _la==TSqlParser.STOP_ON_ERROR):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 19:
                            self.state = 7557
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7556
                                self.match(TSqlParser.COMMA)


                            self.state = 7559
                            self.match(TSqlParser.RESTART)
                            pass

                        elif la_ == 20:
                            self.state = 7561
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7560
                                self.match(TSqlParser.COMMA)


                            self.state = 7563
                            self.match(TSqlParser.STATS)
                            self.state = 7566
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.EQUAL:
                                self.state = 7564
                                self.match(TSqlParser.EQUAL)
                                self.state = 7565
                                localctx.stats_percent = self.match(TSqlParser.DECIMAL)


                            pass

                        elif la_ == 21:
                            self.state = 7569
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7568
                                self.match(TSqlParser.COMMA)


                            self.state = 7571
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.NOREWIND or _la==TSqlParser.REWIND):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 22:
                            self.state = 7573
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7572
                                self.match(TSqlParser.COMMA)


                            self.state = 7575
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.LOAD or _la==TSqlParser.NOUNLOAD):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 23:
                            self.state = 7577
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7576
                                self.match(TSqlParser.COMMA)


                            self.state = 7579
                            self.match(TSqlParser.ENCRYPTION)
                            self.state = 7580
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 7581
                            self.match(TSqlParser.ALGORITHM)
                            self.state = 7582
                            self.match(TSqlParser.EQUAL)
                            self.state = 7583
                            _la = self._input.LA(1)
                            if not(((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (TSqlParser.AES_128 - 389)) | (1 << (TSqlParser.AES_192 - 389)) | (1 << (TSqlParser.AES_256 - 389)))) != 0) or _la==TSqlParser.TRIPLE_DES_3KEY):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 7584
                            self.match(TSqlParser.COMMA)
                            self.state = 7585
                            self.match(TSqlParser.SERVER)
                            self.state = 7586
                            self.match(TSqlParser.CERTIFICATE)
                            self.state = 7587
                            self.match(TSqlParser.EQUAL)
                            self.state = 7594
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,1034,self._ctx)
                            if la_ == 1:
                                self.state = 7588
                                localctx.encryptor_name = self.id()
                                pass

                            elif la_ == 2:
                                self.state = 7589
                                self.match(TSqlParser.SERVER)
                                self.state = 7590
                                self.match(TSqlParser.ASYMMETRIC)
                                self.state = 7591
                                self.match(TSqlParser.KEY)
                                self.state = 7592
                                self.match(TSqlParser.EQUAL)
                                self.state = 7593
                                localctx.encryptor_name = self.id()
                                pass


                            pass

                 
                    self.state = 7600
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1036,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_logContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # IdContext
            self.logical_device_name = None # IdContext
            self.backup_set_name = None # IdContext
            self.medianame = None # Token
            self.stats_percent = None # Token
            self.undo_file_name = None # Token
            self.encryptor_name = None # IdContext

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def LOG(self):
            return self.getToken(TSqlParser.LOG, 0)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TO)
            else:
                return self.getToken(TSqlParser.TO, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DISK(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DISK)
            else:
                return self.getToken(TSqlParser.DISK, i)

        def TAPE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TAPE)
            else:
                return self.getToken(TSqlParser.TAPE, i)

        def URL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.URL)
            else:
                return self.getToken(TSqlParser.URL, i)

        def MIRROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MIRROR)
            else:
                return self.getToken(TSqlParser.MIRROR, i)

        def DIFFERENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DIFFERENTIAL)
            else:
                return self.getToken(TSqlParser.DIFFERENTIAL, i)

        def COPY_ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COPY_ONLY)
            else:
                return self.getToken(TSqlParser.COPY_ONLY, i)

        def DESCRIPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESCRIPTION)
            else:
                return self.getToken(TSqlParser.DESCRIPTION, i)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NAME)
            else:
                return self.getToken(TSqlParser.NAME, i)

        def CREDENTIAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CREDENTIAL)
            else:
                return self.getToken(TSqlParser.CREDENTIAL, i)

        def FILE_SNAPSHOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE_SNAPSHOT)
            else:
                return self.getToken(TSqlParser.FILE_SNAPSHOT, i)

        def MEDIADESCRIPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIADESCRIPTION)
            else:
                return self.getToken(TSqlParser.MEDIADESCRIPTION, i)

        def MEDIANAME(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MEDIANAME)
            else:
                return self.getToken(TSqlParser.MEDIANAME, i)

        def BLOCKSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BLOCKSIZE)
            else:
                return self.getToken(TSqlParser.BLOCKSIZE, i)

        def BUFFERCOUNT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BUFFERCOUNT)
            else:
                return self.getToken(TSqlParser.BUFFERCOUNT, i)

        def MAXTRANSFER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.MAXTRANSFER)
            else:
                return self.getToken(TSqlParser.MAXTRANSFER, i)

        def RESTART(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RESTART)
            else:
                return self.getToken(TSqlParser.RESTART, i)

        def STATS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STATS)
            else:
                return self.getToken(TSqlParser.STATS, i)

        def NO_TRUNCATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_TRUNCATE)
            else:
                return self.getToken(TSqlParser.NO_TRUNCATE, i)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALGORITHM)
            else:
                return self.getToken(TSqlParser.ALGORITHM, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SERVER(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVER)
            else:
                return self.getToken(TSqlParser.SERVER, i)

        def CERTIFICATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CERTIFICATE)
            else:
                return self.getToken(TSqlParser.CERTIFICATE, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMPRESSION)
            else:
                return self.getToken(TSqlParser.COMPRESSION, i)

        def NO_COMPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_COMPRESSION)
            else:
                return self.getToken(TSqlParser.NO_COMPRESSION, i)

        def NOINIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOINIT)
            else:
                return self.getToken(TSqlParser.NOINIT, i)

        def INIT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.INIT)
            else:
                return self.getToken(TSqlParser.INIT, i)

        def NOSKIP(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOSKIP)
            else:
                return self.getToken(TSqlParser.NOSKIP, i)

        def SKIP_KEYWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SKIP_KEYWORD)
            else:
                return self.getToken(TSqlParser.SKIP_KEYWORD, i)

        def NOFORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOFORMAT)
            else:
                return self.getToken(TSqlParser.NOFORMAT, i)

        def FORMAT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FORMAT)
            else:
                return self.getToken(TSqlParser.FORMAT, i)

        def NO_CHECKSUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NO_CHECKSUM)
            else:
                return self.getToken(TSqlParser.NO_CHECKSUM, i)

        def CHECKSUM(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CHECKSUM)
            else:
                return self.getToken(TSqlParser.CHECKSUM, i)

        def STOP_ON_ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STOP_ON_ERROR)
            else:
                return self.getToken(TSqlParser.STOP_ON_ERROR, i)

        def CONTINUE_AFTER_ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTINUE_AFTER_ERROR)
            else:
                return self.getToken(TSqlParser.CONTINUE_AFTER_ERROR, i)

        def REWIND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.REWIND)
            else:
                return self.getToken(TSqlParser.REWIND, i)

        def NOREWIND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOREWIND)
            else:
                return self.getToken(TSqlParser.NOREWIND, i)

        def LOAD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOAD)
            else:
                return self.getToken(TSqlParser.LOAD, i)

        def NOUNLOAD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NOUNLOAD)
            else:
                return self.getToken(TSqlParser.NOUNLOAD, i)

        def AES_128(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_128)
            else:
                return self.getToken(TSqlParser.AES_128, i)

        def AES_192(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_192)
            else:
                return self.getToken(TSqlParser.AES_192, i)

        def AES_256(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AES_256)
            else:
                return self.getToken(TSqlParser.AES_256, i)

        def TRIPLE_DES_3KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.TRIPLE_DES_3KEY)
            else:
                return self.getToken(TSqlParser.TRIPLE_DES_3KEY, i)

        def EXPIREDATE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EXPIREDATE)
            else:
                return self.getToken(TSqlParser.EXPIREDATE, i)

        def RETAINDAYS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RETAINDAYS)
            else:
                return self.getToken(TSqlParser.RETAINDAYS, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def NORECOVERY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.NORECOVERY)
            else:
                return self.getToken(TSqlParser.NORECOVERY, i)

        def STANDBY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STANDBY)
            else:
                return self.getToken(TSqlParser.STANDBY, i)

        def ASYMMETRIC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASYMMETRIC)
            else:
                return self.getToken(TSqlParser.ASYMMETRIC, i)

        def KEY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.KEY)
            else:
                return self.getToken(TSqlParser.KEY, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_log" ):
                listener.enterBackup_log(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_log" ):
                listener.exitBackup_log(self)




    def backup_log(self):

        localctx = TSqlParser.Backup_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_backup_log)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7603
            self.match(TSqlParser.BACKUP)
            self.state = 7604
            self.match(TSqlParser.LOG)

            self.state = 7605
            localctx.database_name = self.id()
            self.state = 7629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1043,self._ctx)
            if la_ == 1:
                self.state = 7606
                self.match(TSqlParser.TO)
                self.state = 7611 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 7608
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 7607
                            self.match(TSqlParser.COMMA)


                        self.state = 7610
                        localctx.logical_device_name = self.id()

                    else:
                        raise NoViableAltException(self)
                    self.state = 7613 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1039,self._ctx)

                pass

            elif la_ == 2:
                self.state = 7615
                self.match(TSqlParser.TO)
                self.state = 7625 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 7616
                        self.match(TSqlParser.COMMA)


                    self.state = 7619
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.DISK or _la==TSqlParser.TAPE or _la==TSqlParser.URL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 7620
                    self.match(TSqlParser.EQUAL)
                    self.state = 7623
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.STRING]:
                        self.state = 7621
                        self.match(TSqlParser.STRING)
                        pass
                    elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                        self.state = 7622
                        self.id()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 7627 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.DISK or _la==TSqlParser.TAPE or _la==TSqlParser.URL or _la==TSqlParser.COMMA):
                        break

                pass


            self.state = 7664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
            if la_ == 1:
                self.state = 7641 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7631
                    self.match(TSqlParser.MIRROR)
                    self.state = 7632
                    self.match(TSqlParser.TO)
                    self.state = 7637 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 7634
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7633
                                self.match(TSqlParser.COMMA)


                            self.state = 7636
                            localctx.logical_device_name = self.id()

                        else:
                            raise NoViableAltException(self)
                        self.state = 7639 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1045,self._ctx)

                    self.state = 7643 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.MIRROR):
                        break


            elif la_ == 2:
                self.state = 7660 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7645
                    self.match(TSqlParser.MIRROR)
                    self.state = 7646
                    self.match(TSqlParser.TO)
                    self.state = 7656 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 7648
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 7647
                            self.match(TSqlParser.COMMA)


                        self.state = 7650
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.DISK or _la==TSqlParser.TAPE or _la==TSqlParser.URL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 7651
                        self.match(TSqlParser.EQUAL)
                        self.state = 7654
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.STRING]:
                            self.state = 7652
                            self.match(TSqlParser.STRING)
                            pass
                        elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                            self.state = 7653
                            self.id()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 7658 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==TSqlParser.DISK or _la==TSqlParser.TAPE or _la==TSqlParser.URL or _la==TSqlParser.COMMA):
                            break

                    self.state = 7662 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.MIRROR):
                        break



            self.state = 7839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1090,self._ctx)
            if la_ == 1:
                self.state = 7666
                self.match(TSqlParser.WITH)
                self.state = 7836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1089,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 7834
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1088,self._ctx)
                        if la_ == 1:
                            self.state = 7668
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7667
                                self.match(TSqlParser.COMMA)


                            self.state = 7670
                            self.match(TSqlParser.DIFFERENTIAL)
                            pass

                        elif la_ == 2:
                            self.state = 7672
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7671
                                self.match(TSqlParser.COMMA)


                            self.state = 7674
                            self.match(TSqlParser.COPY_ONLY)
                            pass

                        elif la_ == 3:
                            self.state = 7676
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7675
                                self.match(TSqlParser.COMMA)


                            self.state = 7678
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.COMPRESSION or _la==TSqlParser.NO_COMPRESSION):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 4:
                            self.state = 7680
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7679
                                self.match(TSqlParser.COMMA)


                            self.state = 7682
                            self.match(TSqlParser.DESCRIPTION)
                            self.state = 7683
                            self.match(TSqlParser.EQUAL)
                            self.state = 7686
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.STRING]:
                                self.state = 7684
                                self.match(TSqlParser.STRING)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7685
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 5:
                            self.state = 7689
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7688
                                self.match(TSqlParser.COMMA)


                            self.state = 7691
                            self.match(TSqlParser.NAME)
                            self.state = 7692
                            self.match(TSqlParser.EQUAL)
                            self.state = 7693
                            localctx.backup_set_name = self.id()
                            pass

                        elif la_ == 6:
                            self.state = 7695
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7694
                                self.match(TSqlParser.COMMA)


                            self.state = 7697
                            self.match(TSqlParser.CREDENTIAL)
                            pass

                        elif la_ == 7:
                            self.state = 7699
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7698
                                self.match(TSqlParser.COMMA)


                            self.state = 7701
                            self.match(TSqlParser.FILE_SNAPSHOT)
                            pass

                        elif la_ == 8:
                            self.state = 7703
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7702
                                self.match(TSqlParser.COMMA)


                            self.state = 7717
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.EXPIREDATE]:
                                self.state = 7705
                                self.match(TSqlParser.EXPIREDATE)
                                self.state = 7706
                                self.match(TSqlParser.EQUAL)
                                self.state = 7709
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [TSqlParser.STRING]:
                                    self.state = 7707
                                    self.match(TSqlParser.STRING)
                                    pass
                                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                    self.state = 7708
                                    self.id()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass
                            elif token in [TSqlParser.RETAINDAYS]:
                                self.state = 7711
                                self.match(TSqlParser.RETAINDAYS)
                                self.state = 7712
                                self.match(TSqlParser.EQUAL)
                                self.state = 7715
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [TSqlParser.DECIMAL]:
                                    self.state = 7713
                                    self.match(TSqlParser.DECIMAL)
                                    pass
                                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                    self.state = 7714
                                    self.id()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 9:
                            self.state = 7720
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7719
                                self.match(TSqlParser.COMMA)


                            self.state = 7722
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.INIT or _la==TSqlParser.NOINIT):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 7724
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7723
                                self.match(TSqlParser.COMMA)


                            self.state = 7726
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.NOSKIP or _la==TSqlParser.SKIP_KEYWORD):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 11:
                            self.state = 7728
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7727
                                self.match(TSqlParser.COMMA)


                            self.state = 7730
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.NOFORMAT or _la==TSqlParser.FORMAT):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 12:
                            self.state = 7732
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7731
                                self.match(TSqlParser.COMMA)


                            self.state = 7734
                            self.match(TSqlParser.MEDIADESCRIPTION)
                            self.state = 7735
                            self.match(TSqlParser.EQUAL)
                            self.state = 7738
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.STRING]:
                                self.state = 7736
                                self.match(TSqlParser.STRING)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7737
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 13:
                            self.state = 7741
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7740
                                self.match(TSqlParser.COMMA)


                            self.state = 7743
                            self.match(TSqlParser.MEDIANAME)
                            self.state = 7744
                            self.match(TSqlParser.EQUAL)

                            self.state = 7745
                            localctx.medianame = self.match(TSqlParser.STRING)
                            pass

                        elif la_ == 14:
                            self.state = 7747
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7746
                                self.match(TSqlParser.COMMA)


                            self.state = 7749
                            self.match(TSqlParser.BLOCKSIZE)
                            self.state = 7750
                            self.match(TSqlParser.EQUAL)
                            self.state = 7753
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.DECIMAL]:
                                self.state = 7751
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7752
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 15:
                            self.state = 7756
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7755
                                self.match(TSqlParser.COMMA)


                            self.state = 7758
                            self.match(TSqlParser.BUFFERCOUNT)
                            self.state = 7759
                            self.match(TSqlParser.EQUAL)
                            self.state = 7762
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.DECIMAL]:
                                self.state = 7760
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7761
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 16:
                            self.state = 7765
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7764
                                self.match(TSqlParser.COMMA)


                            self.state = 7767
                            self.match(TSqlParser.MAXTRANSFER)
                            self.state = 7768
                            self.match(TSqlParser.EQUAL)
                            self.state = 7771
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.DECIMAL]:
                                self.state = 7769
                                self.match(TSqlParser.DECIMAL)
                                pass
                            elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                                self.state = 7770
                                self.id()
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 17:
                            self.state = 7774
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7773
                                self.match(TSqlParser.COMMA)


                            self.state = 7776
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.NO_CHECKSUM or _la==TSqlParser.CHECKSUM):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 18:
                            self.state = 7778
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7777
                                self.match(TSqlParser.COMMA)


                            self.state = 7780
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.CONTINUE_AFTER_ERROR or _la==TSqlParser.STOP_ON_ERROR):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 19:
                            self.state = 7782
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7781
                                self.match(TSqlParser.COMMA)


                            self.state = 7784
                            self.match(TSqlParser.RESTART)
                            pass

                        elif la_ == 20:
                            self.state = 7786
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7785
                                self.match(TSqlParser.COMMA)


                            self.state = 7788
                            self.match(TSqlParser.STATS)
                            self.state = 7791
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.EQUAL:
                                self.state = 7789
                                self.match(TSqlParser.EQUAL)
                                self.state = 7790
                                localctx.stats_percent = self.match(TSqlParser.DECIMAL)


                            pass

                        elif la_ == 21:
                            self.state = 7794
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7793
                                self.match(TSqlParser.COMMA)


                            self.state = 7796
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.NOREWIND or _la==TSqlParser.REWIND):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 22:
                            self.state = 7798
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7797
                                self.match(TSqlParser.COMMA)


                            self.state = 7800
                            _la = self._input.LA(1)
                            if not(_la==TSqlParser.LOAD or _la==TSqlParser.NOUNLOAD):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 23:
                            self.state = 7802
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7801
                                self.match(TSqlParser.COMMA)


                            self.state = 7808
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [TSqlParser.NORECOVERY]:
                                self.state = 7804
                                self.match(TSqlParser.NORECOVERY)
                                pass
                            elif token in [TSqlParser.STANDBY]:
                                self.state = 7805
                                self.match(TSqlParser.STANDBY)
                                self.state = 7806
                                self.match(TSqlParser.EQUAL)
                                self.state = 7807
                                localctx.undo_file_name = self.match(TSqlParser.STRING)
                                pass
                            else:
                                raise NoViableAltException(self)

                            pass

                        elif la_ == 24:
                            self.state = 7811
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7810
                                self.match(TSqlParser.COMMA)


                            self.state = 7813
                            self.match(TSqlParser.NO_TRUNCATE)
                            pass

                        elif la_ == 25:
                            self.state = 7815
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==TSqlParser.COMMA:
                                self.state = 7814
                                self.match(TSqlParser.COMMA)


                            self.state = 7817
                            self.match(TSqlParser.ENCRYPTION)
                            self.state = 7818
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 7819
                            self.match(TSqlParser.ALGORITHM)
                            self.state = 7820
                            self.match(TSqlParser.EQUAL)
                            self.state = 7821
                            _la = self._input.LA(1)
                            if not(((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (TSqlParser.AES_128 - 389)) | (1 << (TSqlParser.AES_192 - 389)) | (1 << (TSqlParser.AES_256 - 389)))) != 0) or _la==TSqlParser.TRIPLE_DES_3KEY):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 7822
                            self.match(TSqlParser.COMMA)
                            self.state = 7823
                            self.match(TSqlParser.SERVER)
                            self.state = 7824
                            self.match(TSqlParser.CERTIFICATE)
                            self.state = 7825
                            self.match(TSqlParser.EQUAL)
                            self.state = 7832
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,1087,self._ctx)
                            if la_ == 1:
                                self.state = 7826
                                localctx.encryptor_name = self.id()
                                pass

                            elif la_ == 2:
                                self.state = 7827
                                self.match(TSqlParser.SERVER)
                                self.state = 7828
                                self.match(TSqlParser.ASYMMETRIC)
                                self.state = 7829
                                self.match(TSqlParser.KEY)
                                self.state = 7830
                                self.match(TSqlParser.EQUAL)
                                self.state = 7831
                                localctx.encryptor_name = self.id()
                                pass


                            pass

                 
                    self.state = 7838
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1089,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_certificateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certname = None # IdContext
            self.cert_file = None # Token
            self.private_key_file = None # Token
            self.encryption_password = None # Token
            self.decryption_pasword = None # Token

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FILE)
            else:
                return self.getToken(TSqlParser.FILE, i)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PASSWORD)
            else:
                return self.getToken(TSqlParser.PASSWORD, i)

        def DECRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECRYPTION)
            else:
                return self.getToken(TSqlParser.DECRYPTION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_certificate" ):
                listener.enterBackup_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_certificate" ):
                listener.exitBackup_certificate(self)




    def backup_certificate(self):

        localctx = TSqlParser.Backup_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_backup_certificate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7841
            self.match(TSqlParser.BACKUP)
            self.state = 7842
            self.match(TSqlParser.CERTIFICATE)
            self.state = 7843
            localctx.certname = self.id()
            self.state = 7844
            self.match(TSqlParser.TO)
            self.state = 7845
            self.match(TSqlParser.FILE)
            self.state = 7846
            self.match(TSqlParser.EQUAL)
            self.state = 7847
            localctx.cert_file = self.match(TSqlParser.STRING)
            self.state = 7879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1096,self._ctx)
            if la_ == 1:
                self.state = 7848
                self.match(TSqlParser.WITH)
                self.state = 7849
                self.match(TSqlParser.PRIVATE)
                self.state = 7850
                self.match(TSqlParser.KEY)
                self.state = 7851
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7874 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7874
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1094,self._ctx)
                    if la_ == 1:
                        self.state = 7853
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 7852
                            self.match(TSqlParser.COMMA)


                        self.state = 7855
                        self.match(TSqlParser.FILE)
                        self.state = 7856
                        self.match(TSqlParser.EQUAL)
                        self.state = 7857
                        localctx.private_key_file = self.match(TSqlParser.STRING)
                        pass

                    elif la_ == 2:
                        self.state = 7859
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 7858
                            self.match(TSqlParser.COMMA)


                        self.state = 7861
                        self.match(TSqlParser.ENCRYPTION)
                        self.state = 7862
                        self.match(TSqlParser.BY)
                        self.state = 7863
                        self.match(TSqlParser.PASSWORD)
                        self.state = 7864
                        self.match(TSqlParser.EQUAL)
                        self.state = 7865
                        localctx.encryption_password = self.match(TSqlParser.STRING)
                        pass

                    elif la_ == 3:
                        self.state = 7867
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 7866
                            self.match(TSqlParser.COMMA)


                        self.state = 7869
                        self.match(TSqlParser.DECRYPTION)
                        self.state = 7870
                        self.match(TSqlParser.BY)
                        self.state = 7871
                        self.match(TSqlParser.PASSWORD)
                        self.state = 7872
                        self.match(TSqlParser.EQUAL)
                        self.state = 7873
                        localctx.decryption_pasword = self.match(TSqlParser.STRING)
                        pass


                    self.state = 7876 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.FILE or _la==TSqlParser.DECRYPTION or _la==TSqlParser.ENCRYPTION or _la==TSqlParser.COMMA):
                        break

                self.state = 7878
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_master_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.master_key_backup_file = None # Token
            self.encryption_password = None # Token

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_master_key" ):
                listener.enterBackup_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_master_key" ):
                listener.exitBackup_master_key(self)




    def backup_master_key(self):

        localctx = TSqlParser.Backup_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_backup_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7881
            self.match(TSqlParser.BACKUP)
            self.state = 7882
            self.match(TSqlParser.MASTER)
            self.state = 7883
            self.match(TSqlParser.KEY)
            self.state = 7884
            self.match(TSqlParser.TO)
            self.state = 7885
            self.match(TSqlParser.FILE)
            self.state = 7886
            self.match(TSqlParser.EQUAL)
            self.state = 7887
            localctx.master_key_backup_file = self.match(TSqlParser.STRING)
            self.state = 7888
            self.match(TSqlParser.ENCRYPTION)
            self.state = 7889
            self.match(TSqlParser.BY)
            self.state = 7890
            self.match(TSqlParser.PASSWORD)
            self.state = 7891
            self.match(TSqlParser.EQUAL)
            self.state = 7892
            localctx.encryption_password = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Backup_service_master_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.service_master_key_backup_file = None # Token
            self.encryption_password = None # Token

        def BACKUP(self):
            return self.getToken(TSqlParser.BACKUP, 0)

        def SERVICE(self):
            return self.getToken(TSqlParser.SERVICE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_backup_service_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackup_service_master_key" ):
                listener.enterBackup_service_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackup_service_master_key" ):
                listener.exitBackup_service_master_key(self)




    def backup_service_master_key(self):

        localctx = TSqlParser.Backup_service_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_backup_service_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7894
            self.match(TSqlParser.BACKUP)
            self.state = 7895
            self.match(TSqlParser.SERVICE)
            self.state = 7896
            self.match(TSqlParser.MASTER)
            self.state = 7897
            self.match(TSqlParser.KEY)
            self.state = 7898
            self.match(TSqlParser.TO)
            self.state = 7899
            self.match(TSqlParser.FILE)
            self.state = 7900
            self.match(TSqlParser.EQUAL)
            self.state = 7901
            localctx.service_master_key_backup_file = self.match(TSqlParser.STRING)
            self.state = 7902
            self.match(TSqlParser.ENCRYPTION)
            self.state = 7903
            self.match(TSqlParser.BY)
            self.state = 7904
            self.match(TSqlParser.PASSWORD)
            self.state = 7905
            self.match(TSqlParser.EQUAL)
            self.state = 7906
            localctx.encryption_password = self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def execute_body(self):
            return self.getTypedRuleContext(TSqlParser.Execute_bodyContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_execute_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement" ):
                listener.enterExecute_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement" ):
                listener.exitExecute_statement(self)




    def execute_statement(self):

        localctx = TSqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_execute_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7908
            self.match(TSqlParser.EXECUTE)
            self.state = 7909
            self.execute_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def func_proc_name(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_statement_argContext,i)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_var_stringContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PLUS)
            else:
                return self.getToken(TSqlParser.PLUS, i)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(TSqlParser.USER, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_body" ):
                listener.enterExecute_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_body" ):
                listener.exitExecute_body(self)




    def execute_body(self):

        localctx = TSqlParser.Execute_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_execute_body)
        self._la = 0 # Token type
        try:
            self.state = 7953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1097,self._ctx)
                if la_ == 1:
                    self.state = 7911
                    localctx.return_status = self.match(TSqlParser.LOCAL_ID)
                    self.state = 7912
                    self.match(TSqlParser.EQUAL)


                self.state = 7917
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1098,self._ctx)
                if la_ == 1:
                    self.state = 7915
                    self.func_proc_name()
                    pass

                elif la_ == 2:
                    self.state = 7916
                    self.expression(0)
                    pass


                self.state = 7927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1100,self._ctx)
                if la_ == 1:
                    self.state = 7919
                    self.execute_statement_arg()
                    self.state = 7924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.COMMA:
                        self.state = 7920
                        self.match(TSqlParser.COMMA)
                        self.state = 7921
                        self.execute_statement_arg()
                        self.state = 7926
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1101,self._ctx)
                if la_ == 1:
                    self.state = 7929
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7932
                self.match(TSqlParser.LR_BRACKET)
                self.state = 7933
                self.execute_var_string()
                self.state = 7938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.PLUS:
                    self.state = 7934
                    self.match(TSqlParser.PLUS)
                    self.state = 7935
                    self.execute_var_string()
                    self.state = 7940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7941
                self.match(TSqlParser.RR_BRACKET)
                self.state = 7948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1104,self._ctx)
                if la_ == 1:
                    self.state = 7943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.AS:
                        self.state = 7942
                        self.match(TSqlParser.AS)


                    self.state = 7945
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.USER or _la==TSqlParser.LOGIN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 7946
                    self.match(TSqlParser.EQUAL)
                    self.state = 7947
                    self.match(TSqlParser.STRING)


                self.state = 7951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1105,self._ctx)
                if la_ == 1:
                    self.state = 7950
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(TSqlParser.Constant_LOCAL_IDContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_statement_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg" ):
                listener.enterExecute_statement_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg" ):
                listener.exitExecute_statement_arg(self)




    def execute_statement_arg(self):

        localctx = TSqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1107,self._ctx)
            if la_ == 1:
                self.state = 7955
                localctx.parameter = self.match(TSqlParser.LOCAL_ID)
                self.state = 7956
                self.match(TSqlParser.EQUAL)


            self.state = 7968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.ID, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.state = 7961
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                    self.state = 7959
                    self.constant_LOCAL_ID()
                    pass
                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 7960
                    self.id()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1109,self._ctx)
                if la_ == 1:
                    self.state = 7963
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OUT or _la==TSqlParser.OUTPUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [TSqlParser.DEFAULT]:
                self.state = 7966
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [TSqlParser.NULL]:
                self.state = 7967
                self.match(TSqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_var_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_var_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_var_string" ):
                listener.enterExecute_var_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_var_string" ):
                listener.exitExecute_var_string(self)




    def execute_var_string(self):

        localctx = TSqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7970
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self._id = None # IdContext
            self.to_principal = list() # of IdContexts
            self.as_principal = None # IdContext

        def execute_clause(self):
            return self.getTypedRuleContext(TSqlParser.Execute_clauseContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.GRANT)
            else:
                return self.getToken(TSqlParser.GRANT, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(TSqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(TSqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(TSqlParser.PRIVILEGES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def REVERT(self):
            return self.getToken(TSqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(TSqlParser.COOKIE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def open_key(self):
            return self.getTypedRuleContext(TSqlParser.Open_keyContext,0)


        def close_key(self):
            return self.getTypedRuleContext(TSqlParser.Close_keyContext,0)


        def create_key(self):
            return self.getTypedRuleContext(TSqlParser.Create_keyContext,0)


        def create_certificate(self):
            return self.getTypedRuleContext(TSqlParser.Create_certificateContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_security_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_statement" ):
                listener.enterSecurity_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_statement" ):
                listener.exitSecurity_statement(self)




    def security_statement(self):

        localctx = TSqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 8031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7972
                self.execute_clause()
                self.state = 7974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1111,self._ctx)
                if la_ == 1:
                    self.state = 7973
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7976
                self.match(TSqlParser.GRANT)
                self.state = 7988
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.ALL]:
                    self.state = 7977
                    self.match(TSqlParser.ALL)
                    self.state = 7979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.PRIVILEGES:
                        self.state = 7978
                        self.match(TSqlParser.PRIVILEGES)


                    pass
                elif token in [TSqlParser.ALTER, TSqlParser.CREATE, TSqlParser.EXECUTE, TSqlParser.INSERT, TSqlParser.REFERENCES, TSqlParser.SELECT, TSqlParser.VIEW, TSqlParser.CONTROL, TSqlParser.IMPERSONATE, TSqlParser.SHOWPLAN, TSqlParser.TAKE]:
                    self.state = 7981
                    self.grant_permission()
                    self.state = 7986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.LR_BRACKET:
                        self.state = 7982
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 7983
                        self.column_name_list()
                        self.state = 7984
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ON:
                    self.state = 7990
                    self.match(TSqlParser.ON)
                    self.state = 7991
                    localctx.on_id = self.table_name()


                self.state = 7994
                self.match(TSqlParser.TO)

                self.state = 7995
                localctx._id = self.id()
                localctx.to_principal.append(localctx._id)
                self.state = 8000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 7996
                    self.match(TSqlParser.COMMA)
                    self.state = 7997
                    localctx._id = self.id()
                    localctx.to_principal.append(localctx._id)
                    self.state = 8002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 8006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1117,self._ctx)
                if la_ == 1:
                    self.state = 8003
                    self.match(TSqlParser.WITH)
                    self.state = 8004
                    self.match(TSqlParser.GRANT)
                    self.state = 8005
                    self.match(TSqlParser.OPTION)


                self.state = 8010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AS:
                    self.state = 8008
                    self.match(TSqlParser.AS)
                    self.state = 8009
                    localctx.as_principal = self.id()


                self.state = 8013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1119,self._ctx)
                if la_ == 1:
                    self.state = 8012
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8015
                self.match(TSqlParser.REVERT)
                self.state = 8022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1120,self._ctx)
                if la_ == 1:
                    self.state = 8016
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 8017
                    self.match(TSqlParser.WITH)
                    self.state = 8018
                    self.match(TSqlParser.COOKIE)
                    self.state = 8019
                    self.match(TSqlParser.EQUAL)
                    self.state = 8020
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 8021
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 8025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1121,self._ctx)
                if la_ == 1:
                    self.state = 8024
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8027
                self.open_key()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8028
                self.close_key()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8029
                self.create_key()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8030
                self.create_certificate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_certificateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # IdContext
            self.user_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def existing_keys(self):
            return self.getTypedRuleContext(TSqlParser.Existing_keysContext,0)


        def generate_new_keys(self):
            return self.getTypedRuleContext(TSqlParser.Generate_new_keysContext,0)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def ACTIVE(self):
            return self.getToken(TSqlParser.ACTIVE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_certificate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_certificate" ):
                listener.enterCreate_certificate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_certificate" ):
                listener.exitCreate_certificate(self)




    def create_certificate(self):

        localctx = TSqlParser.Create_certificateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_create_certificate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8033
            self.match(TSqlParser.CREATE)
            self.state = 8034
            self.match(TSqlParser.CERTIFICATE)
            self.state = 8035
            localctx.certificate_name = self.id()
            self.state = 8038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AUTHORIZATION:
                self.state = 8036
                self.match(TSqlParser.AUTHORIZATION)
                self.state = 8037
                localctx.user_name = self.id()


            self.state = 8043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FROM]:
                self.state = 8040
                self.match(TSqlParser.FROM)
                self.state = 8041
                self.existing_keys()
                pass
            elif token in [TSqlParser.WITH, TSqlParser.ENCRYPTION]:
                self.state = 8042
                self.generate_new_keys()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8051
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1125,self._ctx)
            if la_ == 1:
                self.state = 8045
                self.match(TSqlParser.ACTIVE)
                self.state = 8046
                self.match(TSqlParser.FOR)
                self.state = 8047
                self.match(TSqlParser.BEGIN)
                self.state = 8048
                self.match(TSqlParser.DIALOG)
                self.state = 8049
                self.match(TSqlParser.EQUAL)
                self.state = 8050
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Existing_keysContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assembly_name = None # IdContext
            self.path_to_file = None # Token

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EXECUTABLE(self):
            return self.getToken(TSqlParser.EXECUTABLE, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def private_key_options(self):
            return self.getTypedRuleContext(TSqlParser.Private_key_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_existing_keys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExisting_keys" ):
                listener.enterExisting_keys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExisting_keys" ):
                listener.exitExisting_keys(self)




    def existing_keys(self):

        localctx = TSqlParser.Existing_keysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_existing_keys)
        self._la = 0 # Token type
        try:
            self.state = 8070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.ASSEMBLY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8053
                self.match(TSqlParser.ASSEMBLY)
                self.state = 8054
                localctx.assembly_name = self.id()
                pass
            elif token in [TSqlParser.FILE, TSqlParser.EXECUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.EXECUTABLE:
                    self.state = 8055
                    self.match(TSqlParser.EXECUTABLE)


                self.state = 8058
                self.match(TSqlParser.FILE)
                self.state = 8059
                self.match(TSqlParser.EQUAL)
                self.state = 8060
                localctx.path_to_file = self.match(TSqlParser.STRING)
                self.state = 8068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1127,self._ctx)
                if la_ == 1:
                    self.state = 8061
                    self.match(TSqlParser.WITH)
                    self.state = 8062
                    self.match(TSqlParser.PRIVATE)
                    self.state = 8063
                    self.match(TSqlParser.KEY)
                    self.state = 8064
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 8065
                    self.private_key_options()
                    self.state = 8066
                    self.match(TSqlParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Private_key_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path = None # Token
            self.password = None # Token

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def FILE(self):
            return self.getToken(TSqlParser.FILE, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_private_key_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate_key_options" ):
                listener.enterPrivate_key_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate_key_options" ):
                listener.exitPrivate_key_options(self)




    def private_key_options(self):

        localctx = TSqlParser.Private_key_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_private_key_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8072
            _la = self._input.LA(1)
            if not(_la==TSqlParser.FILE or _la==TSqlParser.BINARY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8073
            self.match(TSqlParser.EQUAL)
            self.state = 8074
            localctx.path = self.match(TSqlParser.STRING)
            self.state = 8081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 8075
                self.match(TSqlParser.COMMA)
                self.state = 8076
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DECRYPTION or _la==TSqlParser.ENCRYPTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8077
                self.match(TSqlParser.BY)
                self.state = 8078
                self.match(TSqlParser.PASSWORD)
                self.state = 8079
                self.match(TSqlParser.EQUAL)
                self.state = 8080
                localctx.password = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generate_new_keysContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.certificate_subject_name = None # Token

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SUBJECT(self):
            return self.getToken(TSqlParser.SUBJECT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def date_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Date_optionsContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Date_optionsContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_generate_new_keys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerate_new_keys" ):
                listener.enterGenerate_new_keys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerate_new_keys" ):
                listener.exitGenerate_new_keys(self)




    def generate_new_keys(self):

        localctx = TSqlParser.Generate_new_keysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_generate_new_keys)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ENCRYPTION:
                self.state = 8083
                self.match(TSqlParser.ENCRYPTION)
                self.state = 8084
                self.match(TSqlParser.BY)
                self.state = 8085
                self.match(TSqlParser.PASSWORD)
                self.state = 8086
                self.match(TSqlParser.EQUAL)
                self.state = 8087
                localctx.password = self.match(TSqlParser.STRING)


            self.state = 8090
            self.match(TSqlParser.WITH)
            self.state = 8091
            self.match(TSqlParser.SUBJECT)
            self.state = 8092
            self.match(TSqlParser.EQUAL)
            self.state = 8093
            localctx.certificate_subject_name = self.match(TSqlParser.STRING)
            self.state = 8098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 8094
                self.match(TSqlParser.COMMA)
                self.state = 8095
                self.date_options()
                self.state = 8100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def START_DATE(self):
            return self.getToken(TSqlParser.START_DATE, 0)

        def EXPIRY_DATE(self):
            return self.getToken(TSqlParser.EXPIRY_DATE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_date_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_options" ):
                listener.enterDate_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_options" ):
                listener.exitDate_options(self)




    def date_options(self):

        localctx = TSqlParser.Date_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_date_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8101
            _la = self._input.LA(1)
            if not(_la==TSqlParser.EXPIRY_DATE or _la==TSqlParser.START_DATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8102
            self.match(TSqlParser.EQUAL)
            self.state = 8103
            self.match(TSqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdContext
            self.password = None # Token

        def OPEN(self):
            return self.getToken(TSqlParser.OPEN, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def decryption_mechanism(self):
            return self.getTypedRuleContext(TSqlParser.Decryption_mechanismContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_open_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_key" ):
                listener.enterOpen_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_key" ):
                listener.exitOpen_key(self)




    def open_key(self):

        localctx = TSqlParser.Open_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_open_key)
        try:
            self.state = 8121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8105
                self.match(TSqlParser.OPEN)
                self.state = 8106
                self.match(TSqlParser.SYMMETRIC)
                self.state = 8107
                self.match(TSqlParser.KEY)
                self.state = 8108
                localctx.key_name = self.id()
                self.state = 8109
                self.match(TSqlParser.DECRYPTION)
                self.state = 8110
                self.match(TSqlParser.BY)
                self.state = 8111
                self.decryption_mechanism()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8113
                self.match(TSqlParser.OPEN)
                self.state = 8114
                self.match(TSqlParser.MASTER)
                self.state = 8115
                self.match(TSqlParser.KEY)
                self.state = 8116
                self.match(TSqlParser.DECRYPTION)
                self.state = 8117
                self.match(TSqlParser.BY)
                self.state = 8118
                self.match(TSqlParser.PASSWORD)
                self.state = 8119
                self.match(TSqlParser.EQUAL)
                self.state = 8120
                localctx.password = self.match(TSqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_name = None # IdContext

        def CLOSE(self):
            return self.getToken(TSqlParser.CLOSE, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def KEYS(self):
            return self.getToken(TSqlParser.KEYS, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_close_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_key" ):
                listener.enterClose_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_key" ):
                listener.exitClose_key(self)




    def close_key(self):

        localctx = TSqlParser.Close_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_close_key)
        try:
            self.state = 8134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8123
                self.match(TSqlParser.CLOSE)
                self.state = 8124
                self.match(TSqlParser.SYMMETRIC)
                self.state = 8125
                self.match(TSqlParser.KEY)
                self.state = 8126
                localctx.key_name = self.id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8127
                self.match(TSqlParser.CLOSE)
                self.state = 8128
                self.match(TSqlParser.ALL)
                self.state = 8129
                self.match(TSqlParser.SYMMETRIC)
                self.state = 8130
                self.match(TSqlParser.KEYS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8131
                self.match(TSqlParser.CLOSE)
                self.state = 8132
                self.match(TSqlParser.MASTER)
                self.state = 8133
                self.match(TSqlParser.KEY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.password = None # Token
            self.key_name = None # IdContext
            self.user_name = None # IdContext
            self.provider_name = None # IdContext

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def ENCRYPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ENCRYPTION)
            else:
                return self.getToken(TSqlParser.ENCRYPTION, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.BY)
            else:
                return self.getToken(TSqlParser.BY, i)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def AUTHORIZATION(self):
            return self.getToken(TSqlParser.AUTHORIZATION, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def key_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Key_optionsContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Key_optionsContext,i)


        def encryption_mechanism(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Encryption_mechanismContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Encryption_mechanismContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_key" ):
                listener.enterCreate_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_key" ):
                listener.exitCreate_key(self)




    def create_key(self):

        localctx = TSqlParser.Create_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_create_key)
        self._la = 0 # Token type
        try:
            self.state = 8171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8136
                self.match(TSqlParser.CREATE)
                self.state = 8137
                self.match(TSqlParser.MASTER)
                self.state = 8138
                self.match(TSqlParser.KEY)
                self.state = 8139
                self.match(TSqlParser.ENCRYPTION)
                self.state = 8140
                self.match(TSqlParser.BY)
                self.state = 8141
                self.match(TSqlParser.PASSWORD)
                self.state = 8142
                self.match(TSqlParser.EQUAL)
                self.state = 8143
                localctx.password = self.match(TSqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8144
                self.match(TSqlParser.CREATE)
                self.state = 8145
                self.match(TSqlParser.SYMMETRIC)
                self.state = 8146
                self.match(TSqlParser.KEY)
                self.state = 8147
                localctx.key_name = self.id()
                self.state = 8150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.AUTHORIZATION:
                    self.state = 8148
                    self.match(TSqlParser.AUTHORIZATION)
                    self.state = 8149
                    localctx.user_name = self.id()


                self.state = 8155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FROM:
                    self.state = 8152
                    self.match(TSqlParser.FROM)
                    self.state = 8153
                    self.match(TSqlParser.PROVIDER)
                    self.state = 8154
                    localctx.provider_name = self.id()


                self.state = 8157
                self.match(TSqlParser.WITH)
                self.state = 8167 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 8162
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [TSqlParser.ALGORITHM, TSqlParser.CREATION_DISPOSITION, TSqlParser.IDENTITY_VALUE, TSqlParser.KEY_SOURCE, TSqlParser.PROVIDER_KEY_NAME]:
                            self.state = 8158
                            self.key_options()
                            pass
                        elif token in [TSqlParser.ENCRYPTION]:
                            self.state = 8159
                            self.match(TSqlParser.ENCRYPTION)
                            self.state = 8160
                            self.match(TSqlParser.BY)
                            self.state = 8161
                            self.encryption_mechanism()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 8165
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.COMMA:
                            self.state = 8164
                            self.match(TSqlParser.COMMA)



                    else:
                        raise NoViableAltException(self)
                    self.state = 8169 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1138,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pass_phrase = None # Token
            self.identity_phrase = None # Token
            self.key_name_in_provider = None # Token

        def KEY_SOURCE(self):
            return self.getToken(TSqlParser.KEY_SOURCE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def algorithm(self):
            return self.getTypedRuleContext(TSqlParser.AlgorithmContext,0)


        def IDENTITY_VALUE(self):
            return self.getToken(TSqlParser.IDENTITY_VALUE, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_key_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_options" ):
                listener.enterKey_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_options" ):
                listener.exitKey_options(self)




    def key_options(self):

        localctx = TSqlParser.Key_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_key_options)
        self._la = 0 # Token type
        try:
            self.state = 8188
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.KEY_SOURCE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8173
                self.match(TSqlParser.KEY_SOURCE)
                self.state = 8174
                self.match(TSqlParser.EQUAL)
                self.state = 8175
                localctx.pass_phrase = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.ALGORITHM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8176
                self.match(TSqlParser.ALGORITHM)
                self.state = 8177
                self.match(TSqlParser.EQUAL)
                self.state = 8178
                self.algorithm()
                pass
            elif token in [TSqlParser.IDENTITY_VALUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8179
                self.match(TSqlParser.IDENTITY_VALUE)
                self.state = 8180
                self.match(TSqlParser.EQUAL)
                self.state = 8181
                localctx.identity_phrase = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.PROVIDER_KEY_NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8182
                self.match(TSqlParser.PROVIDER_KEY_NAME)
                self.state = 8183
                self.match(TSqlParser.EQUAL)
                self.state = 8184
                localctx.key_name_in_provider = self.match(TSqlParser.STRING)
                pass
            elif token in [TSqlParser.CREATION_DISPOSITION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8185
                self.match(TSqlParser.CREATION_DISPOSITION)
                self.state = 8186
                self.match(TSqlParser.EQUAL)
                self.state = 8187
                _la = self._input.LA(1)
                if not(_la==TSqlParser.CREATE_NEW or _la==TSqlParser.OPEN_EXISTING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlgorithmContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DES(self):
            return self.getToken(TSqlParser.DES, 0)

        def TRIPLE_DES(self):
            return self.getToken(TSqlParser.TRIPLE_DES, 0)

        def TRIPLE_DES_3KEY(self):
            return self.getToken(TSqlParser.TRIPLE_DES_3KEY, 0)

        def RC2(self):
            return self.getToken(TSqlParser.RC2, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def RC4_128(self):
            return self.getToken(TSqlParser.RC4_128, 0)

        def DESX(self):
            return self.getToken(TSqlParser.DESX, 0)

        def AES_128(self):
            return self.getToken(TSqlParser.AES_128, 0)

        def AES_192(self):
            return self.getToken(TSqlParser.AES_192, 0)

        def AES_256(self):
            return self.getToken(TSqlParser.AES_256, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_algorithm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlgorithm" ):
                listener.enterAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlgorithm" ):
                listener.exitAlgorithm(self)




    def algorithm(self):

        localctx = TSqlParser.AlgorithmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_algorithm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8190
            _la = self._input.LA(1)
            if not(((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (TSqlParser.AES_128 - 389)) | (1 << (TSqlParser.AES_192 - 389)) | (1 << (TSqlParser.AES_256 - 389)))) != 0) or _la==TSqlParser.DES or _la==TSqlParser.DESX or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & ((1 << (TSqlParser.RC2 - 663)) | (1 << (TSqlParser.RC4 - 663)) | (1 << (TSqlParser.RC4_128 - 663)))) != 0) or _la==TSqlParser.TRIPLE_DES or _la==TSqlParser.TRIPLE_DES_3KEY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encryption_mechanismContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # IdContext
            self.asym_key_name = None # IdContext
            self.decrypting_Key_name = None # IdContext

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_encryption_mechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncryption_mechanism" ):
                listener.enterEncryption_mechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncryption_mechanism" ):
                listener.exitEncryption_mechanism(self)




    def encryption_mechanism(self):

        localctx = TSqlParser.Encryption_mechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_encryption_mechanism)
        try:
            self.state = 8203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CERTIFICATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8192
                self.match(TSqlParser.CERTIFICATE)
                self.state = 8193
                localctx.certificate_name = self.id()
                pass
            elif token in [TSqlParser.ASYMMETRIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8194
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 8195
                self.match(TSqlParser.KEY)
                self.state = 8196
                localctx.asym_key_name = self.id()
                pass
            elif token in [TSqlParser.SYMMETRIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8197
                self.match(TSqlParser.SYMMETRIC)
                self.state = 8198
                self.match(TSqlParser.KEY)
                self.state = 8199
                localctx.decrypting_Key_name = self.id()
                pass
            elif token in [TSqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8200
                self.match(TSqlParser.PASSWORD)
                self.state = 8201
                self.match(TSqlParser.EQUAL)
                self.state = 8202
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decryption_mechanismContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.certificate_name = None # IdContext
            self.asym_key_name = None # IdContext
            self.decrypting_Key_name = None # IdContext

        def CERTIFICATE(self):
            return self.getToken(TSqlParser.CERTIFICATE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def PASSWORD(self):
            return self.getToken(TSqlParser.PASSWORD, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def ASYMMETRIC(self):
            return self.getToken(TSqlParser.ASYMMETRIC, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_decryption_mechanism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecryption_mechanism" ):
                listener.enterDecryption_mechanism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecryption_mechanism" ):
                listener.exitDecryption_mechanism(self)




    def decryption_mechanism(self):

        localctx = TSqlParser.Decryption_mechanismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_decryption_mechanism)
        try:
            self.state = 8228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CERTIFICATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8205
                self.match(TSqlParser.CERTIFICATE)
                self.state = 8206
                localctx.certificate_name = self.id()
                self.state = 8211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1142,self._ctx)
                if la_ == 1:
                    self.state = 8207
                    self.match(TSqlParser.WITH)
                    self.state = 8208
                    self.match(TSqlParser.PASSWORD)
                    self.state = 8209
                    self.match(TSqlParser.EQUAL)
                    self.state = 8210
                    self.match(TSqlParser.STRING)


                pass
            elif token in [TSqlParser.ASYMMETRIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8213
                self.match(TSqlParser.ASYMMETRIC)
                self.state = 8214
                self.match(TSqlParser.KEY)
                self.state = 8215
                localctx.asym_key_name = self.id()
                self.state = 8220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1143,self._ctx)
                if la_ == 1:
                    self.state = 8216
                    self.match(TSqlParser.WITH)
                    self.state = 8217
                    self.match(TSqlParser.PASSWORD)
                    self.state = 8218
                    self.match(TSqlParser.EQUAL)
                    self.state = 8219
                    self.match(TSqlParser.STRING)


                pass
            elif token in [TSqlParser.SYMMETRIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8222
                self.match(TSqlParser.SYMMETRIC)
                self.state = 8223
                self.match(TSqlParser.KEY)
                self.state = 8224
                localctx.decrypting_Key_name = self.id()
                pass
            elif token in [TSqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8225
                self.match(TSqlParser.PASSWORD)
                self.state = 8226
                self.match(TSqlParser.EQUAL)
                self.state = 8227
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_permissionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(TSqlParser.VIEW, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def TAKE(self):
            return self.getToken(TSqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(TSqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(TSqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(TSqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(TSqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(TSqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(TSqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(TSqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(TSqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(TSqlParser.ANY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_grant_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permission" ):
                listener.enterGrant_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permission" ):
                listener.exitGrant_permission(self)




    def grant_permission(self):

        localctx = TSqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 8256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8230
                self.match(TSqlParser.EXECUTE)
                pass
            elif token in [TSqlParser.VIEW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8231
                self.match(TSqlParser.VIEW)
                self.state = 8232
                self.id()
                pass
            elif token in [TSqlParser.TAKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8233
                self.match(TSqlParser.TAKE)
                self.state = 8234
                self.id()
                pass
            elif token in [TSqlParser.CONTROL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8235
                self.match(TSqlParser.CONTROL)
                self.state = 8237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                    self.state = 8236
                    self.id()


                pass
            elif token in [TSqlParser.CREATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8239
                self.match(TSqlParser.CREATE)
                self.state = 8240
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TABLE or _la==TSqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.SHOWPLAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8241
                self.match(TSqlParser.SHOWPLAN)
                pass
            elif token in [TSqlParser.IMPERSONATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8242
                self.match(TSqlParser.IMPERSONATE)
                pass
            elif token in [TSqlParser.SELECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8243
                self.match(TSqlParser.SELECT)
                pass
            elif token in [TSqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8244
                self.match(TSqlParser.REFERENCES)
                pass
            elif token in [TSqlParser.INSERT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8245
                self.match(TSqlParser.INSERT)
                pass
            elif token in [TSqlParser.ALTER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8246
                self.match(TSqlParser.ALTER)
                self.state = 8254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ANY or _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.DATABASE - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                    self.state = 8248
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.ANY:
                        self.state = 8247
                        self.match(TSqlParser.ANY)


                    self.state = 8252
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                        self.state = 8250
                        self.id()
                        pass
                    elif token in [TSqlParser.DATABASE]:
                        self.state = 8251
                        self.match(TSqlParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # IdContext

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(TSqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_set_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_statement" ):
                listener.enterSet_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_statement" ):
                listener.exitSet_statement(self)




    def set_statement(self):

        localctx = TSqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 8297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8258
                self.match(TSqlParser.SET)
                self.state = 8259
                self.match(TSqlParser.LOCAL_ID)
                self.state = 8262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.DOT:
                    self.state = 8260
                    self.match(TSqlParser.DOT)
                    self.state = 8261
                    localctx.member_name = self.id()


                self.state = 8264
                self.match(TSqlParser.EQUAL)
                self.state = 8265
                self.expression(0)
                self.state = 8267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1151,self._ctx)
                if la_ == 1:
                    self.state = 8266
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8269
                self.match(TSqlParser.SET)
                self.state = 8270
                self.match(TSqlParser.LOCAL_ID)
                self.state = 8271
                self.assignment_operator()
                self.state = 8272
                self.expression(0)
                self.state = 8274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1152,self._ctx)
                if la_ == 1:
                    self.state = 8273
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8276
                self.match(TSqlParser.SET)
                self.state = 8277
                self.match(TSqlParser.LOCAL_ID)
                self.state = 8278
                self.match(TSqlParser.EQUAL)
                self.state = 8279
                self.match(TSqlParser.CURSOR)
                self.state = 8280
                self.declare_set_cursor_common()
                self.state = 8291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FOR:
                    self.state = 8281
                    self.match(TSqlParser.FOR)
                    self.state = 8289
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.READ]:
                        self.state = 8282
                        self.match(TSqlParser.READ)
                        self.state = 8283
                        self.match(TSqlParser.ONLY)
                        pass
                    elif token in [TSqlParser.UPDATE]:
                        self.state = 8284
                        self.match(TSqlParser.UPDATE)
                        self.state = 8287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.OF:
                            self.state = 8285
                            self.match(TSqlParser.OF)
                            self.state = 8286
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 8294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1156,self._ctx)
                if la_ == 1:
                    self.state = 8293
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8296
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(TSqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(TSqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(TSqlParser.TRANSACTION, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(TSqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(TSqlParser.COMMIT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(TSqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def WORK(self):
            return self.getToken(TSqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(TSqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(TSqlParser.SAVE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_transaction_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_statement" ):
                listener.enterTransaction_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_statement" ):
                listener.exitTransaction_statement(self)




    def transaction_statement(self):

        localctx = TSqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 8380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1176,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8299
                self.match(TSqlParser.BEGIN)
                self.state = 8300
                self.match(TSqlParser.DISTRIBUTED)
                self.state = 8301
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1158,self._ctx)
                if la_ == 1:
                    self.state = 8302
                    self.id()

                elif la_ == 2:
                    self.state = 8303
                    self.match(TSqlParser.LOCAL_ID)


                self.state = 8307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1159,self._ctx)
                if la_ == 1:
                    self.state = 8306
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8309
                self.match(TSqlParser.BEGIN)
                self.state = 8310
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1162,self._ctx)
                if la_ == 1:
                    self.state = 8313
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                        self.state = 8311
                        self.id()
                        pass
                    elif token in [TSqlParser.LOCAL_ID]:
                        self.state = 8312
                        self.match(TSqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 8318
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1161,self._ctx)
                    if la_ == 1:
                        self.state = 8315
                        self.match(TSqlParser.WITH)
                        self.state = 8316
                        self.match(TSqlParser.MARK)
                        self.state = 8317
                        self.match(TSqlParser.STRING)




                self.state = 8323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1163,self._ctx)
                if la_ == 1:
                    self.state = 8322
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8325
                self.match(TSqlParser.COMMIT)
                self.state = 8326
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1166,self._ctx)
                if la_ == 1:
                    self.state = 8329
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                        self.state = 8327
                        self.id()
                        pass
                    elif token in [TSqlParser.LOCAL_ID]:
                        self.state = 8328
                        self.match(TSqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 8337
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1165,self._ctx)
                    if la_ == 1:
                        self.state = 8331
                        self.match(TSqlParser.WITH)
                        self.state = 8332
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 8333
                        self.match(TSqlParser.DELAYED_DURABILITY)
                        self.state = 8334
                        self.match(TSqlParser.EQUAL)
                        self.state = 8335
                        _la = self._input.LA(1)
                        if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 8336
                        self.match(TSqlParser.RR_BRACKET)




                self.state = 8342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1167,self._ctx)
                if la_ == 1:
                    self.state = 8341
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8344
                self.match(TSqlParser.COMMIT)
                self.state = 8346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1168,self._ctx)
                if la_ == 1:
                    self.state = 8345
                    self.match(TSqlParser.WORK)


                self.state = 8349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1169,self._ctx)
                if la_ == 1:
                    self.state = 8348
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8351
                self.match(TSqlParser.COMMIT)
                self.state = 8352
                self.id()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8353
                self.match(TSqlParser.ROLLBACK)
                self.state = 8354
                self.id()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8355
                self.match(TSqlParser.ROLLBACK)
                self.state = 8356
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1170,self._ctx)
                if la_ == 1:
                    self.state = 8357
                    self.id()

                elif la_ == 2:
                    self.state = 8358
                    self.match(TSqlParser.LOCAL_ID)


                self.state = 8362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1171,self._ctx)
                if la_ == 1:
                    self.state = 8361
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8364
                self.match(TSqlParser.ROLLBACK)
                self.state = 8366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1172,self._ctx)
                if la_ == 1:
                    self.state = 8365
                    self.match(TSqlParser.WORK)


                self.state = 8369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1173,self._ctx)
                if la_ == 1:
                    self.state = 8368
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8371
                self.match(TSqlParser.SAVE)
                self.state = 8372
                _la = self._input.LA(1)
                if not(_la==TSqlParser.TRAN or _la==TSqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1174,self._ctx)
                if la_ == 1:
                    self.state = 8373
                    self.id()

                elif la_ == 2:
                    self.state = 8374
                    self.match(TSqlParser.LOCAL_ID)


                self.state = 8378
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1175,self._ctx)
                if la_ == 1:
                    self.state = 8377
                    self.match(TSqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Go_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(TSqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_go_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGo_statement" ):
                listener.enterGo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGo_statement" ):
                listener.exitGo_statement(self)




    def go_statement(self):

        localctx = TSqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_go_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8382
            self.match(TSqlParser.GO)
            self.state = 8384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1177,self._ctx)
            if la_ == 1:
                self.state = 8383
                localctx.count = self.match(TSqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # IdContext

        def USE(self):
            return self.getToken(TSqlParser.USE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_use_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_statement" ):
                listener.enterUse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_statement" ):
                listener.exitUse_statement(self)




    def use_statement(self):

        localctx = TSqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8386
            self.match(TSqlParser.USE)
            self.state = 8387
            localctx.database = self.id()
            self.state = 8389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1178,self._ctx)
            if la_ == 1:
                self.state = 8388
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Setuser_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user = None # Token

        def SETUSER(self):
            return self.getToken(TSqlParser.SETUSER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_setuser_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetuser_statement" ):
                listener.enterSetuser_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetuser_statement" ):
                listener.exitSetuser_statement(self)




    def setuser_statement(self):

        localctx = TSqlParser.Setuser_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_setuser_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8391
            self.match(TSqlParser.SETUSER)
            self.state = 8393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1179,self._ctx)
            if la_ == 1:
                self.state = 8392
                localctx.user = self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_idContext

        def DBCC(self):
            return self.getToken(TSqlParser.DBCC, 0)

        def simple_id(self):
            return self.getTypedRuleContext(TSqlParser.Simple_idContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def dbcc_options(self):
            return self.getTypedRuleContext(TSqlParser.Dbcc_optionsContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_clause" ):
                listener.enterDbcc_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_clause" ):
                listener.exitDbcc_clause(self)




    def dbcc_clause(self):

        localctx = TSqlParser.Dbcc_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_dbcc_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8395
            self.match(TSqlParser.DBCC)
            self.state = 8396
            localctx.name = self.simple_id()
            self.state = 8401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1180,self._ctx)
            if la_ == 1:
                self.state = 8397
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8398
                self.expression_list()
                self.state = 8399
                self.match(TSqlParser.RR_BRACKET)


            self.state = 8405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1181,self._ctx)
            if la_ == 1:
                self.state = 8403
                self.match(TSqlParser.WITH)
                self.state = 8404
                self.dbcc_options()


            self.state = 8408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1182,self._ctx)
            if la_ == 1:
                self.state = 8407
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dbcc_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_idContext,i)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_dbcc_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_options" ):
                listener.enterDbcc_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_options" ):
                listener.exitDbcc_options(self)




    def dbcc_options(self):

        localctx = TSqlParser.Dbcc_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_dbcc_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8410
            self.simple_id()
            self.state = 8413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 8411
                self.match(TSqlParser.COMMA)
                self.state = 8412
                self.simple_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(TSqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(TSqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_clause" ):
                listener.enterExecute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_clause" ):
                listener.exitExecute_clause(self)




    def execute_clause(self):

        localctx = TSqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8415
            self.match(TSqlParser.EXECUTE)
            self.state = 8416
            self.match(TSqlParser.AS)
            self.state = 8417
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.CALLER or _la==TSqlParser.OWNER or _la==TSqlParser.SELF or _la==TSqlParser.STRING):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_localContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_local" ):
                listener.enterDeclare_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_local" ):
                listener.exitDeclare_local(self)




    def declare_local(self):

        localctx = TSqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8419
            self.match(TSqlParser.LOCAL_ID)
            self.state = 8421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 8420
                self.match(TSqlParser.AS)


            self.state = 8423
            self.data_type()
            self.state = 8426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.EQUAL:
                self.state = 8424
                self.match(TSqlParser.EQUAL)
                self.state = 8425
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TSqlParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintsContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)




    def table_type_definition(self):

        localctx = TSqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8428
            self.match(TSqlParser.TABLE)
            self.state = 8429
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8430
            self.column_def_table_constraints()
            self.state = 8431
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def xml_schema_collection(self):
            return self.getTypedRuleContext(TSqlParser.Xml_schema_collectionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def DOCUMENT(self):
            return self.getToken(TSqlParser.DOCUMENT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_type_definition" ):
                listener.enterXml_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_type_definition" ):
                listener.exitXml_type_definition(self)




    def xml_type_definition(self):

        localctx = TSqlParser.Xml_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_xml_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8433
            self.match(TSqlParser.XML)
            self.state = 8434
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONTENT or _la==TSqlParser.DOCUMENT:
                self.state = 8435
                _la = self._input.LA(1)
                if not(_la==TSqlParser.CONTENT or _la==TSqlParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8438
            self.xml_schema_collection()
            self.state = 8439
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_schema_collectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ID)
            else:
                return self.getToken(TSqlParser.ID, i)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_schema_collection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_schema_collection" ):
                listener.enterXml_schema_collection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_schema_collection" ):
                listener.exitXml_schema_collection(self)




    def xml_schema_collection(self):

        localctx = TSqlParser.Xml_schema_collectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_xml_schema_collection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8441
            self.match(TSqlParser.ID)
            self.state = 8442
            self.match(TSqlParser.DOT)
            self.state = 8443
            self.match(TSqlParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_def_table_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_def_table_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraints" ):
                listener.enterColumn_def_table_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraints" ):
                listener.exitColumn_def_table_constraints(self)




    def column_def_table_constraints(self):

        localctx = TSqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8445
            self.column_def_table_constraint()
            self.state = 8452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 8446
                        self.match(TSqlParser.COMMA)


                    self.state = 8449
                    self.column_def_table_constraint() 
                self.state = 8454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_def_table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(TSqlParser.Column_definitionContext,0)


        def materialized_column_definition(self):
            return self.getTypedRuleContext(TSqlParser.Materialized_column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(TSqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_column_def_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraint" ):
                listener.enterColumn_def_table_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraint" ):
                listener.exitColumn_def_table_constraint(self)




    def column_def_table_constraint(self):

        localctx = TSqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_column_def_table_constraint)
        try:
            self.state = 8458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8455
                self.column_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8456
                self.materialized_column_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8457
                self.table_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # IdContext
            self.seed = None # Token
            self.increment = None # Token

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def null_or_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Null_or_defaultContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Null_or_defaultContext,i)


        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(TSqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)




    def column_definition(self):

        localctx = TSqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8460
            self.id()
            self.state = 8464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.DOUBLE, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.state = 8461
                self.data_type()
                pass
            elif token in [TSqlParser.AS]:
                self.state = 8462
                self.match(TSqlParser.AS)
                self.state = 8463
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COLLATE:
                self.state = 8466
                self.match(TSqlParser.COLLATE)
                self.state = 8467
                self.id()


            self.state = 8471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1192,self._ctx)
            if la_ == 1:
                self.state = 8470
                self.null_notnull()


            self.state = 8494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1197,self._ctx)
            if la_ == 1:
                self.state = 8475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CONSTRAINT:
                    self.state = 8473
                    self.match(TSqlParser.CONSTRAINT)
                    self.state = 8474
                    localctx.constraint = self.id()


                self.state = 8477
                self.null_or_default()
                self.state = 8479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1194,self._ctx)
                if la_ == 1:
                    self.state = 8478
                    self.null_or_default()



            elif la_ == 2:
                self.state = 8481
                self.match(TSqlParser.IDENTITY)
                self.state = 8487
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1195,self._ctx)
                if la_ == 1:
                    self.state = 8482
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 8483
                    localctx.seed = self.match(TSqlParser.DECIMAL)
                    self.state = 8484
                    self.match(TSqlParser.COMMA)
                    self.state = 8485
                    localctx.increment = self.match(TSqlParser.DECIMAL)
                    self.state = 8486
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 8492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1196,self._ctx)
                if la_ == 1:
                    self.state = 8489
                    self.match(TSqlParser.NOT)
                    self.state = 8490
                    self.match(TSqlParser.FOR)
                    self.state = 8491
                    self.match(TSqlParser.REPLICATION)




            self.state = 8497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ROWGUIDCOL:
                self.state = 8496
                self.match(TSqlParser.ROWGUIDCOL)


            self.state = 8502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8499
                    self.column_constraint() 
                self.state = 8504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Materialized_column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def COMPUTE(self):
            return self.getToken(TSqlParser.COMPUTE, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def MATERIALIZED(self):
            return self.getToken(TSqlParser.MATERIALIZED, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_materialized_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterialized_column_definition" ):
                listener.enterMaterialized_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterialized_column_definition" ):
                listener.exitMaterialized_column_definition(self)




    def materialized_column_definition(self):

        localctx = TSqlParser.Materialized_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_materialized_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8505
            self.id()
            self.state = 8506
            _la = self._input.LA(1)
            if not(_la==TSqlParser.AS or _la==TSqlParser.COMPUTE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8507
            self.expression(0)
            self.state = 8511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1200,self._ctx)
            if la_ == 1:
                self.state = 8508
                self.match(TSqlParser.MATERIALIZED)

            elif la_ == 2:
                self.state = 8509
                self.match(TSqlParser.NOT)
                self.state = 8510
                self.match(TSqlParser.MATERIALIZED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # IdContext
            self.pk = None # Column_name_listContext

        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(TSqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def FOREIGN(self):
            return self.getToken(TSqlParser.FOREIGN, 0)

        def on_delete(self):
            return self.getTypedRuleContext(TSqlParser.On_deleteContext,0)


        def on_update(self):
            return self.getTypedRuleContext(TSqlParser.On_updateContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = TSqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONSTRAINT:
                self.state = 8513
                self.match(TSqlParser.CONSTRAINT)
                self.state = 8514
                localctx.constraint = self.id()


            self.state = 8554
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.PRIMARY, TSqlParser.UNIQUE]:
                self.state = 8520
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.PRIMARY]:
                    self.state = 8517
                    self.match(TSqlParser.PRIMARY)
                    self.state = 8518
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [TSqlParser.UNIQUE]:
                    self.state = 8519
                    self.match(TSqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CLUSTERED or _la==TSqlParser.NONCLUSTERED:
                    self.state = 8522
                    self.clustered()


                self.state = 8526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1204,self._ctx)
                if la_ == 1:
                    self.state = 8525
                    self.index_options()


                pass
            elif token in [TSqlParser.CHECK]:
                self.state = 8528
                self.match(TSqlParser.CHECK)
                self.state = 8532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 8529
                    self.match(TSqlParser.NOT)
                    self.state = 8530
                    self.match(TSqlParser.FOR)
                    self.state = 8531
                    self.match(TSqlParser.REPLICATION)


                self.state = 8534
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8535
                self.search_condition()
                self.state = 8536
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.FOREIGN, TSqlParser.REFERENCES]:
                self.state = 8540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FOREIGN:
                    self.state = 8538
                    self.match(TSqlParser.FOREIGN)
                    self.state = 8539
                    self.match(TSqlParser.KEY)


                self.state = 8542
                self.match(TSqlParser.REFERENCES)
                self.state = 8543
                self.table_name()
                self.state = 8544
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8545
                localctx.pk = self.column_name_list()
                self.state = 8546
                self.match(TSqlParser.RR_BRACKET)
                self.state = 8548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1207,self._ctx)
                if la_ == 1:
                    self.state = 8547
                    self.on_delete()


                self.state = 8551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ON:
                    self.state = 8550
                    self.on_update()


                pass
            elif token in [TSqlParser.NOT, TSqlParser.NULL]:
                self.state = 8553
                self.null_notnull()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # IdContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def column_name_list_with_order(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_list_with_orderContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def CHECK(self):
            return self.getToken(TSqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def FOREIGN(self):
            return self.getToken(TSqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(TSqlParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def CONSTRAINT(self):
            return self.getToken(TSqlParser.CONSTRAINT, 0)

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_name_listContext,i)


        def PRIMARY(self):
            return self.getToken(TSqlParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(TSqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(TSqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(TSqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def REPLICATION(self):
            return self.getToken(TSqlParser.REPLICATION, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.PLUS)
            else:
                return self.getToken(TSqlParser.PLUS, i)

        def function_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Function_callContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Function_callContext,i)


        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def on_delete(self):
            return self.getTypedRuleContext(TSqlParser.On_deleteContext,0)


        def on_update(self):
            return self.getTypedRuleContext(TSqlParser.On_updateContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = TSqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONSTRAINT:
                self.state = 8556
                self.match(TSqlParser.CONSTRAINT)
                self.state = 8557
                localctx.constraint = self.id()


            self.state = 8624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.PRIMARY, TSqlParser.UNIQUE]:
                self.state = 8563
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.PRIMARY]:
                    self.state = 8560
                    self.match(TSqlParser.PRIMARY)
                    self.state = 8561
                    self.match(TSqlParser.KEY)
                    pass
                elif token in [TSqlParser.UNIQUE]:
                    self.state = 8562
                    self.match(TSqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CLUSTERED or _la==TSqlParser.NONCLUSTERED:
                    self.state = 8565
                    self.clustered()


                self.state = 8568
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8569
                self.column_name_list_with_order()
                self.state = 8570
                self.match(TSqlParser.RR_BRACKET)
                self.state = 8572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1213,self._ctx)
                if la_ == 1:
                    self.state = 8571
                    self.index_options()


                self.state = 8576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ON:
                    self.state = 8574
                    self.match(TSqlParser.ON)
                    self.state = 8575
                    self.id()


                pass
            elif token in [TSqlParser.CHECK]:
                self.state = 8578
                self.match(TSqlParser.CHECK)
                self.state = 8582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 8579
                    self.match(TSqlParser.NOT)
                    self.state = 8580
                    self.match(TSqlParser.FOR)
                    self.state = 8581
                    self.match(TSqlParser.REPLICATION)


                self.state = 8584
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8585
                self.search_condition()
                self.state = 8586
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.DEFAULT]:
                self.state = 8588
                self.match(TSqlParser.DEFAULT)
                self.state = 8590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 8589
                    self.match(TSqlParser.LR_BRACKET)


                self.state = 8596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 8596
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.STRING]:
                        self.state = 8592
                        self.match(TSqlParser.STRING)
                        pass
                    elif token in [TSqlParser.PLUS]:
                        self.state = 8593
                        self.match(TSqlParser.PLUS)
                        pass
                    elif token in [TSqlParser.CALLED, TSqlParser.COALESCE, TSqlParser.CONVERT, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.IDENTITY, TSqlParser.INIT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.RIGHT, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.ID]:
                        self.state = 8594
                        self.function_call()
                        pass
                    elif token in [TSqlParser.DECIMAL]:
                        self.state = 8595
                        self.match(TSqlParser.DECIMAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 8598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.CALLED or _la==TSqlParser.COALESCE or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (TSqlParser.CONVERT - 69)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 69)) | (1 << (TSqlParser.CURRENT_USER - 69)) | (1 << (TSqlParser.DATA_COMPRESSION - 69)) | (1 << (TSqlParser.EVENTDATA - 69)) | (1 << (TSqlParser.FILENAME - 69)) | (1 << (TSqlParser.FILLFACTOR - 69)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (TSqlParser.FORCESEEK - 133)) | (1 << (TSqlParser.IDENTITY - 133)) | (1 << (TSqlParser.INIT - 133)) | (1 << (TSqlParser.ISNULL - 133)) | (1 << (TSqlParser.KEY - 133)) | (1 << (TSqlParser.LEFT - 133)) | (1 << (TSqlParser.MASTER - 133)) | (1 << (TSqlParser.MAX_MEMORY - 133)))) != 0) or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & ((1 << (TSqlParser.NULLIF - 222)) | (1 << (TSqlParser.OFFSETS - 222)) | (1 << (TSqlParser.PAGE - 222)) | (1 << (TSqlParser.PUBLIC - 222)) | (1 << (TSqlParser.R - 222)) | (1 << (TSqlParser.RAW - 222)) | (1 << (TSqlParser.RETURN - 222)) | (1 << (TSqlParser.RETURNS - 222)) | (1 << (TSqlParser.RIGHT - 222)))) != 0) or ((((_la - 288)) & ~0x3f) == 0 and ((1 << (_la - 288)) & ((1 << (TSqlParser.ROWCOUNT - 288)) | (1 << (TSqlParser.SAFETY - 288)) | (1 << (TSqlParser.SERVER - 288)) | (1 << (TSqlParser.SESSION_USER - 288)) | (1 << (TSqlParser.SID - 288)) | (1 << (TSqlParser.SOURCE - 288)) | (1 << (TSqlParser.STATE - 288)) | (1 << (TSqlParser.START - 288)) | (1 << (TSqlParser.SYSTEM_USER - 288)) | (1 << (TSqlParser.TARGET - 288)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.LOCAL_ID - 767)) | (1 << (TSqlParser.DECIMAL - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.STRING - 767)) | (1 << (TSqlParser.PLUS - 767)))) != 0)):
                        break

                self.state = 8601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.RR_BRACKET:
                    self.state = 8600
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 8603
                self.match(TSqlParser.FOR)
                self.state = 8604
                self.id()
                pass
            elif token in [TSqlParser.FOREIGN]:
                self.state = 8605
                self.match(TSqlParser.FOREIGN)
                self.state = 8606
                self.match(TSqlParser.KEY)
                self.state = 8607
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8608
                localctx.fk = self.column_name_list()
                self.state = 8609
                self.match(TSqlParser.RR_BRACKET)
                self.state = 8610
                self.match(TSqlParser.REFERENCES)
                self.state = 8611
                self.table_name()
                self.state = 8616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1220,self._ctx)
                if la_ == 1:
                    self.state = 8612
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 8613
                    localctx.pk = self.column_name_list()
                    self.state = 8614
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 8619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1221,self._ctx)
                if la_ == 1:
                    self.state = 8618
                    self.on_delete()


                self.state = 8622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ON:
                    self.state = 8621
                    self.on_update()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def DELETE(self):
            return self.getToken(TSqlParser.DELETE, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def CASCADE(self):
            return self.getToken(TSqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_delete" ):
                listener.enterOn_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_delete" ):
                listener.exitOn_delete(self)




    def on_delete(self):

        localctx = TSqlParser.On_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_on_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8626
            self.match(TSqlParser.ON)
            self.state = 8627
            self.match(TSqlParser.DELETE)
            self.state = 8635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1224,self._ctx)
            if la_ == 1:
                self.state = 8628
                self.match(TSqlParser.NO)
                self.state = 8629
                self.match(TSqlParser.ACTION)
                pass

            elif la_ == 2:
                self.state = 8630
                self.match(TSqlParser.CASCADE)
                pass

            elif la_ == 3:
                self.state = 8631
                self.match(TSqlParser.SET)
                self.state = 8632
                self.match(TSqlParser.NULL)
                pass

            elif la_ == 4:
                self.state = 8633
                self.match(TSqlParser.SET)
                self.state = 8634
                self.match(TSqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_updateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def CASCADE(self):
            return self.getToken(TSqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_update" ):
                listener.enterOn_update(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_update" ):
                listener.exitOn_update(self)




    def on_update(self):

        localctx = TSqlParser.On_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_on_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8637
            self.match(TSqlParser.ON)
            self.state = 8638
            self.match(TSqlParser.UPDATE)
            self.state = 8646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1225,self._ctx)
            if la_ == 1:
                self.state = 8639
                self.match(TSqlParser.NO)
                self.state = 8640
                self.match(TSqlParser.ACTION)
                pass

            elif la_ == 2:
                self.state = 8641
                self.match(TSqlParser.CASCADE)
                pass

            elif la_ == 3:
                self.state = 8642
                self.match(TSqlParser.SET)
                self.state = 8643
                self.match(TSqlParser.NULL)
                pass

            elif la_ == 4:
                self.state = 8644
                self.match(TSqlParser.SET)
                self.state = 8645
                self.match(TSqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Index_optionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = TSqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8648
            self.match(TSqlParser.WITH)
            self.state = 8649
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8650
            self.index_option()
            self.state = 8655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 8651
                self.match(TSqlParser.COMMA)
                self.state = 8652
                self.index_option()
                self.state = 8657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8658
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Simple_idContext,i)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_option" ):
                listener.enterIndex_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_option" ):
                listener.exitIndex_option(self)




    def index_option(self):

        localctx = TSqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8660
            self.simple_id()
            self.state = 8661
            self.match(TSqlParser.EQUAL)
            self.state = 8665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.ID]:
                self.state = 8662
                self.simple_id()
                pass
            elif token in [TSqlParser.OFF, TSqlParser.ON]:
                self.state = 8663
                self.on_off()
                pass
            elif token in [TSqlParser.DECIMAL]:
                self.state = 8664
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(TSqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TSqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.FOR)
            else:
                return self.getToken(TSqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_commonContext,0)


        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def SEMI_SENSITIVE(self):
            return self.getToken(TSqlParser.SEMI_SENSITIVE, 0)

        def INSENSITIVE(self):
            return self.getToken(TSqlParser.INSENSITIVE, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(TSqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(TSqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_cursor" ):
                listener.enterDeclare_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_cursor" ):
                listener.exitDeclare_cursor(self)




    def declare_cursor(self):

        localctx = TSqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8667
            self.match(TSqlParser.DECLARE)
            self.state = 8668
            self.cursor_name()
            self.state = 8700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1235,self._ctx)
            if la_ == 1:
                self.state = 8669
                self.match(TSqlParser.CURSOR)
                self.state = 8679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1230,self._ctx)
                if la_ == 1:
                    self.state = 8670
                    self.declare_set_cursor_common()
                    self.state = 8677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.FOR:
                        self.state = 8671
                        self.match(TSqlParser.FOR)
                        self.state = 8672
                        self.match(TSqlParser.UPDATE)
                        self.state = 8675
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==TSqlParser.OF:
                            self.state = 8673
                            self.match(TSqlParser.OF)
                            self.state = 8674
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 8682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.INSENSITIVE or _la==TSqlParser.SEMI_SENSITIVE:
                    self.state = 8681
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.INSENSITIVE or _la==TSqlParser.SEMI_SENSITIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 8685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.SCROLL:
                    self.state = 8684
                    self.match(TSqlParser.SCROLL)


                self.state = 8687
                self.match(TSqlParser.CURSOR)
                self.state = 8688
                self.match(TSqlParser.FOR)
                self.state = 8689
                self.select_statement()
                self.state = 8698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.FOR:
                    self.state = 8690
                    self.match(TSqlParser.FOR)
                    self.state = 8696
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.READ]:
                        self.state = 8691
                        self.match(TSqlParser.READ)
                        self.state = 8692
                        self.match(TSqlParser.ONLY)
                        pass
                    elif token in [TSqlParser.UPDATE]:
                        self.state = 8693
                        self.match(TSqlParser.UPDATE)
                        pass
                    elif token in [TSqlParser.OF]:
                        self.state = 8694
                        self.match(TSqlParser.OF)
                        self.state = 8695
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 8703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1236,self._ctx)
            if la_ == 1:
                self.state = 8702
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_set_cursor_commonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def declare_set_cursor_common_partial(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Declare_set_cursor_common_partialContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Declare_set_cursor_common_partialContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_declare_set_cursor_common

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common" ):
                listener.enterDeclare_set_cursor_common(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common" ):
                listener.exitDeclare_set_cursor_common(self)




    def declare_set_cursor_common(self):

        localctx = TSqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 485)) & ~0x3f) == 0 and ((1 << (_la - 485)) & ((1 << (TSqlParser.DYNAMIC - 485)) | (1 << (TSqlParser.FAST_FORWARD - 485)) | (1 << (TSqlParser.FORWARD_ONLY - 485)) | (1 << (TSqlParser.GLOBAL - 485)))) != 0) or _la==TSqlParser.KEYSET or _la==TSqlParser.LOCAL or _la==TSqlParser.OPTIMISTIC or _la==TSqlParser.READ_ONLY or ((((_la - 702)) & ~0x3f) == 0 and ((1 << (_la - 702)) & ((1 << (TSqlParser.SCROLL - 702)) | (1 << (TSqlParser.SCROLL_LOCKS - 702)) | (1 << (TSqlParser.STATIC - 702)) | (1 << (TSqlParser.TYPE_WARNING - 702)))) != 0):
                self.state = 8705
                self.declare_set_cursor_common_partial()
                self.state = 8710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8711
            self.match(TSqlParser.FOR)
            self.state = 8712
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declare_set_cursor_common_partialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(TSqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(TSqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(TSqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(TSqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(TSqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(TSqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(TSqlParser.OPTIMISTIC, 0)

        def TYPE_WARNING(self):
            return self.getToken(TSqlParser.TYPE_WARNING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_declare_set_cursor_common_partial

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common_partial" ):
                listener.enterDeclare_set_cursor_common_partial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common_partial" ):
                listener.exitDeclare_set_cursor_common_partial(self)




    def declare_set_cursor_common_partial(self):

        localctx = TSqlParser.Declare_set_cursor_common_partialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_declare_set_cursor_common_partial)
        self._la = 0 # Token type
        try:
            self.state = 8719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.GLOBAL, TSqlParser.LOCAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8714
                _la = self._input.LA(1)
                if not(_la==TSqlParser.GLOBAL or _la==TSqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.FORWARD_ONLY, TSqlParser.SCROLL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8715
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FORWARD_ONLY or _la==TSqlParser.SCROLL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.DYNAMIC, TSqlParser.FAST_FORWARD, TSqlParser.KEYSET, TSqlParser.STATIC]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8716
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DYNAMIC or _la==TSqlParser.FAST_FORWARD or _la==TSqlParser.KEYSET or _la==TSqlParser.STATIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.OPTIMISTIC, TSqlParser.READ_ONLY, TSqlParser.SCROLL_LOCKS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8717
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OPTIMISTIC or _la==TSqlParser.READ_ONLY or _la==TSqlParser.SCROLL_LOCKS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.TYPE_WARNING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8718
                self.match(TSqlParser.TYPE_WARNING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(TSqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TSqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TSqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TSqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ABSOLUTE(self):
            return self.getToken(TSqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(TSqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_fetch_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_cursor" ):
                listener.enterFetch_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_cursor" ):
                listener.exitFetch_cursor(self)




    def fetch_cursor(self):

        localctx = TSqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8721
            self.match(TSqlParser.FETCH)
            self.state = 8731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1240,self._ctx)
            if la_ == 1:
                self.state = 8728
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.NEXT]:
                    self.state = 8722
                    self.match(TSqlParser.NEXT)
                    pass
                elif token in [TSqlParser.PRIOR]:
                    self.state = 8723
                    self.match(TSqlParser.PRIOR)
                    pass
                elif token in [TSqlParser.FIRST]:
                    self.state = 8724
                    self.match(TSqlParser.FIRST)
                    pass
                elif token in [TSqlParser.LAST]:
                    self.state = 8725
                    self.match(TSqlParser.LAST)
                    pass
                elif token in [TSqlParser.ABSOLUTE, TSqlParser.RELATIVE]:
                    self.state = 8726
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ABSOLUTE or _la==TSqlParser.RELATIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 8727
                    self.expression(0)
                    pass
                elif token in [TSqlParser.FROM]:
                    pass
                else:
                    pass
                self.state = 8730
                self.match(TSqlParser.FROM)


            self.state = 8734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1241,self._ctx)
            if la_ == 1:
                self.state = 8733
                self.match(TSqlParser.GLOBAL)


            self.state = 8736
            self.cursor_name()
            self.state = 8746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 8737
                self.match(TSqlParser.INTO)
                self.state = 8738
                self.match(TSqlParser.LOCAL_ID)
                self.state = 8743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 8739
                    self.match(TSqlParser.COMMA)
                    self.state = 8740
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 8745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 8749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1244,self._ctx)
            if la_ == 1:
                self.state = 8748
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_specialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TSqlParser.SET, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(TSqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(TSqlParser.On_offContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def TRANSACTION(self):
            return self.getToken(TSqlParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(TSqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(TSqlParser.LEVEL, 0)

        def READ(self):
            return self.getToken(TSqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(TSqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(TSqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(TSqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def IDENTITY_INSERT(self):
            return self.getToken(TSqlParser.IDENTITY_INSERT, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def modify_method(self):
            return self.getTypedRuleContext(TSqlParser.Modify_methodContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_set_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_special" ):
                listener.enterSet_special(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_special" ):
                listener.exitSet_special(self)




    def set_special(self):

        localctx = TSqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_set_special)
        try:
            self.state = 8800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8751
                self.match(TSqlParser.SET)
                self.state = 8752
                self.id()
                self.state = 8756
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 8753
                    self.id()
                    pass
                elif token in [TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                    self.state = 8754
                    self.constant_LOCAL_ID()
                    pass
                elif token in [TSqlParser.OFF, TSqlParser.ON]:
                    self.state = 8755
                    self.on_off()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1246,self._ctx)
                if la_ == 1:
                    self.state = 8758
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8761
                self.match(TSqlParser.SET)
                self.state = 8762
                self.match(TSqlParser.TRANSACTION)
                self.state = 8763
                self.match(TSqlParser.ISOLATION)
                self.state = 8764
                self.match(TSqlParser.LEVEL)
                self.state = 8774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1247,self._ctx)
                if la_ == 1:
                    self.state = 8765
                    self.match(TSqlParser.READ)
                    self.state = 8766
                    self.match(TSqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 8767
                    self.match(TSqlParser.READ)
                    self.state = 8768
                    self.match(TSqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 8769
                    self.match(TSqlParser.REPEATABLE)
                    self.state = 8770
                    self.match(TSqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 8771
                    self.match(TSqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 8772
                    self.match(TSqlParser.SERIALIZABLE)
                    pass

                elif la_ == 6:
                    self.state = 8773
                    self.match(TSqlParser.DECIMAL)
                    pass


                self.state = 8777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1248,self._ctx)
                if la_ == 1:
                    self.state = 8776
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8779
                self.match(TSqlParser.SET)
                self.state = 8780
                self.match(TSqlParser.IDENTITY_INSERT)
                self.state = 8781
                self.table_name()
                self.state = 8782
                self.on_off()
                self.state = 8784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1249,self._ctx)
                if la_ == 1:
                    self.state = 8783
                    self.match(TSqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8786
                self.match(TSqlParser.SET)
                self.state = 8787
                self.match(TSqlParser.ANSI_NULLS)
                self.state = 8788
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8789
                self.match(TSqlParser.SET)
                self.state = 8790
                self.match(TSqlParser.QUOTED_IDENTIFIER)
                self.state = 8791
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8792
                self.match(TSqlParser.SET)
                self.state = 8793
                self.match(TSqlParser.ANSI_PADDING)
                self.state = 8794
                self.on_off()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8795
                self.match(TSqlParser.SET)
                self.state = 8796
                self.match(TSqlParser.ANSI_WARNINGS)
                self.state = 8797
                self.on_off()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8798
                self.match(TSqlParser.SET)
                self.state = 8799
                self.modify_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_LOCAL_IDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_constant_LOCAL_ID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_LOCAL_ID" ):
                listener.enterConstant_LOCAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_LOCAL_ID" ):
                listener.exitConstant_LOCAL_ID(self)




    def constant_LOCAL_ID(self):

        localctx = TSqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 8804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8802
                self.constant()
                pass
            elif token in [TSqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8803
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def primitive_expression(self):
            return self.getTypedRuleContext(TSqlParser.Primitive_expressionContext,0)


        def function_call(self):
            return self.getTypedRuleContext(TSqlParser.Function_callContext,0)


        def case_expression(self):
            return self.getTypedRuleContext(TSqlParser.Case_expressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def bracket_expression(self):
            return self.getTypedRuleContext(TSqlParser.Bracket_expressionContext,0)


        def unary_operator_expression(self):
            return self.getTypedRuleContext(TSqlParser.Unary_operator_expressionContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(TSqlParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(TSqlParser.MODULE, 0)

        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def BIT_AND(self):
            return self.getToken(TSqlParser.BIT_AND, 0)

        def BIT_XOR(self):
            return self.getToken(TSqlParser.BIT_XOR, 0)

        def BIT_OR(self):
            return self.getToken(TSqlParser.BIT_OR, 0)

        def DOUBLE_BAR(self):
            return self.getToken(TSqlParser.DOUBLE_BAR, 0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TSqlParser.Comparison_operatorContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def COLLATE(self):
            return self.getToken(TSqlParser.COLLATE, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TSqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 714
        self.enterRecursionRule(localctx, 714, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1252,self._ctx)
            if la_ == 1:
                self.state = 8807
                self.primitive_expression()
                pass

            elif la_ == 2:
                self.state = 8808
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 8809
                self.case_expression()
                pass

            elif la_ == 4:
                self.state = 8810
                self.full_column_name()
                pass

            elif la_ == 5:
                self.state = 8811
                self.bracket_expression()
                pass

            elif la_ == 6:
                self.state = 8812
                self.unary_operator_expression()
                pass

            elif la_ == 7:
                self.state = 8813
                self.over_clause()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 8835
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 8833
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1253,self._ctx)
                    if la_ == 1:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 8816
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 8817
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 824)) & ~0x3f) == 0 and ((1 << (_la - 824)) & ((1 << (TSqlParser.STAR - 824)) | (1 << (TSqlParser.DIVIDE - 824)) | (1 << (TSqlParser.MODULE - 824)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 8818
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 8819
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 8820
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 813)) & ~0x3f) == 0 and ((1 << (_la - 813)) & ((1 << (TSqlParser.DOUBLE_BAR - 813)) | (1 << (TSqlParser.PLUS - 813)) | (1 << (TSqlParser.MINUS - 813)) | (1 << (TSqlParser.BIT_OR - 813)) | (1 << (TSqlParser.BIT_AND - 813)) | (1 << (TSqlParser.BIT_XOR - 813)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 8821
                        self.expression(5)
                        pass

                    elif la_ == 3:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 8822
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 8823
                        self.comparison_operator()
                        self.state = 8824
                        self.expression(4)
                        pass

                    elif la_ == 4:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 8826
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 8827
                        self.assignment_operator()
                        self.state = 8828
                        self.expression(3)
                        pass

                    elif la_ == 5:
                        localctx = TSqlParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 8830
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 8831
                        self.match(TSqlParser.COLLATE)
                        self.state = 8832
                        self.id()
                        pass

             
                self.state = 8837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Primitive_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_primitive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)




    def primitive_expression(self):

        localctx = TSqlParser.Primitive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_primitive_expression)
        try:
            self.state = 8842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8838
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [TSqlParser.NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8839
                self.match(TSqlParser.NULL)
                pass
            elif token in [TSqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8840
                self.match(TSqlParser.LOCAL_ID)
                pass
            elif token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8841
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext

        def CASE(self):
            return self.getToken(TSqlParser.CASE, 0)

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Switch_sectionContext,i)


        def ELSE(self):
            return self.getToken(TSqlParser.ELSE, 0)

        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Switch_search_condition_sectionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_case_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)




    def case_expression(self):

        localctx = TSqlParser.Case_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_case_expression)
        self._la = 0 # Token type
        try:
            self.state = 8869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1260,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8844
                self.match(TSqlParser.CASE)
                self.state = 8845
                localctx.caseExpr = self.expression(0)
                self.state = 8847 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 8846
                    self.switch_section()
                    self.state = 8849 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.WHEN):
                        break

                self.state = 8853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ELSE:
                    self.state = 8851
                    self.match(TSqlParser.ELSE)
                    self.state = 8852
                    localctx.elseExpr = self.expression(0)


                self.state = 8855
                self.match(TSqlParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8857
                self.match(TSqlParser.CASE)
                self.state = 8859 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 8858
                    self.switch_search_condition_section()
                    self.state = 8861 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==TSqlParser.WHEN):
                        break

                self.state = 8865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ELSE:
                    self.state = 8863
                    self.match(TSqlParser.ELSE)
                    self.state = 8864
                    localctx.elseExpr = self.expression(0)


                self.state = 8867
                self.match(TSqlParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operator_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def BIT_NOT(self):
            return self.getToken(TSqlParser.BIT_NOT, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_unary_operator_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression" ):
                listener.enterUnary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression" ):
                listener.exitUnary_operator_expression(self)




    def unary_operator_expression(self):

        localctx = TSqlParser.Unary_operator_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_unary_operator_expression)
        self._la = 0 # Token type
        try:
            self.state = 8875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.BIT_NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8871
                self.match(TSqlParser.BIT_NOT)
                self.state = 8872
                self.expression(0)
                pass
            elif token in [TSqlParser.PLUS, TSqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8873
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TSqlParser.PLUS or _la==TSqlParser.MINUS):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8874
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = TSqlParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_bracket_expression)
        try:
            self.state = 8885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8877
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8878
                self.expression(0)
                self.state = 8879
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8881
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8882
                self.subquery()
                self.state = 8883
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(TSqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(TSqlParser.Constant_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)




    def constant_expression(self):

        localctx = TSqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_constant_expression)
        try:
            self.state = 8895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1263,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8887
                self.match(TSqlParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8888
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8889
                self.function_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8890
                self.match(TSqlParser.LOCAL_ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8891
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8892
                self.constant_expression()
                self.state = 8893
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = TSqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8897
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(TSqlParser.XMLNAMESPACES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def BLOCKING_HIERARCHY(self):
            return self.getToken(TSqlParser.BLOCKING_HIERARCHY, 0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def full_column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_name_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)




    def with_expression(self):

        localctx = TSqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.state = 8925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8899
                self.match(TSqlParser.WITH)
                self.state = 8902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1264,self._ctx)
                if la_ == 1:
                    self.state = 8900
                    self.match(TSqlParser.XMLNAMESPACES)
                    self.state = 8901
                    self.match(TSqlParser.COMMA)


                self.state = 8904
                self.common_table_expression()
                self.state = 8909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 8905
                    self.match(TSqlParser.COMMA)
                    self.state = 8906
                    self.common_table_expression()
                    self.state = 8911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8912
                self.match(TSqlParser.WITH)
                self.state = 8913
                self.match(TSqlParser.BLOCKING_HIERARCHY)
                self.state = 8918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 8914
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 8915
                    self.full_column_name_list()
                    self.state = 8916
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 8920
                self.match(TSqlParser.AS)
                self.state = 8921
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8922
                self.select_statement()
                self.state = 8923
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # IdContext

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def select_statement(self):
            return self.getTypedRuleContext(TSqlParser.Select_statementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = TSqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8927
            localctx.expression_name = self.id()
            self.state = 8932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.LR_BRACKET:
                self.state = 8928
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8929
                self.column_name_list()
                self.state = 8930
                self.match(TSqlParser.RR_BRACKET)


            self.state = 8934
            self.match(TSqlParser.AS)
            self.state = 8935
            self.match(TSqlParser.LR_BRACKET)
            self.state = 8936
            self.select_statement()
            self.state = 8937
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # IdContext
            self.method_name = None # IdContext

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(TSqlParser.Assignment_operatorContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_update_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem" ):
                listener.enterUpdate_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem" ):
                listener.exitUpdate_elem(self)




    def update_elem(self):

        localctx = TSqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_update_elem)
        try:
            self.state = 8955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8941
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 8939
                    self.full_column_name()
                    pass
                elif token in [TSqlParser.LOCAL_ID]:
                    self.state = 8940
                    self.match(TSqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8945
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.EQUAL]:
                    self.state = 8943
                    self.match(TSqlParser.EQUAL)
                    pass
                elif token in [TSqlParser.PLUS_ASSIGN, TSqlParser.MINUS_ASSIGN, TSqlParser.MULT_ASSIGN, TSqlParser.DIV_ASSIGN, TSqlParser.MOD_ASSIGN, TSqlParser.AND_ASSIGN, TSqlParser.XOR_ASSIGN, TSqlParser.OR_ASSIGN]:
                    self.state = 8944
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8947
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8948
                localctx.udt_column_name = self.id()
                self.state = 8949
                self.match(TSqlParser.DOT)
                self.state = 8950
                localctx.method_name = self.id()
                self.state = 8951
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8952
                self.expression_list()
                self.state = 8953
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_condition_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_list" ):
                listener.enterSearch_condition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_list" ):
                listener.exitSearch_condition_list(self)




    def search_condition_list(self):

        localctx = TSqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8957
            self.search_condition()
            self.state = 8962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 8958
                self.match(TSqlParser.COMMA)
                self.state = 8959
                self.search_condition()
                self.state = 8964
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_condition_andContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_condition_andContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.OR)
            else:
                return self.getToken(TSqlParser.OR, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)




    def search_condition(self):

        localctx = TSqlParser.Search_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_search_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8965
            self.search_condition_and()
            self.state = 8970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.OR:
                self.state = 8966
                self.match(TSqlParser.OR)
                self.state = 8967
                self.search_condition_and()
                self.state = 8972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_condition_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition_not(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_condition_notContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_condition_notContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.AND)
            else:
                return self.getToken(TSqlParser.AND, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_and" ):
                listener.enterSearch_condition_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_and" ):
                listener.exitSearch_condition_and(self)




    def search_condition_and(self):

        localctx = TSqlParser.Search_condition_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_search_condition_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8973
            self.search_condition_not()
            self.state = 8978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.AND:
                self.state = 8974
                self.match(TSqlParser.AND)
                self.state = 8975
                self.search_condition_not()
                self.state = 8980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_condition_notContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(TSqlParser.PredicateContext,0)


        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_search_condition_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_not" ):
                listener.enterSearch_condition_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_not" ):
                listener.exitSearch_condition_not(self)




    def search_condition_not(self):

        localctx = TSqlParser.Search_condition_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_search_condition_not)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.NOT:
                self.state = 8981
                self.match(TSqlParser.NOT)


            self.state = 8984
            self.predicate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(TSqlParser.EXISTS, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def comparison_operator(self):
            return self.getTypedRuleContext(TSqlParser.Comparison_operatorContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def SOME(self):
            return self.getToken(TSqlParser.SOME, 0)

        def ANY(self):
            return self.getToken(TSqlParser.ANY, 0)

        def BETWEEN(self):
            return self.getToken(TSqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def LIKE(self):
            return self.getToken(TSqlParser.LIKE, 0)

        def ESCAPE(self):
            return self.getToken(TSqlParser.ESCAPE, 0)

        def IS(self):
            return self.getToken(TSqlParser.IS, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = TSqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 9041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8986
                self.match(TSqlParser.EXISTS)
                self.state = 8987
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8988
                self.subquery()
                self.state = 8989
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8991
                self.expression(0)
                self.state = 8992
                self.comparison_operator()
                self.state = 8993
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8995
                self.expression(0)
                self.state = 8996
                self.comparison_operator()
                self.state = 8997
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.ANY or _la==TSqlParser.SOME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8998
                self.match(TSqlParser.LR_BRACKET)
                self.state = 8999
                self.subquery()
                self.state = 9000
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9002
                self.expression(0)
                self.state = 9004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 9003
                    self.match(TSqlParser.NOT)


                self.state = 9006
                self.match(TSqlParser.BETWEEN)
                self.state = 9007
                self.expression(0)
                self.state = 9008
                self.match(TSqlParser.AND)
                self.state = 9009
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9011
                self.expression(0)
                self.state = 9013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 9012
                    self.match(TSqlParser.NOT)


                self.state = 9015
                self.match(TSqlParser.IN)
                self.state = 9016
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1278,self._ctx)
                if la_ == 1:
                    self.state = 9017
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 9018
                    self.expression_list()
                    pass


                self.state = 9021
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9023
                self.expression(0)
                self.state = 9025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.NOT:
                    self.state = 9024
                    self.match(TSqlParser.NOT)


                self.state = 9027
                self.match(TSqlParser.LIKE)
                self.state = 9028
                self.expression(0)
                self.state = 9031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ESCAPE:
                    self.state = 9029
                    self.match(TSqlParser.ESCAPE)
                    self.state = 9030
                    self.expression(0)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 9033
                self.expression(0)
                self.state = 9034
                self.match(TSqlParser.IS)
                self.state = 9035
                self.null_notnull()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 9037
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9038
                self.search_condition()
                self.state = 9039
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_specification(self):
            return self.getTypedRuleContext(TSqlParser.Query_specificationContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def query_expression(self):
            return self.getTypedRuleContext(TSqlParser.Query_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def sql_union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Sql_unionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Sql_unionContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = TSqlParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.SELECT]:
                self.state = 9043
                self.query_specification()
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.state = 9044
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9045
                self.query_expression()
                self.state = 9046
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9050
                    self.sql_union() 
                self.state = 9055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1283,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_unionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(TSqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(TSqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TSqlParser.INTERSECT, 0)

        def query_specification(self):
            return self.getTypedRuleContext(TSqlParser.Query_specificationContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def query_expression(self):
            return self.getTypedRuleContext(TSqlParser.Query_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_sql_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_union" ):
                listener.enterSql_union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_union" ):
                listener.exitSql_union(self)




    def sql_union(self):

        localctx = TSqlParser.Sql_unionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_sql_union)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UNION]:
                self.state = 9056
                self.match(TSqlParser.UNION)
                self.state = 9058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ALL:
                    self.state = 9057
                    self.match(TSqlParser.ALL)


                pass
            elif token in [TSqlParser.EXCEPT]:
                self.state = 9060
                self.match(TSqlParser.EXCEPT)
                pass
            elif token in [TSqlParser.INTERSECT]:
                self.state = 9061
                self.match(TSqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.SELECT]:
                self.state = 9064
                self.query_specification()
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.state = 9065
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9066
                self.query_expression()
                self.state = 9067
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(TSqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(TSqlParser.Select_listContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(TSqlParser.Top_clauseContext,0)


        def INTO(self):
            return self.getToken(TSqlParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(TSqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Group_by_itemContext,i)


        def HAVING(self):
            return self.getToken(TSqlParser.HAVING, 0)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ALL)
            else:
                return self.getToken(TSqlParser.ALL, i)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Search_conditionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)




    def query_specification(self):

        localctx = TSqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9071
            self.match(TSqlParser.SELECT)
            self.state = 9073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ALL or _la==TSqlParser.DISTINCT:
                self.state = 9072
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 9076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.TOP:
                self.state = 9075
                self.top_clause()


            self.state = 9078
            self.select_list()
            self.state = 9081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.INTO:
                self.state = 9079
                self.match(TSqlParser.INTO)
                self.state = 9080
                self.table_name()


            self.state = 9085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FROM:
                self.state = 9083
                self.match(TSqlParser.FROM)
                self.state = 9084
                self.table_sources()


            self.state = 9089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1291,self._ctx)
            if la_ == 1:
                self.state = 9087
                self.match(TSqlParser.WHERE)
                self.state = 9088
                localctx.where = self.search_condition()


            self.state = 9104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1294,self._ctx)
            if la_ == 1:
                self.state = 9091
                self.match(TSqlParser.GROUP)
                self.state = 9092
                self.match(TSqlParser.BY)
                self.state = 9094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ALL:
                    self.state = 9093
                    self.match(TSqlParser.ALL)


                self.state = 9096
                self.group_by_item()
                self.state = 9101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1293,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9097
                        self.match(TSqlParser.COMMA)
                        self.state = 9098
                        self.group_by_item() 
                    self.state = 9103
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1293,self._ctx)



            self.state = 9108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1295,self._ctx)
            if la_ == 1:
                self.state = 9106
                self.match(TSqlParser.HAVING)
                self.state = 9107
                localctx.having = self.search_condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TSqlParser.TOP, 0)

        def top_percent(self):
            return self.getTypedRuleContext(TSqlParser.Top_percentContext,0)


        def top_count(self):
            return self.getTypedRuleContext(TSqlParser.Top_countContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(TSqlParser.TIES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)




    def top_clause(self):

        localctx = TSqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9110
            self.match(TSqlParser.TOP)
            self.state = 9113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1296,self._ctx)
            if la_ == 1:
                self.state = 9111
                self.top_percent()
                pass

            elif la_ == 2:
                self.state = 9112
                self.top_count()
                pass


            self.state = 9117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 9115
                self.match(TSqlParser.WITH)
                self.state = 9116
                self.match(TSqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_percentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(TSqlParser.PERCENT, 0)

        def REAL(self):
            return self.getToken(TSqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(TSqlParser.FLOAT, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_top_percent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_percent" ):
                listener.enterTop_percent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_percent" ):
                listener.exitTop_percent(self)




    def top_percent(self):

        localctx = TSqlParser.Top_percentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_top_percent)
        self._la = 0 # Token type
        try:
            self.state = 9126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FLOAT, TSqlParser.REAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9119
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FLOAT or _la==TSqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9120
                self.match(TSqlParser.PERCENT)
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9121
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9122
                self.expression(0)
                self.state = 9123
                self.match(TSqlParser.RR_BRACKET)
                self.state = 9124
                self.match(TSqlParser.PERCENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_countContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_top_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_count" ):
                listener.enterTop_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_count" ):
                listener.exitTop_count(self)




    def top_count(self):

        localctx = TSqlParser.Top_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_top_count)
        try:
            self.state = 9133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9128
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9129
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9130
                self.expression(0)
                self.state = 9131
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TSqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Order_by_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def OFFSET(self):
            return self.getToken(TSqlParser.OFFSET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ROW)
            else:
                return self.getToken(TSqlParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ROWS)
            else:
                return self.getToken(TSqlParser.ROWS, i)

        def FETCH(self):
            return self.getToken(TSqlParser.FETCH, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = TSqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9135
            self.match(TSqlParser.ORDER)
            self.state = 9136
            self.match(TSqlParser.BY)
            self.state = 9137
            self.order_by_expression()
            self.state = 9142
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9138
                    self.match(TSqlParser.COMMA)
                    self.state = 9139
                    self.order_by_expression() 
                self.state = 9144
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1300,self._ctx)

            self.state = 9156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1302,self._ctx)
            if la_ == 1:
                self.state = 9145
                self.match(TSqlParser.OFFSET)
                self.state = 9146
                self.expression(0)
                self.state = 9147
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ROW or _la==TSqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1301,self._ctx)
                if la_ == 1:
                    self.state = 9148
                    self.match(TSqlParser.FETCH)
                    self.state = 9149
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.FIRST or _la==TSqlParser.NEXT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9150
                    self.expression(0)
                    self.state = 9151
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ROW or _la==TSqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9152
                    self.match(TSqlParser.ONLY)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(TSqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def RAW(self):
            return self.getToken(TSqlParser.RAW, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def xml_common_directives(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Xml_common_directivesContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Xml_common_directivesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ELEMENTS(self):
            return self.getToken(TSqlParser.ELEMENTS, 0)

        def XSINIL(self):
            return self.getToken(TSqlParser.XSINIL, 0)

        def ABSENT(self):
            return self.getToken(TSqlParser.ABSENT, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def XMLDATA(self):
            return self.getToken(TSqlParser.XMLDATA, 0)

        def XMLSCHEMA(self):
            return self.getToken(TSqlParser.XMLSCHEMA, 0)

        def EXPLICIT(self):
            return self.getToken(TSqlParser.EXPLICIT, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def JSON(self):
            return self.getToken(TSqlParser.JSON, 0)

        def ROOT(self):
            return self.getToken(TSqlParser.ROOT, 0)

        def INCLUDE_NULL_VALUES(self):
            return self.getToken(TSqlParser.INCLUDE_NULL_VALUES, 0)

        def WITHOUT_ARRAY_WRAPPER(self):
            return self.getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_clause" ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_clause" ):
                listener.exitFor_clause(self)




    def for_clause(self):

        localctx = TSqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_for_clause)
        self._la = 0 # Token type
        try:
            self.state = 9246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1319,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9158
                self.match(TSqlParser.FOR)
                self.state = 9159
                self.match(TSqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9160
                self.match(TSqlParser.FOR)
                self.state = 9161
                self.match(TSqlParser.XML)
                self.state = 9169
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.RAW]:
                    self.state = 9162
                    self.match(TSqlParser.RAW)
                    self.state = 9166
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1303,self._ctx)
                    if la_ == 1:
                        self.state = 9163
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 9164
                        self.match(TSqlParser.STRING)
                        self.state = 9165
                        self.match(TSqlParser.RR_BRACKET)


                    pass
                elif token in [TSqlParser.AUTO]:
                    self.state = 9168
                    self.match(TSqlParser.AUTO)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9174
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1305,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9171
                        self.xml_common_directives() 
                    self.state = 9176
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1305,self._ctx)

                self.state = 9187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1308,self._ctx)
                if la_ == 1:
                    self.state = 9177
                    self.match(TSqlParser.COMMA)
                    self.state = 9185
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [TSqlParser.XMLDATA]:
                        self.state = 9178
                        self.match(TSqlParser.XMLDATA)
                        pass
                    elif token in [TSqlParser.XMLSCHEMA]:
                        self.state = 9179
                        self.match(TSqlParser.XMLSCHEMA)
                        self.state = 9183
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1306,self._ctx)
                        if la_ == 1:
                            self.state = 9180
                            self.match(TSqlParser.LR_BRACKET)
                            self.state = 9181
                            self.match(TSqlParser.STRING)
                            self.state = 9182
                            self.match(TSqlParser.RR_BRACKET)


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 9192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1309,self._ctx)
                if la_ == 1:
                    self.state = 9189
                    self.match(TSqlParser.COMMA)
                    self.state = 9190
                    self.match(TSqlParser.ELEMENTS)
                    self.state = 9191
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ABSENT or _la==TSqlParser.XSINIL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9194
                self.match(TSqlParser.FOR)
                self.state = 9195
                self.match(TSqlParser.XML)
                self.state = 9196
                self.match(TSqlParser.EXPLICIT)
                self.state = 9200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1310,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9197
                        self.xml_common_directives() 
                    self.state = 9202
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1310,self._ctx)

                self.state = 9205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1311,self._ctx)
                if la_ == 1:
                    self.state = 9203
                    self.match(TSqlParser.COMMA)
                    self.state = 9204
                    self.match(TSqlParser.XMLDATA)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9207
                self.match(TSqlParser.FOR)
                self.state = 9208
                self.match(TSqlParser.XML)
                self.state = 9209
                self.match(TSqlParser.PATH)
                self.state = 9213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1312,self._ctx)
                if la_ == 1:
                    self.state = 9210
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 9211
                    self.match(TSqlParser.STRING)
                    self.state = 9212
                    self.match(TSqlParser.RR_BRACKET)


                self.state = 9218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1313,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9215
                        self.xml_common_directives() 
                    self.state = 9220
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1313,self._ctx)

                self.state = 9224
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1314,self._ctx)
                if la_ == 1:
                    self.state = 9221
                    self.match(TSqlParser.COMMA)
                    self.state = 9222
                    self.match(TSqlParser.ELEMENTS)
                    self.state = 9223
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ABSENT or _la==TSqlParser.XSINIL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9226
                self.match(TSqlParser.FOR)
                self.state = 9227
                self.match(TSqlParser.JSON)
                self.state = 9228
                _la = self._input.LA(1)
                if not(_la==TSqlParser.AUTO or _la==TSqlParser.PATH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1316,self._ctx)
                if la_ == 1:
                    self.state = 9229
                    self.match(TSqlParser.COMMA)
                    self.state = 9230
                    self.match(TSqlParser.ROOT)
                    self.state = 9234
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1315,self._ctx)
                    if la_ == 1:
                        self.state = 9231
                        self.match(TSqlParser.LR_BRACKET)
                        self.state = 9232
                        self.match(TSqlParser.STRING)
                        self.state = 9233
                        self.match(TSqlParser.RR_BRACKET)




                self.state = 9240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1317,self._ctx)
                if la_ == 1:
                    self.state = 9238
                    self.match(TSqlParser.COMMA)
                    self.state = 9239
                    self.match(TSqlParser.INCLUDE_NULL_VALUES)


                self.state = 9244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1318,self._ctx)
                if la_ == 1:
                    self.state = 9242
                    self.match(TSqlParser.COMMA)
                    self.state = 9243
                    self.match(TSqlParser.WITHOUT_ARRAY_WRAPPER)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_common_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def BINARY_BASE64(self):
            return self.getToken(TSqlParser.BINARY_BASE64, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(TSqlParser.ROOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_xml_common_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_common_directives" ):
                listener.enterXml_common_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_common_directives" ):
                listener.exitXml_common_directives(self)




    def xml_common_directives(self):

        localctx = TSqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_xml_common_directives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9248
            self.match(TSqlParser.COMMA)
            self.state = 9249
            _la = self._input.LA(1)
            if not(_la==TSqlParser.BINARY_BASE64 or _la==TSqlParser.ROOT or _la==TSqlParser.TYPE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(TSqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(TSqlParser.DESC, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_order_by_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expression" ):
                listener.enterOrder_by_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expression" ):
                listener.exitOrder_by_expression(self)




    def order_by_expression(self):

        localctx = TSqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9251
            self.expression(0)
            self.state = 9253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ASC or _la==TSqlParser.DESC:
                self.state = 9252
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ASC or _la==TSqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)




    def group_by_item(self):

        localctx = TSqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9255
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(TSqlParser.OPTION, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.OptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_option_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_clause" ):
                listener.enterOption_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_clause" ):
                listener.exitOption_clause(self)




    def option_clause(self):

        localctx = TSqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9257
            self.match(TSqlParser.OPTION)
            self.state = 9258
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9259
            self.option()
            self.state = 9264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 9260
                self.match(TSqlParser.COMMA)
                self.state = 9261
                self.option()
                self.state = 9266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9267
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(TSqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(TSqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(TSqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(TSqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(TSqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(TSqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(TSqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(TSqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(TSqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(TSqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(TSqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Optimize_for_argContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(TSqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(TSqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(TSqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(TSqlParser.USE, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)




    def option(self):

        localctx = TSqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 9314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1323,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9269
                self.match(TSqlParser.FAST)
                self.state = 9270
                localctx.number_rows = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9271
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ORDER or _la==TSqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9272
                self.match(TSqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9273
                _la = self._input.LA(1)
                if not(_la==TSqlParser.MERGE or _la==TSqlParser.CONCAT or _la==TSqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9274
                self.match(TSqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9275
                _la = self._input.LA(1)
                if not(_la==TSqlParser.MERGE or _la==TSqlParser.HASH or _la==TSqlParser.LOOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9276
                self.match(TSqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9277
                self.match(TSqlParser.EXPAND)
                self.state = 9278
                self.match(TSqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9279
                self.match(TSqlParser.FORCE)
                self.state = 9280
                self.match(TSqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 9281
                self.match(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 9282
                self.match(TSqlParser.KEEP)
                self.state = 9283
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 9284
                self.match(TSqlParser.KEEPFIXED)
                self.state = 9285
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 9286
                self.match(TSqlParser.MAXDOP)
                self.state = 9287
                localctx.number_of_processors = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 9288
                self.match(TSqlParser.MAXRECURSION)
                self.state = 9289
                localctx.number_recursion = self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 9290
                self.match(TSqlParser.OPTIMIZE)
                self.state = 9291
                self.match(TSqlParser.FOR)
                self.state = 9292
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9293
                self.optimize_for_arg()
                self.state = 9298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==TSqlParser.COMMA:
                    self.state = 9294
                    self.match(TSqlParser.COMMA)
                    self.state = 9295
                    self.optimize_for_arg()
                    self.state = 9300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9301
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 9303
                self.match(TSqlParser.OPTIMIZE)
                self.state = 9304
                self.match(TSqlParser.FOR)
                self.state = 9305
                self.match(TSqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 9306
                self.match(TSqlParser.PARAMETERIZATION)
                self.state = 9307
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FORCED or _la==TSqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 9308
                self.match(TSqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 9309
                self.match(TSqlParser.ROBUST)
                self.state = 9310
                self.match(TSqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 9311
                self.match(TSqlParser.USE)
                self.state = 9312
                self.match(TSqlParser.PLAN)
                self.state = 9313
                self.match(TSqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Optimize_for_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_optimize_for_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_for_arg" ):
                listener.enterOptimize_for_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_for_arg" ):
                listener.exitOptimize_for_arg(self)




    def optimize_for_arg(self):

        localctx = TSqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9316
            self.match(TSqlParser.LOCAL_ID)
            self.state = 9323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UNKNOWN]:
                self.state = 9317
                self.match(TSqlParser.UNKNOWN)
                pass
            elif token in [TSqlParser.EQUAL]:
                self.state = 9318
                self.match(TSqlParser.EQUAL)
                self.state = 9321
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                    self.state = 9319
                    self.constant()
                    pass
                elif token in [TSqlParser.NULL]:
                    self.state = 9320
                    self.match(TSqlParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Select_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = TSqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9325
            self.select_list_elem()
            self.state = 9330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9326
                    self.match(TSqlParser.COMMA)
                    self.state = 9327
                    self.select_list_elem() 
                self.state = 9332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1326,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_method_argumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Execute_var_stringContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_udt_method_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_method_arguments" ):
                listener.enterUdt_method_arguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_method_arguments" ):
                listener.exitUdt_method_arguments(self)




    def udt_method_arguments(self):

        localctx = TSqlParser.Udt_method_argumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_udt_method_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9333
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9334
            self.execute_var_string()
            self.state = 9339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 9335
                self.match(TSqlParser.COMMA)
                self.state = 9336
                self.execute_var_string()
                self.state = 9341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9342
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsteriskContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def asterisk(self):
            return self.getTypedRuleContext(TSqlParser.AsteriskContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_asterisk

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsterisk" ):
                listener.enterAsterisk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsterisk" ):
                listener.exitAsterisk(self)




    def asterisk(self):

        localctx = TSqlParser.AsteriskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_asterisk)
        try:
            self.state = 9349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9344
                self.match(TSqlParser.STAR)
                pass
            elif token in [TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9345
                self.table_name()
                self.state = 9346
                self.match(TSqlParser.DOT)
                self.state = 9347
                self.asterisk()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_name = None # IdContext

        def DOLLAR(self):
            return self.getToken(TSqlParser.DOLLAR, 0)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(TSqlParser.ROWGUID, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_column_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_elem" ):
                listener.enterColumn_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_elem" ):
                listener.exitColumn_elem(self)




    def column_elem(self):

        localctx = TSqlParser.Column_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_column_elem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1329,self._ctx)
            if la_ == 1:
                self.state = 9351
                self.table_name()
                self.state = 9352
                self.match(TSqlParser.DOT)


            self.state = 9361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1330,self._ctx)
            if la_ == 1:
                self.state = 9356
                localctx.column_name = self.id()
                pass

            elif la_ == 2:
                self.state = 9357
                self.match(TSqlParser.DOLLAR)
                self.state = 9358
                self.match(TSqlParser.IDENTITY)
                pass

            elif la_ == 3:
                self.state = 9359
                self.match(TSqlParser.DOLLAR)
                self.state = 9360
                self.match(TSqlParser.ROWGUID)
                pass


            self.state = 9364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1331,self._ctx)
            if la_ == 1:
                self.state = 9363
                self.as_column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # IdContext
            self.non_static_attr = None # IdContext
            self.static_attr = None # IdContext

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def udt_method_arguments(self):
            return self.getTypedRuleContext(TSqlParser.Udt_method_argumentsContext,0)


        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLON)
            else:
                return self.getToken(TSqlParser.COLON, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_udt_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_elem" ):
                listener.enterUdt_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_elem" ):
                listener.exitUdt_elem(self)




    def udt_elem(self):

        localctx = TSqlParser.Udt_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_udt_elem)
        try:
            self.state = 9383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9366
                localctx.udt_column_name = self.id()
                self.state = 9367
                self.match(TSqlParser.DOT)
                self.state = 9368
                localctx.non_static_attr = self.id()
                self.state = 9369
                self.udt_method_arguments()
                self.state = 9371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1332,self._ctx)
                if la_ == 1:
                    self.state = 9370
                    self.as_column_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9373
                localctx.udt_column_name = self.id()
                self.state = 9374
                self.match(TSqlParser.COLON)
                self.state = 9375
                self.match(TSqlParser.COLON)
                self.state = 9376
                localctx.static_attr = self.id()
                self.state = 9378
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1333,self._ctx)
                if la_ == 1:
                    self.state = 9377
                    self.udt_method_arguments()


                self.state = 9381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1334,self._ctx)
                if la_ == 1:
                    self.state = 9380
                    self.as_column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.eq = None # Token

        def column_alias(self):
            return self.getTypedRuleContext(TSqlParser.Column_aliasContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def as_column_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_column_aliasContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_expression_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_elem" ):
                listener.enterExpression_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_elem" ):
                listener.exitExpression_elem(self)




    def expression_elem(self):

        localctx = TSqlParser.Expression_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_expression_elem)
        try:
            self.state = 9393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9385
                self.column_alias()
                self.state = 9386
                localctx.eq = self.match(TSqlParser.EQUAL)
                self.state = 9387
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9389
                self.expression(0)
                self.state = 9391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1336,self._ctx)
                if la_ == 1:
                    self.state = 9390
                    self.as_column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asterisk(self):
            return self.getTypedRuleContext(TSqlParser.AsteriskContext,0)


        def column_elem(self):
            return self.getTypedRuleContext(TSqlParser.Column_elemContext,0)


        def udt_elem(self):
            return self.getTypedRuleContext(TSqlParser.Udt_elemContext,0)


        def expression_elem(self):
            return self.getTypedRuleContext(TSqlParser.Expression_elemContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)




    def select_list_elem(self):

        localctx = TSqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_select_list_elem)
        try:
            self.state = 9399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1338,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9395
                self.asterisk()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9396
                self.column_elem()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9397
                self.udt_elem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9398
                self.expression_elem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_sourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)




    def table_sources(self):

        localctx = TSqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9401
            self.table_source()
            self.state = 9406
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1339,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9402
                    self.match(TSqlParser.COMMA)
                    self.state = 9403
                    self.table_source() 
                self.state = 9408
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1339,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item_joined(self):
            return self.getTypedRuleContext(TSqlParser.Table_source_item_joinedContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source" ):
                listener.enterTable_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source" ):
                listener.exitTable_source(self)




    def table_source(self):

        localctx = TSqlParser.Table_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_table_source)
        try:
            self.state = 9414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9409
                self.table_source_item_joined()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9410
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9411
                self.table_source_item_joined()
                self.state = 9412
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_source_item_joinedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item(self):
            return self.getTypedRuleContext(TSqlParser.Table_source_itemContext,0)


        def join_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Join_partContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Join_partContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_source_item_joined

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_joined" ):
                listener.enterTable_source_item_joined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_joined" ):
                listener.exitTable_source_item_joined(self)




    def table_source_item_joined(self):

        localctx = TSqlParser.Table_source_item_joinedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_table_source_item_joined)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9416
            self.table_source_item()
            self.state = 9420
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1341,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9417
                    self.join_part() 
                self.state = 9422
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1341,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_source_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name_with_hint(self):
            return self.getTypedRuleContext(TSqlParser.Table_name_with_hintContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def rowset_function(self):
            return self.getTypedRuleContext(TSqlParser.Rowset_functionContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(TSqlParser.Derived_tableContext,0)


        def column_alias_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_alias_listContext,0)


        def change_table(self):
            return self.getTypedRuleContext(TSqlParser.Change_tableContext,0)


        def function_call(self):
            return self.getTypedRuleContext(TSqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def open_xml(self):
            return self.getTypedRuleContext(TSqlParser.Open_xmlContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COLON)
            else:
                return self.getToken(TSqlParser.COLON, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_source_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item" ):
                listener.enterTable_source_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item" ):
                listener.exitTable_source_item(self)




    def table_source_item(self):

        localctx = TSqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_table_source_item)
        try:
            self.state = 9469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1352,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9423
                self.table_name_with_hint()
                self.state = 9425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1342,self._ctx)
                if la_ == 1:
                    self.state = 9424
                    self.as_table_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9427
                self.full_table_name()
                self.state = 9429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1343,self._ctx)
                if la_ == 1:
                    self.state = 9428
                    self.as_table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9431
                self.rowset_function()
                self.state = 9433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1344,self._ctx)
                if la_ == 1:
                    self.state = 9432
                    self.as_table_alias()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9435
                self.derived_table()
                self.state = 9440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1346,self._ctx)
                if la_ == 1:
                    self.state = 9436
                    self.as_table_alias()
                    self.state = 9438
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1345,self._ctx)
                    if la_ == 1:
                        self.state = 9437
                        self.column_alias_list()




                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9442
                self.change_table()
                self.state = 9443
                self.as_table_alias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9445
                self.function_call()
                self.state = 9447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1347,self._ctx)
                if la_ == 1:
                    self.state = 9446
                    self.as_table_alias()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 9449
                self.match(TSqlParser.LOCAL_ID)
                self.state = 9451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1348,self._ctx)
                if la_ == 1:
                    self.state = 9450
                    self.as_table_alias()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 9453
                self.match(TSqlParser.LOCAL_ID)
                self.state = 9454
                self.match(TSqlParser.DOT)
                self.state = 9455
                self.function_call()
                self.state = 9460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1350,self._ctx)
                if la_ == 1:
                    self.state = 9456
                    self.as_table_alias()
                    self.state = 9458
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1349,self._ctx)
                    if la_ == 1:
                        self.state = 9457
                        self.column_alias_list()




                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 9462
                self.open_xml()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 9463
                self.match(TSqlParser.COLON)
                self.state = 9464
                self.match(TSqlParser.COLON)
                self.state = 9465
                self.function_call()
                self.state = 9467
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1351,self._ctx)
                if la_ == 1:
                    self.state = 9466
                    self.as_table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_xmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENXML(self):
            return self.getToken(TSqlParser.OPENXML, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def schema_declaration(self):
            return self.getTypedRuleContext(TSqlParser.Schema_declarationContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_open_xml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_xml" ):
                listener.enterOpen_xml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_xml" ):
                listener.exitOpen_xml(self)




    def open_xml(self):

        localctx = TSqlParser.Open_xmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_open_xml)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9471
            self.match(TSqlParser.OPENXML)
            self.state = 9472
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9473
            self.expression(0)
            self.state = 9474
            self.match(TSqlParser.COMMA)
            self.state = 9475
            self.expression(0)
            self.state = 9478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 9476
                self.match(TSqlParser.COMMA)
                self.state = 9477
                self.expression(0)


            self.state = 9480
            self.match(TSqlParser.RR_BRACKET)
            self.state = 9486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1354,self._ctx)
            if la_ == 1:
                self.state = 9481
                self.match(TSqlParser.WITH)
                self.state = 9482
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9483
                self.schema_declaration()
                self.state = 9484
                self.match(TSqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_declarationContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_schema_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_declaration" ):
                listener.enterSchema_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_declaration" ):
                listener.exitSchema_declaration(self)




    def schema_declaration(self):

        localctx = TSqlParser.Schema_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_schema_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9488
            self.column_declaration()
            self.state = 9493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 9489
                self.match(TSqlParser.COMMA)
                self.state = 9490
                self.column_declaration()
                self.state = 9495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_declaration" ):
                listener.enterColumn_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_declaration" ):
                listener.exitColumn_declaration(self)




    def column_declaration(self):

        localctx = TSqlParser.Column_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_column_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9496
            self.match(TSqlParser.ID)
            self.state = 9497
            self.data_type()
            self.state = 9499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.STRING:
                self.state = 9498
                self.match(TSqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(TSqlParser.CHANGETABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def CHANGES(self):
            return self.getToken(TSqlParser.CHANGES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_change_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table" ):
                listener.enterChange_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table" ):
                listener.exitChange_table(self)




    def change_table(self):

        localctx = TSqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9501
            self.match(TSqlParser.CHANGETABLE)
            self.state = 9502
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9503
            self.match(TSqlParser.CHANGES)
            self.state = 9504
            self.table_name()
            self.state = 9505
            self.match(TSqlParser.COMMA)
            self.state = 9506
            _la = self._input.LA(1)
            if not(_la==TSqlParser.NULL or _la==TSqlParser.LOCAL_ID or _la==TSqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 9507
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_type = None # Token
            self.join_hint = None # Token

        def JOIN(self):
            return self.getToken(TSqlParser.JOIN, 0)

        def table_source(self):
            return self.getTypedRuleContext(TSqlParser.Table_sourceContext,0)


        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def LEFT(self):
            return self.getToken(TSqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TSqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(TSqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(TSqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(TSqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def CROSS(self):
            return self.getToken(TSqlParser.CROSS, 0)

        def APPLY(self):
            return self.getToken(TSqlParser.APPLY, 0)

        def PIVOT(self):
            return self.getToken(TSqlParser.PIVOT, 0)

        def pivot_clause(self):
            return self.getTypedRuleContext(TSqlParser.Pivot_clauseContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(TSqlParser.As_table_aliasContext,0)


        def UNPIVOT(self):
            return self.getToken(TSqlParser.UNPIVOT, 0)

        def unpivot_clause(self):
            return self.getTypedRuleContext(TSqlParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_join_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_part" ):
                listener.enterJoin_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_part" ):
                listener.exitJoin_part(self)




    def join_part(self):

        localctx = TSqlParser.Join_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_join_part)
        self._la = 0 # Token type
        try:
            self.state = 9543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1361,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9516
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.INNER, TSqlParser.JOIN, TSqlParser.MERGE, TSqlParser.HASH, TSqlParser.LOOP, TSqlParser.REMOTE]:
                    self.state = 9510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.INNER:
                        self.state = 9509
                        self.match(TSqlParser.INNER)


                    pass
                elif token in [TSqlParser.FULL, TSqlParser.LEFT, TSqlParser.RIGHT]:
                    self.state = 9512
                    localctx.join_type = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.FULL or _la==TSqlParser.LEFT or _la==TSqlParser.RIGHT):
                        localctx.join_type = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.OUTER:
                        self.state = 9513
                        self.match(TSqlParser.OUTER)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.MERGE or _la==TSqlParser.HASH or _la==TSqlParser.LOOP or _la==TSqlParser.REMOTE:
                    self.state = 9518
                    localctx.join_hint = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.MERGE or _la==TSqlParser.HASH or _la==TSqlParser.LOOP or _la==TSqlParser.REMOTE):
                        localctx.join_hint = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 9521
                self.match(TSqlParser.JOIN)
                self.state = 9522
                self.table_source()
                self.state = 9523
                self.match(TSqlParser.ON)
                self.state = 9524
                self.search_condition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9526
                self.match(TSqlParser.CROSS)
                self.state = 9527
                self.match(TSqlParser.JOIN)
                self.state = 9528
                self.table_source()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9529
                self.match(TSqlParser.CROSS)
                self.state = 9530
                self.match(TSqlParser.APPLY)
                self.state = 9531
                self.table_source()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9532
                self.match(TSqlParser.OUTER)
                self.state = 9533
                self.match(TSqlParser.APPLY)
                self.state = 9534
                self.table_source()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9535
                self.match(TSqlParser.PIVOT)
                self.state = 9536
                self.pivot_clause()
                self.state = 9537
                self.as_table_alias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9539
                self.match(TSqlParser.UNPIVOT)
                self.state = 9540
                self.unpivot_clause()
                self.state = 9541
                self.as_table_alias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Aggregate_windowed_functionContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def column_alias_list(self):
            return self.getTypedRuleContext(TSqlParser.Column_alias_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)




    def pivot_clause(self):

        localctx = TSqlParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_pivot_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9545
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9546
            self.aggregate_windowed_function()
            self.state = 9547
            self.match(TSqlParser.FOR)
            self.state = 9548
            self.full_column_name()
            self.state = 9549
            self.match(TSqlParser.IN)
            self.state = 9550
            self.column_alias_list()
            self.state = 9551
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def FOR(self):
            return self.getToken(TSqlParser.FOR, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,0)


        def IN(self):
            return self.getToken(TSqlParser.IN, 0)

        def full_column_name_list(self):
            return self.getTypedRuleContext(TSqlParser.Full_column_name_listContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)




    def unpivot_clause(self):

        localctx = TSqlParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_unpivot_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9553
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9554
            self.expression(0)
            self.state = 9555
            self.match(TSqlParser.FOR)
            self.state = 9556
            self.full_column_name()
            self.state = 9557
            self.match(TSqlParser.IN)
            self.state = 9558
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9559
            self.full_column_name_list()
            self.state = 9560
            self.match(TSqlParser.RR_BRACKET)
            self.state = 9561
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Full_column_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Full_column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name_list" ):
                listener.enterFull_column_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name_list" ):
                listener.exitFull_column_name_list(self)




    def full_column_name_list(self):

        localctx = TSqlParser.Full_column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_full_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9563
            self.full_column_name()
            self.state = 9568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 9564
                self.match(TSqlParser.COMMA)
                self.state = 9565
                self.full_column_name()
                self.state = 9570
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_name_with_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_name_with_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name_with_hint" ):
                listener.enterTable_name_with_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name_with_hint" ):
                listener.exitTable_name_with_hint(self)




    def table_name_with_hint(self):

        localctx = TSqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9571
            self.table_name()
            self.state = 9573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1363,self._ctx)
            if la_ == 1:
                self.state = 9572
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rowset_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(TSqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def BULK(self):
            return self.getToken(TSqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Bulk_optionContext,i)


        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_rowset_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function" ):
                listener.enterRowset_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function" ):
                listener.exitRowset_function(self)




    def rowset_function(self):

        localctx = TSqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 9601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1366,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9575
                self.match(TSqlParser.OPENROWSET)
                self.state = 9576
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9577
                localctx.provider_name = self.match(TSqlParser.STRING)
                self.state = 9578
                self.match(TSqlParser.COMMA)
                self.state = 9579
                localctx.connectionString = self.match(TSqlParser.STRING)
                self.state = 9580
                self.match(TSqlParser.COMMA)
                self.state = 9581
                localctx.sql = self.match(TSqlParser.STRING)
                self.state = 9582
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9583
                self.match(TSqlParser.OPENROWSET)
                self.state = 9584
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9585
                self.match(TSqlParser.BULK)
                self.state = 9586
                localctx.data_file = self.match(TSqlParser.STRING)
                self.state = 9587
                self.match(TSqlParser.COMMA)
                self.state = 9597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1365,self._ctx)
                if la_ == 1:
                    self.state = 9588
                    self.bulk_option()
                    self.state = 9593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.COMMA:
                        self.state = 9589
                        self.match(TSqlParser.COMMA)
                        self.state = 9590
                        self.bulk_option()
                        self.state = 9595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 9596
                    self.id()
                    pass


                self.state = 9599
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bulk_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_bulk_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_option" ):
                listener.enterBulk_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_option" ):
                listener.exitBulk_option(self)




    def bulk_option(self):

        localctx = TSqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9603
            self.id()
            self.state = 9604
            self.match(TSqlParser.EQUAL)
            self.state = 9605
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.STRING):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TSqlParser.SubqueryContext,0)


        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def table_value_constructor(self):
            return self.getTypedRuleContext(TSqlParser.Table_value_constructorContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)




    def derived_table(self):

        localctx = TSqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_derived_table)
        try:
            self.state = 9617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1367,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9607
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9608
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9609
                self.subquery()
                self.state = 9610
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9612
                self.table_value_constructor()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9613
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9614
                self.table_value_constructor()
                self.state = 9615
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TSqlParser.RULE_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CURRENT_USERContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(TSqlParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_USER" ):
                listener.enterCURRENT_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_USER" ):
                listener.exitCURRENT_USER(self)


    class DATEADDContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATEADD(self):
            return self.getToken(TSqlParser.DATEADD, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def ID(self):
            return self.getToken(TSqlParser.ID, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEADD" ):
                listener.enterDATEADD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEADD" ):
                listener.exitDATEADD(self)


    class CHECKSUMContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCHECKSUM" ):
                listener.enterCHECKSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCHECKSUM" ):
                listener.exitCHECKSUM(self)


    class CURRENT_TIMESTAMPContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(TSqlParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCURRENT_TIMESTAMP" ):
                listener.enterCURRENT_TIMESTAMP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCURRENT_TIMESTAMP" ):
                listener.exitCURRENT_TIMESTAMP(self)


    class BINARY_CHECKSUMContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBINARY_CHECKSUM" ):
                listener.enterBINARY_CHECKSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBINARY_CHECKSUM" ):
                listener.exitBINARY_CHECKSUM(self)


    class SYSTEM_USERContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYSTEM_USER(self):
            return self.getToken(TSqlParser.SYSTEM_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYSTEM_USER" ):
                listener.enterSYSTEM_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYSTEM_USER" ):
                listener.exitSYSTEM_USER(self)


    class NULLIFContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULLIF(self):
            return self.getToken(TSqlParser.NULLIF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNULLIF" ):
                listener.enterNULLIF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNULLIF" ):
                listener.exitNULLIF(self)


    class SESSION_USERContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SESSION_USER(self):
            return self.getToken(TSqlParser.SESSION_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSESSION_USER" ):
                listener.enterSESSION_USER(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSESSION_USER" ):
                listener.exitSESSION_USER(self)


    class CONVERTContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.convert_data_type = None # Data_typeContext
            self.convert_expression = None # ExpressionContext
            self.style = None # ExpressionContext
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(TSqlParser.CONVERT, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCONVERT" ):
                listener.enterCONVERT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCONVERT" ):
                listener.exitCONVERT(self)


    class XML_DATA_TYPE_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def xml_data_type_methods(self):
            return self.getTypedRuleContext(TSqlParser.Xml_data_type_methodsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXML_DATA_TYPE_FUNC" ):
                listener.enterXML_DATA_TYPE_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXML_DATA_TYPE_FUNC" ):
                listener.exitXML_DATA_TYPE_FUNC(self)


    class COALESCEContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(TSqlParser.COALESCE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOALESCE" ):
                listener.enterCOALESCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOALESCE" ):
                listener.exitCOALESCE(self)


    class CASTContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(TSqlParser.CAST, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(TSqlParser.AS, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCAST" ):
                listener.enterCAST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCAST" ):
                listener.exitCAST(self)


    class MIN_ACTIVE_ROWVERSIONContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMIN_ACTIVE_ROWVERSION" ):
                listener.enterMIN_ACTIVE_ROWVERSION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMIN_ACTIVE_ROWVERSION" ):
                listener.exitMIN_ACTIVE_ROWVERSION(self)


    class SCALAR_FUNCTIONContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_function_name(self):
            return self.getTypedRuleContext(TSqlParser.Scalar_function_nameContext,0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSCALAR_FUNCTION" ):
                listener.enterSCALAR_FUNCTION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSCALAR_FUNCTION" ):
                listener.exitSCALAR_FUNCTION(self)


    class DATEPARTContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATEPART(self):
            return self.getToken(TSqlParser.DATEPART, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def ID(self):
            return self.getToken(TSqlParser.ID, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEPART" ):
                listener.enterDATEPART(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEPART" ):
                listener.exitDATEPART(self)


    class STUFFContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STUFF(self):
            return self.getToken(TSqlParser.STUFF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSTUFF" ):
                listener.enterSTUFF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSTUFF" ):
                listener.exitSTUFF(self)


    class AGGREGATE_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAGGREGATE_WINDOWED_FUNC" ):
                listener.enterAGGREGATE_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAGGREGATE_WINDOWED_FUNC" ):
                listener.exitAGGREGATE_WINDOWED_FUNC(self)


    class IDENTITYContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.seed = None # Token
            self.increment = None # Token
            self.copyFrom(ctx)

        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def data_type(self):
            return self.getTypedRuleContext(TSqlParser.Data_typeContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIDENTITY" ):
                listener.enterIDENTITY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIDENTITY" ):
                listener.exitIDENTITY(self)


    class RANKING_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Ranking_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRANKING_WINDOWED_FUNC" ):
                listener.enterRANKING_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRANKING_WINDOWED_FUNC" ):
                listener.exitRANKING_WINDOWED_FUNC(self)


    class DATENAMEContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATENAME(self):
            return self.getToken(TSqlParser.DATENAME, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def ID(self):
            return self.getToken(TSqlParser.ID, 0)
        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATENAME" ):
                listener.enterDATENAME(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATENAME" ):
                listener.exitDATENAME(self)


    class GETUTCDATEContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GETUTCDATE(self):
            return self.getToken(TSqlParser.GETUTCDATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGETUTCDATE" ):
                listener.enterGETUTCDATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGETUTCDATE" ):
                listener.exitGETUTCDATE(self)


    class ANALYTIC_WINDOWED_FUNCContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def analytic_windowed_function(self):
            return self.getTypedRuleContext(TSqlParser.Analytic_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterANALYTIC_WINDOWED_FUNC" ):
                listener.enterANALYTIC_WINDOWED_FUNC(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitANALYTIC_WINDOWED_FUNC" ):
                listener.exitANALYTIC_WINDOWED_FUNC(self)


    class ISNULLContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISNULL(self):
            return self.getToken(TSqlParser.ISNULL, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISNULL" ):
                listener.enterISNULL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISNULL" ):
                listener.exitISNULL(self)


    class DATEDIFFContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATEDIFF(self):
            return self.getToken(TSqlParser.DATEDIFF, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def ID(self):
            return self.getToken(TSqlParser.ID, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDATEDIFF" ):
                listener.enterDATEDIFF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDATEDIFF" ):
                listener.exitDATEDIFF(self)


    class GETDATEContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TSqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GETDATE(self):
            return self.getToken(TSqlParser.GETDATE, 0)
        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGETDATE" ):
                listener.enterGETDATE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGETDATE" ):
                listener.exitGETDATE(self)



    def function_call(self):

        localctx = TSqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 9742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1372,self._ctx)
            if la_ == 1:
                localctx = TSqlParser.RANKING_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 9619
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                localctx = TSqlParser.AGGREGATE_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 9620
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                localctx = TSqlParser.ANALYTIC_WINDOWED_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 9621
                self.analytic_windowed_function()
                pass

            elif la_ == 4:
                localctx = TSqlParser.SCALAR_FUNCTIONContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 9622
                self.scalar_function_name()
                self.state = 9623
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << TSqlParser.BLOCKING_HIERARCHY) | (1 << TSqlParser.CALLED) | (1 << TSqlParser.CASE) | (1 << TSqlParser.COALESCE))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (TSqlParser.CONVERT - 69)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 69)) | (1 << (TSqlParser.CURRENT_USER - 69)) | (1 << (TSqlParser.DATA_COMPRESSION - 69)) | (1 << (TSqlParser.DEFAULT - 69)) | (1 << (TSqlParser.EVENTDATA - 69)) | (1 << (TSqlParser.FILENAME - 69)) | (1 << (TSqlParser.FILLFACTOR - 69)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (TSqlParser.FORCESEEK - 133)) | (1 << (TSqlParser.IDENTITY - 133)) | (1 << (TSqlParser.INIT - 133)) | (1 << (TSqlParser.ISNULL - 133)) | (1 << (TSqlParser.KEY - 133)) | (1 << (TSqlParser.LEFT - 133)) | (1 << (TSqlParser.MASTER - 133)) | (1 << (TSqlParser.MAX_MEMORY - 133)))) != 0) or ((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (TSqlParser.NULL - 221)) | (1 << (TSqlParser.NULLIF - 221)) | (1 << (TSqlParser.OFFSETS - 221)) | (1 << (TSqlParser.OVER - 221)) | (1 << (TSqlParser.PAGE - 221)) | (1 << (TSqlParser.PUBLIC - 221)) | (1 << (TSqlParser.R - 221)) | (1 << (TSqlParser.RAW - 221)) | (1 << (TSqlParser.RETURN - 221)) | (1 << (TSqlParser.RETURNS - 221)))) != 0) or ((((_la - 285)) & ~0x3f) == 0 and ((1 << (_la - 285)) & ((1 << (TSqlParser.RIGHT - 285)) | (1 << (TSqlParser.ROWCOUNT - 285)) | (1 << (TSqlParser.SAFETY - 285)) | (1 << (TSqlParser.SERVER - 285)) | (1 << (TSqlParser.SESSION_USER - 285)) | (1 << (TSqlParser.SID - 285)) | (1 << (TSqlParser.SOURCE - 285)) | (1 << (TSqlParser.STATE - 285)) | (1 << (TSqlParser.START - 285)) | (1 << (TSqlParser.SYSTEM_USER - 285)) | (1 << (TSqlParser.TARGET - 285)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.LOCAL_ID - 767)) | (1 << (TSqlParser.DECIMAL - 767)) | (1 << (TSqlParser.ID - 767)) | (1 << (TSqlParser.STRING - 767)) | (1 << (TSqlParser.BINARY - 767)) | (1 << (TSqlParser.FLOAT - 767)) | (1 << (TSqlParser.REAL - 767)) | (1 << (TSqlParser.DOLLAR - 767)) | (1 << (TSqlParser.LR_BRACKET - 767)) | (1 << (TSqlParser.PLUS - 767)) | (1 << (TSqlParser.MINUS - 767)) | (1 << (TSqlParser.BIT_NOT - 767)))) != 0):
                    self.state = 9624
                    self.expression_list()


                self.state = 9627
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = TSqlParser.BINARY_CHECKSUMContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 9629
                self.match(TSqlParser.BINARY_CHECKSUM)
                self.state = 9630
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9631
                self.match(TSqlParser.STAR)
                self.state = 9632
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = TSqlParser.CASTContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 9633
                self.match(TSqlParser.CAST)
                self.state = 9634
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9635
                self.expression(0)
                self.state = 9636
                self.match(TSqlParser.AS)
                self.state = 9637
                self.data_type()
                self.state = 9638
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = TSqlParser.CONVERTContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 9640
                self.match(TSqlParser.CONVERT)
                self.state = 9641
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9642
                localctx.convert_data_type = self.data_type()
                self.state = 9643
                self.match(TSqlParser.COMMA)
                self.state = 9644
                localctx.convert_expression = self.expression(0)
                self.state = 9647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 9645
                    self.match(TSqlParser.COMMA)
                    self.state = 9646
                    localctx.style = self.expression(0)


                self.state = 9649
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = TSqlParser.CHECKSUMContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 9651
                self.match(TSqlParser.CHECKSUM)
                self.state = 9652
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9653
                self.match(TSqlParser.STAR)
                self.state = 9654
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = TSqlParser.COALESCEContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 9655
                self.match(TSqlParser.COALESCE)
                self.state = 9656
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9657
                self.expression_list()
                self.state = 9658
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = TSqlParser.CURRENT_TIMESTAMPContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 9660
                self.match(TSqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 11:
                localctx = TSqlParser.CURRENT_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 9661
                self.match(TSqlParser.CURRENT_USER)
                pass

            elif la_ == 12:
                localctx = TSqlParser.DATEADDContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 9662
                self.match(TSqlParser.DATEADD)
                self.state = 9663
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9664
                self.match(TSqlParser.ID)
                self.state = 9665
                self.match(TSqlParser.COMMA)
                self.state = 9666
                self.expression(0)
                self.state = 9667
                self.match(TSqlParser.COMMA)
                self.state = 9668
                self.expression(0)
                self.state = 9669
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = TSqlParser.DATEDIFFContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 9671
                self.match(TSqlParser.DATEDIFF)
                self.state = 9672
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9673
                self.match(TSqlParser.ID)
                self.state = 9674
                self.match(TSqlParser.COMMA)
                self.state = 9675
                self.expression(0)
                self.state = 9676
                self.match(TSqlParser.COMMA)
                self.state = 9677
                self.expression(0)
                self.state = 9678
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = TSqlParser.DATENAMEContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 9680
                self.match(TSqlParser.DATENAME)
                self.state = 9681
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9682
                self.match(TSqlParser.ID)
                self.state = 9683
                self.match(TSqlParser.COMMA)
                self.state = 9684
                self.expression(0)
                self.state = 9685
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = TSqlParser.DATEPARTContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 9687
                self.match(TSqlParser.DATEPART)
                self.state = 9688
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9689
                self.match(TSqlParser.ID)
                self.state = 9690
                self.match(TSqlParser.COMMA)
                self.state = 9691
                self.expression(0)
                self.state = 9692
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = TSqlParser.GETDATEContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 9694
                self.match(TSqlParser.GETDATE)
                self.state = 9695
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9696
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                localctx = TSqlParser.GETUTCDATEContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 9697
                self.match(TSqlParser.GETUTCDATE)
                self.state = 9698
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9699
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                localctx = TSqlParser.IDENTITYContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 9700
                self.match(TSqlParser.IDENTITY)
                self.state = 9701
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9702
                self.data_type()
                self.state = 9705
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1370,self._ctx)
                if la_ == 1:
                    self.state = 9703
                    self.match(TSqlParser.COMMA)
                    self.state = 9704
                    localctx.seed = self.match(TSqlParser.DECIMAL)


                self.state = 9709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 9707
                    self.match(TSqlParser.COMMA)
                    self.state = 9708
                    localctx.increment = self.match(TSqlParser.DECIMAL)


                self.state = 9711
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 19:
                localctx = TSqlParser.MIN_ACTIVE_ROWVERSIONContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 9713
                self.match(TSqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 20:
                localctx = TSqlParser.NULLIFContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 9714
                self.match(TSqlParser.NULLIF)
                self.state = 9715
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9716
                self.expression(0)
                self.state = 9717
                self.match(TSqlParser.COMMA)
                self.state = 9718
                self.expression(0)
                self.state = 9719
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 21:
                localctx = TSqlParser.STUFFContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 9721
                self.match(TSqlParser.STUFF)
                self.state = 9722
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9723
                self.expression(0)
                self.state = 9724
                self.match(TSqlParser.COMMA)
                self.state = 9725
                self.match(TSqlParser.DECIMAL)
                self.state = 9726
                self.match(TSqlParser.COMMA)
                self.state = 9727
                self.match(TSqlParser.DECIMAL)
                self.state = 9728
                self.match(TSqlParser.COMMA)
                self.state = 9729
                self.expression(0)
                self.state = 9730
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 22:
                localctx = TSqlParser.SESSION_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 9732
                self.match(TSqlParser.SESSION_USER)
                pass

            elif la_ == 23:
                localctx = TSqlParser.SYSTEM_USERContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 9733
                self.match(TSqlParser.SYSTEM_USER)
                pass

            elif la_ == 24:
                localctx = TSqlParser.ISNULLContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 9734
                self.match(TSqlParser.ISNULL)
                self.state = 9735
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9736
                self.expression(0)
                self.state = 9737
                self.match(TSqlParser.COMMA)
                self.state = 9738
                self.expression(0)
                self.state = 9739
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 25:
                localctx = TSqlParser.XML_DATA_TYPE_FUNCContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 9741
                self.xml_data_type_methods()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_data_type_methodsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_method(self):
            return self.getTypedRuleContext(TSqlParser.Value_methodContext,0)


        def query_method(self):
            return self.getTypedRuleContext(TSqlParser.Query_methodContext,0)


        def exist_method(self):
            return self.getTypedRuleContext(TSqlParser.Exist_methodContext,0)


        def modify_method(self):
            return self.getTypedRuleContext(TSqlParser.Modify_methodContext,0)


        def nodes_method(self):
            return self.getTypedRuleContext(TSqlParser.Nodes_methodContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_xml_data_type_methods

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_data_type_methods" ):
                listener.enterXml_data_type_methods(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_data_type_methods" ):
                listener.exitXml_data_type_methods(self)




    def xml_data_type_methods(self):

        localctx = TSqlParser.Xml_data_type_methodsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_xml_data_type_methods)
        try:
            self.state = 9749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1373,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9744
                self.value_method()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9745
                self.query_method()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9746
                self.exist_method()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9747
                self.modify_method()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9748
                self.nodes_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token
            self.sqltype = None # Token

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def EVENTDATA(self):
            return self.getToken(TSqlParser.EVENTDATA, 0)

        def query_method(self):
            return self.getTypedRuleContext(TSqlParser.Query_methodContext,0)


        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def PARAM_NODE(self):
            return self.getToken(TSqlParser.PARAM_NODE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_value_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_method" ):
                listener.enterValue_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_method" ):
                listener.exitValue_method(self)




    def value_method(self):

        localctx = TSqlParser.Value_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_value_method)
        try:
            self.state = 9794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1374,self._ctx)
                if la_ == 1:
                    self.state = 9751
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 9752
                    self.match(TSqlParser.ID)
                    pass

                elif la_ == 3:
                    self.state = 9753
                    self.match(TSqlParser.EVENTDATA)
                    pass

                elif la_ == 4:
                    self.state = 9754
                    self.query_method()
                    pass


                self.state = 9757
                self.match(TSqlParser.DOT)
                self.state = 9758
                self.match(TSqlParser.VALUE)
                self.state = 9759
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9760
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 9761
                self.match(TSqlParser.COMMA)
                self.state = 9762
                localctx.sqltype = self.match(TSqlParser.STRING)
                self.state = 9763
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1375,self._ctx)
                if la_ == 1:
                    self.state = 9764
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 9765
                    self.match(TSqlParser.ID)
                    pass

                elif la_ == 3:
                    self.state = 9766
                    self.match(TSqlParser.EVENTDATA)
                    pass

                elif la_ == 4:
                    self.state = 9767
                    self.query_method()
                    pass


                self.state = 9770
                self.match(TSqlParser.DOT)
                self.state = 9771
                self.match(TSqlParser.ROW)
                self.state = 9772
                self.match(TSqlParser.DOT)
                self.state = 9773
                self.match(TSqlParser.VALUE)
                self.state = 9774
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9775
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 9776
                self.match(TSqlParser.COMMA)
                self.state = 9777
                localctx.sqltype = self.match(TSqlParser.STRING)
                self.state = 9778
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1376,self._ctx)
                if la_ == 1:
                    self.state = 9779
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 9780
                    self.match(TSqlParser.ID)
                    pass

                elif la_ == 3:
                    self.state = 9781
                    self.match(TSqlParser.EVENTDATA)
                    pass

                elif la_ == 4:
                    self.state = 9782
                    self.query_method()
                    pass


                self.state = 9785
                self.match(TSqlParser.DOT)
                self.state = 9786
                self.match(TSqlParser.PARAM_NODE)
                self.state = 9787
                self.match(TSqlParser.DOT)
                self.state = 9788
                self.match(TSqlParser.VALUE)
                self.state = 9789
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9790
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 9791
                self.match(TSqlParser.COMMA)
                self.state = 9792
                localctx.sqltype = self.match(TSqlParser.STRING)
                self.state = 9793
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def QUERY(self):
            return self.getToken(TSqlParser.QUERY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_query_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_method" ):
                listener.enterQuery_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_method" ):
                listener.exitQuery_method(self)




    def query_method(self):

        localctx = TSqlParser.Query_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_query_method)
        try:
            self.state = 9818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1380,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1378,self._ctx)
                if la_ == 1:
                    self.state = 9796
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 9797
                    self.match(TSqlParser.ID)
                    pass

                elif la_ == 3:
                    self.state = 9798
                    self.full_table_name()
                    pass


                self.state = 9801
                self.match(TSqlParser.DOT)
                self.state = 9802
                self.match(TSqlParser.QUERY)
                self.state = 9803
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9804
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 9805
                self.match(TSqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1379,self._ctx)
                if la_ == 1:
                    self.state = 9806
                    self.match(TSqlParser.LOCAL_ID)
                    pass

                elif la_ == 2:
                    self.state = 9807
                    self.match(TSqlParser.ID)
                    pass

                elif la_ == 3:
                    self.state = 9808
                    self.full_table_name()
                    pass


                self.state = 9811
                self.match(TSqlParser.DOT)
                self.state = 9812
                self.match(TSqlParser.ROW)
                self.state = 9813
                self.match(TSqlParser.DOT)
                self.state = 9814
                self.match(TSqlParser.QUERY)
                self.state = 9815
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9816
                localctx.xquery = self.match(TSqlParser.STRING)
                self.state = 9817
                self.match(TSqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exist_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def EXIST(self):
            return self.getToken(TSqlParser.EXIST, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_exist_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist_method" ):
                listener.enterExist_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist_method" ):
                listener.exitExist_method(self)




    def exist_method(self):

        localctx = TSqlParser.Exist_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_exist_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9820
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 9821
            self.match(TSqlParser.DOT)
            self.state = 9822
            self.match(TSqlParser.EXIST)
            self.state = 9823
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9824
            localctx.xquery = self.match(TSqlParser.STRING)
            self.state = 9825
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_dml = None # Token

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_modify_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_method" ):
                listener.enterModify_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_method" ):
                listener.exitModify_method(self)




    def modify_method(self):

        localctx = TSqlParser.Modify_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_modify_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9827
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 9828
            self.match(TSqlParser.DOT)
            self.state = 9829
            self.match(TSqlParser.MODIFY)
            self.state = 9830
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9831
            localctx.xml_dml = self.match(TSqlParser.STRING)
            self.state = 9832
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nodes_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xquery = None # Token

        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def NODES(self):
            return self.getToken(TSqlParser.NODES, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_nodes_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodes_method" ):
                listener.enterNodes_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodes_method" ):
                listener.exitNodes_method(self)




    def nodes_method(self):

        localctx = TSqlParser.Nodes_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_nodes_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9834
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 9835
            self.match(TSqlParser.DOT)
            self.state = 9836
            self.match(TSqlParser.NODES)
            self.state = 9837
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9838
            localctx.xquery = self.match(TSqlParser.STRING)
            self.state = 9839
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TSqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(TSqlParser.THEN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = TSqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9841
            self.match(TSqlParser.WHEN)
            self.state = 9842
            self.expression(0)
            self.state = 9843
            self.match(TSqlParser.THEN)
            self.state = 9844
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_search_condition_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TSqlParser.WHEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(TSqlParser.Search_conditionContext,0)


        def THEN(self):
            return self.getToken(TSqlParser.THEN, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)




    def switch_search_condition_section(self):

        localctx = TSqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9846
            self.match(TSqlParser.WHEN)
            self.state = 9847
            self.search_condition()
            self.state = 9848
            self.match(TSqlParser.THEN)
            self.state = 9849
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(TSqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_as_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_column_alias" ):
                listener.enterAs_column_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_column_alias" ):
                listener.exitAs_column_alias(self)




    def as_column_alias(self):

        localctx = TSqlParser.As_column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_as_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 9851
                self.match(TSqlParser.AS)


            self.state = 9854
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_alias(self):
            return self.getTypedRuleContext(TSqlParser.Table_aliasContext,0)


        def AS(self):
            return self.getToken(TSqlParser.AS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_as_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_table_alias" ):
                listener.enterAs_table_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_table_alias" ):
                listener.exitAs_table_alias(self)




    def as_table_alias(self):

        localctx = TSqlParser.As_table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_as_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.AS:
                self.state = 9856
                self.match(TSqlParser.AS)


            self.state = 9859
            self.table_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(TSqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = TSqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9861
            self.id()
            self.state = 9863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1383,self._ctx)
            if la_ == 1:
                self.state = 9862
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_hintContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_hints" ):
                listener.enterWith_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_hints" ):
                listener.exitWith_table_hints(self)




    def with_table_hints(self):

        localctx = TSqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WITH:
                self.state = 9865
                self.match(TSqlParser.WITH)


            self.state = 9868
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9869
            self.table_hint()
            self.state = 9876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.FORCESEEK or _la==TSqlParser.INDEX or _la==TSqlParser.NOEXPAND or ((((_la - 716)) & ~0x3f) == 0 and ((1 << (_la - 716)) & ((1 << (TSqlParser.SERIALIZABLE - 716)) | (1 << (TSqlParser.SNAPSHOT - 716)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 716)))) != 0) or _la==TSqlParser.ID or _la==TSqlParser.COMMA:
                self.state = 9871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 9870
                    self.match(TSqlParser.COMMA)


                self.state = 9873
                self.table_hint()
                self.state = 9878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9879
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_with_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Table_hintContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_insert_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_with_table_hints" ):
                listener.enterInsert_with_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_with_table_hints" ):
                listener.exitInsert_with_table_hints(self)




    def insert_with_table_hints(self):

        localctx = TSqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9881
            self.match(TSqlParser.WITH)
            self.state = 9882
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9883
            self.table_hint()
            self.state = 9890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.FORCESEEK or _la==TSqlParser.INDEX or _la==TSqlParser.NOEXPAND or ((((_la - 716)) & ~0x3f) == 0 and ((1 << (_la - 716)) & ((1 << (TSqlParser.SERIALIZABLE - 716)) | (1 << (TSqlParser.SNAPSHOT - 716)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 716)))) != 0) or _la==TSqlParser.ID or _la==TSqlParser.COMMA:
                self.state = 9885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 9884
                    self.match(TSqlParser.COMMA)


                self.state = 9887
                self.table_hint()
                self.state = 9892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9893
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(TSqlParser.INDEX, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Index_valueContext,i)


        def FORCESEEK(self):
            return self.getToken(TSqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ID)
            else:
                return self.getToken(TSqlParser.ID, i)

        def NOEXPAND(self):
            return self.getToken(TSqlParser.NOEXPAND, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)




    def table_hint(self):

        localctx = TSqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.NOEXPAND:
                self.state = 9895
                self.match(TSqlParser.NOEXPAND)


            self.state = 9946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1395,self._ctx)
            if la_ == 1:
                self.state = 9898
                self.match(TSqlParser.INDEX)
                self.state = 9918
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.LR_BRACKET]:
                    self.state = 9899
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 9900
                    self.index_value()
                    self.state = 9905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.COMMA:
                        self.state = 9901
                        self.match(TSqlParser.COMMA)
                        self.state = 9902
                        self.index_value()
                        self.state = 9907
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 9908
                    self.match(TSqlParser.RR_BRACKET)
                    pass
                elif token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.DECIMAL, TSqlParser.ID]:
                    self.state = 9910
                    self.index_value()
                    self.state = 9915
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1391,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 9911
                            self.match(TSqlParser.COMMA)
                            self.state = 9912
                            self.index_value() 
                        self.state = 9917
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1391,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 9920
                self.match(TSqlParser.INDEX)
                self.state = 9921
                self.match(TSqlParser.EQUAL)
                self.state = 9922
                self.index_value()
                pass

            elif la_ == 3:
                self.state = 9923
                self.match(TSqlParser.FORCESEEK)
                self.state = 9938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LR_BRACKET:
                    self.state = 9924
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 9925
                    self.index_value()
                    self.state = 9926
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 9927
                    self.match(TSqlParser.ID)
                    self.state = 9932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==TSqlParser.COMMA:
                        self.state = 9928
                        self.match(TSqlParser.COMMA)
                        self.state = 9929
                        self.match(TSqlParser.ID)
                        self.state = 9934
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 9935
                    self.match(TSqlParser.RR_BRACKET)
                    self.state = 9936
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 4:
                self.state = 9940
                self.match(TSqlParser.SERIALIZABLE)
                pass

            elif la_ == 5:
                self.state = 9941
                self.match(TSqlParser.SNAPSHOT)
                pass

            elif la_ == 6:
                self.state = 9942
                self.match(TSqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 9943
                self.match(TSqlParser.EQUAL)
                self.state = 9944
                self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 7:
                self.state = 9945
                self.match(TSqlParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_index_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_value" ):
                listener.enterIndex_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_value" ):
                listener.exitIndex_value(self)




    def index_value(self):

        localctx = TSqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_index_value)
        try:
            self.state = 9950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9948
                self.id()
                pass
            elif token in [TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9949
                self.match(TSqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_alias_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Column_aliasContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list" ):
                listener.enterColumn_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list" ):
                listener.exitColumn_alias_list(self)




    def column_alias_list(self):

        localctx = TSqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9952
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9953
            self.column_alias()
            self.state = 9958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 9954
                self.match(TSqlParser.COMMA)
                self.state = 9955
                self.column_alias()
                self.state = 9960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9961
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = TSqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_column_alias)
        try:
            self.state = 9965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9963
                self.id()
                pass
            elif token in [TSqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9964
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_value_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LR_BRACKET)
            else:
                return self.getToken(TSqlParser.LR_BRACKET, i)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Expression_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.RR_BRACKET)
            else:
                return self.getToken(TSqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_value_constructor" ):
                listener.enterTable_value_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_value_constructor" ):
                listener.exitTable_value_constructor(self)




    def table_value_constructor(self):

        localctx = TSqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_table_value_constructor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9967
            self.match(TSqlParser.VALUES)
            self.state = 9968
            self.match(TSqlParser.LR_BRACKET)
            self.state = 9969
            self.expression_list()
            self.state = 9970
            self.match(TSqlParser.RR_BRACKET)
            self.state = 9978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1399,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9971
                    self.match(TSqlParser.COMMA)
                    self.state = 9972
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 9973
                    self.expression_list()
                    self.state = 9974
                    self.match(TSqlParser.RR_BRACKET) 
                self.state = 9980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1399,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = TSqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9981
            self.expression(0)
            self.state = 9986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 9982
                self.match(TSqlParser.COMMA)
                self.state = 9983
                self.expression(0)
                self.state = 9988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ranking_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(TSqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(TSqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(TSqlParser.ROW_NUMBER, 0)

        def NTILE(self):
            return self.getToken(TSqlParser.NTILE, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)




    def ranking_windowed_function(self):

        localctx = TSqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 9999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.DENSE_RANK, TSqlParser.RANK, TSqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9989
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DENSE_RANK or _la==TSqlParser.RANK or _la==TSqlParser.ROW_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9990
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9991
                self.match(TSqlParser.RR_BRACKET)
                self.state = 9992
                self.over_clause()
                pass
            elif token in [TSqlParser.NTILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9993
                self.match(TSqlParser.NTILE)
                self.state = 9994
                self.match(TSqlParser.LR_BRACKET)
                self.state = 9995
                self.expression(0)
                self.state = 9996
                self.match(TSqlParser.RR_BRACKET)
                self.state = 9997
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def all_distinct_expression(self):
            return self.getTypedRuleContext(TSqlParser.All_distinct_expressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(TSqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(TSqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(TSqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(TSqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(TSqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(TSqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(TSqlParser.VARP, 0)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(TSqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(TSqlParser.COUNT_BIG, 0)

        def STAR(self):
            return self.getToken(TSqlParser.STAR, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(TSqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(TSqlParser.GROUPING, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def GROUPING_ID(self):
            return self.getToken(TSqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)




    def aggregate_windowed_function(self):

        localctx = TSqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 10033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.AVG, TSqlParser.MAX, TSqlParser.MIN, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.SUM, TSqlParser.VAR, TSqlParser.VARP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10001
                _la = self._input.LA(1)
                if not(_la==TSqlParser.AVG or _la==TSqlParser.MAX or _la==TSqlParser.MIN or ((((_la - 733)) & ~0x3f) == 0 and ((1 << (_la - 733)) & ((1 << (TSqlParser.STDEV - 733)) | (1 << (TSqlParser.STDEVP - 733)) | (1 << (TSqlParser.SUM - 733)) | (1 << (TSqlParser.VAR - 733)) | (1 << (TSqlParser.VARP - 733)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10002
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10003
                self.all_distinct_expression()
                self.state = 10004
                self.match(TSqlParser.RR_BRACKET)
                self.state = 10006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1402,self._ctx)
                if la_ == 1:
                    self.state = 10005
                    self.over_clause()


                pass
            elif token in [TSqlParser.COUNT, TSqlParser.COUNT_BIG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10008
                _la = self._input.LA(1)
                if not(_la==TSqlParser.COUNT or _la==TSqlParser.COUNT_BIG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10009
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10012
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.STAR]:
                    self.state = 10010
                    self.match(TSqlParser.STAR)
                    pass
                elif token in [TSqlParser.ALL, TSqlParser.BLOCKING_HIERARCHY, TSqlParser.CALLED, TSqlParser.CASE, TSqlParser.COALESCE, TSqlParser.CONVERT, TSqlParser.CURRENT_TIMESTAMP, TSqlParser.CURRENT_USER, TSqlParser.DATA_COMPRESSION, TSqlParser.DEFAULT, TSqlParser.DISTINCT, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.IDENTITY, TSqlParser.INIT, TSqlParser.ISNULL, TSqlParser.KEY, TSqlParser.LEFT, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.NULL, TSqlParser.NULLIF, TSqlParser.OFFSETS, TSqlParser.OVER, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.RIGHT, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SESSION_USER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.SYSTEM_USER, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.LOCAL_ID, TSqlParser.DECIMAL, TSqlParser.ID, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.LR_BRACKET, TSqlParser.PLUS, TSqlParser.MINUS, TSqlParser.BIT_NOT]:
                    self.state = 10011
                    self.all_distinct_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10014
                self.match(TSqlParser.RR_BRACKET)
                self.state = 10016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1404,self._ctx)
                if la_ == 1:
                    self.state = 10015
                    self.over_clause()


                pass
            elif token in [TSqlParser.CHECKSUM_AGG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10018
                self.match(TSqlParser.CHECKSUM_AGG)
                self.state = 10019
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10020
                self.all_distinct_expression()
                self.state = 10021
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.GROUPING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10023
                self.match(TSqlParser.GROUPING)
                self.state = 10024
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10025
                self.expression(0)
                self.state = 10026
                self.match(TSqlParser.RR_BRACKET)
                pass
            elif token in [TSqlParser.GROUPING_ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10028
                self.match(TSqlParser.GROUPING_ID)
                self.state = 10029
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10030
                self.expression_list()
                self.state = 10031
                self.match(TSqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.ExpressionContext,i)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def over_clause(self):
            return self.getTypedRuleContext(TSqlParser.Over_clauseContext,0)


        def FIRST_VALUE(self):
            return self.getToken(TSqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TSqlParser.LAST_VALUE, 0)

        def LAG(self):
            return self.getToken(TSqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TSqlParser.LEAD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_analytic_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_windowed_function" ):
                listener.enterAnalytic_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_windowed_function" ):
                listener.exitAnalytic_windowed_function(self)




    def analytic_windowed_function(self):

        localctx = TSqlParser.Analytic_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_analytic_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 10055
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FIRST_VALUE, TSqlParser.LAST_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10035
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FIRST_VALUE or _la==TSqlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10036
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10037
                self.expression(0)
                self.state = 10038
                self.match(TSqlParser.RR_BRACKET)
                self.state = 10039
                self.over_clause()
                pass
            elif token in [TSqlParser.LAG, TSqlParser.LEAD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10041
                _la = self._input.LA(1)
                if not(_la==TSqlParser.LAG or _la==TSqlParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10042
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10043
                self.expression(0)
                self.state = 10050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 10044
                    self.match(TSqlParser.COMMA)
                    self.state = 10045
                    self.expression(0)
                    self.state = 10048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 10046
                        self.match(TSqlParser.COMMA)
                        self.state = 10047
                        self.expression(0)




                self.state = 10052
                self.match(TSqlParser.RR_BRACKET)
                self.state = 10053
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_distinct_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def ALL(self):
            return self.getToken(TSqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(TSqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_all_distinct_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct_expression" ):
                listener.enterAll_distinct_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct_expression" ):
                listener.exitAll_distinct_expression(self)




    def all_distinct_expression(self):

        localctx = TSqlParser.All_distinct_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_all_distinct_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ALL or _la==TSqlParser.DISTINCT:
                self.state = 10057
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ALL or _la==TSqlParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 10060
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TSqlParser.OVER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TSqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(TSqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(TSqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(TSqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = TSqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10062
            self.match(TSqlParser.OVER)
            self.state = 10063
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.PARTITION:
                self.state = 10064
                self.match(TSqlParser.PARTITION)
                self.state = 10065
                self.match(TSqlParser.BY)
                self.state = 10066
                self.expression_list()


            self.state = 10070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ORDER:
                self.state = 10069
                self.order_by_clause()


            self.state = 10073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.RANGE or _la==TSqlParser.ROWS:
                self.state = 10072
                self.row_or_range_clause()


            self.state = 10075
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_or_range_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_row_or_range_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_range_clause" ):
                listener.enterRow_or_range_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_range_clause" ):
                listener.exitRow_or_range_clause(self)




    def row_or_range_clause(self):

        localctx = TSqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10077
            _la = self._input.LA(1)
            if not(_la==TSqlParser.RANGE or _la==TSqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 10078
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(TSqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(TSqlParser.AND, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)




    def window_frame_extent(self):

        localctx = TSqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_window_frame_extent)
        try:
            self.state = 10086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CURRENT, TSqlParser.UNBOUNDED, TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10080
                self.window_frame_preceding()
                pass
            elif token in [TSqlParser.BETWEEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10081
                self.match(TSqlParser.BETWEEN)
                self.state = 10082
                self.window_frame_bound()
                self.state = 10083
                self.match(TSqlParser.AND)
                self.state = 10084
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(TSqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)




    def window_frame_bound(self):

        localctx = TSqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_window_frame_bound)
        try:
            self.state = 10090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1414,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10088
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10089
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_precedingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(TSqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(TSqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_preceding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_preceding" ):
                listener.enterWindow_frame_preceding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_preceding" ):
                listener.exitWindow_frame_preceding(self)




    def window_frame_preceding(self):

        localctx = TSqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_window_frame_preceding)
        try:
            self.state = 10098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10092
                self.match(TSqlParser.UNBOUNDED)
                self.state = 10093
                self.match(TSqlParser.PRECEDING)
                pass
            elif token in [TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10094
                self.match(TSqlParser.DECIMAL)
                self.state = 10095
                self.match(TSqlParser.PRECEDING)
                pass
            elif token in [TSqlParser.CURRENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10096
                self.match(TSqlParser.CURRENT)
                self.state = 10097
                self.match(TSqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_frame_followingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(TSqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_window_frame_following

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_following" ):
                listener.enterWindow_frame_following(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_following" ):
                listener.exitWindow_frame_following(self)




    def window_frame_following(self):

        localctx = TSqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_window_frame_following)
        try:
            self.state = 10104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10100
                self.match(TSqlParser.UNBOUNDED)
                self.state = 10101
                self.match(TSqlParser.FOLLOWING)
                pass
            elif token in [TSqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10102
                self.match(TSqlParser.DECIMAL)
                self.state = 10103
                self.match(TSqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Database_filestream_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(TSqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(TSqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(TSqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_create_database_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_option" ):
                listener.enterCreate_database_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_option" ):
                listener.exitCreate_database_option(self)




    def create_database_option(self):

        localctx = TSqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 10140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FILESTREAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10106
                self.match(TSqlParser.FILESTREAM)

                self.state = 10107
                self.database_filestream_option()
                self.state = 10112
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1417,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10108
                        self.match(TSqlParser.COMMA)
                        self.state = 10109
                        self.database_filestream_option() 
                    self.state = 10114
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1417,self._ctx)

                pass
            elif token in [TSqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10115
                self.match(TSqlParser.DEFAULT_LANGUAGE)
                self.state = 10116
                self.match(TSqlParser.EQUAL)
                self.state = 10119
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 10117
                    self.id()
                    pass
                elif token in [TSqlParser.STRING]:
                    self.state = 10118
                    self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10121
                self.match(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 10122
                self.match(TSqlParser.EQUAL)
                self.state = 10125
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                    self.state = 10123
                    self.id()
                    pass
                elif token in [TSqlParser.STRING]:
                    self.state = 10124
                    self.match(TSqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [TSqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10127
                self.match(TSqlParser.NESTED_TRIGGERS)
                self.state = 10128
                self.match(TSqlParser.EQUAL)
                self.state = 10129
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10130
                self.match(TSqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 10131
                self.match(TSqlParser.EQUAL)
                self.state = 10132
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 10133
                self.match(TSqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 10134
                self.match(TSqlParser.EQUAL)
                self.state = 10135
                self.match(TSqlParser.DECIMAL)
                pass
            elif token in [TSqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 10136
                self.match(TSqlParser.DB_CHAINING)
                self.state = 10137
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 10138
                self.match(TSqlParser.TRUSTWORTHY)
                self.state = 10139
                _la = self._input.LA(1)
                if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_filestream_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(TSqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(TSqlParser.FULL, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_database_filestream_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_filestream_option" ):
                listener.enterDatabase_filestream_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_filestream_option" ):
                listener.exitDatabase_filestream_option(self)




    def database_filestream_option(self):

        localctx = TSqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10142
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.NON_TRANSACTED_ACCESS]:
                self.state = 10143
                self.match(TSqlParser.NON_TRANSACTED_ACCESS)
                self.state = 10144
                self.match(TSqlParser.EQUAL)
                self.state = 10145
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FULL or _la==TSqlParser.OFF or _la==TSqlParser.READ_ONLY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [TSqlParser.DIRECTORY_NAME]:
                self.state = 10146
                self.match(TSqlParser.DIRECTORY_NAME)
                self.state = 10147
                self.match(TSqlParser.EQUAL)
                self.state = 10148
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 10151
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_file_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(TSqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(TSqlParser.File_specContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_database_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_file_spec" ):
                listener.enterDatabase_file_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_file_spec" ):
                listener.exitDatabase_file_spec(self)




    def database_file_spec(self):

        localctx = TSqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_database_file_spec)
        try:
            self.state = 10155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.FILEGROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10153
                self.file_group()
                pass
            elif token in [TSqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10154
                self.file_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(TSqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.CONTAINS)
            else:
                return self.getToken(TSqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_group" ):
                listener.enterFile_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_group" ):
                listener.exitFile_group(self)




    def file_group(self):

        localctx = TSqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10157
            self.match(TSqlParser.FILEGROUP)
            self.state = 10158
            self.id()
            self.state = 10161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1423,self._ctx)
            if la_ == 1:
                self.state = 10159
                self.match(TSqlParser.CONTAINS)
                self.state = 10160
                self.match(TSqlParser.FILESTREAM)


            self.state = 10164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.DEFAULT:
                self.state = 10163
                self.match(TSqlParser.DEFAULT)


            self.state = 10168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONTAINS:
                self.state = 10166
                self.match(TSqlParser.CONTAINS)
                self.state = 10167
                self.match(TSqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 10170
            self.file_spec()
            self.state = 10175
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1426,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10171
                    self.match(TSqlParser.COMMA)
                    self.state = 10172
                    self.file_spec() 
                self.state = 10177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1426,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.file = None # Token

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(TSqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(TSqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(TSqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(TSqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(TSqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_spec" ):
                listener.enterFile_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_spec" ):
                listener.exitFile_spec(self)




    def file_spec(self):

        localctx = TSqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10178
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10179
            self.match(TSqlParser.NAME)
            self.state = 10180
            self.match(TSqlParser.EQUAL)
            self.state = 10183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.state = 10181
                self.id()
                pass
            elif token in [TSqlParser.STRING]:
                self.state = 10182
                self.match(TSqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 10186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 10185
                self.match(TSqlParser.COMMA)


            self.state = 10188
            self.match(TSqlParser.FILENAME)
            self.state = 10189
            self.match(TSqlParser.EQUAL)
            self.state = 10190
            localctx.file = self.match(TSqlParser.STRING)
            self.state = 10192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 10191
                self.match(TSqlParser.COMMA)


            self.state = 10200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.SIZE:
                self.state = 10194
                self.match(TSqlParser.SIZE)
                self.state = 10195
                self.match(TSqlParser.EQUAL)
                self.state = 10196
                self.file_size()
                self.state = 10198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 10197
                    self.match(TSqlParser.COMMA)




            self.state = 10211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.MAXSIZE:
                self.state = 10202
                self.match(TSqlParser.MAXSIZE)
                self.state = 10203
                self.match(TSqlParser.EQUAL)
                self.state = 10206
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [TSqlParser.DECIMAL]:
                    self.state = 10204
                    self.file_size()
                    pass
                elif token in [TSqlParser.UNLIMITED]:
                    self.state = 10205
                    self.match(TSqlParser.UNLIMITED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 10208
                    self.match(TSqlParser.COMMA)




            self.state = 10219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.FILEGROWTH:
                self.state = 10213
                self.match(TSqlParser.FILEGROWTH)
                self.state = 10214
                self.match(TSqlParser.EQUAL)
                self.state = 10215
                self.file_size()
                self.state = 10217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 10216
                    self.match(TSqlParser.COMMA)




            self.state = 10221
            self.match(TSqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # IdContext
            self.database = None # IdContext
            self.schema = None # IdContext
            self.table = None # IdContext

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_entity_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_name" ):
                listener.enterEntity_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_name" ):
                listener.exitEntity_name(self)




    def entity_name(self):

        localctx = TSqlParser.Entity_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_entity_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1438,self._ctx)
            if la_ == 1:
                self.state = 10223
                localctx.server = self.id()
                self.state = 10224
                self.match(TSqlParser.DOT)
                self.state = 10225
                localctx.database = self.id()
                self.state = 10226
                self.match(TSqlParser.DOT)
                self.state = 10227
                localctx.schema = self.id()
                self.state = 10228
                self.match(TSqlParser.DOT)

            elif la_ == 2:
                self.state = 10230
                localctx.database = self.id()
                self.state = 10231
                self.match(TSqlParser.DOT)
                self.state = 10233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                    self.state = 10232
                    localctx.schema = self.id()


                self.state = 10235
                self.match(TSqlParser.DOT)

            elif la_ == 3:
                self.state = 10237
                localctx.schema = self.id()
                self.state = 10238
                self.match(TSqlParser.DOT)


            self.state = 10242
            localctx.table = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_name_for_azure_dwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # IdContext
            self.object_name = None # IdContext

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_entity_name_for_azure_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_name_for_azure_dw" ):
                listener.enterEntity_name_for_azure_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_name_for_azure_dw" ):
                listener.exitEntity_name_for_azure_dw(self)




    def entity_name_for_azure_dw(self):

        localctx = TSqlParser.Entity_name_for_azure_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_entity_name_for_azure_dw)
        try:
            self.state = 10249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1439,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10244
                localctx.schema = self.id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10245
                localctx.schema = self.id()
                self.state = 10246
                self.match(TSqlParser.DOT)
                self.state = 10247
                localctx.object_name = self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_name_for_parallel_dwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_database = None # IdContext
            self.schema = None # IdContext
            self.object_name = None # IdContext

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_entity_name_for_parallel_dw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_name_for_parallel_dw" ):
                listener.enterEntity_name_for_parallel_dw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_name_for_parallel_dw" ):
                listener.exitEntity_name_for_parallel_dw(self)




    def entity_name_for_parallel_dw(self):

        localctx = TSqlParser.Entity_name_for_parallel_dwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_entity_name_for_parallel_dw)
        try:
            self.state = 10256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1440,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10251
                localctx.schema_database = self.id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10252
                localctx.schema = self.id()
                self.state = 10253
                self.match(TSqlParser.DOT)
                self.state = 10254
                localctx.object_name = self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # IdContext
            self.database = None # IdContext
            self.schema = None # IdContext
            self.table = None # IdContext

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_table_name" ):
                listener.enterFull_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_table_name" ):
                listener.exitFull_table_name(self)




    def full_table_name(self):

        localctx = TSqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1442,self._ctx)
            if la_ == 1:
                self.state = 10258
                localctx.server = self.id()
                self.state = 10259
                self.match(TSqlParser.DOT)
                self.state = 10260
                localctx.database = self.id()
                self.state = 10261
                self.match(TSqlParser.DOT)
                self.state = 10262
                localctx.schema = self.id()
                self.state = 10263
                self.match(TSqlParser.DOT)

            elif la_ == 2:
                self.state = 10265
                localctx.database = self.id()
                self.state = 10266
                self.match(TSqlParser.DOT)
                self.state = 10268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                    self.state = 10267
                    localctx.schema = self.id()


                self.state = 10270
                self.match(TSqlParser.DOT)

            elif la_ == 3:
                self.state = 10272
                localctx.schema = self.id()
                self.state = 10273
                self.match(TSqlParser.DOT)


            self.state = 10277
            localctx.table = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # IdContext
            self.schema = None # IdContext
            self.table = None # IdContext

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def BLOCKING_HIERARCHY(self):
            return self.getToken(TSqlParser.BLOCKING_HIERARCHY, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = TSqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.state = 10305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1444,self._ctx)
                if la_ == 1:
                    self.state = 10279
                    localctx.database = self.id()
                    self.state = 10280
                    self.match(TSqlParser.DOT)
                    self.state = 10282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                        self.state = 10281
                        localctx.schema = self.id()


                    self.state = 10284
                    self.match(TSqlParser.DOT)

                elif la_ == 2:
                    self.state = 10286
                    localctx.schema = self.id()
                    self.state = 10287
                    self.match(TSqlParser.DOT)


                self.state = 10291
                localctx.table = self.id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1446,self._ctx)
                if la_ == 1:
                    self.state = 10292
                    localctx.database = self.id()
                    self.state = 10293
                    self.match(TSqlParser.DOT)
                    self.state = 10295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                        self.state = 10294
                        localctx.schema = self.id()


                    self.state = 10297
                    self.match(TSqlParser.DOT)

                elif la_ == 2:
                    self.state = 10299
                    localctx.schema = self.id()
                    self.state = 10300
                    self.match(TSqlParser.DOT)


                self.state = 10304
                self.match(TSqlParser.BLOCKING_HIERARCHY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # IdContext
            self.name = None # IdContext

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_simple_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_name" ):
                listener.enterSimple_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_name" ):
                listener.exitSimple_name(self)




    def simple_name(self):

        localctx = TSqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1448,self._ctx)
            if la_ == 1:
                self.state = 10307
                localctx.schema = self.id()
                self.state = 10308
                self.match(TSqlParser.DOT)


            self.state = 10312
            localctx.name = self.id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_proc_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # IdContext
            self.schema = None # IdContext
            self.procedure = None # IdContext
            self.server = None # IdContext

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_func_proc_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name" ):
                listener.enterFunc_proc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name" ):
                listener.exitFunc_proc_name(self)




    def func_proc_name(self):

        localctx = TSqlParser.Func_proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_func_proc_name)
        self._la = 0 # Token type
        try:
            self.state = 10337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1452,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10324
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1450,self._ctx)
                if la_ == 1:
                    self.state = 10314
                    localctx.database = self.id()
                    self.state = 10315
                    self.match(TSqlParser.DOT)
                    self.state = 10317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                        self.state = 10316
                        localctx.schema = self.id()


                    self.state = 10319
                    self.match(TSqlParser.DOT)

                elif la_ == 2:
                    self.state = 10321
                    localctx.schema = self.id()
                    self.state = 10322
                    self.match(TSqlParser.DOT)


                self.state = 10326
                localctx.procedure = self.id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10327
                localctx.server = self.id()
                self.state = 10328
                self.match(TSqlParser.DOT)
                self.state = 10329
                localctx.database = self.id()
                self.state = 10330
                self.match(TSqlParser.DOT)
                self.state = 10332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 767)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 767)) | (1 << (TSqlParser.ID - 767)))) != 0):
                    self.state = 10331
                    localctx.schema = self.id()


                self.state = 10334
                self.match(TSqlParser.DOT)
                self.state = 10335
                localctx.procedure = self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(TSqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_ddl_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_object" ):
                listener.enterDdl_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_object" ):
                listener.exitDdl_object(self)




    def ddl_object(self):

        localctx = TSqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_ddl_object)
        try:
            self.state = 10341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10339
                self.full_table_name()
                pass
            elif token in [TSqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10340
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.column_name = None # IdContext

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TSqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(TSqlParser.DOT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0)

        def STATUS(self):
            return self.getToken(TSqlParser.STATUS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def ARITHABORT(self):
            return self.getToken(TSqlParser.ARITHABORT, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)




    def full_column_name(self):

        localctx = TSqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_full_column_name)
        try:
            self.state = 10391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1462,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1454,self._ctx)
                if la_ == 1:
                    self.state = 10343
                    self.table_name()
                    self.state = 10344
                    self.match(TSqlParser.DOT)


                self.state = 10348
                localctx.column_name = self.id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1455,self._ctx)
                if la_ == 1:
                    self.state = 10349
                    self.table_name()
                    self.state = 10350
                    self.match(TSqlParser.DOT)


                self.state = 10354
                self.match(TSqlParser.COMPATIBILITY_LEVEL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1456,self._ctx)
                if la_ == 1:
                    self.state = 10355
                    self.table_name()
                    self.state = 10356
                    self.match(TSqlParser.DOT)


                self.state = 10360
                self.match(TSqlParser.STATUS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10364
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1457,self._ctx)
                if la_ == 1:
                    self.state = 10361
                    self.table_name()
                    self.state = 10362
                    self.match(TSqlParser.DOT)


                self.state = 10366
                self.match(TSqlParser.QUOTED_IDENTIFIER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1458,self._ctx)
                if la_ == 1:
                    self.state = 10367
                    self.table_name()
                    self.state = 10368
                    self.match(TSqlParser.DOT)


                self.state = 10372
                self.match(TSqlParser.ARITHABORT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1459,self._ctx)
                if la_ == 1:
                    self.state = 10373
                    self.table_name()
                    self.state = 10374
                    self.match(TSqlParser.DOT)


                self.state = 10378
                self.match(TSqlParser.ANSI_WARNINGS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1460,self._ctx)
                if la_ == 1:
                    self.state = 10379
                    self.table_name()
                    self.state = 10380
                    self.match(TSqlParser.DOT)


                self.state = 10384
                self.match(TSqlParser.ANSI_PADDING)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1461,self._ctx)
                if la_ == 1:
                    self.state = 10385
                    self.table_name()
                    self.state = 10386
                    self.match(TSqlParser.DOT)


                self.state = 10390
                self.match(TSqlParser.ANSI_NULLS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_list_with_orderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ASC)
            else:
                return self.getToken(TSqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DESC)
            else:
                return self.getToken(TSqlParser.DESC, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_name_list_with_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list_with_order" ):
                listener.enterColumn_name_list_with_order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list_with_order" ):
                listener.exitColumn_name_list_with_order(self)




    def column_name_list_with_order(self):

        localctx = TSqlParser.Column_name_list_with_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_column_name_list_with_order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10393
            self.id()
            self.state = 10395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.ASC or _la==TSqlParser.DESC:
                self.state = 10394
                _la = self._input.LA(1)
                if not(_la==TSqlParser.ASC or _la==TSqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 10404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 10397
                self.match(TSqlParser.COMMA)
                self.state = 10398
                self.id()
                self.state = 10400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ASC or _la==TSqlParser.DESC:
                    self.state = 10399
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.ASC or _la==TSqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = TSqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10407
            self.id()
            self.state = 10412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==TSqlParser.COMMA:
                self.state = 10408
                self.match(TSqlParser.COMMA)
                self.state = 10409
                self.id()
                self.state = 10414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = TSqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_cursor_name)
        try:
            self.state = 10417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.DOUBLE_QUOTE_ID, TSqlParser.SQUARE_BRACKET_ID, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10415
                self.id()
                pass
            elif token in [TSqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10416
                self.match(TSqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_offContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_on_off

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_off" ):
                listener.enterOn_off(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_off" ):
                listener.exitOn_off(self)




    def on_off(self):

        localctx = TSqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10419
            _la = self._input.LA(1)
            if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusteredContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(TSqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(TSqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_clustered

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustered" ):
                listener.enterClustered(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustered" ):
                listener.exitClustered(self)




    def clustered(self):

        localctx = TSqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10421
            _la = self._input.LA(1)
            if not(_la==TSqlParser.CLUSTERED or _la==TSqlParser.NONCLUSTERED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_notnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def NOT(self):
            return self.getToken(TSqlParser.NOT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_null_notnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_notnull" ):
                listener.enterNull_notnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_notnull" ):
                listener.exitNull_notnull(self)




    def null_notnull(self):

        localctx = TSqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.NOT:
                self.state = 10423
                self.match(TSqlParser.NOT)


            self.state = 10426
            self.match(TSqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_or_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def null_notnull(self):
            return self.getTypedRuleContext(TSqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(TSqlParser.Constant_expressionContext,0)


        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(TSqlParser.VALUES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_null_or_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_or_default" ):
                listener.enterNull_or_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_or_default" ):
                listener.exitNull_or_default(self)




    def null_or_default(self):

        localctx = TSqlParser.Null_or_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_null_or_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.NOT, TSqlParser.NULL]:
                self.state = 10428
                self.null_notnull()
                pass
            elif token in [TSqlParser.DEFAULT]:
                self.state = 10429
                self.match(TSqlParser.DEFAULT)
                self.state = 10430
                self.constant_expression()
                self.state = 10433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1469,self._ctx)
                if la_ == 1:
                    self.state = 10431
                    self.match(TSqlParser.WITH)
                    self.state = 10432
                    self.match(TSqlParser.VALUES)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name(self):
            return self.getTypedRuleContext(TSqlParser.Func_proc_nameContext,0)


        def RIGHT(self):
            return self.getToken(TSqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(TSqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_scalar_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_function_name" ):
                listener.enterScalar_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_function_name" ):
                listener.exitScalar_function_name(self)




    def scalar_function_name(self):

        localctx = TSqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_scalar_function_name)
        try:
            self.state = 10442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1471,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10437
                self.func_proc_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10438
                self.match(TSqlParser.RIGHT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10439
                self.match(TSqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10440
                self.match(TSqlParser.BINARY_CHECKSUM)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10441
                self.match(TSqlParser.CHECKSUM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_conversation_timerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def TIMER(self):
            return self.getToken(TSqlParser.TIMER, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_begin_conversation_timer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_conversation_timer" ):
                listener.enterBegin_conversation_timer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_conversation_timer" ):
                listener.exitBegin_conversation_timer(self)




    def begin_conversation_timer(self):

        localctx = TSqlParser.Begin_conversation_timerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_begin_conversation_timer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10444
            self.match(TSqlParser.BEGIN)
            self.state = 10445
            self.match(TSqlParser.CONVERSATION)
            self.state = 10446
            self.match(TSqlParser.TIMER)
            self.state = 10447
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10448
            self.match(TSqlParser.LOCAL_ID)
            self.state = 10449
            self.match(TSqlParser.RR_BRACKET)
            self.state = 10450
            self.match(TSqlParser.TIMEOUT)
            self.state = 10451
            self.match(TSqlParser.EQUAL)
            self.state = 10452
            self.time()
            self.state = 10454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1472,self._ctx)
            if la_ == 1:
                self.state = 10453
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_conversation_dialogContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dialog_handle = None # Token
            self.initiator_service_name = None # Service_nameContext
            self.target_service_name = None # Service_nameContext
            self.service_broker_guid = None # Token

        def BEGIN(self):
            return self.getToken(TSqlParser.BEGIN, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def SERVICE(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.SERVICE)
            else:
                return self.getToken(TSqlParser.SERVICE, i)

        def TO(self):
            return self.getToken(TSqlParser.TO, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.ON)
            else:
                return self.getToken(TSqlParser.ON, i)

        def CONTRACT(self):
            return self.getToken(TSqlParser.CONTRACT, 0)

        def contract_name(self):
            return self.getTypedRuleContext(TSqlParser.Contract_nameContext,0)


        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def service_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.Service_nameContext)
            else:
                return self.getTypedRuleContext(TSqlParser.Service_nameContext,i)


        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.COMMA)
            else:
                return self.getToken(TSqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def LIFETIME(self):
            return self.getToken(TSqlParser.LIFETIME, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def RELATED_CONVERSATION(self):
            return self.getToken(TSqlParser.RELATED_CONVERSATION, 0)

        def RELATED_CONVERSATION_GROUP(self):
            return self.getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def OFF(self):
            return self.getToken(TSqlParser.OFF, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_begin_conversation_dialog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_conversation_dialog" ):
                listener.enterBegin_conversation_dialog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_conversation_dialog" ):
                listener.exitBegin_conversation_dialog(self)




    def begin_conversation_dialog(self):

        localctx = TSqlParser.Begin_conversation_dialogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_begin_conversation_dialog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10456
            self.match(TSqlParser.BEGIN)
            self.state = 10457
            self.match(TSqlParser.DIALOG)
            self.state = 10459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.CONVERSATION:
                self.state = 10458
                self.match(TSqlParser.CONVERSATION)


            self.state = 10461
            localctx.dialog_handle = self.match(TSqlParser.LOCAL_ID)
            self.state = 10462
            self.match(TSqlParser.FROM)
            self.state = 10463
            self.match(TSqlParser.SERVICE)
            self.state = 10464
            localctx.initiator_service_name = self.service_name()
            self.state = 10465
            self.match(TSqlParser.TO)
            self.state = 10466
            self.match(TSqlParser.SERVICE)
            self.state = 10467
            localctx.target_service_name = self.service_name()
            self.state = 10470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.COMMA:
                self.state = 10468
                self.match(TSqlParser.COMMA)
                self.state = 10469
                localctx.service_broker_guid = self.match(TSqlParser.STRING)


            self.state = 10472
            self.match(TSqlParser.ON)
            self.state = 10473
            self.match(TSqlParser.CONTRACT)
            self.state = 10474
            self.contract_name()
            self.state = 10497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1480,self._ctx)
            if la_ == 1:
                self.state = 10475
                self.match(TSqlParser.WITH)
                self.state = 10482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.RELATED_CONVERSATION or _la==TSqlParser.RELATED_CONVERSATION_GROUP:
                    self.state = 10476
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.RELATED_CONVERSATION or _la==TSqlParser.RELATED_CONVERSATION_GROUP):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 10477
                    self.match(TSqlParser.EQUAL)
                    self.state = 10478
                    self.match(TSqlParser.LOCAL_ID)
                    self.state = 10480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 10479
                        self.match(TSqlParser.COMMA)




                self.state = 10490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.LIFETIME:
                    self.state = 10484
                    self.match(TSqlParser.LIFETIME)
                    self.state = 10485
                    self.match(TSqlParser.EQUAL)
                    self.state = 10486
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.DECIMAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 10488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 10487
                        self.match(TSqlParser.COMMA)




                self.state = 10495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1479,self._ctx)
                if la_ == 1:
                    self.state = 10492
                    self.match(TSqlParser.ENCRYPTION)
                    self.state = 10493
                    self.match(TSqlParser.EQUAL)
                    self.state = 10494
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.OFF or _la==TSqlParser.ON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 10500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1481,self._ctx)
            if la_ == 1:
                self.state = 10499
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Contract_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_contract_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContract_name" ):
                listener.enterContract_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContract_name" ):
                listener.exitContract_name(self)




    def contract_name(self):

        localctx = TSqlParser.Contract_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_contract_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1482,self._ctx)
            if la_ == 1:
                self.state = 10502
                self.id()
                pass

            elif la_ == 2:
                self.state = 10503
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Service_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_service_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_name" ):
                listener.enterService_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_name" ):
                listener.exitService_name(self)




    def service_name(self):

        localctx = TSqlParser.Service_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_service_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1483,self._ctx)
            if la_ == 1:
                self.state = 10506
                self.id()
                pass

            elif la_ == 2:
                self.state = 10507
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_conversationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_handle = None # Token
            self.faliure_code = None # Token
            self.failure_text = None # Token

        def END(self):
            return self.getToken(TSqlParser.END, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def WITH(self):
            return self.getToken(TSqlParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TSqlParser.ERROR, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.EQUAL)
            else:
                return self.getToken(TSqlParser.EQUAL, i)

        def DESCRIPTION(self):
            return self.getToken(TSqlParser.DESCRIPTION, 0)

        def CLEANUP(self):
            return self.getToken(TSqlParser.CLEANUP, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def getRuleIndex(self):
            return TSqlParser.RULE_end_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_conversation" ):
                listener.enterEnd_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_conversation" ):
                listener.exitEnd_conversation(self)




    def end_conversation(self):

        localctx = TSqlParser.End_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_end_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10510
            self.match(TSqlParser.END)
            self.state = 10511
            self.match(TSqlParser.CONVERSATION)
            self.state = 10512
            localctx.conversation_handle = self.match(TSqlParser.LOCAL_ID)
            self.state = 10514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1484,self._ctx)
            if la_ == 1:
                self.state = 10513
                self.match(TSqlParser.SEMI)


            self.state = 10528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1487,self._ctx)
            if la_ == 1:
                self.state = 10516
                self.match(TSqlParser.WITH)
                self.state = 10523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.ERROR:
                    self.state = 10517
                    self.match(TSqlParser.ERROR)
                    self.state = 10518
                    self.match(TSqlParser.EQUAL)
                    self.state = 10519
                    localctx.faliure_code = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                        localctx.faliure_code = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 10520
                    self.match(TSqlParser.DESCRIPTION)
                    self.state = 10521
                    self.match(TSqlParser.EQUAL)
                    self.state = 10522
                    localctx.failure_text = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                        localctx.failure_text = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1486,self._ctx)
                if la_ == 1:
                    self.state = 10525
                    self.match(TSqlParser.CLEANUP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Waitfor_conversationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.timeout = None # TimeContext

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def get_conversation(self):
            return self.getTypedRuleContext(TSqlParser.Get_conversationContext,0)


        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def WAITFOR(self):
            return self.getToken(TSqlParser.WAITFOR, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def time(self):
            return self.getTypedRuleContext(TSqlParser.TimeContext,0)


        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_waitfor_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_conversation" ):
                listener.enterWaitfor_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_conversation" ):
                listener.exitWaitfor_conversation(self)




    def waitfor_conversation(self):

        localctx = TSqlParser.Waitfor_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_waitfor_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.WAITFOR:
                self.state = 10530
                self.match(TSqlParser.WAITFOR)


            self.state = 10533
            self.match(TSqlParser.LR_BRACKET)
            self.state = 10534
            self.get_conversation()
            self.state = 10535
            self.match(TSqlParser.RR_BRACKET)
            self.state = 10541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1490,self._ctx)
            if la_ == 1:
                self.state = 10537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.COMMA:
                    self.state = 10536
                    self.match(TSqlParser.COMMA)


                self.state = 10539
                self.match(TSqlParser.TIMEOUT)
                self.state = 10540
                localctx.timeout = self.time()


            self.state = 10544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1491,self._ctx)
            if la_ == 1:
                self.state = 10543
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_conversationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_group_id = None # Token
            self.queue = None # Queue_idContext

        def GET(self):
            return self.getToken(TSqlParser.GET, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def GROUP(self):
            return self.getToken(TSqlParser.GROUP, 0)

        def FROM(self):
            return self.getToken(TSqlParser.FROM, 0)

        def queue_id(self):
            return self.getTypedRuleContext(TSqlParser.Queue_idContext,0)


        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def LOCAL_ID(self):
            return self.getToken(TSqlParser.LOCAL_ID, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_get_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_conversation" ):
                listener.enterGet_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_conversation" ):
                listener.exitGet_conversation(self)




    def get_conversation(self):

        localctx = TSqlParser.Get_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_get_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10546
            self.match(TSqlParser.GET)
            self.state = 10547
            self.match(TSqlParser.CONVERSATION)
            self.state = 10548
            self.match(TSqlParser.GROUP)
            self.state = 10549
            localctx.conversation_group_id = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                localctx.conversation_group_id = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 10550
            self.match(TSqlParser.FROM)
            self.state = 10551
            localctx.queue = self.queue_id()
            self.state = 10553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1492,self._ctx)
            if la_ == 1:
                self.state = 10552
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Queue_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database_name = None # IdContext
            self.schema_name = None # IdContext
            self.name = None # IdContext

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DOT)
            else:
                return self.getToken(TSqlParser.DOT, i)

        def id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TSqlParser.IdContext)
            else:
                return self.getTypedRuleContext(TSqlParser.IdContext,i)


        def getRuleIndex(self):
            return TSqlParser.RULE_queue_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueue_id" ):
                listener.enterQueue_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueue_id" ):
                listener.exitQueue_id(self)




    def queue_id(self):

        localctx = TSqlParser.Queue_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_queue_id)
        try:
            self.state = 10562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1493,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10555
                localctx.database_name = self.id()
                self.state = 10556
                self.match(TSqlParser.DOT)
                self.state = 10557
                localctx.schema_name = self.id()
                self.state = 10558
                self.match(TSqlParser.DOT)
                self.state = 10559
                localctx.name = self.id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10561
                self.id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Send_conversationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conversation_handle = None # Token
            self.message_type_name = None # ExpressionContext
            self.message_body_expression = None # Token

        def SEND(self):
            return self.getToken(TSqlParser.SEND, 0)

        def ON(self):
            return self.getToken(TSqlParser.ON, 0)

        def CONVERSATION(self):
            return self.getToken(TSqlParser.CONVERSATION, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def expression(self):
            return self.getTypedRuleContext(TSqlParser.ExpressionContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.STRING)
            else:
                return self.getToken(TSqlParser.STRING, i)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.LOCAL_ID)
            else:
                return self.getToken(TSqlParser.LOCAL_ID, i)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def SEMI(self):
            return self.getToken(TSqlParser.SEMI, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_send_conversation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSend_conversation" ):
                listener.enterSend_conversation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSend_conversation" ):
                listener.exitSend_conversation(self)




    def send_conversation(self):

        localctx = TSqlParser.Send_conversationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_send_conversation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10564
            self.match(TSqlParser.SEND)
            self.state = 10565
            self.match(TSqlParser.ON)
            self.state = 10566
            self.match(TSqlParser.CONVERSATION)
            self.state = 10567
            localctx.conversation_handle = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                localctx.conversation_handle = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 10568
            self.match(TSqlParser.MESSAGE)
            self.state = 10569
            self.match(TSqlParser.TYPE)
            self.state = 10570
            localctx.message_type_name = self.expression(0)
            self.state = 10574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1494,self._ctx)
            if la_ == 1:
                self.state = 10571
                self.match(TSqlParser.LR_BRACKET)
                self.state = 10572
                localctx.message_body_expression = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==TSqlParser.LOCAL_ID or _la==TSqlParser.STRING):
                    localctx.message_body_expression = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10573
                self.match(TSqlParser.RR_BRACKET)


            self.state = 10577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1495,self._ctx)
            if la_ == 1:
                self.state = 10576
                self.match(TSqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id(self):
            return self.getTypedRuleContext(TSqlParser.IdContext,0)


        def IDENTITY(self):
            return self.getToken(TSqlParser.IDENTITY, 0)

        def LR_BRACKET(self):
            return self.getToken(TSqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(TSqlParser.RR_BRACKET, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(TSqlParser.DECIMAL)
            else:
                return self.getToken(TSqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def COMMA(self):
            return self.getToken(TSqlParser.COMMA, 0)

        def DOUBLE(self):
            return self.getToken(TSqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TSqlParser.PRECISION, 0)

        def INT(self):
            return self.getToken(TSqlParser.INT, 0)

        def TINYINT(self):
            return self.getToken(TSqlParser.TINYINT, 0)

        def SMALLINT(self):
            return self.getToken(TSqlParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(TSqlParser.BIGINT, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = TSqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 10600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10579
                self.id()
                self.state = 10581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1496,self._ctx)
                if la_ == 1:
                    self.state = 10580
                    self.match(TSqlParser.IDENTITY)


                self.state = 10590
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1498,self._ctx)
                if la_ == 1:
                    self.state = 10583
                    self.match(TSqlParser.LR_BRACKET)
                    self.state = 10584
                    _la = self._input.LA(1)
                    if not(_la==TSqlParser.MAX or _la==TSqlParser.DECIMAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 10587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==TSqlParser.COMMA:
                        self.state = 10585
                        self.match(TSqlParser.COMMA)
                        self.state = 10586
                        self.match(TSqlParser.DECIMAL)


                    self.state = 10589
                    self.match(TSqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10592
                self.match(TSqlParser.DOUBLE)
                self.state = 10594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PRECISION:
                    self.state = 10593
                    self.match(TSqlParser.PRECISION)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10596
                self.match(TSqlParser.INT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10597
                self.match(TSqlParser.TINYINT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10598
                self.match(TSqlParser.SMALLINT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10599
                self.match(TSqlParser.BIGINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TSqlParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(TSqlParser.DEFAULT, 0)

        def constant(self):
            return self.getTypedRuleContext(TSqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return TSqlParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = TSqlParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_default_value)
        try:
            self.state = 10605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10602
                self.match(TSqlParser.NULL)
                pass
            elif token in [TSqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10603
                self.match(TSqlParser.DEFAULT)
                pass
            elif token in [TSqlParser.DECIMAL, TSqlParser.STRING, TSqlParser.BINARY, TSqlParser.FLOAT, TSqlParser.REAL, TSqlParser.DOLLAR, TSqlParser.PLUS, TSqlParser.MINUS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10604
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(TSqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(TSqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(TSqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(TSqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(TSqlParser.FLOAT, 0)

        def DOLLAR(self):
            return self.getToken(TSqlParser.DOLLAR, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = TSqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 10622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1505,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10607
                self.match(TSqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10608
                self.match(TSqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PLUS or _la==TSqlParser.MINUS:
                    self.state = 10609
                    self.sign()


                self.state = 10612
                self.match(TSqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PLUS or _la==TSqlParser.MINUS:
                    self.state = 10613
                    self.sign()


                self.state = 10616
                _la = self._input.LA(1)
                if not(_la==TSqlParser.FLOAT or _la==TSqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==TSqlParser.PLUS or _la==TSqlParser.MINUS:
                    self.state = 10617
                    self.sign()


                self.state = 10620
                localctx.dollar = self.match(TSqlParser.DOLLAR)
                self.state = 10621
                _la = self._input.LA(1)
                if not(_la==TSqlParser.DECIMAL or _la==TSqlParser.FLOAT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(TSqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(TSqlParser.MINUS, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)




    def sign(self):

        localctx = TSqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10624
            _la = self._input.LA(1)
            if not(_la==TSqlParser.PLUS or _la==TSqlParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(TSqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(TSqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId" ):
                listener.enterId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId" ):
                listener.exitId(self)




    def id(self):

        localctx = TSqlParser.IdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_id)
        try:
            self.state = 10629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [TSqlParser.CALLED, TSqlParser.DATA_COMPRESSION, TSqlParser.EVENTDATA, TSqlParser.FILENAME, TSqlParser.FILLFACTOR, TSqlParser.FORCESEEK, TSqlParser.INIT, TSqlParser.KEY, TSqlParser.MASTER, TSqlParser.MAX_MEMORY, TSqlParser.OFFSETS, TSqlParser.PAGE, TSqlParser.PUBLIC, TSqlParser.R, TSqlParser.RAW, TSqlParser.RETURN, TSqlParser.RETURNS, TSqlParser.ROWCOUNT, TSqlParser.SAFETY, TSqlParser.SERVER, TSqlParser.SID, TSqlParser.SOURCE, TSqlParser.STATE, TSqlParser.START, TSqlParser.TARGET, TSqlParser.ABSOLUTE, TSqlParser.ACCENT_SENSITIVITY, TSqlParser.ACTION, TSqlParser.ACTIVATION, TSqlParser.ACTIVE, TSqlParser.ADDRESS, TSqlParser.AES_128, TSqlParser.AES_192, TSqlParser.AES_256, TSqlParser.AFFINITY, TSqlParser.AFTER, TSqlParser.AGGREGATE, TSqlParser.ALGORITHM, TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, TSqlParser.ALLOW_SNAPSHOT_ISOLATION, TSqlParser.ALLOWED, TSqlParser.ANSI_NULL_DEFAULT, TSqlParser.ANSI_NULLS, TSqlParser.ANSI_PADDING, TSqlParser.ANSI_WARNINGS, TSqlParser.APPLICATION_LOG, TSqlParser.APPLY, TSqlParser.ARITHABORT, TSqlParser.ASSEMBLY, TSqlParser.AUDIT, TSqlParser.AUDIT_GUID, TSqlParser.AUTO, TSqlParser.AUTO_CLEANUP, TSqlParser.AUTO_CLOSE, TSqlParser.AUTO_CREATE_STATISTICS, TSqlParser.AUTO_SHRINK, TSqlParser.AUTO_UPDATE_STATISTICS, TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, TSqlParser.AVAILABILITY, TSqlParser.AVG, TSqlParser.BACKUP_PRIORITY, TSqlParser.BEGIN_DIALOG, TSqlParser.BIGINT, TSqlParser.BINARY_BASE64, TSqlParser.BINARY_CHECKSUM, TSqlParser.BINDING, TSqlParser.BLOB_STORAGE, TSqlParser.BROKER, TSqlParser.BROKER_INSTANCE, TSqlParser.BULK_LOGGED, TSqlParser.CALLER, TSqlParser.CAP_CPU_PERCENT, TSqlParser.CAST, TSqlParser.CATALOG, TSqlParser.CATCH, TSqlParser.CHANGE_RETENTION, TSqlParser.CHANGE_TRACKING, TSqlParser.CHECKSUM, TSqlParser.CHECKSUM_AGG, TSqlParser.CLEANUP, TSqlParser.COLLECTION, TSqlParser.COLUMN_MASTER_KEY, TSqlParser.COMMITTED, TSqlParser.COMPATIBILITY_LEVEL, TSqlParser.CONCAT, TSqlParser.CONCAT_NULL_YIELDS_NULL, TSqlParser.CONTENT, TSqlParser.CONTROL, TSqlParser.COOKIE, TSqlParser.COUNT, TSqlParser.COUNT_BIG, TSqlParser.COUNTER, TSqlParser.CPU, TSqlParser.CREATE_NEW, TSqlParser.CREATION_DISPOSITION, TSqlParser.CREDENTIAL, TSqlParser.CRYPTOGRAPHIC, TSqlParser.CURSOR_CLOSE_ON_COMMIT, TSqlParser.CURSOR_DEFAULT, TSqlParser.DATE_CORRELATION_OPTIMIZATION, TSqlParser.DATEADD, TSqlParser.DATEDIFF, TSqlParser.DATENAME, TSqlParser.DATEPART, TSqlParser.DAYS, TSqlParser.DB_CHAINING, TSqlParser.DB_FAILOVER, TSqlParser.DECRYPTION, TSqlParser.DEFAULT_DOUBLE_QUOTE, TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, TSqlParser.DEFAULT_LANGUAGE, TSqlParser.DELAY, TSqlParser.DELAYED_DURABILITY, TSqlParser.DELETED, TSqlParser.DENSE_RANK, TSqlParser.DEPENDENTS, TSqlParser.DES, TSqlParser.DESCRIPTION, TSqlParser.DESX, TSqlParser.DHCP, TSqlParser.DIALOG, TSqlParser.DIRECTORY_NAME, TSqlParser.DISABLE, TSqlParser.DISABLE_BROKER, TSqlParser.DISABLED, TSqlParser.DISK_DRIVE, TSqlParser.DOCUMENT, TSqlParser.DYNAMIC, TSqlParser.EMERGENCY, TSqlParser.EMPTY, TSqlParser.ENABLE, TSqlParser.ENABLE_BROKER, TSqlParser.ENCRYPTED_VALUE, TSqlParser.ENCRYPTION, TSqlParser.ENDPOINT_URL, TSqlParser.ERROR_BROKER_CONVERSATIONS, TSqlParser.EXCLUSIVE, TSqlParser.EXECUTABLE, TSqlParser.EXIST, TSqlParser.EXPAND, TSqlParser.EXPIRY_DATE, TSqlParser.EXPLICIT, TSqlParser.FAIL_OPERATION, TSqlParser.FAILOVER_MODE, TSqlParser.FAILURE, TSqlParser.FAILURE_CONDITION_LEVEL, TSqlParser.FAST, TSqlParser.FAST_FORWARD, TSqlParser.FILEGROUP, TSqlParser.FILEGROWTH, TSqlParser.FILEPATH, TSqlParser.FILESTREAM, TSqlParser.FILTER, TSqlParser.FIRST, TSqlParser.FIRST_VALUE, TSqlParser.FOLLOWING, TSqlParser.FORCE, TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, TSqlParser.FORCED, TSqlParser.FORMAT, TSqlParser.FORWARD_ONLY, TSqlParser.FULLSCAN, TSqlParser.FULLTEXT, TSqlParser.GB, TSqlParser.GETDATE, TSqlParser.GETUTCDATE, TSqlParser.GLOBAL, TSqlParser.GO, TSqlParser.GROUP_MAX_REQUESTS, TSqlParser.GROUPING, TSqlParser.GROUPING_ID, TSqlParser.HADR, TSqlParser.HASH, TSqlParser.HEALTH_CHECK_TIMEOUT, TSqlParser.HIGH, TSqlParser.HONOR_BROKER_PRIORITY, TSqlParser.HOURS, TSqlParser.IDENTITY_VALUE, TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParser.IMMEDIATE, TSqlParser.IMPERSONATE, TSqlParser.IMPORTANCE, TSqlParser.INCREMENTAL, TSqlParser.INITIATOR, TSqlParser.INPUT, TSqlParser.INSENSITIVE, TSqlParser.INSERTED, TSqlParser.INT, TSqlParser.IP, TSqlParser.ISOLATION, TSqlParser.KB, TSqlParser.KEEP, TSqlParser.KEEPFIXED, TSqlParser.KEY_SOURCE, TSqlParser.KEYS, TSqlParser.KEYSET, TSqlParser.LAG, TSqlParser.LAST, TSqlParser.LAST_VALUE, TSqlParser.LEAD, TSqlParser.LEVEL, TSqlParser.LIST, TSqlParser.LISTENER, TSqlParser.LISTENER_URL, TSqlParser.LOB_COMPACTION, TSqlParser.LOCAL, TSqlParser.LOCATION, TSqlParser.LOCK, TSqlParser.LOCK_ESCALATION, TSqlParser.LOGIN, TSqlParser.LOOP, TSqlParser.LOW, TSqlParser.MANUAL, TSqlParser.MARK, TSqlParser.MATERIALIZED, TSqlParser.MAX, TSqlParser.MAX_CPU_PERCENT, TSqlParser.MAX_DOP, TSqlParser.MAX_FILES, TSqlParser.MAX_IOPS_PER_VOLUME, TSqlParser.MAX_MEMORY_PERCENT, TSqlParser.MAX_PROCESSES, TSqlParser.MAX_QUEUE_READERS, TSqlParser.MAX_ROLLOVER_FILES, TSqlParser.MAXDOP, TSqlParser.MAXRECURSION, TSqlParser.MAXSIZE, TSqlParser.MB, TSqlParser.MEDIUM, TSqlParser.MEMORY_OPTIMIZED_DATA, TSqlParser.MESSAGE, TSqlParser.MIN, TSqlParser.MIN_ACTIVE_ROWVERSION, TSqlParser.MIN_CPU_PERCENT, TSqlParser.MIN_IOPS_PER_VOLUME, TSqlParser.MIN_MEMORY_PERCENT, TSqlParser.MINUTES, TSqlParser.MIRROR_ADDRESS, TSqlParser.MIXED_PAGE_ALLOCATION, TSqlParser.MODE, TSqlParser.MODIFY, TSqlParser.MOVE, TSqlParser.MULTI_USER, TSqlParser.NAME, TSqlParser.NESTED_TRIGGERS, TSqlParser.NEW_ACCOUNT, TSqlParser.NEW_BROKER, TSqlParser.NEW_PASSWORD, TSqlParser.NEXT, TSqlParser.NO, TSqlParser.NO_TRUNCATE, TSqlParser.NO_WAIT, TSqlParser.NOCOUNT, TSqlParser.NODES, TSqlParser.NOEXPAND, TSqlParser.NON_TRANSACTED_ACCESS, TSqlParser.NORECOMPUTE, TSqlParser.NORECOVERY, TSqlParser.NOWAIT, TSqlParser.NTILE, TSqlParser.NUMANODE, TSqlParser.NUMBER, TSqlParser.NUMERIC_ROUNDABORT, TSqlParser.OBJECT, TSqlParser.OFFLINE, TSqlParser.OFFSET, TSqlParser.OLD_ACCOUNT, TSqlParser.ONLINE, TSqlParser.ONLY, TSqlParser.OPEN_EXISTING, TSqlParser.OPTIMISTIC, TSqlParser.OPTIMIZE, TSqlParser.OUT, TSqlParser.OUTPUT, TSqlParser.OWNER, TSqlParser.PAGE_VERIFY, TSqlParser.PARAMETERIZATION, TSqlParser.PARTITION, TSqlParser.PARTITIONS, TSqlParser.PARTNER, TSqlParser.PATH, TSqlParser.POISON_MESSAGE_HANDLING, TSqlParser.POOL, TSqlParser.PORT, TSqlParser.PRECEDING, TSqlParser.PRIMARY_ROLE, TSqlParser.PRIOR, TSqlParser.PRIORITY, TSqlParser.PRIORITY_LEVEL, TSqlParser.PRIVATE, TSqlParser.PRIVATE_KEY, TSqlParser.PRIVILEGES, TSqlParser.PROCEDURE_NAME, TSqlParser.PROPERTY, TSqlParser.PROVIDER, TSqlParser.PROVIDER_KEY_NAME, TSqlParser.QUERY, TSqlParser.QUEUE, TSqlParser.QUEUE_DELAY, TSqlParser.QUOTED_IDENTIFIER, TSqlParser.RANGE, TSqlParser.RANK, TSqlParser.RC2, TSqlParser.RC4, TSqlParser.RC4_128, TSqlParser.READ_COMMITTED_SNAPSHOT, TSqlParser.READ_ONLY, TSqlParser.READ_ONLY_ROUTING_LIST, TSqlParser.READ_WRITE, TSqlParser.READONLY, TSqlParser.REBUILD, TSqlParser.RECEIVE, TSqlParser.RECOMPILE, TSqlParser.RECOVERY, TSqlParser.RECURSIVE_TRIGGERS, TSqlParser.RELATIVE, TSqlParser.REMOTE, TSqlParser.REMOTE_SERVICE_NAME, TSqlParser.REMOVE, TSqlParser.REORGANIZE, TSqlParser.REPEATABLE, TSqlParser.REPLICA, TSqlParser.REQUEST_MAX_CPU_TIME_SEC, TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, TSqlParser.RESERVE_DISK_SPACE, TSqlParser.RESOURCE, TSqlParser.RESOURCE_MANAGER_LOCATION, TSqlParser.RESTRICTED_USER, TSqlParser.RETENTION, TSqlParser.ROBUST, TSqlParser.ROOT, TSqlParser.ROUTE, TSqlParser.ROW, TSqlParser.ROW_NUMBER, TSqlParser.ROWGUID, TSqlParser.ROWS, TSqlParser.SAMPLE, TSqlParser.SCHEMABINDING, TSqlParser.SCOPED, TSqlParser.SCROLL, TSqlParser.SCROLL_LOCKS, TSqlParser.SEARCH, TSqlParser.SECONDARY, TSqlParser.SECONDARY_ONLY, TSqlParser.SECONDARY_ROLE, TSqlParser.SECONDS, TSqlParser.SECRET, TSqlParser.SECURITY_LOG, TSqlParser.SEEDING_MODE, TSqlParser.SELF, TSqlParser.SEMI_SENSITIVE, TSqlParser.SEND, TSqlParser.SENT, TSqlParser.SERIALIZABLE, TSqlParser.SESSION_TIMEOUT, TSqlParser.SETERROR, TSqlParser.SHARE, TSqlParser.SHOWPLAN, TSqlParser.SIGNATURE, TSqlParser.SIMPLE, TSqlParser.SINGLE_USER, TSqlParser.SIZE, TSqlParser.SMALLINT, TSqlParser.SNAPSHOT, TSqlParser.SPATIAL_WINDOW_MAX_CELLS, TSqlParser.STANDBY, TSqlParser.START_DATE, TSqlParser.STATIC, TSqlParser.STATS_STREAM, TSqlParser.STATUS, TSqlParser.STDEV, TSqlParser.STDEVP, TSqlParser.STOPLIST, TSqlParser.STUFF, TSqlParser.SUBJECT, TSqlParser.SUM, TSqlParser.SUSPEND, TSqlParser.SYMMETRIC, TSqlParser.SYNCHRONOUS_COMMIT, TSqlParser.SYNONYM, TSqlParser.TAKE, TSqlParser.TARGET_RECOVERY_TIME, TSqlParser.TB, TSqlParser.TEXTIMAGE_ON, TSqlParser.THROW, TSqlParser.TIES, TSqlParser.TIME, TSqlParser.TIMEOUT, TSqlParser.TIMER, TSqlParser.TINYINT, TSqlParser.TORN_PAGE_DETECTION, TSqlParser.TRANSFORM_NOISE_WORDS, TSqlParser.TRIPLE_DES, TSqlParser.TRIPLE_DES_3KEY, TSqlParser.TRUSTWORTHY, TSqlParser.TRY, TSqlParser.TSQL, TSqlParser.TWO_DIGIT_YEAR_CUTOFF, TSqlParser.TYPE, TSqlParser.TYPE_WARNING, TSqlParser.UNBOUNDED, TSqlParser.UNCOMMITTED, TSqlParser.UNKNOWN, TSqlParser.UNLIMITED, TSqlParser.USING, TSqlParser.VALID_XML, TSqlParser.VALIDATION, TSqlParser.VALUE, TSqlParser.VAR, TSqlParser.VARP, TSqlParser.VIEW_METADATA, TSqlParser.VIEWS, TSqlParser.WAIT, TSqlParser.WELL_FORMED_XML, TSqlParser.WORK, TSqlParser.WORKLOAD, TSqlParser.XML, TSqlParser.XMLNAMESPACES, TSqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10626
                self.simple_id()
                pass
            elif token in [TSqlParser.DOUBLE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10627
                self.match(TSqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [TSqlParser.SQUARE_BRACKET_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10628
                self.match(TSqlParser.SQUARE_BRACKET_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(TSqlParser.ID, 0)

        def ABSOLUTE(self):
            return self.getToken(TSqlParser.ABSOLUTE, 0)

        def ACCENT_SENSITIVITY(self):
            return self.getToken(TSqlParser.ACCENT_SENSITIVITY, 0)

        def ACTION(self):
            return self.getToken(TSqlParser.ACTION, 0)

        def ACTIVATION(self):
            return self.getToken(TSqlParser.ACTIVATION, 0)

        def ACTIVE(self):
            return self.getToken(TSqlParser.ACTIVE, 0)

        def ADDRESS(self):
            return self.getToken(TSqlParser.ADDRESS, 0)

        def AES_128(self):
            return self.getToken(TSqlParser.AES_128, 0)

        def AES_192(self):
            return self.getToken(TSqlParser.AES_192, 0)

        def AES_256(self):
            return self.getToken(TSqlParser.AES_256, 0)

        def AFFINITY(self):
            return self.getToken(TSqlParser.AFFINITY, 0)

        def AFTER(self):
            return self.getToken(TSqlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(TSqlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(TSqlParser.ALGORITHM, 0)

        def ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(self):
            return self.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0)

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def ALLOWED(self):
            return self.getToken(TSqlParser.ALLOWED, 0)

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(TSqlParser.ANSI_NULL_DEFAULT, 0)

        def ANSI_NULLS(self):
            return self.getToken(TSqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(TSqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(TSqlParser.ANSI_WARNINGS, 0)

        def APPLICATION_LOG(self):
            return self.getToken(TSqlParser.APPLICATION_LOG, 0)

        def APPLY(self):
            return self.getToken(TSqlParser.APPLY, 0)

        def ARITHABORT(self):
            return self.getToken(TSqlParser.ARITHABORT, 0)

        def ASSEMBLY(self):
            return self.getToken(TSqlParser.ASSEMBLY, 0)

        def AUDIT(self):
            return self.getToken(TSqlParser.AUDIT, 0)

        def AUDIT_GUID(self):
            return self.getToken(TSqlParser.AUDIT_GUID, 0)

        def AUTO(self):
            return self.getToken(TSqlParser.AUTO, 0)

        def AUTO_CLEANUP(self):
            return self.getToken(TSqlParser.AUTO_CLEANUP, 0)

        def AUTO_CLOSE(self):
            return self.getToken(TSqlParser.AUTO_CLOSE, 0)

        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0)

        def AUTO_SHRINK(self):
            return self.getToken(TSqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def AVAILABILITY(self):
            return self.getToken(TSqlParser.AVAILABILITY, 0)

        def AVG(self):
            return self.getToken(TSqlParser.AVG, 0)

        def BACKUP_PRIORITY(self):
            return self.getToken(TSqlParser.BACKUP_PRIORITY, 0)

        def BEGIN_DIALOG(self):
            return self.getToken(TSqlParser.BEGIN_DIALOG, 0)

        def BIGINT(self):
            return self.getToken(TSqlParser.BIGINT, 0)

        def BINARY_BASE64(self):
            return self.getToken(TSqlParser.BINARY_BASE64, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(TSqlParser.BINARY_CHECKSUM, 0)

        def BINDING(self):
            return self.getToken(TSqlParser.BINDING, 0)

        def BLOB_STORAGE(self):
            return self.getToken(TSqlParser.BLOB_STORAGE, 0)

        def BROKER(self):
            return self.getToken(TSqlParser.BROKER, 0)

        def BROKER_INSTANCE(self):
            return self.getToken(TSqlParser.BROKER_INSTANCE, 0)

        def BULK_LOGGED(self):
            return self.getToken(TSqlParser.BULK_LOGGED, 0)

        def CALLED(self):
            return self.getToken(TSqlParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(TSqlParser.CALLER, 0)

        def CAP_CPU_PERCENT(self):
            return self.getToken(TSqlParser.CAP_CPU_PERCENT, 0)

        def CAST(self):
            return self.getToken(TSqlParser.CAST, 0)

        def CATALOG(self):
            return self.getToken(TSqlParser.CATALOG, 0)

        def CATCH(self):
            return self.getToken(TSqlParser.CATCH, 0)

        def CHANGE_RETENTION(self):
            return self.getToken(TSqlParser.CHANGE_RETENTION, 0)

        def CHANGE_TRACKING(self):
            return self.getToken(TSqlParser.CHANGE_TRACKING, 0)

        def CHECKSUM(self):
            return self.getToken(TSqlParser.CHECKSUM, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(TSqlParser.CHECKSUM_AGG, 0)

        def CLEANUP(self):
            return self.getToken(TSqlParser.CLEANUP, 0)

        def COLLECTION(self):
            return self.getToken(TSqlParser.COLLECTION, 0)

        def COLUMN_MASTER_KEY(self):
            return self.getToken(TSqlParser.COLUMN_MASTER_KEY, 0)

        def COMMITTED(self):
            return self.getToken(TSqlParser.COMMITTED, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0)

        def CONCAT(self):
            return self.getToken(TSqlParser.CONCAT, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def CONTENT(self):
            return self.getToken(TSqlParser.CONTENT, 0)

        def CONTROL(self):
            return self.getToken(TSqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(TSqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(TSqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(TSqlParser.COUNT_BIG, 0)

        def COUNTER(self):
            return self.getToken(TSqlParser.COUNTER, 0)

        def CPU(self):
            return self.getToken(TSqlParser.CPU, 0)

        def CREATE_NEW(self):
            return self.getToken(TSqlParser.CREATE_NEW, 0)

        def CREATION_DISPOSITION(self):
            return self.getToken(TSqlParser.CREATION_DISPOSITION, 0)

        def CREDENTIAL(self):
            return self.getToken(TSqlParser.CREDENTIAL, 0)

        def CRYPTOGRAPHIC(self):
            return self.getToken(TSqlParser.CRYPTOGRAPHIC, 0)

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def CURSOR_DEFAULT(self):
            return self.getToken(TSqlParser.CURSOR_DEFAULT, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(TSqlParser.DATA_COMPRESSION, 0)

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def DATEADD(self):
            return self.getToken(TSqlParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(TSqlParser.DATEDIFF, 0)

        def DATENAME(self):
            return self.getToken(TSqlParser.DATENAME, 0)

        def DATEPART(self):
            return self.getToken(TSqlParser.DATEPART, 0)

        def DAYS(self):
            return self.getToken(TSqlParser.DAYS, 0)

        def DB_CHAINING(self):
            return self.getToken(TSqlParser.DB_CHAINING, 0)

        def DB_FAILOVER(self):
            return self.getToken(TSqlParser.DB_FAILOVER, 0)

        def DECRYPTION(self):
            return self.getToken(TSqlParser.DECRYPTION, 0)

        def DEFAULT_DOUBLE_QUOTE(self):
            return self.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(TSqlParser.DEFAULT_LANGUAGE, 0)

        def DELAY(self):
            return self.getToken(TSqlParser.DELAY, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(TSqlParser.DELAYED_DURABILITY, 0)

        def DELETED(self):
            return self.getToken(TSqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(TSqlParser.DENSE_RANK, 0)

        def DEPENDENTS(self):
            return self.getToken(TSqlParser.DEPENDENTS, 0)

        def DES(self):
            return self.getToken(TSqlParser.DES, 0)

        def DESCRIPTION(self):
            return self.getToken(TSqlParser.DESCRIPTION, 0)

        def DESX(self):
            return self.getToken(TSqlParser.DESX, 0)

        def DHCP(self):
            return self.getToken(TSqlParser.DHCP, 0)

        def DIALOG(self):
            return self.getToken(TSqlParser.DIALOG, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(TSqlParser.DIRECTORY_NAME, 0)

        def DISABLE(self):
            return self.getToken(TSqlParser.DISABLE, 0)

        def DISABLE_BROKER(self):
            return self.getToken(TSqlParser.DISABLE_BROKER, 0)

        def DISABLED(self):
            return self.getToken(TSqlParser.DISABLED, 0)

        def DISK_DRIVE(self):
            return self.getToken(TSqlParser.DISK_DRIVE, 0)

        def DOCUMENT(self):
            return self.getToken(TSqlParser.DOCUMENT, 0)

        def DYNAMIC(self):
            return self.getToken(TSqlParser.DYNAMIC, 0)

        def EMERGENCY(self):
            return self.getToken(TSqlParser.EMERGENCY, 0)

        def EMPTY(self):
            return self.getToken(TSqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(TSqlParser.ENABLE, 0)

        def ENABLE_BROKER(self):
            return self.getToken(TSqlParser.ENABLE_BROKER, 0)

        def ENCRYPTED_VALUE(self):
            return self.getToken(TSqlParser.ENCRYPTED_VALUE, 0)

        def ENCRYPTION(self):
            return self.getToken(TSqlParser.ENCRYPTION, 0)

        def ENDPOINT_URL(self):
            return self.getToken(TSqlParser.ENDPOINT_URL, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def EVENTDATA(self):
            return self.getToken(TSqlParser.EVENTDATA, 0)

        def EXCLUSIVE(self):
            return self.getToken(TSqlParser.EXCLUSIVE, 0)

        def EXECUTABLE(self):
            return self.getToken(TSqlParser.EXECUTABLE, 0)

        def EXIST(self):
            return self.getToken(TSqlParser.EXIST, 0)

        def EXPAND(self):
            return self.getToken(TSqlParser.EXPAND, 0)

        def EXPIRY_DATE(self):
            return self.getToken(TSqlParser.EXPIRY_DATE, 0)

        def EXPLICIT(self):
            return self.getToken(TSqlParser.EXPLICIT, 0)

        def FAIL_OPERATION(self):
            return self.getToken(TSqlParser.FAIL_OPERATION, 0)

        def FAILOVER_MODE(self):
            return self.getToken(TSqlParser.FAILOVER_MODE, 0)

        def FAILURE(self):
            return self.getToken(TSqlParser.FAILURE, 0)

        def FAILURE_CONDITION_LEVEL(self):
            return self.getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0)

        def FAST(self):
            return self.getToken(TSqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(TSqlParser.FAST_FORWARD, 0)

        def FILEGROUP(self):
            return self.getToken(TSqlParser.FILEGROUP, 0)

        def FILEGROWTH(self):
            return self.getToken(TSqlParser.FILEGROWTH, 0)

        def FILENAME(self):
            return self.getToken(TSqlParser.FILENAME, 0)

        def FILEPATH(self):
            return self.getToken(TSqlParser.FILEPATH, 0)

        def FILESTREAM(self):
            return self.getToken(TSqlParser.FILESTREAM, 0)

        def FILLFACTOR(self):
            return self.getToken(TSqlParser.FILLFACTOR, 0)

        def FILTER(self):
            return self.getToken(TSqlParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(TSqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(TSqlParser.FIRST_VALUE, 0)

        def FOLLOWING(self):
            return self.getToken(TSqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(TSqlParser.FORCE, 0)

        def FORCE_FAILOVER_ALLOW_DATA_LOSS(self):
            return self.getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0)

        def FORCED(self):
            return self.getToken(TSqlParser.FORCED, 0)

        def FORCESEEK(self):
            return self.getToken(TSqlParser.FORCESEEK, 0)

        def FORMAT(self):
            return self.getToken(TSqlParser.FORMAT, 0)

        def FORWARD_ONLY(self):
            return self.getToken(TSqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(TSqlParser.FULLSCAN, 0)

        def FULLTEXT(self):
            return self.getToken(TSqlParser.FULLTEXT, 0)

        def GB(self):
            return self.getToken(TSqlParser.GB, 0)

        def GETDATE(self):
            return self.getToken(TSqlParser.GETDATE, 0)

        def GETUTCDATE(self):
            return self.getToken(TSqlParser.GETUTCDATE, 0)

        def GLOBAL(self):
            return self.getToken(TSqlParser.GLOBAL, 0)

        def GO(self):
            return self.getToken(TSqlParser.GO, 0)

        def GROUP_MAX_REQUESTS(self):
            return self.getToken(TSqlParser.GROUP_MAX_REQUESTS, 0)

        def GROUPING(self):
            return self.getToken(TSqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(TSqlParser.GROUPING_ID, 0)

        def HADR(self):
            return self.getToken(TSqlParser.HADR, 0)

        def HASH(self):
            return self.getToken(TSqlParser.HASH, 0)

        def HEALTH_CHECK_TIMEOUT(self):
            return self.getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0)

        def HIGH(self):
            return self.getToken(TSqlParser.HIGH, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0)

        def HOURS(self):
            return self.getToken(TSqlParser.HOURS, 0)

        def IDENTITY_VALUE(self):
            return self.getToken(TSqlParser.IDENTITY_VALUE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def IMMEDIATE(self):
            return self.getToken(TSqlParser.IMMEDIATE, 0)

        def IMPERSONATE(self):
            return self.getToken(TSqlParser.IMPERSONATE, 0)

        def IMPORTANCE(self):
            return self.getToken(TSqlParser.IMPORTANCE, 0)

        def INCREMENTAL(self):
            return self.getToken(TSqlParser.INCREMENTAL, 0)

        def INIT(self):
            return self.getToken(TSqlParser.INIT, 0)

        def INITIATOR(self):
            return self.getToken(TSqlParser.INITIATOR, 0)

        def INPUT(self):
            return self.getToken(TSqlParser.INPUT, 0)

        def INSENSITIVE(self):
            return self.getToken(TSqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(TSqlParser.INSERTED, 0)

        def INT(self):
            return self.getToken(TSqlParser.INT, 0)

        def IP(self):
            return self.getToken(TSqlParser.IP, 0)

        def ISOLATION(self):
            return self.getToken(TSqlParser.ISOLATION, 0)

        def KB(self):
            return self.getToken(TSqlParser.KB, 0)

        def KEEP(self):
            return self.getToken(TSqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(TSqlParser.KEEPFIXED, 0)

        def KEY(self):
            return self.getToken(TSqlParser.KEY, 0)

        def KEY_SOURCE(self):
            return self.getToken(TSqlParser.KEY_SOURCE, 0)

        def KEYS(self):
            return self.getToken(TSqlParser.KEYS, 0)

        def KEYSET(self):
            return self.getToken(TSqlParser.KEYSET, 0)

        def LAG(self):
            return self.getToken(TSqlParser.LAG, 0)

        def LAST(self):
            return self.getToken(TSqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(TSqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(TSqlParser.LEAD, 0)

        def LEVEL(self):
            return self.getToken(TSqlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TSqlParser.LIST, 0)

        def LISTENER(self):
            return self.getToken(TSqlParser.LISTENER, 0)

        def LISTENER_URL(self):
            return self.getToken(TSqlParser.LISTENER_URL, 0)

        def LOB_COMPACTION(self):
            return self.getToken(TSqlParser.LOB_COMPACTION, 0)

        def LOCAL(self):
            return self.getToken(TSqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(TSqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(TSqlParser.LOCK, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(TSqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(TSqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(TSqlParser.LOOP, 0)

        def LOW(self):
            return self.getToken(TSqlParser.LOW, 0)

        def MANUAL(self):
            return self.getToken(TSqlParser.MANUAL, 0)

        def MARK(self):
            return self.getToken(TSqlParser.MARK, 0)

        def MASTER(self):
            return self.getToken(TSqlParser.MASTER, 0)

        def MATERIALIZED(self):
            return self.getToken(TSqlParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(TSqlParser.MAX, 0)

        def MAX_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MAX_CPU_PERCENT, 0)

        def MAX_DOP(self):
            return self.getToken(TSqlParser.MAX_DOP, 0)

        def MAX_FILES(self):
            return self.getToken(TSqlParser.MAX_FILES, 0)

        def MAX_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0)

        def MAX_MEMORY(self):
            return self.getToken(TSqlParser.MAX_MEMORY, 0)

        def MAX_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0)

        def MAX_PROCESSES(self):
            return self.getToken(TSqlParser.MAX_PROCESSES, 0)

        def MAX_QUEUE_READERS(self):
            return self.getToken(TSqlParser.MAX_QUEUE_READERS, 0)

        def MAX_ROLLOVER_FILES(self):
            return self.getToken(TSqlParser.MAX_ROLLOVER_FILES, 0)

        def MAXDOP(self):
            return self.getToken(TSqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(TSqlParser.MAXRECURSION, 0)

        def MAXSIZE(self):
            return self.getToken(TSqlParser.MAXSIZE, 0)

        def MB(self):
            return self.getToken(TSqlParser.MB, 0)

        def MEDIUM(self):
            return self.getToken(TSqlParser.MEDIUM, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def MESSAGE(self):
            return self.getToken(TSqlParser.MESSAGE, 0)

        def MIN(self):
            return self.getToken(TSqlParser.MIN, 0)

        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0)

        def MIN_CPU_PERCENT(self):
            return self.getToken(TSqlParser.MIN_CPU_PERCENT, 0)

        def MIN_IOPS_PER_VOLUME(self):
            return self.getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0)

        def MIN_MEMORY_PERCENT(self):
            return self.getToken(TSqlParser.MIN_MEMORY_PERCENT, 0)

        def MINUTES(self):
            return self.getToken(TSqlParser.MINUTES, 0)

        def MIRROR_ADDRESS(self):
            return self.getToken(TSqlParser.MIRROR_ADDRESS, 0)

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0)

        def MODE(self):
            return self.getToken(TSqlParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(TSqlParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(TSqlParser.MOVE, 0)

        def MULTI_USER(self):
            return self.getToken(TSqlParser.MULTI_USER, 0)

        def NAME(self):
            return self.getToken(TSqlParser.NAME, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(TSqlParser.NESTED_TRIGGERS, 0)

        def NEW_ACCOUNT(self):
            return self.getToken(TSqlParser.NEW_ACCOUNT, 0)

        def NEW_BROKER(self):
            return self.getToken(TSqlParser.NEW_BROKER, 0)

        def NEW_PASSWORD(self):
            return self.getToken(TSqlParser.NEW_PASSWORD, 0)

        def NEXT(self):
            return self.getToken(TSqlParser.NEXT, 0)

        def NO(self):
            return self.getToken(TSqlParser.NO, 0)

        def NO_TRUNCATE(self):
            return self.getToken(TSqlParser.NO_TRUNCATE, 0)

        def NO_WAIT(self):
            return self.getToken(TSqlParser.NO_WAIT, 0)

        def NOCOUNT(self):
            return self.getToken(TSqlParser.NOCOUNT, 0)

        def NODES(self):
            return self.getToken(TSqlParser.NODES, 0)

        def NOEXPAND(self):
            return self.getToken(TSqlParser.NOEXPAND, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0)

        def NORECOMPUTE(self):
            return self.getToken(TSqlParser.NORECOMPUTE, 0)

        def NORECOVERY(self):
            return self.getToken(TSqlParser.NORECOVERY, 0)

        def NOWAIT(self):
            return self.getToken(TSqlParser.NOWAIT, 0)

        def NTILE(self):
            return self.getToken(TSqlParser.NTILE, 0)

        def NUMANODE(self):
            return self.getToken(TSqlParser.NUMANODE, 0)

        def NUMBER(self):
            return self.getToken(TSqlParser.NUMBER, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(TSqlParser.NUMERIC_ROUNDABORT, 0)

        def OBJECT(self):
            return self.getToken(TSqlParser.OBJECT, 0)

        def OFFLINE(self):
            return self.getToken(TSqlParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(TSqlParser.OFFSET, 0)

        def OFFSETS(self):
            return self.getToken(TSqlParser.OFFSETS, 0)

        def OLD_ACCOUNT(self):
            return self.getToken(TSqlParser.OLD_ACCOUNT, 0)

        def ONLINE(self):
            return self.getToken(TSqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(TSqlParser.ONLY, 0)

        def OPEN_EXISTING(self):
            return self.getToken(TSqlParser.OPEN_EXISTING, 0)

        def OPTIMISTIC(self):
            return self.getToken(TSqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(TSqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(TSqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(TSqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(TSqlParser.OWNER, 0)

        def PAGE(self):
            return self.getToken(TSqlParser.PAGE, 0)

        def PAGE_VERIFY(self):
            return self.getToken(TSqlParser.PAGE_VERIFY, 0)

        def PARAMETERIZATION(self):
            return self.getToken(TSqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(TSqlParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(TSqlParser.PARTITIONS, 0)

        def PARTNER(self):
            return self.getToken(TSqlParser.PARTNER, 0)

        def PATH(self):
            return self.getToken(TSqlParser.PATH, 0)

        def POISON_MESSAGE_HANDLING(self):
            return self.getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0)

        def POOL(self):
            return self.getToken(TSqlParser.POOL, 0)

        def PORT(self):
            return self.getToken(TSqlParser.PORT, 0)

        def PRECEDING(self):
            return self.getToken(TSqlParser.PRECEDING, 0)

        def PRIMARY_ROLE(self):
            return self.getToken(TSqlParser.PRIMARY_ROLE, 0)

        def PRIOR(self):
            return self.getToken(TSqlParser.PRIOR, 0)

        def PRIORITY(self):
            return self.getToken(TSqlParser.PRIORITY, 0)

        def PRIORITY_LEVEL(self):
            return self.getToken(TSqlParser.PRIORITY_LEVEL, 0)

        def PRIVATE(self):
            return self.getToken(TSqlParser.PRIVATE, 0)

        def PRIVATE_KEY(self):
            return self.getToken(TSqlParser.PRIVATE_KEY, 0)

        def PRIVILEGES(self):
            return self.getToken(TSqlParser.PRIVILEGES, 0)

        def PROCEDURE_NAME(self):
            return self.getToken(TSqlParser.PROCEDURE_NAME, 0)

        def PROPERTY(self):
            return self.getToken(TSqlParser.PROPERTY, 0)

        def PROVIDER(self):
            return self.getToken(TSqlParser.PROVIDER, 0)

        def PROVIDER_KEY_NAME(self):
            return self.getToken(TSqlParser.PROVIDER_KEY_NAME, 0)

        def PUBLIC(self):
            return self.getToken(TSqlParser.PUBLIC, 0)

        def QUERY(self):
            return self.getToken(TSqlParser.QUERY, 0)

        def QUEUE(self):
            return self.getToken(TSqlParser.QUEUE, 0)

        def QUEUE_DELAY(self):
            return self.getToken(TSqlParser.QUEUE_DELAY, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(TSqlParser.QUOTED_IDENTIFIER, 0)

        def R(self):
            return self.getToken(TSqlParser.R, 0)

        def RANGE(self):
            return self.getToken(TSqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(TSqlParser.RANK, 0)

        def RAW(self):
            return self.getToken(TSqlParser.RAW, 0)

        def RC2(self):
            return self.getToken(TSqlParser.RC2, 0)

        def RC4(self):
            return self.getToken(TSqlParser.RC4, 0)

        def RC4_128(self):
            return self.getToken(TSqlParser.RC4_128, 0)

        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def READ_ONLY(self):
            return self.getToken(TSqlParser.READ_ONLY, 0)

        def READ_ONLY_ROUTING_LIST(self):
            return self.getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0)

        def READ_WRITE(self):
            return self.getToken(TSqlParser.READ_WRITE, 0)

        def READONLY(self):
            return self.getToken(TSqlParser.READONLY, 0)

        def REBUILD(self):
            return self.getToken(TSqlParser.REBUILD, 0)

        def RECEIVE(self):
            return self.getToken(TSqlParser.RECEIVE, 0)

        def RECOMPILE(self):
            return self.getToken(TSqlParser.RECOMPILE, 0)

        def RECOVERY(self):
            return self.getToken(TSqlParser.RECOVERY, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(TSqlParser.RECURSIVE_TRIGGERS, 0)

        def RELATIVE(self):
            return self.getToken(TSqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(TSqlParser.REMOTE, 0)

        def REMOTE_SERVICE_NAME(self):
            return self.getToken(TSqlParser.REMOTE_SERVICE_NAME, 0)

        def REMOVE(self):
            return self.getToken(TSqlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(TSqlParser.REORGANIZE, 0)

        def REPEATABLE(self):
            return self.getToken(TSqlParser.REPEATABLE, 0)

        def REPLICA(self):
            return self.getToken(TSqlParser.REPLICA, 0)

        def REQUEST_MAX_CPU_TIME_SEC(self):
            return self.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0)

        def REQUEST_MAX_MEMORY_GRANT_PERCENT(self):
            return self.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0)

        def REQUEST_MEMORY_GRANT_TIMEOUT_SEC(self):
            return self.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0)

        def REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT(self):
            return self.getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0)

        def RESERVE_DISK_SPACE(self):
            return self.getToken(TSqlParser.RESERVE_DISK_SPACE, 0)

        def RESOURCE(self):
            return self.getToken(TSqlParser.RESOURCE, 0)

        def RESOURCE_MANAGER_LOCATION(self):
            return self.getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0)

        def RESTRICTED_USER(self):
            return self.getToken(TSqlParser.RESTRICTED_USER, 0)

        def RETENTION(self):
            return self.getToken(TSqlParser.RETENTION, 0)

        def RETURN(self):
            return self.getToken(TSqlParser.RETURN, 0)

        def RETURNS(self):
            return self.getToken(TSqlParser.RETURNS, 0)

        def ROBUST(self):
            return self.getToken(TSqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(TSqlParser.ROOT, 0)

        def ROUTE(self):
            return self.getToken(TSqlParser.ROUTE, 0)

        def ROW(self):
            return self.getToken(TSqlParser.ROW, 0)

        def ROW_NUMBER(self):
            return self.getToken(TSqlParser.ROW_NUMBER, 0)

        def ROWCOUNT(self):
            return self.getToken(TSqlParser.ROWCOUNT, 0)

        def ROWGUID(self):
            return self.getToken(TSqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(TSqlParser.ROWS, 0)

        def SAFETY(self):
            return self.getToken(TSqlParser.SAFETY, 0)

        def SAMPLE(self):
            return self.getToken(TSqlParser.SAMPLE, 0)

        def SCHEMABINDING(self):
            return self.getToken(TSqlParser.SCHEMABINDING, 0)

        def SCOPED(self):
            return self.getToken(TSqlParser.SCOPED, 0)

        def SCROLL(self):
            return self.getToken(TSqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(TSqlParser.SCROLL_LOCKS, 0)

        def SEARCH(self):
            return self.getToken(TSqlParser.SEARCH, 0)

        def SECONDARY(self):
            return self.getToken(TSqlParser.SECONDARY, 0)

        def SECONDARY_ONLY(self):
            return self.getToken(TSqlParser.SECONDARY_ONLY, 0)

        def SECONDARY_ROLE(self):
            return self.getToken(TSqlParser.SECONDARY_ROLE, 0)

        def SECONDS(self):
            return self.getToken(TSqlParser.SECONDS, 0)

        def SECRET(self):
            return self.getToken(TSqlParser.SECRET, 0)

        def SECURITY_LOG(self):
            return self.getToken(TSqlParser.SECURITY_LOG, 0)

        def SEEDING_MODE(self):
            return self.getToken(TSqlParser.SEEDING_MODE, 0)

        def SELF(self):
            return self.getToken(TSqlParser.SELF, 0)

        def SEMI_SENSITIVE(self):
            return self.getToken(TSqlParser.SEMI_SENSITIVE, 0)

        def SEND(self):
            return self.getToken(TSqlParser.SEND, 0)

        def SENT(self):
            return self.getToken(TSqlParser.SENT, 0)

        def SERIALIZABLE(self):
            return self.getToken(TSqlParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(TSqlParser.SERVER, 0)

        def SESSION_TIMEOUT(self):
            return self.getToken(TSqlParser.SESSION_TIMEOUT, 0)

        def SETERROR(self):
            return self.getToken(TSqlParser.SETERROR, 0)

        def SHARE(self):
            return self.getToken(TSqlParser.SHARE, 0)

        def SHOWPLAN(self):
            return self.getToken(TSqlParser.SHOWPLAN, 0)

        def SID(self):
            return self.getToken(TSqlParser.SID, 0)

        def SIGNATURE(self):
            return self.getToken(TSqlParser.SIGNATURE, 0)

        def SIMPLE(self):
            return self.getToken(TSqlParser.SIMPLE, 0)

        def SINGLE_USER(self):
            return self.getToken(TSqlParser.SINGLE_USER, 0)

        def SIZE(self):
            return self.getToken(TSqlParser.SIZE, 0)

        def SMALLINT(self):
            return self.getToken(TSqlParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(TSqlParser.SNAPSHOT, 0)

        def SOURCE(self):
            return self.getToken(TSqlParser.SOURCE, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STANDBY(self):
            return self.getToken(TSqlParser.STANDBY, 0)

        def START(self):
            return self.getToken(TSqlParser.START, 0)

        def START_DATE(self):
            return self.getToken(TSqlParser.START_DATE, 0)

        def STATE(self):
            return self.getToken(TSqlParser.STATE, 0)

        def STATIC(self):
            return self.getToken(TSqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(TSqlParser.STATS_STREAM, 0)

        def STATUS(self):
            return self.getToken(TSqlParser.STATUS, 0)

        def STDEV(self):
            return self.getToken(TSqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(TSqlParser.STDEVP, 0)

        def STOPLIST(self):
            return self.getToken(TSqlParser.STOPLIST, 0)

        def STUFF(self):
            return self.getToken(TSqlParser.STUFF, 0)

        def SUBJECT(self):
            return self.getToken(TSqlParser.SUBJECT, 0)

        def SUM(self):
            return self.getToken(TSqlParser.SUM, 0)

        def SUSPEND(self):
            return self.getToken(TSqlParser.SUSPEND, 0)

        def SYMMETRIC(self):
            return self.getToken(TSqlParser.SYMMETRIC, 0)

        def SYNCHRONOUS_COMMIT(self):
            return self.getToken(TSqlParser.SYNCHRONOUS_COMMIT, 0)

        def SYNONYM(self):
            return self.getToken(TSqlParser.SYNONYM, 0)

        def TAKE(self):
            return self.getToken(TSqlParser.TAKE, 0)

        def TARGET(self):
            return self.getToken(TSqlParser.TARGET, 0)

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(TSqlParser.TARGET_RECOVERY_TIME, 0)

        def TB(self):
            return self.getToken(TSqlParser.TB, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(TSqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(TSqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(TSqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(TSqlParser.TIME, 0)

        def TIMEOUT(self):
            return self.getToken(TSqlParser.TIMEOUT, 0)

        def TIMER(self):
            return self.getToken(TSqlParser.TIMER, 0)

        def TINYINT(self):
            return self.getToken(TSqlParser.TINYINT, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(TSqlParser.TORN_PAGE_DETECTION, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TRIPLE_DES(self):
            return self.getToken(TSqlParser.TRIPLE_DES, 0)

        def TRIPLE_DES_3KEY(self):
            return self.getToken(TSqlParser.TRIPLE_DES_3KEY, 0)

        def TRUSTWORTHY(self):
            return self.getToken(TSqlParser.TRUSTWORTHY, 0)

        def TRY(self):
            return self.getToken(TSqlParser.TRY, 0)

        def TSQL(self):
            return self.getToken(TSqlParser.TSQL, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def TYPE(self):
            return self.getToken(TSqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(TSqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(TSqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TSqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(TSqlParser.UNKNOWN, 0)

        def UNLIMITED(self):
            return self.getToken(TSqlParser.UNLIMITED, 0)

        def USING(self):
            return self.getToken(TSqlParser.USING, 0)

        def VALID_XML(self):
            return self.getToken(TSqlParser.VALID_XML, 0)

        def VALIDATION(self):
            return self.getToken(TSqlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(TSqlParser.VALUE, 0)

        def VAR(self):
            return self.getToken(TSqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(TSqlParser.VARP, 0)

        def VIEW_METADATA(self):
            return self.getToken(TSqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(TSqlParser.VIEWS, 0)

        def WAIT(self):
            return self.getToken(TSqlParser.WAIT, 0)

        def WELL_FORMED_XML(self):
            return self.getToken(TSqlParser.WELL_FORMED_XML, 0)

        def WORK(self):
            return self.getToken(TSqlParser.WORK, 0)

        def WORKLOAD(self):
            return self.getToken(TSqlParser.WORKLOAD, 0)

        def XML(self):
            return self.getToken(TSqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TSqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_simple_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_id" ):
                listener.enterSimple_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_id" ):
                listener.exitSimple_id(self)




    def simple_id(self):

        localctx = TSqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10631
            _la = self._input.LA(1)
            if not(_la==TSqlParser.CALLED or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (TSqlParser.DATA_COMPRESSION - 81)) | (1 << (TSqlParser.EVENTDATA - 81)) | (1 << (TSqlParser.FILENAME - 81)) | (1 << (TSqlParser.FILLFACTOR - 81)) | (1 << (TSqlParser.FORCESEEK - 81)))) != 0) or ((((_la - 158)) & ~0x3f) == 0 and ((1 << (_la - 158)) & ((1 << (TSqlParser.INIT - 158)) | (1 << (TSqlParser.KEY - 158)) | (1 << (TSqlParser.MASTER - 158)) | (1 << (TSqlParser.MAX_MEMORY - 158)))) != 0) or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (TSqlParser.OFFSETS - 225)) | (1 << (TSqlParser.PAGE - 225)) | (1 << (TSqlParser.PUBLIC - 225)) | (1 << (TSqlParser.R - 225)) | (1 << (TSqlParser.RAW - 225)) | (1 << (TSqlParser.RETURN - 225)) | (1 << (TSqlParser.RETURNS - 225)) | (1 << (TSqlParser.ROWCOUNT - 225)))) != 0) or ((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & ((1 << (TSqlParser.SAFETY - 295)) | (1 << (TSqlParser.SERVER - 295)) | (1 << (TSqlParser.SID - 295)) | (1 << (TSqlParser.SOURCE - 295)) | (1 << (TSqlParser.STATE - 295)) | (1 << (TSqlParser.START - 295)) | (1 << (TSqlParser.TARGET - 295)))) != 0) or ((((_la - 383)) & ~0x3f) == 0 and ((1 << (_la - 383)) & ((1 << (TSqlParser.ABSOLUTE - 383)) | (1 << (TSqlParser.ACCENT_SENSITIVITY - 383)) | (1 << (TSqlParser.ACTION - 383)) | (1 << (TSqlParser.ACTIVATION - 383)) | (1 << (TSqlParser.ACTIVE - 383)) | (1 << (TSqlParser.ADDRESS - 383)) | (1 << (TSqlParser.AES_128 - 383)) | (1 << (TSqlParser.AES_192 - 383)) | (1 << (TSqlParser.AES_256 - 383)) | (1 << (TSqlParser.AFFINITY - 383)) | (1 << (TSqlParser.AFTER - 383)) | (1 << (TSqlParser.AGGREGATE - 383)) | (1 << (TSqlParser.ALGORITHM - 383)) | (1 << (TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1 << (TSqlParser.ALLOW_SNAPSHOT_ISOLATION - 383)) | (1 << (TSqlParser.ALLOWED - 383)) | (1 << (TSqlParser.ANSI_NULL_DEFAULT - 383)) | (1 << (TSqlParser.ANSI_NULLS - 383)) | (1 << (TSqlParser.ANSI_PADDING - 383)) | (1 << (TSqlParser.ANSI_WARNINGS - 383)) | (1 << (TSqlParser.APPLICATION_LOG - 383)) | (1 << (TSqlParser.APPLY - 383)) | (1 << (TSqlParser.ARITHABORT - 383)) | (1 << (TSqlParser.ASSEMBLY - 383)) | (1 << (TSqlParser.AUDIT - 383)) | (1 << (TSqlParser.AUDIT_GUID - 383)) | (1 << (TSqlParser.AUTO - 383)) | (1 << (TSqlParser.AUTO_CLEANUP - 383)) | (1 << (TSqlParser.AUTO_CLOSE - 383)) | (1 << (TSqlParser.AUTO_CREATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_SHRINK - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS - 383)) | (1 << (TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1 << (TSqlParser.AVAILABILITY - 383)) | (1 << (TSqlParser.AVG - 383)) | (1 << (TSqlParser.BACKUP_PRIORITY - 383)) | (1 << (TSqlParser.BEGIN_DIALOG - 383)) | (1 << (TSqlParser.BIGINT - 383)) | (1 << (TSqlParser.BINARY_BASE64 - 383)) | (1 << (TSqlParser.BINARY_CHECKSUM - 383)) | (1 << (TSqlParser.BINDING - 383)) | (1 << (TSqlParser.BLOB_STORAGE - 383)) | (1 << (TSqlParser.BROKER - 383)) | (1 << (TSqlParser.BROKER_INSTANCE - 383)) | (1 << (TSqlParser.BULK_LOGGED - 383)) | (1 << (TSqlParser.CALLER - 383)) | (1 << (TSqlParser.CAP_CPU_PERCENT - 383)) | (1 << (TSqlParser.CAST - 383)) | (1 << (TSqlParser.CATALOG - 383)) | (1 << (TSqlParser.CATCH - 383)) | (1 << (TSqlParser.CHANGE_RETENTION - 383)) | (1 << (TSqlParser.CHANGE_TRACKING - 383)) | (1 << (TSqlParser.CHECKSUM - 383)) | (1 << (TSqlParser.CHECKSUM_AGG - 383)) | (1 << (TSqlParser.CLEANUP - 383)) | (1 << (TSqlParser.COLLECTION - 383)) | (1 << (TSqlParser.COLUMN_MASTER_KEY - 383)) | (1 << (TSqlParser.COMMITTED - 383)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 383)) | (1 << (TSqlParser.CONCAT - 383)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 383)) | (1 << (TSqlParser.CONTENT - 383)) | (1 << (TSqlParser.CONTROL - 383)) | (1 << (TSqlParser.COOKIE - 383)))) != 0) or ((((_la - 447)) & ~0x3f) == 0 and ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNT - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.CPU - 447)) | (1 << (TSqlParser.CREATE_NEW - 447)) | (1 << (TSqlParser.CREATION_DISPOSITION - 447)) | (1 << (TSqlParser.CREDENTIAL - 447)) | (1 << (TSqlParser.CRYPTOGRAPHIC - 447)) | (1 << (TSqlParser.CURSOR_CLOSE_ON_COMMIT - 447)) | (1 << (TSqlParser.CURSOR_DEFAULT - 447)) | (1 << (TSqlParser.DATE_CORRELATION_OPTIMIZATION - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DAYS - 447)) | (1 << (TSqlParser.DB_CHAINING - 447)) | (1 << (TSqlParser.DB_FAILOVER - 447)) | (1 << (TSqlParser.DECRYPTION - 447)) | (1 << (TSqlParser.DEFAULT_DOUBLE_QUOTE - 447)) | (1 << (TSqlParser.DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1 << (TSqlParser.DEFAULT_LANGUAGE - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELAYED_DURABILITY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)) | (1 << (TSqlParser.DEPENDENTS - 447)) | (1 << (TSqlParser.DES - 447)) | (1 << (TSqlParser.DESCRIPTION - 447)) | (1 << (TSqlParser.DESX - 447)) | (1 << (TSqlParser.DHCP - 447)) | (1 << (TSqlParser.DIALOG - 447)) | (1 << (TSqlParser.DIRECTORY_NAME - 447)) | (1 << (TSqlParser.DISABLE - 447)) | (1 << (TSqlParser.DISABLE_BROKER - 447)) | (1 << (TSqlParser.DISABLED - 447)) | (1 << (TSqlParser.DISK_DRIVE - 447)) | (1 << (TSqlParser.DOCUMENT - 447)) | (1 << (TSqlParser.DYNAMIC - 447)) | (1 << (TSqlParser.EMERGENCY - 447)) | (1 << (TSqlParser.EMPTY - 447)) | (1 << (TSqlParser.ENABLE - 447)) | (1 << (TSqlParser.ENABLE_BROKER - 447)) | (1 << (TSqlParser.ENCRYPTED_VALUE - 447)) | (1 << (TSqlParser.ENCRYPTION - 447)) | (1 << (TSqlParser.ENDPOINT_URL - 447)) | (1 << (TSqlParser.ERROR_BROKER_CONVERSATIONS - 447)) | (1 << (TSqlParser.EXCLUSIVE - 447)) | (1 << (TSqlParser.EXECUTABLE - 447)) | (1 << (TSqlParser.EXIST - 447)) | (1 << (TSqlParser.EXPAND - 447)) | (1 << (TSqlParser.EXPIRY_DATE - 447)) | (1 << (TSqlParser.EXPLICIT - 447)) | (1 << (TSqlParser.FAIL_OPERATION - 447)) | (1 << (TSqlParser.FAILOVER_MODE - 447)) | (1 << (TSqlParser.FAILURE - 447)) | (1 << (TSqlParser.FAILURE_CONDITION_LEVEL - 447)) | (1 << (TSqlParser.FAST - 447)) | (1 << (TSqlParser.FAST_FORWARD - 447)) | (1 << (TSqlParser.FILEGROUP - 447)) | (1 << (TSqlParser.FILEGROWTH - 447)) | (1 << (TSqlParser.FILEPATH - 447)) | (1 << (TSqlParser.FILESTREAM - 447)))) != 0) or ((((_la - 511)) & ~0x3f) == 0 and ((1 << (_la - 511)) & ((1 << (TSqlParser.FILTER - 511)) | (1 << (TSqlParser.FIRST - 511)) | (1 << (TSqlParser.FIRST_VALUE - 511)) | (1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORMAT - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.FULLTEXT - 511)) | (1 << (TSqlParser.GB - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GO - 511)) | (1 << (TSqlParser.GROUP_MAX_REQUESTS - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HADR - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.HEALTH_CHECK_TIMEOUT - 511)) | (1 << (TSqlParser.HIGH - 511)) | (1 << (TSqlParser.HONOR_BROKER_PRIORITY - 511)) | (1 << (TSqlParser.HOURS - 511)) | (1 << (TSqlParser.IDENTITY_VALUE - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMMEDIATE - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.IMPORTANCE - 511)) | (1 << (TSqlParser.INCREMENTAL - 511)) | (1 << (TSqlParser.INITIATOR - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)) | (1 << (TSqlParser.INT - 511)) | (1 << (TSqlParser.IP - 511)) | (1 << (TSqlParser.ISOLATION - 511)) | (1 << (TSqlParser.KB - 511)) | (1 << (TSqlParser.KEEP - 511)) | (1 << (TSqlParser.KEEPFIXED - 511)) | (1 << (TSqlParser.KEY_SOURCE - 511)) | (1 << (TSqlParser.KEYS - 511)) | (1 << (TSqlParser.KEYSET - 511)) | (1 << (TSqlParser.LAG - 511)) | (1 << (TSqlParser.LAST - 511)) | (1 << (TSqlParser.LAST_VALUE - 511)) | (1 << (TSqlParser.LEAD - 511)) | (1 << (TSqlParser.LEVEL - 511)) | (1 << (TSqlParser.LIST - 511)) | (1 << (TSqlParser.LISTENER - 511)) | (1 << (TSqlParser.LISTENER_URL - 511)) | (1 << (TSqlParser.LOB_COMPACTION - 511)) | (1 << (TSqlParser.LOCAL - 511)) | (1 << (TSqlParser.LOCATION - 511)) | (1 << (TSqlParser.LOCK - 511)) | (1 << (TSqlParser.LOCK_ESCALATION - 511)) | (1 << (TSqlParser.LOGIN - 511)) | (1 << (TSqlParser.LOOP - 511)) | (1 << (TSqlParser.LOW - 511)) | (1 << (TSqlParser.MANUAL - 511)) | (1 << (TSqlParser.MARK - 511)))) != 0) or ((((_la - 575)) & ~0x3f) == 0 and ((1 << (_la - 575)) & ((1 << (TSqlParser.MATERIALIZED - 575)) | (1 << (TSqlParser.MAX - 575)) | (1 << (TSqlParser.MAX_CPU_PERCENT - 575)) | (1 << (TSqlParser.MAX_DOP - 575)) | (1 << (TSqlParser.MAX_FILES - 575)) | (1 << (TSqlParser.MAX_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MAX_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MAX_PROCESSES - 575)) | (1 << (TSqlParser.MAX_QUEUE_READERS - 575)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 575)) | (1 << (TSqlParser.MAXDOP - 575)) | (1 << (TSqlParser.MAXRECURSION - 575)) | (1 << (TSqlParser.MAXSIZE - 575)) | (1 << (TSqlParser.MB - 575)) | (1 << (TSqlParser.MEDIUM - 575)) | (1 << (TSqlParser.MEMORY_OPTIMIZED_DATA - 575)) | (1 << (TSqlParser.MESSAGE - 575)) | (1 << (TSqlParser.MIN - 575)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 575)) | (1 << (TSqlParser.MIN_CPU_PERCENT - 575)) | (1 << (TSqlParser.MIN_IOPS_PER_VOLUME - 575)) | (1 << (TSqlParser.MIN_MEMORY_PERCENT - 575)) | (1 << (TSqlParser.MINUTES - 575)) | (1 << (TSqlParser.MIRROR_ADDRESS - 575)) | (1 << (TSqlParser.MIXED_PAGE_ALLOCATION - 575)) | (1 << (TSqlParser.MODE - 575)) | (1 << (TSqlParser.MODIFY - 575)) | (1 << (TSqlParser.MOVE - 575)) | (1 << (TSqlParser.MULTI_USER - 575)) | (1 << (TSqlParser.NAME - 575)) | (1 << (TSqlParser.NESTED_TRIGGERS - 575)) | (1 << (TSqlParser.NEW_ACCOUNT - 575)) | (1 << (TSqlParser.NEW_BROKER - 575)) | (1 << (TSqlParser.NEW_PASSWORD - 575)) | (1 << (TSqlParser.NEXT - 575)) | (1 << (TSqlParser.NO - 575)) | (1 << (TSqlParser.NO_TRUNCATE - 575)) | (1 << (TSqlParser.NO_WAIT - 575)) | (1 << (TSqlParser.NOCOUNT - 575)) | (1 << (TSqlParser.NODES - 575)) | (1 << (TSqlParser.NOEXPAND - 575)) | (1 << (TSqlParser.NON_TRANSACTED_ACCESS - 575)) | (1 << (TSqlParser.NORECOMPUTE - 575)) | (1 << (TSqlParser.NORECOVERY - 575)) | (1 << (TSqlParser.NOWAIT - 575)) | (1 << (TSqlParser.NTILE - 575)) | (1 << (TSqlParser.NUMANODE - 575)) | (1 << (TSqlParser.NUMBER - 575)) | (1 << (TSqlParser.NUMERIC_ROUNDABORT - 575)) | (1 << (TSqlParser.OBJECT - 575)) | (1 << (TSqlParser.OFFLINE - 575)) | (1 << (TSqlParser.OFFSET - 575)) | (1 << (TSqlParser.OLD_ACCOUNT - 575)) | (1 << (TSqlParser.ONLINE - 575)) | (1 << (TSqlParser.ONLY - 575)) | (1 << (TSqlParser.OPEN_EXISTING - 575)) | (1 << (TSqlParser.OPTIMISTIC - 575)) | (1 << (TSqlParser.OPTIMIZE - 575)) | (1 << (TSqlParser.OUT - 575)) | (1 << (TSqlParser.OUTPUT - 575)) | (1 << (TSqlParser.OWNER - 575)) | (1 << (TSqlParser.PAGE_VERIFY - 575)) | (1 << (TSqlParser.PARAMETERIZATION - 575)) | (1 << (TSqlParser.PARTITION - 575)))) != 0) or ((((_la - 639)) & ~0x3f) == 0 and ((1 << (_la - 639)) & ((1 << (TSqlParser.PARTITIONS - 639)) | (1 << (TSqlParser.PARTNER - 639)) | (1 << (TSqlParser.PATH - 639)) | (1 << (TSqlParser.POISON_MESSAGE_HANDLING - 639)) | (1 << (TSqlParser.POOL - 639)) | (1 << (TSqlParser.PORT - 639)) | (1 << (TSqlParser.PRECEDING - 639)) | (1 << (TSqlParser.PRIMARY_ROLE - 639)) | (1 << (TSqlParser.PRIOR - 639)) | (1 << (TSqlParser.PRIORITY - 639)) | (1 << (TSqlParser.PRIORITY_LEVEL - 639)) | (1 << (TSqlParser.PRIVATE - 639)) | (1 << (TSqlParser.PRIVATE_KEY - 639)) | (1 << (TSqlParser.PRIVILEGES - 639)) | (1 << (TSqlParser.PROCEDURE_NAME - 639)) | (1 << (TSqlParser.PROPERTY - 639)) | (1 << (TSqlParser.PROVIDER - 639)) | (1 << (TSqlParser.PROVIDER_KEY_NAME - 639)) | (1 << (TSqlParser.QUERY - 639)) | (1 << (TSqlParser.QUEUE - 639)) | (1 << (TSqlParser.QUEUE_DELAY - 639)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 639)) | (1 << (TSqlParser.RANGE - 639)) | (1 << (TSqlParser.RANK - 639)) | (1 << (TSqlParser.RC2 - 639)) | (1 << (TSqlParser.RC4 - 639)) | (1 << (TSqlParser.RC4_128 - 639)) | (1 << (TSqlParser.READ_COMMITTED_SNAPSHOT - 639)) | (1 << (TSqlParser.READ_ONLY - 639)) | (1 << (TSqlParser.READ_ONLY_ROUTING_LIST - 639)) | (1 << (TSqlParser.READ_WRITE - 639)) | (1 << (TSqlParser.READONLY - 639)) | (1 << (TSqlParser.REBUILD - 639)) | (1 << (TSqlParser.RECEIVE - 639)) | (1 << (TSqlParser.RECOMPILE - 639)) | (1 << (TSqlParser.RECOVERY - 639)) | (1 << (TSqlParser.RECURSIVE_TRIGGERS - 639)) | (1 << (TSqlParser.RELATIVE - 639)) | (1 << (TSqlParser.REMOTE - 639)) | (1 << (TSqlParser.REMOTE_SERVICE_NAME - 639)) | (1 << (TSqlParser.REMOVE - 639)) | (1 << (TSqlParser.REORGANIZE - 639)) | (1 << (TSqlParser.REPEATABLE - 639)) | (1 << (TSqlParser.REPLICA - 639)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 639)) | (1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1 << (TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1 << (TSqlParser.RESERVE_DISK_SPACE - 639)) | (1 << (TSqlParser.RESOURCE - 639)) | (1 << (TSqlParser.RESOURCE_MANAGER_LOCATION - 639)) | (1 << (TSqlParser.RESTRICTED_USER - 639)) | (1 << (TSqlParser.RETENTION - 639)) | (1 << (TSqlParser.ROBUST - 639)) | (1 << (TSqlParser.ROOT - 639)) | (1 << (TSqlParser.ROUTE - 639)) | (1 << (TSqlParser.ROW - 639)) | (1 << (TSqlParser.ROW_NUMBER - 639)) | (1 << (TSqlParser.ROWGUID - 639)) | (1 << (TSqlParser.ROWS - 639)) | (1 << (TSqlParser.SAMPLE - 639)) | (1 << (TSqlParser.SCHEMABINDING - 639)) | (1 << (TSqlParser.SCOPED - 639)) | (1 << (TSqlParser.SCROLL - 639)))) != 0) or ((((_la - 703)) & ~0x3f) == 0 and ((1 << (_la - 703)) & ((1 << (TSqlParser.SCROLL_LOCKS - 703)) | (1 << (TSqlParser.SEARCH - 703)) | (1 << (TSqlParser.SECONDARY - 703)) | (1 << (TSqlParser.SECONDARY_ONLY - 703)) | (1 << (TSqlParser.SECONDARY_ROLE - 703)) | (1 << (TSqlParser.SECONDS - 703)) | (1 << (TSqlParser.SECRET - 703)) | (1 << (TSqlParser.SECURITY_LOG - 703)) | (1 << (TSqlParser.SEEDING_MODE - 703)) | (1 << (TSqlParser.SELF - 703)) | (1 << (TSqlParser.SEMI_SENSITIVE - 703)) | (1 << (TSqlParser.SEND - 703)) | (1 << (TSqlParser.SENT - 703)) | (1 << (TSqlParser.SERIALIZABLE - 703)) | (1 << (TSqlParser.SESSION_TIMEOUT - 703)) | (1 << (TSqlParser.SETERROR - 703)) | (1 << (TSqlParser.SHARE - 703)) | (1 << (TSqlParser.SHOWPLAN - 703)) | (1 << (TSqlParser.SIGNATURE - 703)) | (1 << (TSqlParser.SIMPLE - 703)) | (1 << (TSqlParser.SINGLE_USER - 703)) | (1 << (TSqlParser.SIZE - 703)) | (1 << (TSqlParser.SMALLINT - 703)) | (1 << (TSqlParser.SNAPSHOT - 703)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 703)) | (1 << (TSqlParser.STANDBY - 703)) | (1 << (TSqlParser.START_DATE - 703)) | (1 << (TSqlParser.STATIC - 703)) | (1 << (TSqlParser.STATS_STREAM - 703)) | (1 << (TSqlParser.STATUS - 703)) | (1 << (TSqlParser.STDEV - 703)) | (1 << (TSqlParser.STDEVP - 703)) | (1 << (TSqlParser.STOPLIST - 703)) | (1 << (TSqlParser.STUFF - 703)) | (1 << (TSqlParser.SUBJECT - 703)) | (1 << (TSqlParser.SUM - 703)) | (1 << (TSqlParser.SUSPEND - 703)) | (1 << (TSqlParser.SYMMETRIC - 703)) | (1 << (TSqlParser.SYNCHRONOUS_COMMIT - 703)) | (1 << (TSqlParser.SYNONYM - 703)) | (1 << (TSqlParser.TAKE - 703)) | (1 << (TSqlParser.TARGET_RECOVERY_TIME - 703)) | (1 << (TSqlParser.TB - 703)) | (1 << (TSqlParser.TEXTIMAGE_ON - 703)) | (1 << (TSqlParser.THROW - 703)) | (1 << (TSqlParser.TIES - 703)) | (1 << (TSqlParser.TIME - 703)) | (1 << (TSqlParser.TIMEOUT - 703)) | (1 << (TSqlParser.TIMER - 703)) | (1 << (TSqlParser.TINYINT - 703)) | (1 << (TSqlParser.TORN_PAGE_DETECTION - 703)) | (1 << (TSqlParser.TRANSFORM_NOISE_WORDS - 703)) | (1 << (TSqlParser.TRIPLE_DES - 703)) | (1 << (TSqlParser.TRIPLE_DES_3KEY - 703)) | (1 << (TSqlParser.TRUSTWORTHY - 703)) | (1 << (TSqlParser.TRY - 703)) | (1 << (TSqlParser.TSQL - 703)) | (1 << (TSqlParser.TWO_DIGIT_YEAR_CUTOFF - 703)) | (1 << (TSqlParser.TYPE - 703)) | (1 << (TSqlParser.TYPE_WARNING - 703)) | (1 << (TSqlParser.UNBOUNDED - 703)) | (1 << (TSqlParser.UNCOMMITTED - 703)) | (1 << (TSqlParser.UNKNOWN - 703)) | (1 << (TSqlParser.UNLIMITED - 703)))) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & ((1 << (TSqlParser.USING - 767)) | (1 << (TSqlParser.VALID_XML - 767)) | (1 << (TSqlParser.VALIDATION - 767)) | (1 << (TSqlParser.VALUE - 767)) | (1 << (TSqlParser.VAR - 767)) | (1 << (TSqlParser.VARP - 767)) | (1 << (TSqlParser.VIEW_METADATA - 767)) | (1 << (TSqlParser.VIEWS - 767)) | (1 << (TSqlParser.WAIT - 767)) | (1 << (TSqlParser.WELL_FORMED_XML - 767)) | (1 << (TSqlParser.WORK - 767)) | (1 << (TSqlParser.WORKLOAD - 767)) | (1 << (TSqlParser.XML - 767)) | (1 << (TSqlParser.XMLNAMESPACES - 767)) | (1 << (TSqlParser.ID - 767)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(TSqlParser.EQUAL, 0)

        def GREATER(self):
            return self.getToken(TSqlParser.GREATER, 0)

        def LESS(self):
            return self.getToken(TSqlParser.LESS, 0)

        def EXCLAMATION(self):
            return self.getToken(TSqlParser.EXCLAMATION, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = TSqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_comparison_operator)
        try:
            self.state = 10648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10633
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10634
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10635
                self.match(TSqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10636
                self.match(TSqlParser.LESS)
                self.state = 10637
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10638
                self.match(TSqlParser.GREATER)
                self.state = 10639
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10640
                self.match(TSqlParser.LESS)
                self.state = 10641
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10642
                self.match(TSqlParser.EXCLAMATION)
                self.state = 10643
                self.match(TSqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10644
                self.match(TSqlParser.EXCLAMATION)
                self.state = 10645
                self.match(TSqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10646
                self.match(TSqlParser.EXCLAMATION)
                self.state = 10647
                self.match(TSqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS_ASSIGN(self):
            return self.getToken(TSqlParser.PLUS_ASSIGN, 0)

        def MINUS_ASSIGN(self):
            return self.getToken(TSqlParser.MINUS_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(TSqlParser.MULT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(TSqlParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(TSqlParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(TSqlParser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(TSqlParser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(TSqlParser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = TSqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10650
            _la = self._input.LA(1)
            if not(((((_la - 805)) & ~0x3f) == 0 and ((1 << (_la - 805)) & ((1 << (TSqlParser.PLUS_ASSIGN - 805)) | (1 << (TSqlParser.MINUS_ASSIGN - 805)) | (1 << (TSqlParser.MULT_ASSIGN - 805)) | (1 << (TSqlParser.DIV_ASSIGN - 805)) | (1 << (TSqlParser.MOD_ASSIGN - 805)) | (1 << (TSqlParser.AND_ASSIGN - 805)) | (1 << (TSqlParser.XOR_ASSIGN - 805)) | (1 << (TSqlParser.OR_ASSIGN - 805)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(TSqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(TSqlParser.KB, 0)

        def MB(self):
            return self.getToken(TSqlParser.MB, 0)

        def GB(self):
            return self.getToken(TSqlParser.GB, 0)

        def TB(self):
            return self.getToken(TSqlParser.TB, 0)

        def MODULE(self):
            return self.getToken(TSqlParser.MODULE, 0)

        def getRuleIndex(self):
            return TSqlParser.RULE_file_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_size" ):
                listener.enterFile_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_size" ):
                listener.exitFile_size(self)




    def file_size(self):

        localctx = TSqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10652
            self.match(TSqlParser.DECIMAL)
            self.state = 10654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==TSqlParser.GB or _la==TSqlParser.KB or _la==TSqlParser.MB or _la==TSqlParser.TB or _la==TSqlParser.MODULE:
                self.state = 10653
                _la = self._input.LA(1)
                if not(_la==TSqlParser.GB or _la==TSqlParser.KB or _la==TSqlParser.MB or _la==TSqlParser.TB or _la==TSqlParser.MODULE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[46] = self.assembly_option_sempred
        self._predicates[357] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def assembly_option_sempred(self, localctx:Assembly_optionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         




